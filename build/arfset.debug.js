// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
; (function () {
'use strict'
var scope;
if (typeof window !== 'undefined') {
    scope = window;
} else {
    scope = global;
};

var ARfset = function(width, height){
  this.id = 0;
  this.nftMarkerCount = 0;
  this.imageSetWidth = 0;
  this.frameIbwpointer = null;
  this.dataHeap = null;
  this.imgBW = null;
  this.frameimgBWsize = null;

  if (typeof document !== 'undefined') {
      this.canvas = document.createElement('canvas');
      this.canvas.width = width;
      this.canvas.height = height;
      this.ctx = this.canvas.getContext('2d');
  }

  this._init(width, height);
};

ARfset.prototype.display = function () {
    document.body.appendChild(this.canvas);
    var size = this.canvas.width * this.canvas.height;
    var debugBuffer = new Uint8ClampedArray(Module.HEAPU8.buffer, this.frameIbwpointer, size);
    var id = new ImageData(new Uint8ClampedArray(this.canvas.width * this.canvas.height*4), this.canvas.width, this.canvas.height);
    for (var i = 0, j = 0; i < debugBuffer.length; i++ , j += 4) {
        var v = debugBuffer[i];
        id.data[j + 0] = v;
        id.data[j + 1] = v;
        id.data[j + 2] = v;
        id.data[j + 3] = 255;
    }

    this.ctx.putImageData(id, 0, 0);
};

ARfset.prototype.getImageSetWidth = function(url, callback, onError){
  if (url) {
    console.log(url);
    var self = this;
    return arfset.getIsetWidth(url, function(width){
      console.log(width);
      self.imageSetWidth = width;
      callback(width)
    }, onError)
  } else {
      if (onError) {
          onError("Iset URL needs to be defined and not equal empty string!");
      }
      else {
          console.error("Iset URL needs to be defined and not equal empty string!");
      }
    }
};

ARfset.prototype.loadImageSet = function(url, callback, onError){
  if (url) {
    console.log(url);
    arfset.readImageSet(url, function(iset){
      console.log(iset);
      callback(iset)
    }, onError)
  } else {
      if (onError) {
          onError("Iset URL needs to be defined and not equal empty string!");
      }
      else {
          console.error("Iset URL needs to be defined and not equal empty string!");
      }
    }
};

ARfset.prototype.loadNFTMarker = function (markerURL, onSuccess, onError) {
    var self = this;
    if (markerURL) {
      return arfset.readNFTMarker(this.id, markerURL, function (id) {
          self.nftMarkerCount = id + 1;
          onSuccess(id);
      }, onError);
    } else {
      if (onError) {
          onError("Marker URL needs to be defined and not equal empty string!");
      }
      else {
          console.error("Marker URL needs to be defined and not equal empty string!");
      }
    }

};

ARfset.prototype.getImageSet = function(){
  return this.imageSet;
}

ARfset.prototype._init = function(width, height){
  this.id = arfset.setup(width, height);

  var params = arfset.frameMalloc;
  this.frameIbwpointer = params.frameIbwpointer;
  this.frameimgBWsize = params.frameimgBWsize;

  //this.dataHeap = new Uint8Array(Module.HEAPU8.buffer, this.framepointer, this.framesize);
  //this.imgBW = new Uint8Array(Module.HEAPU8.buffer, this.frameIbwpointer, this.frameimgBWsize);
}

var iset_w_count = 0;

function getIsetWidth(url, callback, onError){
  var filename = '/getIsetW_' + iset_w_count++;
  ajax(url, filename, function () {
    console.log(filename);
      var width = Module._getIsetWidth(0, filename);
      console.log(width);
      if (callback) callback(width);
  }, function (errorNumber) { if (onError) onError(errorNumber) });
  };


var iset_count = 0;

function readImageSet(url, callback, onError){
  var filename = '/readIset_' + iset_count++;
  ajax(url, filename, function () {
    console.log(filename);
      var iset = Module._readImageSet(filename);
      console.log(iset);
      if (callback) callback(iset);
  }, function (errorNumber) { if (onError) onError(errorNumber) });
};

var marker_count = 0;

function readNFTMarker(arId, url, callback, onError) {
    var mId = marker_count++;
    var prefix = '/markerNFT_' + mId;
    var filename1 = prefix + '.fset';
    var filename2 = prefix + '.iset';
    var filename3 = prefix + '.fset3';
    ajax(url + '.fset', filename1, function () {
        ajax(url + '.iset', filename2, function () {
            ajax(url + '.fset3', filename3, function () {
                var id = Module._readNFTMarker(arId, prefix);
                if (callback) callback(id);
            }, function (errorNumber) { if (onError) onError(errorNumber) });
        }, function (errorNumber) { if (onError) onError(errorNumber) });
    }, function (errorNumber) { if (onError) onError(errorNumber) });
}

function writeStringToFS(target, string, callback) {
    var byteArray = new Uint8Array(string.length);
    for (var i = 0; i < byteArray.length; i++) {
        byteArray[i] = string.charCodeAt(i) & 0xff;
    }
    writeByteArrayToFS(target, byteArray, callback);
}

function writeByteArrayToFS(target, byteArray, callback) {
    FS.writeFile(target, byteArray, { encoding: 'binary' });
    // console.log('FS written', target);

    callback(byteArray);
}

function ajax(url, target, callback, errorCallback) {
    var oReq = new XMLHttpRequest();
    oReq.open('GET', url, true);
    oReq.responseType = 'arraybuffer'; // blob arraybuffer

    oReq.onload = function () {
        if (this.status == 200) {
            // console.log('ajax done for ', url);
            var arrayBuffer = oReq.response;
            var byteArray = new Uint8Array(arrayBuffer);
            writeByteArrayToFS(target, byteArray, callback);
        }
        else {
            errorCallback(this.status);
        }
    };

    oReq.send();
}

var arfset = {
  readImageSet: readImageSet,
  getIsetWidth: getIsetWidth,
  readNFTMarker: readNFTMarker

}

var FUNCTIONS = [
  'setup',
  'display',
  'loadImageSet',
  'getImageSetWidth',
  'getImageSet'
];

function runWhenLoaded() {
    FUNCTIONS.forEach(function (n) {
        arfset[n] = Module[n];
    })

    for (var m in Module) {
        if (m.match(/^AR/))
            arfset[m] = Module[m];
    }
}

scope.arfset = arfset;
scope.ARfset = ARfset;

if (scope.Module) {
    scope.Module.onRuntimeInitialized = function () {
        runWhenLoaded();
        var event = new Event('FeatureSETDisplay-loaded');
        scope.dispatchEvent(event);
    }
} else {
    scope.Module = {
        onRuntimeInitialized: function () {
            runWhenLoaded();
        }
    };
}

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 44192,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5287072,
    DYNAMIC_BASE = 5287072,
    DYNAMICTOP_PTR = 44000;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function($0, $1, $2) { if (!arfset["frameMalloc"]) { arfset["frameMalloc"] = ({}); } var frameMalloc = arfset["frameMalloc"]; frameMalloc["frameIbwpointer"] = $1; frameMalloc["frameimgBWsize"] = $2; }];

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




// STATICTOP = STATIC_BASE + 44184;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_ARimageFsetDisplay_cpp() } }, { func: function() { ___emscripten_environ_constructor() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 44176
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
      assert(__cxa_demangle_func);
      try {
        var s = func;
        if (s.startsWith('__Z'))
          s = s.substr(1);
        var len = lengthBytesUTF8(s)+1;
        var buf = _malloc(len);
        stringToUTF8(s, buf, len);
        var status = _malloc(4);
        var ret = __cxa_demangle_func(buf, 0, 0, status);
        if (HEAP32[((status)>>2)] === 0 && ret) {
          return UTF8ToString(ret);
        }
        // otherwise, libcxxabi failed
      } catch(e) {
        // ignore problems here
      } finally {
        if (buf) _free(buf);
        if (status) _free(status);
        if (ret) _free(ret);
      }
      // failure when using libcxxabi, don't demangle
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = thisProgram;
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(63);
      return -1;
    }

  
    

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            // FIXME: this is inefficient as the file packager may have
            //        copied the data into memory already - we may want to
            //        integrate more there and let the file packager loading
            //        code be able to query if memory growth is on or off.
            if (canOwn) {
              warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
            }
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __emscripten_syscall_munmap(addr, len) {
      if (addr === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      return __emscripten_syscall_munmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              var HEAP = getHeap();
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

   

   

  var _emscripten_asm_const_int=true;

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        var newBuffer = new ArrayBuffer(size);
        if (newBuffer.byteLength != size) return /*undefined, allocation did not succeed*/;
        new Int8Array(newBuffer).set(HEAP8);
        _emscripten_replace_memory(newBuffer);
        updateGlobalBufferAndViews(newBuffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 16777216;
      var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.
  
      if (requestedSize > LIMIT) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + LIMIT + ' bytes!');
        return false;
      }
  
      var MIN_TOTAL_MEMORY = 16777216;
      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.
  
      // TODO: see realloc_buffer - for PTHREADS we may want to decrease these jumps
      while (newSize < requestedSize) { // Keep incrementing the heap size as long as it's less than what is requested.
        if (newSize <= 536870912) {
          newSize = alignUp(2 * newSize, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
        } else {
          // ..., but after that, add smaller increments towards 2GB, which we cannot reach
          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
  
        if (newSize === oldSize) {
          warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + HEAP8.length);
        }
      }
  
  
  
      var replacement = emscripten_realloc_buffer(newSize);
      if (!replacement) {
        err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
        return false;
      }
  
      err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
  
      return true;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
   
  
   
  
   function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
   


  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

FS.staticInit();;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array,Math_floor,Math_ceil

function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_iiiiid(x) { abortFnPtrError(x, 'iiiiid'); }
function nullFunc_iiiiii(x) { abortFnPtrError(x, 'iiiiii'); }
function nullFunc_iiiiiid(x) { abortFnPtrError(x, 'iiiiiid'); }
function nullFunc_iiiiiii(x) { abortFnPtrError(x, 'iiiiiii'); }
function nullFunc_iiiiiiii(x) { abortFnPtrError(x, 'iiiiiiii'); }
function nullFunc_iiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }
function nullFunc_viiiiiii(x) { abortFnPtrError(x, 'viiiiiii'); }

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return dynCall_ii(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return dynCall_iii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_iiii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    dynCall_vi(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    dynCall_viii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    dynCall_viiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_throw": ___cxa_throw, "___exception_addRef": ___exception_addRef, "___exception_deAdjust": ___exception_deAdjust, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___setErrNo": ___setErrNo, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall91": ___syscall91, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__addDays": __addDays, "__arraySum": __arraySum, "__embind_register_bool": __embind_register_bool, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emscripten_syscall_munmap": __emscripten_syscall_munmap, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "__isLeapYear": __isLeapYear, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_getenv": _getenv, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_longjmp": _longjmp, "_strftime": _strftime, "_strftime_l": _strftime_l, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "demangle": demangle, "demangleAll": demangleAll, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "emscripten_realloc_buffer": emscripten_realloc_buffer, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "getShiftFromSize": getShiftFromSize, "getTempRet0": getTempRet0, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "jsStackTrace": jsStackTrace, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "runDestructors": runDestructors, "setTempRet0": setTempRet0, "simpleReadValueFromPointer": simpleReadValueFromPointer, "stackTrace": stackTrace, "tempDoublePtr": tempDoublePtr, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiid=env.nullFunc_iiiiid,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiid=env.nullFunc_iiiiiid,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  nullFunc_viiiiiii=env.nullFunc_viiiiiii,
  invoke_ii=env.invoke_ii,
  invoke_iii=env.invoke_iii,
  invoke_iiii=env.invoke_iiii,
  invoke_vi=env.invoke_vi,
  invoke_vii=env.invoke_vii,
  invoke_viii=env.invoke_viii,
  invoke_viiii=env.invoke_viiii,
  ___buildEnvironment=env.___buildEnvironment,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_throw=env.___cxa_throw,
  ___exception_addRef=env.___exception_addRef,
  ___exception_deAdjust=env.___exception_deAdjust,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___map_file=env.___map_file,
  ___setErrNo=env.___setErrNo,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall91=env.___syscall91,
  ___unlock=env.___unlock,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __addDays=env.__addDays,
  __arraySum=env.__arraySum,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_function=env.__embind_register_function,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emscripten_syscall_munmap=env.__emscripten_syscall_munmap,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  __isLeapYear=env.__isLeapYear,
  _abort=env._abort,
  _embind_repr=env._embind_repr,
  _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _getenv=env._getenv,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _llvm_trap=env._llvm_trap,
  _longjmp=env._longjmp,
  _strftime=env._strftime,
  _strftime_l=env._strftime_l,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  count_emval_handles=env.count_emval_handles,
  craftInvokerFunction=env.craftInvokerFunction,
  createNamedFunction=env.createNamedFunction,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  embind__requireFunction=env.embind__requireFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  emscripten_realloc_buffer=env.emscripten_realloc_buffer,
  ensureOverloadTable=env.ensureOverloadTable,
  exposePublicSymbol=env.exposePublicSymbol,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  getShiftFromSize=env.getShiftFromSize,
  getTypeName=env.getTypeName,
  get_first_emval=env.get_first_emval,
  heap32VectorToArray=env.heap32VectorToArray,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  jsStackTrace=env.jsStackTrace,
  makeLegalFunctionName=env.makeLegalFunctionName,
  new_=env.new_,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  replacePublicSymbol=env.replacePublicSymbol,
  runDestructors=env.runDestructors,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stackTrace=env.stackTrace,
  throwBindingError=env.throwBindingError,
  throwInternalError=env.throwInternalError,
  throwUnboundTypeError=env.throwUnboundTypeError,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 44192,
  STACK_MAX = 5287072,
  tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  HEAP8 = new Int8Array(newBuffer);
  HEAPU8 = new Uint8Array(newBuffer);
  HEAP16 = new Int16Array(newBuffer);
  HEAPU16 = new Uint16Array(newBuffer);
  HEAP32 = new Int32Array(newBuffer);
  HEAPF32 = new Float32Array(newBuffer);
  HEAPF64 = new Float64Array(newBuffer);

  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _read_markers($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $101 = 0, $102 = 0, $11 = 0, $113 = 0, $117 = 0, $118 = 0, $12 = 0, $122 = 0, $125 = 0, $126 = 0, $129 = 0, $131 = 0, $132 = 0, $144 = 0, $150 = 0, $151 = 0, $158 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $179 = 0, $21 = 0, $226 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $243 = 0, $244 = 0, $248 = 0, $251 = 0, $252 = 0, $26 = 0, $267 = 0, $269 = 0, $27 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $290 = 0, $3 = 0, $300 = 0, $303 = 0, $304 = 0, $305 = 0, $308 = 0, $31 = 0, $320 = 0, $326 = 0, $346 = 0, $353 = 0, $358 = 0, $4 = 0, $420 = 0, $426 = 0, $429 = 0, $430 = 0, $438 = 0, $445 = 0, $45 = 0, $46 = 0, $50 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $73 = 0, $91 = 0, $99 = 0, $Adobe_transform$i = 0, $Ah$i = 0, $Al$i = 0, $CCIR601_sampling$i = 0, $JFIF_major_version$i = 0, $JFIF_minor_version$i = 0, $Se$i = 0, $Ss$i = 0, $X_density$i = 0, $Y_density$i = 0, $ac_tbl_no$i = 0, $add$i = 0, $add$i130 = 0, $add$i196 = 0, $add$i356 = 0, $add$i91 = 0, $add223$i = 0, $add56$i = 0, $add65$1$i = 0, $add65$10$i = 0, $add65$11$i = 0, $add65$12$i = 0, $add65$13$i = 0, $add65$14$i = 0, $add65$15$i = 0, $add65$2$i = 0, $add65$3$i = 0, $add65$4$i = 0, $add65$5$i = 0, $add65$6$i = 0, $add65$7$i = 0, $add65$8$i = 0, $add65$9$i = 0, $add65150$i = 0, $and$i = 0, $and$i202 = 0, $arrayidx59$i = 0, $arrayidx93$i = 0, $bytes_in_buffer$0$i = 0, $bytes_in_buffer$0$i114 = 0, $bytes_in_buffer$0$i178 = 0, $bytes_in_buffer$0$i236 = 0, $bytes_in_buffer$0$i290 = 0, $bytes_in_buffer$0$i338 = 0, $bytes_in_buffer$0$i62 = 0, $bytes_in_buffer$0$i82 = 0, $bytes_in_buffer$1$i = 0, $bytes_in_buffer$1$i128 = 0, $bytes_in_buffer$1$i192 = 0, $bytes_in_buffer$1$i250 = 0, $bytes_in_buffer$1$i298 = 0, $bytes_in_buffer$1$i352 = 0, $bytes_in_buffer$1$i67 = 0, $bytes_in_buffer$1$i90 = 0, $bytes_in_buffer$10$i = 0, $bytes_in_buffer$11$i = 0, $bytes_in_buffer$12$i = 0, $bytes_in_buffer$13$i = 0, $bytes_in_buffer$14$i = 0, $bytes_in_buffer$15$i = 0, $bytes_in_buffer$16$i = 0, $bytes_in_buffer$17$i = 0, $bytes_in_buffer$18$i = 0, $bytes_in_buffer$19$i = 0, $bytes_in_buffer$2$i = 0, $bytes_in_buffer$2$i102 = 0, $bytes_in_buffer$2$i262 = 0, $bytes_in_buffer$2$i301 = 0, $bytes_in_buffer$2$lcssa$i = 0, $bytes_in_buffer$2$lcssa$i160 = 0, $bytes_in_buffer$2$lcssa$i224 = 0, $bytes_in_buffer$20$i = 0, $bytes_in_buffer$21$i = 0, $bytes_in_buffer$2143$i = 0, $bytes_in_buffer$2159$i = 0, $bytes_in_buffer$22$i = 0, $bytes_in_buffer$23$i = 0, $bytes_in_buffer$24$i = 0, $bytes_in_buffer$25$i = 0, $bytes_in_buffer$280$i = 0, $bytes_in_buffer$284$i = 0, $bytes_in_buffer$3$i = 0, $bytes_in_buffer$3$i144 = 0, $bytes_in_buffer$3$i201 = 0, $bytes_in_buffer$3$i264 = 0, $bytes_in_buffer$3$i308 = 0, $bytes_in_buffer$3$i95 = 0, $bytes_in_buffer$3$lcssa$i = 0, $bytes_in_buffer$3168$i = 0, $bytes_in_buffer$3168187$i = 0, $bytes_in_buffer$3168194$i = 0, $bytes_in_buffer$3168198$i = 0, $bytes_in_buffer$3176$i = 0, $bytes_in_buffer$4$1$i = 0, $bytes_in_buffer$4$10$i = 0, $bytes_in_buffer$4$11$i = 0, $bytes_in_buffer$4$12$i = 0, $bytes_in_buffer$4$13$i = 0, $bytes_in_buffer$4$14$i = 0, $bytes_in_buffer$4$15$i = 0, $bytes_in_buffer$4$2$i = 0, $bytes_in_buffer$4$3$i = 0, $bytes_in_buffer$4$4$i = 0, $bytes_in_buffer$4$5$i = 0, $bytes_in_buffer$4$6$i = 0, $bytes_in_buffer$4$7$i = 0, $bytes_in_buffer$4$8$i = 0, $bytes_in_buffer$4$9$i = 0, $bytes_in_buffer$4$i = 0, $bytes_in_buffer$4$i152 = 0, $bytes_in_buffer$4$i214 = 0, $bytes_in_buffer$4$i311 = 0, $bytes_in_buffer$4$i97 = 0, $bytes_in_buffer$4$lcssa$i = 0, $bytes_in_buffer$4$us$i = 0, $bytes_in_buffer$4130$i = 0, $bytes_in_buffer$4148$i = 0, $bytes_in_buffer$4148174$i = 0, $bytes_in_buffer$4152$i = 0, $bytes_in_buffer$4152$us$i = 0, $bytes_in_buffer$5$1$i = 0, $bytes_in_buffer$5$10$i = 0, $bytes_in_buffer$5$11$i = 0, $bytes_in_buffer$5$12$i = 0, $bytes_in_buffer$5$13$i = 0, $bytes_in_buffer$5$14$i = 0, $bytes_in_buffer$5$15$i = 0, $bytes_in_buffer$5$2$i = 0, $bytes_in_buffer$5$3$i = 0, $bytes_in_buffer$5$4$i = 0, $bytes_in_buffer$5$5$i = 0, $bytes_in_buffer$5$6$i = 0, $bytes_in_buffer$5$7$i = 0, $bytes_in_buffer$5$8$i = 0, $bytes_in_buffer$5$9$i = 0, $bytes_in_buffer$5$i = 0, $bytes_in_buffer$5$i151 = 0, $bytes_in_buffer$5$i313 = 0, $bytes_in_buffer$5$us$i = 0, $bytes_in_buffer$6$i = 0, $bytes_in_buffer$6$i316 = 0, $bytes_in_buffer$6$lcssa$i = 0, $bytes_in_buffer$6$us$i = 0, $bytes_in_buffer$6139$i = 0, $bytes_in_buffer$7$i = 0, $bytes_in_buffer$7$i156 = 0, $bytes_in_buffer$7$i212 = 0, $bytes_in_buffer$7$i321 = 0, $bytes_in_buffer$8$i = 0, $bytes_in_buffer$8$i324 = 0, $bytes_in_buffer$9$i = 0, $bytes_in_buffer2$i = 0, $bytes_in_buffer2$i107 = 0, $bytes_in_buffer2$i171 = 0, $bytes_in_buffer2$i229 = 0, $bytes_in_buffer2$i271 = 0, $bytes_in_buffer2$i331 = 0, $bytes_in_buffer2$i51 = 0, $bytes_in_buffer2$i75 = 0, $c$0$lcssa$i = 0, $c$0163$i = 0, $c$2$i = 0, $call196$i = 0, $call63$i = 0, $ci$0160$i = 0, $ci$1162$i = 0, $ci$2165$i = 0, $cmp65170191$i = 0, $cmp65170191202$i = 0, $cmp65170191203$i = 0, $cmp68$i = 0, $cmp68$lcssa$i = 0, $cmp68171$i = 0, $cmp68171201$i = 0, $cmp68178$i = 0, $color_transform$i = 0, $comp_info$i317 = 0, $compptr$0$lcssa$i = 0, $compptr$0155$i = 0, $compptr$0166$i = 0, $conv$i = 0, $conv149$i = 0, $conv21$i = 0, $conv221$i = 0, $conv37$i = 0, $conv37$i145 = 0, $conv38$i = 0, $conv41$i = 0, $conv54$i = 0, $conv64$1$i = 0, $conv64$10$i = 0, $conv64$11$i = 0, $conv64$12$i = 0, $conv64$13$i = 0, $conv64$14$i = 0, $conv64$15$i = 0, $conv64$2$i = 0, $conv64$3$i = 0, $conv64$4$i = 0, $conv64$5$i = 0, $conv64$6$i = 0, $conv64$7$i = 0, $conv64$8$i = 0, $conv64$9$i = 0, $conv64$i = 0, $conv81$i = 0, $count$0$i = 0, $count$0135171$i = 0, $count$0135172$i = 0, $dc_tbl_no$i = 0, $dec$i = 0, $dec$i116 = 0, $dec$i180 = 0, $dec$i238 = 0, $dec$i291 = 0, $dec$i340 = 0, $dec$i63 = 0, $dec$i84 = 0, $dec114$i = 0, $dec118$us$i = 0, $dec135$i = 0, $dec157$i = 0, $dec163$i = 0, $dec18$i = 0, $dec18$i193 = 0, $dec18$i251 = 0, $dec181$i = 0, $dec185$i = 0, $dec202$i = 0, $dec205$i = 0, $dec226$i = 0, $dec23$i = 0, $dec24$i = 0, $dec241$i = 0, $dec263$i = 0, $dec27$i = 0, $dec278$i = 0, $dec300$i = 0, $dec321$i = 0, $dec336$i = 0, $dec35$i = 0, $dec358$i = 0, $dec373$i = 0, $dec38$i = 0, $dec395$i = 0, $dec416$i = 0, $dec431$i = 0, $dec453$i = 0, $dec468$i = 0, $dec50$i = 0, $dec77$i = 0, $dec79$i = 0, $dec92$i = 0, $density_unit$i = 0, $fill_input_buffer27$i = 0, $fill_input_buffer27$i132 = 0, $fill_input_buffer28$i = 0, $fill_input_buffer71$i = 0, $htblptr$0$i = 0, $huffval$i = 0, $i$0172$i = 0, $i$1137$i = 0, $i$2151$i = 0, $i$2151$us$i = 0, $i$3155$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i117 = 0, $incdec$ptr$i181 = 0, $incdec$ptr$i239 = 0, $incdec$ptr$i292 = 0, $incdec$ptr$i341 = 0, $incdec$ptr$i64 = 0, $incdec$ptr$i85 = 0, $incdec$ptr115$i = 0, $incdec$ptr119$us$i = 0, $incdec$ptr123$i = 0, $incdec$ptr136$i = 0, $incdec$ptr158$i = 0, $incdec$ptr164$i = 0, $incdec$ptr182$i = 0, $incdec$ptr186$i = 0, $incdec$ptr19$i = 0, $incdec$ptr19$i194 = 0, $incdec$ptr19$i252 = 0, $incdec$ptr203$i = 0, $incdec$ptr206$i = 0, $incdec$ptr227$i = 0, $incdec$ptr242$i = 0, $incdec$ptr25$i = 0, $incdec$ptr264$i = 0, $incdec$ptr279$i = 0, $incdec$ptr28$i = 0, $incdec$ptr301$i = 0, $incdec$ptr322$i = 0, $incdec$ptr337$i = 0, $incdec$ptr359$i = 0, $incdec$ptr36$i = 0, $incdec$ptr374$i = 0, $incdec$ptr39$i = 0, $incdec$ptr396$i = 0, $incdec$ptr417$i = 0, $incdec$ptr432$i = 0, $incdec$ptr454$i = 0, $incdec$ptr469$i = 0, $incdec$ptr51$i = 0, $incdec$ptr78$i = 0, $incdec$ptr80$i = 0, $incdec$ptr93$i = 0, $index$0$i = 0, $input_scan_number$i = 0, $jpeg_color_space$i = 0, $length$0$i = 0, $length$0$lcssa$i = 0, $length$0$lcssa$i161 = 0, $length$0$lcssa$i222 = 0, $length$0144$i = 0, $length$0157$i = 0, $length$079$i = 0, $length$083$i = 0, $marker = 0, $natural_order$0$ph$i = 0, $natural_order$0173$i = 0, $next_input_byte$0$i = 0, $next_input_byte$0$i115 = 0, $next_input_byte$0$i179 = 0, $next_input_byte$0$i237 = 0, $next_input_byte$0$i289 = 0, $next_input_byte$0$i339 = 0, $next_input_byte$0$i61 = 0, $next_input_byte$0$i83 = 0, $next_input_byte$1$i = 0, $next_input_byte$1$i127 = 0, $next_input_byte$1$i191 = 0, $next_input_byte$1$i249 = 0, $next_input_byte$1$i297 = 0, $next_input_byte$1$i351 = 0, $next_input_byte$1$i66 = 0, $next_input_byte$1$i89 = 0, $next_input_byte$10$i = 0, $next_input_byte$11$i = 0, $next_input_byte$12$i = 0, $next_input_byte$13$i = 0, $next_input_byte$14$i = 0, $next_input_byte$15$i = 0, $next_input_byte$16$i = 0, $next_input_byte$17$i = 0, $next_input_byte$18$i = 0, $next_input_byte$19$i = 0, $next_input_byte$2$i = 0, $next_input_byte$2$i103 = 0, $next_input_byte$2$i261 = 0, $next_input_byte$2$i300 = 0, $next_input_byte$2$lcssa$i = 0, $next_input_byte$2$lcssa$i159 = 0, $next_input_byte$2$lcssa$i223 = 0, $next_input_byte$20$i = 0, $next_input_byte$21$i = 0, $next_input_byte$2142$i = 0, $next_input_byte$2158$i = 0, $next_input_byte$22$i = 0, $next_input_byte$23$i = 0, $next_input_byte$24$i = 0, $next_input_byte$25$i = 0, $next_input_byte$281$i = 0, $next_input_byte$285$i = 0, $next_input_byte$3$i = 0, $next_input_byte$3$i143 = 0, $next_input_byte$3$i200 = 0, $next_input_byte$3$i263 = 0, $next_input_byte$3$i307 = 0, $next_input_byte$3$i94 = 0, $next_input_byte$3$lcssa$i = 0, $next_input_byte$3169$i = 0, $next_input_byte$3169199$i = 0, $next_input_byte$3177$i = 0, $next_input_byte$4$1$i = 0, $next_input_byte$4$10$i = 0, $next_input_byte$4$11$i = 0, $next_input_byte$4$12$i = 0, $next_input_byte$4$13$i = 0, $next_input_byte$4$14$i = 0, $next_input_byte$4$15$i = 0, $next_input_byte$4$2$i = 0, $next_input_byte$4$3$i = 0, $next_input_byte$4$4$i = 0, $next_input_byte$4$5$i = 0, $next_input_byte$4$6$i = 0, $next_input_byte$4$7$i = 0, $next_input_byte$4$8$i = 0, $next_input_byte$4$9$i = 0, $next_input_byte$4$i = 0, $next_input_byte$4$i153 = 0, $next_input_byte$4$i215 = 0, $next_input_byte$4$i310 = 0, $next_input_byte$4$i96 = 0, $next_input_byte$4$lcssa$i = 0, $next_input_byte$4$us$i = 0, $next_input_byte$4131$i = 0, $next_input_byte$4149$i = 0, $next_input_byte$4149175$i = 0, $next_input_byte$4153$i = 0, $next_input_byte$4153$us$i = 0, $next_input_byte$5$1$i = 0, $next_input_byte$5$10$i = 0, $next_input_byte$5$11$i = 0, $next_input_byte$5$12$i = 0, $next_input_byte$5$13$i = 0, $next_input_byte$5$14$i = 0, $next_input_byte$5$15$i = 0, $next_input_byte$5$2$i = 0, $next_input_byte$5$3$i = 0, $next_input_byte$5$4$i = 0, $next_input_byte$5$5$i = 0, $next_input_byte$5$6$i = 0, $next_input_byte$5$7$i = 0, $next_input_byte$5$8$i = 0, $next_input_byte$5$9$i = 0, $next_input_byte$5$i = 0, $next_input_byte$5$i150 = 0, $next_input_byte$5$i312 = 0, $next_input_byte$5$us$i = 0, $next_input_byte$6$i = 0, $next_input_byte$6$i315 = 0, $next_input_byte$6$lcssa$i = 0, $next_input_byte$6$us$i = 0, $next_input_byte$6138$i = 0, $next_input_byte$7$i = 0, $next_input_byte$7$i155 = 0, $next_input_byte$7$i211 = 0, $next_input_byte$7$i320 = 0, $next_input_byte$8$i = 0, $next_input_byte$8$i323 = 0, $next_input_byte$9$i = 0, $num_components$i282 = 0, $restart_interval$i = 0, $retval$0 = 0, $saw_Adobe_marker$i = 0, $saw_JFIF_marker$i = 0, $saw_SOI$i = 0, $saw_SOI8$pre$phi$iZ2D = 0, $scevgep$i = 0, $scevgep2$i = 0, $scevgep3$i = 0, $shl$i = 0, $shl$i119 = 0, $shl$i183 = 0, $shl$i241 = 0, $shl$i294 = 0, $shl$i343 = 0, $shl$i87 = 0, $shl121$us$i = 0, $shl229$i = 0, $shl266$i = 0, $shl324$i = 0, $shl361$i = 0, $shl41$i = 0, $shl419$i = 0, $shl456$i = 0, $shl80$i = 0, $spec$select$i = 0, $spec$select$i220 = 0, $src$i = 0, $sub$i = 0, $sub$i197 = 0, $sub$i357 = 0, $sub171$i = 0, $sub174$i = 0, $sub66$i = 0, $tobool172$i = 0, $tobool69$i = 0, $unread_marker = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $huffval$i = sp;
 $unread_marker = $cinfo + 440 | 0;
 $marker = $cinfo + 464 | 0;
 $src$i = $cinfo + 24 | 0;
 $scevgep$i = $cinfo + 232 | 0;
 $scevgep2$i = $cinfo + 248 | 0;
 $scevgep3$i = $cinfo + 264 | 0;
 $restart_interval$i = $cinfo + 280 | 0;
 $jpeg_color_space$i = $cinfo + 40 | 0;
 $color_transform$i = $cinfo + 304 | 0;
 $CCIR601_sampling$i = $cinfo + 308 | 0;
 $saw_JFIF_marker$i = $cinfo + 284 | 0;
 $JFIF_major_version$i = $cinfo + 288 | 0;
 $JFIF_minor_version$i = $cinfo + 289 | 0;
 $density_unit$i = $cinfo + 290 | 0;
 $X_density$i = $cinfo + 292 | 0;
 $Y_density$i = $cinfo + 294 | 0;
 $saw_Adobe_marker$i = $cinfo + 296 | 0;
 $Adobe_transform$i = $cinfo + 300 | 0;
 $num_components$i282 = $cinfo + 36 | 0;
 $comp_info$i317 = $cinfo + 216 | 0;
 $0 = HEAP32[$unread_marker >> 2] | 0;
 L1 : while (1) {
  do if (!$0) {
   if (HEAP32[(HEAP32[$marker >> 2] | 0) + 12 >> 2] | 0) {
    if (!(_next_marker($cinfo) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    $16 = HEAP32[$unread_marker >> 2] | 0;
    break;
   }
   $3 = HEAP32[$src$i >> 2] | 0;
   $bytes_in_buffer2$i = $3 + 4 | 0;
   $4 = HEAP32[$bytes_in_buffer2$i >> 2] | 0;
   if (!$4) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$3 + 12 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    $bytes_in_buffer$0$i = HEAP32[$bytes_in_buffer2$i >> 2] | 0;
   } else $bytes_in_buffer$0$i = $4;
   $next_input_byte$0$i = HEAP32[$3 >> 2] | 0;
   $dec$i = $bytes_in_buffer$0$i + -1 | 0;
   $incdec$ptr$i = $next_input_byte$0$i + 1 | 0;
   $7 = HEAP8[$next_input_byte$0$i >> 0] | 0;
   $conv$i = $7 & 255;
   if (!$dec$i) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$3 + 12 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    $bytes_in_buffer$1$i = HEAP32[$bytes_in_buffer2$i >> 2] | 0;
    $next_input_byte$1$i = HEAP32[$3 >> 2] | 0;
   } else {
    $bytes_in_buffer$1$i = $dec$i;
    $next_input_byte$1$i = $incdec$ptr$i;
   }
   $11 = HEAP8[$next_input_byte$1$i >> 0] | 0;
   $conv21$i = $11 & 255;
   if ($7 << 24 >> 24 != -1 | $11 << 24 >> 24 != -40) {
    $12 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$12 + 20 >> 2] = 55;
    HEAP32[$12 + 24 >> 2] = $conv$i;
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $conv21$i;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
   HEAP32[$unread_marker >> 2] = $conv21$i;
   HEAP32[$3 >> 2] = $next_input_byte$1$i + 1;
   HEAP32[$bytes_in_buffer2$i >> 2] = $bytes_in_buffer$1$i + -1;
   $16 = $conv21$i;
  } else $16 = $0; while (0);
  do switch ($16 | 0) {
  case 218:
   {
    label = 25;
    break L1;
    break;
   }
  case 217:
   {
    label = 75;
    break L1;
    break;
   }
  case 216:
   {
    $17 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$17 + 20 >> 2] = 104;
    FUNCTION_TABLE_vii[HEAP32[$17 + 4 >> 2] & 255]($cinfo, 1);
    $saw_SOI$i = (HEAP32[$marker >> 2] | 0) + 12 | 0;
    if (!(HEAP32[$saw_SOI$i >> 2] | 0)) $saw_SOI8$pre$phi$iZ2D = $saw_SOI$i; else {
     $21 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$21 + 20 >> 2] = 64;
     FUNCTION_TABLE_vi[HEAP32[$21 >> 2] & 255]($cinfo);
     $saw_SOI8$pre$phi$iZ2D = (HEAP32[$marker >> 2] | 0) + 12 | 0;
    }
    dest = $scevgep$i;
    stop = dest + 16 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $scevgep2$i;
    stop = dest + 16 | 0;
    do {
     HEAP8[dest >> 0] = 1;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $scevgep3$i;
    stop = dest + 16 | 0;
    do {
     HEAP8[dest >> 0] = 5;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$restart_interval$i >> 2] = 0;
    HEAP32[$jpeg_color_space$i >> 2] = 0;
    HEAP32[$color_transform$i >> 2] = 0;
    HEAP32[$CCIR601_sampling$i >> 2] = 0;
    HEAP32[$saw_JFIF_marker$i >> 2] = 0;
    HEAP8[$JFIF_major_version$i >> 0] = 1;
    HEAP8[$JFIF_minor_version$i >> 0] = 1;
    HEAP8[$density_unit$i >> 0] = 0;
    HEAP16[$X_density$i >> 1] = 1;
    HEAP16[$Y_density$i >> 1] = 1;
    HEAP32[$saw_Adobe_marker$i >> 2] = 0;
    HEAP8[$Adobe_transform$i >> 0] = 0;
    HEAP32[$saw_SOI8$pre$phi$iZ2D >> 2] = 1;
    break;
   }
  case 192:
   {
    if (!(_get_sof($cinfo, 1, 0, 0) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 193:
   {
    if (!(_get_sof($cinfo, 0, 0, 0) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 194:
   {
    if (!(_get_sof($cinfo, 0, 1, 0) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 201:
   {
    if (!(_get_sof($cinfo, 0, 0, 1) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 202:
   {
    if (!(_get_sof($cinfo, 0, 1, 1) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 207:
  case 206:
  case 205:
  case 203:
  case 200:
  case 199:
  case 198:
  case 197:
  case 195:
   {
    $23 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$23 + 20 >> 2] = 63;
    HEAP32[$23 + 24 >> 2] = $16;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    break;
   }
  case 204:
   {
    $101 = HEAP32[$src$i >> 2] | 0;
    $bytes_in_buffer2$i75 = $101 + 4 | 0;
    $102 = HEAP32[$bytes_in_buffer2$i75 >> 2] | 0;
    if (!$102) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$101 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$0$i82 = HEAP32[$bytes_in_buffer2$i75 >> 2] | 0;
    } else $bytes_in_buffer$0$i82 = $102;
    $next_input_byte$0$i83 = HEAP32[$101 >> 2] | 0;
    $dec$i84 = $bytes_in_buffer$0$i82 + -1 | 0;
    $incdec$ptr$i85 = $next_input_byte$0$i83 + 1 | 0;
    $shl$i87 = HEAPU8[$next_input_byte$0$i83 >> 0] << 8;
    if (!$dec$i84) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$101 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$1$i90 = HEAP32[$bytes_in_buffer2$i75 >> 2] | 0;
     $next_input_byte$1$i89 = HEAP32[$101 >> 2] | 0;
    } else {
     $bytes_in_buffer$1$i90 = $dec$i84;
     $next_input_byte$1$i89 = $incdec$ptr$i85;
    }
    $add$i91 = $shl$i87 | HEAPU8[$next_input_byte$1$i89 >> 0];
    $length$079$i = $add$i91 + -2 | 0;
    $bytes_in_buffer$280$i = $bytes_in_buffer$1$i90 + -1 | 0;
    $next_input_byte$281$i = $next_input_byte$1$i89 + 1 | 0;
    if ($add$i91 >>> 0 > 2) {
     $fill_input_buffer27$i = $101 + 12 | 0;
     $bytes_in_buffer$284$i = $bytes_in_buffer$280$i;
     $length$083$i = $length$079$i;
     $next_input_byte$285$i = $next_input_byte$281$i;
     while (1) {
      if (!$bytes_in_buffer$284$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i >> 2] & 127]($cinfo) | 0)) {
        $retval$0 = 0;
        label = 350;
        break L1;
       }
       $bytes_in_buffer$3$i95 = HEAP32[$bytes_in_buffer2$i75 >> 2] | 0;
       $next_input_byte$3$i94 = HEAP32[$101 >> 2] | 0;
      } else {
       $bytes_in_buffer$3$i95 = $bytes_in_buffer$284$i;
       $next_input_byte$3$i94 = $next_input_byte$285$i;
      }
      $dec35$i = $bytes_in_buffer$3$i95 + -1 | 0;
      $incdec$ptr36$i = $next_input_byte$3$i94 + 1 | 0;
      $113 = HEAP8[$next_input_byte$3$i94 >> 0] | 0;
      $conv37$i = $113 & 255;
      if (!$dec35$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i >> 2] & 127]($cinfo) | 0)) {
        $retval$0 = 0;
        label = 350;
        break L1;
       }
       $bytes_in_buffer$4$i97 = HEAP32[$bytes_in_buffer2$i75 >> 2] | 0;
       $next_input_byte$4$i96 = HEAP32[$101 >> 2] | 0;
      } else {
       $bytes_in_buffer$4$i97 = $dec35$i;
       $next_input_byte$4$i96 = $incdec$ptr36$i;
      }
      $117 = HEAP8[$next_input_byte$4$i96 >> 0] | 0;
      $conv54$i = $117 & 255;
      $118 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$118 + 20 >> 2] = 81;
      HEAP32[$118 + 24 >> 2] = $conv37$i;
      HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $conv54$i;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
      if (($113 & 255) <= 31) if (($113 & 255) <= 15) {
       $and$i = $conv54$i & 15;
       HEAP8[$cinfo + 232 + $conv37$i >> 0] = $and$i;
       $125 = ($117 & 255) >>> 4;
       HEAP8[$cinfo + 248 + $conv37$i >> 0] = $125;
       if ($and$i >>> 0 > ($125 & 255) >>> 0) {
        $126 = HEAP32[$cinfo >> 2] | 0;
        HEAP32[$126 + 20 >> 2] = 30;
        HEAP32[$126 + 24 >> 2] = $conv54$i;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
       }
      } else label = 93; else {
       $122 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$122 + 20 >> 2] = 29;
       HEAP32[$122 + 24 >> 2] = $conv37$i;
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
       label = 93;
      }
      if ((label | 0) == 93) {
       label = 0;
       HEAP8[$conv37$i + -16 + ($cinfo + 264) >> 0] = $117;
      }
      $length$0$i = $length$083$i + -2 | 0;
      $bytes_in_buffer$2$i102 = $bytes_in_buffer$4$i97 + -1 | 0;
      $next_input_byte$2$i103 = $next_input_byte$4$i96 + 1 | 0;
      if (($length$083$i | 0) > 2) {
       $bytes_in_buffer$284$i = $bytes_in_buffer$2$i102;
       $length$083$i = $length$0$i;
       $next_input_byte$285$i = $next_input_byte$2$i103;
      } else {
       $bytes_in_buffer$2$lcssa$i = $bytes_in_buffer$2$i102;
       $length$0$lcssa$i = $length$0$i;
       $next_input_byte$2$lcssa$i = $next_input_byte$2$i103;
       break;
      }
     }
    } else {
     $bytes_in_buffer$2$lcssa$i = $bytes_in_buffer$280$i;
     $length$0$lcssa$i = $length$079$i;
     $next_input_byte$2$lcssa$i = $next_input_byte$281$i;
    }
    if ($length$0$lcssa$i | 0) {
     $129 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$129 + 20 >> 2] = 12;
     FUNCTION_TABLE_vi[HEAP32[$129 >> 2] & 255]($cinfo);
    }
    HEAP32[$101 >> 2] = $next_input_byte$2$lcssa$i;
    HEAP32[$bytes_in_buffer2$i75 >> 2] = $bytes_in_buffer$2$lcssa$i;
    break;
   }
  case 196:
   {
    $131 = HEAP32[$src$i >> 2] | 0;
    $bytes_in_buffer2$i107 = $131 + 4 | 0;
    $132 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
    if (!$132) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$131 + 12 >> 2] & 127]($cinfo) | 0)) {
      label = 174;
      break L1;
     }
     $bytes_in_buffer$0$i114 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
    } else $bytes_in_buffer$0$i114 = $132;
    $next_input_byte$0$i115 = HEAP32[$131 >> 2] | 0;
    $dec$i116 = $bytes_in_buffer$0$i114 + -1 | 0;
    $incdec$ptr$i117 = $next_input_byte$0$i115 + 1 | 0;
    $shl$i119 = HEAPU8[$next_input_byte$0$i115 >> 0] << 8;
    if (!$dec$i116) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$131 + 12 >> 2] & 127]($cinfo) | 0)) {
      label = 174;
      break L1;
     }
     $bytes_in_buffer$1$i128 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
     $next_input_byte$1$i127 = HEAP32[$131 >> 2] | 0;
    } else {
     $bytes_in_buffer$1$i128 = $dec$i116;
     $next_input_byte$1$i127 = $incdec$ptr$i117;
    }
    $dec18$i = $bytes_in_buffer$1$i128 + -1 | 0;
    $incdec$ptr19$i = $next_input_byte$1$i127 + 1 | 0;
    $add$i130 = $shl$i119 | HEAPU8[$next_input_byte$1$i127 >> 0];
    $sub$i = $add$i130 + -2 | 0;
    if ($add$i130 >>> 0 > 18) {
     $fill_input_buffer27$i132 = $131 + 12 | 0;
     $bytes_in_buffer$2143$i = $dec18$i;
     $length$0144$i = $sub$i;
     $next_input_byte$2142$i = $incdec$ptr19$i;
     while (1) {
      if (!$bytes_in_buffer$2143$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$3$i144 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$3$i143 = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$3$i144 = $bytes_in_buffer$2143$i;
       $next_input_byte$3$i143 = $next_input_byte$2142$i;
      }
      $conv37$i145 = HEAPU8[$next_input_byte$3$i143 >> 0] | 0;
      $144 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$144 + 20 >> 2] = 82;
      HEAP32[$144 + 24 >> 2] = $conv37$i145;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
      $bytes_in_buffer$4130$i = $bytes_in_buffer$3$i144 + -1 | 0;
      $next_input_byte$4131$i = $next_input_byte$3$i143 + 1 | 0;
      if (!$bytes_in_buffer$4130$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$i151 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$i150 = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$i151 = $bytes_in_buffer$4130$i;
       $next_input_byte$5$i150 = $next_input_byte$4131$i;
      }
      $150 = HEAP8[$next_input_byte$5$i150 >> 0] | 0;
      $conv64$i = $150 & 255;
      $bytes_in_buffer$4$i152 = $bytes_in_buffer$5$i151 + -1 | 0;
      $next_input_byte$4$i153 = $next_input_byte$5$i150 + 1 | 0;
      if (!$bytes_in_buffer$4$i152) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$1$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$1$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$1$i = $bytes_in_buffer$4$i152;
       $next_input_byte$5$1$i = $next_input_byte$4$i153;
      }
      $163 = HEAP8[$next_input_byte$5$1$i >> 0] | 0;
      $conv64$1$i = $163 & 255;
      $add65$1$i = $conv64$1$i + $conv64$i | 0;
      $bytes_in_buffer$4$1$i = $bytes_in_buffer$5$1$i + -1 | 0;
      $next_input_byte$4$1$i = $next_input_byte$5$1$i + 1 | 0;
      if (!$bytes_in_buffer$4$1$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$2$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$2$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$2$i = $bytes_in_buffer$4$1$i;
       $next_input_byte$5$2$i = $next_input_byte$4$1$i;
      }
      $164 = HEAP8[$next_input_byte$5$2$i >> 0] | 0;
      $conv64$2$i = $164 & 255;
      $add65$2$i = $add65$1$i + $conv64$2$i | 0;
      $bytes_in_buffer$4$2$i = $bytes_in_buffer$5$2$i + -1 | 0;
      $next_input_byte$4$2$i = $next_input_byte$5$2$i + 1 | 0;
      if (!$bytes_in_buffer$4$2$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$3$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$3$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$3$i = $bytes_in_buffer$4$2$i;
       $next_input_byte$5$3$i = $next_input_byte$4$2$i;
      }
      $165 = HEAP8[$next_input_byte$5$3$i >> 0] | 0;
      $conv64$3$i = $165 & 255;
      $add65$3$i = $add65$2$i + $conv64$3$i | 0;
      $bytes_in_buffer$4$3$i = $bytes_in_buffer$5$3$i + -1 | 0;
      $next_input_byte$4$3$i = $next_input_byte$5$3$i + 1 | 0;
      if (!$bytes_in_buffer$4$3$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$4$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$4$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$4$i = $bytes_in_buffer$4$3$i;
       $next_input_byte$5$4$i = $next_input_byte$4$3$i;
      }
      $166 = HEAP8[$next_input_byte$5$4$i >> 0] | 0;
      $conv64$4$i = $166 & 255;
      $add65$4$i = $add65$3$i + $conv64$4$i | 0;
      $bytes_in_buffer$4$4$i = $bytes_in_buffer$5$4$i + -1 | 0;
      $next_input_byte$4$4$i = $next_input_byte$5$4$i + 1 | 0;
      if (!$bytes_in_buffer$4$4$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$5$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$5$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$5$i = $bytes_in_buffer$4$4$i;
       $next_input_byte$5$5$i = $next_input_byte$4$4$i;
      }
      $167 = HEAP8[$next_input_byte$5$5$i >> 0] | 0;
      $conv64$5$i = $167 & 255;
      $add65$5$i = $add65$4$i + $conv64$5$i | 0;
      $bytes_in_buffer$4$5$i = $bytes_in_buffer$5$5$i + -1 | 0;
      $next_input_byte$4$5$i = $next_input_byte$5$5$i + 1 | 0;
      if (!$bytes_in_buffer$4$5$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$6$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$6$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$6$i = $bytes_in_buffer$4$5$i;
       $next_input_byte$5$6$i = $next_input_byte$4$5$i;
      }
      $168 = HEAP8[$next_input_byte$5$6$i >> 0] | 0;
      $conv64$6$i = $168 & 255;
      $add65$6$i = $add65$5$i + $conv64$6$i | 0;
      $bytes_in_buffer$4$6$i = $bytes_in_buffer$5$6$i + -1 | 0;
      $next_input_byte$4$6$i = $next_input_byte$5$6$i + 1 | 0;
      if (!$bytes_in_buffer$4$6$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$7$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$7$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$7$i = $bytes_in_buffer$4$6$i;
       $next_input_byte$5$7$i = $next_input_byte$4$6$i;
      }
      $169 = HEAP8[$next_input_byte$5$7$i >> 0] | 0;
      $conv64$7$i = $169 & 255;
      $add65$7$i = $add65$6$i + $conv64$7$i | 0;
      $bytes_in_buffer$4$7$i = $bytes_in_buffer$5$7$i + -1 | 0;
      $next_input_byte$4$7$i = $next_input_byte$5$7$i + 1 | 0;
      if (!$bytes_in_buffer$4$7$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$8$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$8$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$8$i = $bytes_in_buffer$4$7$i;
       $next_input_byte$5$8$i = $next_input_byte$4$7$i;
      }
      $170 = HEAP8[$next_input_byte$5$8$i >> 0] | 0;
      $conv64$8$i = $170 & 255;
      $add65$8$i = $add65$7$i + $conv64$8$i | 0;
      $bytes_in_buffer$4$8$i = $bytes_in_buffer$5$8$i + -1 | 0;
      $next_input_byte$4$8$i = $next_input_byte$5$8$i + 1 | 0;
      if (!$bytes_in_buffer$4$8$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$9$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$9$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$9$i = $bytes_in_buffer$4$8$i;
       $next_input_byte$5$9$i = $next_input_byte$4$8$i;
      }
      $171 = HEAP8[$next_input_byte$5$9$i >> 0] | 0;
      $conv64$9$i = $171 & 255;
      $add65$9$i = $add65$8$i + $conv64$9$i | 0;
      $bytes_in_buffer$4$9$i = $bytes_in_buffer$5$9$i + -1 | 0;
      $next_input_byte$4$9$i = $next_input_byte$5$9$i + 1 | 0;
      if (!$bytes_in_buffer$4$9$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$10$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$10$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$10$i = $bytes_in_buffer$4$9$i;
       $next_input_byte$5$10$i = $next_input_byte$4$9$i;
      }
      $172 = HEAP8[$next_input_byte$5$10$i >> 0] | 0;
      $conv64$10$i = $172 & 255;
      $add65$10$i = $add65$9$i + $conv64$10$i | 0;
      $bytes_in_buffer$4$10$i = $bytes_in_buffer$5$10$i + -1 | 0;
      $next_input_byte$4$10$i = $next_input_byte$5$10$i + 1 | 0;
      if (!$bytes_in_buffer$4$10$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$11$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$11$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$11$i = $bytes_in_buffer$4$10$i;
       $next_input_byte$5$11$i = $next_input_byte$4$10$i;
      }
      $173 = HEAP8[$next_input_byte$5$11$i >> 0] | 0;
      $conv64$11$i = $173 & 255;
      $add65$11$i = $add65$10$i + $conv64$11$i | 0;
      $bytes_in_buffer$4$11$i = $bytes_in_buffer$5$11$i + -1 | 0;
      $next_input_byte$4$11$i = $next_input_byte$5$11$i + 1 | 0;
      if (!$bytes_in_buffer$4$11$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$12$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$12$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$12$i = $bytes_in_buffer$4$11$i;
       $next_input_byte$5$12$i = $next_input_byte$4$11$i;
      }
      $174 = HEAP8[$next_input_byte$5$12$i >> 0] | 0;
      $conv64$12$i = $174 & 255;
      $add65$12$i = $add65$11$i + $conv64$12$i | 0;
      $bytes_in_buffer$4$12$i = $bytes_in_buffer$5$12$i + -1 | 0;
      $next_input_byte$4$12$i = $next_input_byte$5$12$i + 1 | 0;
      if (!$bytes_in_buffer$4$12$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$13$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$13$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$13$i = $bytes_in_buffer$4$12$i;
       $next_input_byte$5$13$i = $next_input_byte$4$12$i;
      }
      $175 = HEAP8[$next_input_byte$5$13$i >> 0] | 0;
      $conv64$13$i = $175 & 255;
      $add65$13$i = $add65$12$i + $conv64$13$i | 0;
      $bytes_in_buffer$4$13$i = $bytes_in_buffer$5$13$i + -1 | 0;
      $next_input_byte$4$13$i = $next_input_byte$5$13$i + 1 | 0;
      if (!$bytes_in_buffer$4$13$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$14$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$14$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$14$i = $bytes_in_buffer$4$13$i;
       $next_input_byte$5$14$i = $next_input_byte$4$13$i;
      }
      $176 = HEAP8[$next_input_byte$5$14$i >> 0] | 0;
      $conv64$14$i = $176 & 255;
      $add65$14$i = $add65$13$i + $conv64$14$i | 0;
      $bytes_in_buffer$4$14$i = $bytes_in_buffer$5$14$i + -1 | 0;
      $next_input_byte$4$14$i = $next_input_byte$5$14$i + 1 | 0;
      if (!$bytes_in_buffer$4$14$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
        label = 174;
        break L1;
       }
       $bytes_in_buffer$5$15$i = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
       $next_input_byte$5$15$i = HEAP32[$131 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$15$i = $bytes_in_buffer$4$14$i;
       $next_input_byte$5$15$i = $next_input_byte$4$14$i;
      }
      $177 = HEAP8[$next_input_byte$5$15$i >> 0] | 0;
      $conv64$15$i = $177 & 255;
      $add65$15$i = $add65$14$i + $conv64$15$i | 0;
      $bytes_in_buffer$4$15$i = $bytes_in_buffer$5$15$i + -1 | 0;
      $next_input_byte$4$15$i = $next_input_byte$5$15$i + 1 | 0;
      $sub66$i = $length$0144$i + -17 | 0;
      $226 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$226 + 24 >> 2] = $conv64$i;
      HEAP32[$226 + 28 >> 2] = $conv64$1$i;
      HEAP32[$226 + 32 >> 2] = $conv64$2$i;
      HEAP32[$226 + 36 >> 2] = $conv64$3$i;
      HEAP32[$226 + 40 >> 2] = $conv64$4$i;
      HEAP32[$226 + 44 >> 2] = $conv64$5$i;
      HEAP32[$226 + 48 >> 2] = $conv64$6$i;
      HEAP32[$226 + 52 >> 2] = $conv64$7$i;
      HEAP32[$226 + 20 >> 2] = 88;
      FUNCTION_TABLE_vii[HEAP32[$226 + 4 >> 2] & 255]($cinfo, 2);
      $228 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$228 + 24 >> 2] = $conv64$8$i;
      HEAP32[$228 + 28 >> 2] = $conv64$9$i;
      HEAP32[$228 + 32 >> 2] = $conv64$10$i;
      HEAP32[$228 + 36 >> 2] = $conv64$11$i;
      HEAP32[$228 + 40 >> 2] = $conv64$12$i;
      HEAP32[$228 + 44 >> 2] = $conv64$13$i;
      HEAP32[$228 + 48 >> 2] = $conv64$14$i;
      HEAP32[$228 + 52 >> 2] = $conv64$15$i;
      HEAP32[$228 + 20 >> 2] = 88;
      FUNCTION_TABLE_vii[HEAP32[$228 + 4 >> 2] & 255]($cinfo, 2);
      if ($add65$15$i >>> 0 > 256 | ($sub66$i | 0) < ($add65$15$i | 0)) {
       $151 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$151 + 20 >> 2] = 9;
       FUNCTION_TABLE_vi[HEAP32[$151 >> 2] & 255]($cinfo);
      }
      _memset($huffval$i | 0, 0, 256) | 0;
      if (!$add65$15$i) {
       $add65150$i = 0;
       $bytes_in_buffer$6$lcssa$i = $bytes_in_buffer$4$15$i;
       $next_input_byte$6$lcssa$i = $next_input_byte$4$15$i;
      } else {
       $bytes_in_buffer$6139$i = $bytes_in_buffer$4$15$i;
       $i$1137$i = 0;
       $next_input_byte$6138$i = $next_input_byte$4$15$i;
       while (1) {
        if (!$bytes_in_buffer$6139$i) {
         if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer27$i132 >> 2] & 127]($cinfo) | 0)) {
          label = 174;
          break L1;
         }
         $bytes_in_buffer$7$i156 = HEAP32[$bytes_in_buffer2$i107 >> 2] | 0;
         $next_input_byte$7$i155 = HEAP32[$131 >> 2] | 0;
        } else {
         $bytes_in_buffer$7$i156 = $bytes_in_buffer$6139$i;
         $next_input_byte$7$i155 = $next_input_byte$6138$i;
        }
        $dec163$i = $bytes_in_buffer$7$i156 + -1 | 0;
        $incdec$ptr164$i = $next_input_byte$7$i155 + 1 | 0;
        HEAP8[$huffval$i + $i$1137$i >> 0] = HEAP8[$next_input_byte$7$i155 >> 0] | 0;
        $i$1137$i = $i$1137$i + 1 | 0;
        if ($i$1137$i >>> 0 >= $add65$15$i >>> 0) {
         $add65150$i = $add65$15$i;
         $bytes_in_buffer$6$lcssa$i = $dec163$i;
         $next_input_byte$6$lcssa$i = $incdec$ptr164$i;
         break;
        } else {
         $bytes_in_buffer$6139$i = $dec163$i;
         $next_input_byte$6138$i = $incdec$ptr164$i;
        }
       }
      }
      $sub171$i = $sub66$i - $add65150$i | 0;
      $tobool172$i = ($conv37$i145 & 16 | 0) == 0;
      $sub174$i = $conv37$i145 + -16 | 0;
      $index$0$i = $tobool172$i ? $conv37$i145 : $sub174$i;
      $htblptr$0$i = $tobool172$i ? $cinfo + 180 + ($conv37$i145 << 2) | 0 : $cinfo + 196 + ($sub174$i << 2) | 0;
      if ($index$0$i >>> 0 > 3) {
       $158 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$158 + 20 >> 2] = 31;
       HEAP32[$158 + 24 >> 2] = $index$0$i;
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
      }
      $161 = HEAP32[$htblptr$0$i >> 2] | 0;
      if (!$161) {
       $call196$i = _jpeg_alloc_huff_table($cinfo) | 0;
       HEAP32[$htblptr$0$i >> 2] = $call196$i;
       $162 = $call196$i;
      } else $162 = $161;
      HEAP8[$162 >> 0] = 0;
      HEAP8[$162 + 1 >> 0] = $150;
      HEAP8[$162 + 2 >> 0] = $163;
      HEAP8[$162 + 3 >> 0] = $164;
      HEAP8[$162 + 4 >> 0] = $165;
      HEAP8[$162 + 5 >> 0] = $166;
      HEAP8[$162 + 6 >> 0] = $167;
      HEAP8[$162 + 7 >> 0] = $168;
      HEAP8[$162 + 8 >> 0] = $169;
      HEAP8[$162 + 9 >> 0] = $170;
      HEAP8[$162 + 10 >> 0] = $171;
      HEAP8[$162 + 11 >> 0] = $172;
      HEAP8[$162 + 12 >> 0] = $173;
      HEAP8[$162 + 13 >> 0] = $174;
      HEAP8[$162 + 14 >> 0] = $175;
      HEAP8[$162 + 15 >> 0] = $176;
      HEAP8[$162 + 16 >> 0] = $177;
      _memcpy((HEAP32[$htblptr$0$i >> 2] | 0) + 17 | 0, $huffval$i | 0, 256) | 0;
      if (($sub171$i | 0) > 16) {
       $bytes_in_buffer$2143$i = $bytes_in_buffer$6$lcssa$i;
       $length$0144$i = $sub171$i;
       $next_input_byte$2142$i = $next_input_byte$6$lcssa$i;
      } else {
       $bytes_in_buffer$2$lcssa$i160 = $bytes_in_buffer$6$lcssa$i;
       $length$0$lcssa$i161 = $sub171$i;
       $next_input_byte$2$lcssa$i159 = $next_input_byte$6$lcssa$i;
       break;
      }
     }
    } else {
     $bytes_in_buffer$2$lcssa$i160 = $dec18$i;
     $length$0$lcssa$i161 = $sub$i;
     $next_input_byte$2$lcssa$i159 = $incdec$ptr19$i;
    }
    if ($length$0$lcssa$i161 | 0) {
     $179 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$179 + 20 >> 2] = 12;
     FUNCTION_TABLE_vi[HEAP32[$179 >> 2] & 255]($cinfo);
    }
    HEAP32[$131 >> 2] = $next_input_byte$2$lcssa$i159;
    HEAP32[$bytes_in_buffer2$i107 >> 2] = $bytes_in_buffer$2$lcssa$i160;
    break;
   }
  case 219:
   {
    $230 = HEAP32[$src$i >> 2] | 0;
    $bytes_in_buffer2$i171 = $230 + 4 | 0;
    $231 = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
    if (!$231) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$230 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$0$i178 = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
    } else $bytes_in_buffer$0$i178 = $231;
    $next_input_byte$0$i179 = HEAP32[$230 >> 2] | 0;
    $dec$i180 = $bytes_in_buffer$0$i178 + -1 | 0;
    $incdec$ptr$i181 = $next_input_byte$0$i179 + 1 | 0;
    $shl$i183 = HEAPU8[$next_input_byte$0$i179 >> 0] << 8;
    if (!$dec$i180) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$230 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$1$i192 = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
     $next_input_byte$1$i191 = HEAP32[$230 >> 2] | 0;
    } else {
     $bytes_in_buffer$1$i192 = $dec$i180;
     $next_input_byte$1$i191 = $incdec$ptr$i181;
    }
    $dec18$i193 = $bytes_in_buffer$1$i192 + -1 | 0;
    $incdec$ptr19$i194 = $next_input_byte$1$i191 + 1 | 0;
    $add$i196 = $shl$i183 | HEAPU8[$next_input_byte$1$i191 >> 0];
    $sub$i197 = $add$i196 + -2 | 0;
    if ($add$i196 >>> 0 > 2) {
     $fill_input_buffer28$i = $230 + 12 | 0;
     $bytes_in_buffer$2159$i = $dec18$i193;
     $length$0157$i = $sub$i197;
     $next_input_byte$2158$i = $incdec$ptr19$i194;
     while (1) {
      $dec23$i = $length$0157$i + -1 | 0;
      if (!$bytes_in_buffer$2159$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer28$i >> 2] & 127]($cinfo) | 0)) {
        $retval$0 = 0;
        label = 350;
        break L1;
       }
       $bytes_in_buffer$3$i201 = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
       $next_input_byte$3$i200 = HEAP32[$230 >> 2] | 0;
      } else {
       $bytes_in_buffer$3$i201 = $bytes_in_buffer$2159$i;
       $next_input_byte$3$i200 = $next_input_byte$2158$i;
      }
      $conv38$i = HEAPU8[$next_input_byte$3$i200 >> 0] | 0;
      $243 = $conv38$i >>> 4;
      $and$i202 = $conv38$i & 15;
      $244 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$244 + 20 >> 2] = 83;
      HEAP32[$244 + 24 >> 2] = $and$i202;
      HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $243;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
      if ($and$i202 >>> 0 > 3) {
       $248 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$248 + 20 >> 2] = 32;
       HEAP32[$248 + 24 >> 2] = $and$i202;
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
      }
      $arrayidx59$i = $cinfo + 164 + ($and$i202 << 2) | 0;
      $251 = HEAP32[$arrayidx59$i >> 2] | 0;
      if (!$251) {
       $call63$i = _jpeg_alloc_quant_table($cinfo) | 0;
       HEAP32[$arrayidx59$i >> 2] = $call63$i;
       $252 = $call63$i;
      } else $252 = $251;
      $tobool69$i = ($243 | 0) != 0;
      if ($tobool69$i) if (($length$0157$i | 0) < 129) {
       HEAP16[$252 >> 1] = 1;
       HEAP16[$252 + 2 >> 1] = 1;
       HEAP16[$252 + 4 >> 1] = 1;
       HEAP16[$252 + 6 >> 1] = 1;
       HEAP16[$252 + 8 >> 1] = 1;
       HEAP16[$252 + 10 >> 1] = 1;
       HEAP16[$252 + 12 >> 1] = 1;
       HEAP16[$252 + 14 >> 1] = 1;
       HEAP16[$252 + 16 >> 1] = 1;
       HEAP16[$252 + 18 >> 1] = 1;
       HEAP16[$252 + 20 >> 1] = 1;
       HEAP16[$252 + 22 >> 1] = 1;
       HEAP16[$252 + 24 >> 1] = 1;
       HEAP16[$252 + 26 >> 1] = 1;
       HEAP16[$252 + 28 >> 1] = 1;
       HEAP16[$252 + 30 >> 1] = 1;
       HEAP16[$252 + 32 >> 1] = 1;
       HEAP16[$252 + 34 >> 1] = 1;
       HEAP16[$252 + 36 >> 1] = 1;
       HEAP16[$252 + 38 >> 1] = 1;
       HEAP16[$252 + 40 >> 1] = 1;
       HEAP16[$252 + 42 >> 1] = 1;
       HEAP16[$252 + 44 >> 1] = 1;
       HEAP16[$252 + 46 >> 1] = 1;
       HEAP16[$252 + 48 >> 1] = 1;
       HEAP16[$252 + 50 >> 1] = 1;
       HEAP16[$252 + 52 >> 1] = 1;
       HEAP16[$252 + 54 >> 1] = 1;
       HEAP16[$252 + 56 >> 1] = 1;
       HEAP16[$252 + 58 >> 1] = 1;
       HEAP16[$252 + 60 >> 1] = 1;
       HEAP16[$252 + 62 >> 1] = 1;
       HEAP16[$252 + 64 >> 1] = 1;
       HEAP16[$252 + 66 >> 1] = 1;
       HEAP16[$252 + 68 >> 1] = 1;
       HEAP16[$252 + 70 >> 1] = 1;
       HEAP16[$252 + 72 >> 1] = 1;
       HEAP16[$252 + 74 >> 1] = 1;
       HEAP16[$252 + 76 >> 1] = 1;
       HEAP16[$252 + 78 >> 1] = 1;
       HEAP16[$252 + 80 >> 1] = 1;
       HEAP16[$252 + 82 >> 1] = 1;
       HEAP16[$252 + 84 >> 1] = 1;
       HEAP16[$252 + 86 >> 1] = 1;
       HEAP16[$252 + 88 >> 1] = 1;
       HEAP16[$252 + 90 >> 1] = 1;
       HEAP16[$252 + 92 >> 1] = 1;
       HEAP16[$252 + 94 >> 1] = 1;
       HEAP16[$252 + 96 >> 1] = 1;
       HEAP16[$252 + 98 >> 1] = 1;
       HEAP16[$252 + 100 >> 1] = 1;
       HEAP16[$252 + 102 >> 1] = 1;
       HEAP16[$252 + 104 >> 1] = 1;
       HEAP16[$252 + 106 >> 1] = 1;
       HEAP16[$252 + 108 >> 1] = 1;
       HEAP16[$252 + 110 >> 1] = 1;
       HEAP16[$252 + 112 >> 1] = 1;
       HEAP16[$252 + 114 >> 1] = 1;
       HEAP16[$252 + 116 >> 1] = 1;
       HEAP16[$252 + 118 >> 1] = 1;
       HEAP16[$252 + 120 >> 1] = 1;
       HEAP16[$252 + 122 >> 1] = 1;
       HEAP16[$252 + 124 >> 1] = 1;
       HEAP16[$252 + 126 >> 1] = 1;
       $count$0$i = $dec23$i >> 1;
       label = 196;
      } else label = 203; else if (($length$0157$i | 0) < 65) {
       HEAP16[$252 >> 1] = 1;
       HEAP16[$252 + 2 >> 1] = 1;
       HEAP16[$252 + 4 >> 1] = 1;
       HEAP16[$252 + 6 >> 1] = 1;
       HEAP16[$252 + 8 >> 1] = 1;
       HEAP16[$252 + 10 >> 1] = 1;
       HEAP16[$252 + 12 >> 1] = 1;
       HEAP16[$252 + 14 >> 1] = 1;
       HEAP16[$252 + 16 >> 1] = 1;
       HEAP16[$252 + 18 >> 1] = 1;
       HEAP16[$252 + 20 >> 1] = 1;
       HEAP16[$252 + 22 >> 1] = 1;
       HEAP16[$252 + 24 >> 1] = 1;
       HEAP16[$252 + 26 >> 1] = 1;
       HEAP16[$252 + 28 >> 1] = 1;
       HEAP16[$252 + 30 >> 1] = 1;
       HEAP16[$252 + 32 >> 1] = 1;
       HEAP16[$252 + 34 >> 1] = 1;
       HEAP16[$252 + 36 >> 1] = 1;
       HEAP16[$252 + 38 >> 1] = 1;
       HEAP16[$252 + 40 >> 1] = 1;
       HEAP16[$252 + 42 >> 1] = 1;
       HEAP16[$252 + 44 >> 1] = 1;
       HEAP16[$252 + 46 >> 1] = 1;
       HEAP16[$252 + 48 >> 1] = 1;
       HEAP16[$252 + 50 >> 1] = 1;
       HEAP16[$252 + 52 >> 1] = 1;
       HEAP16[$252 + 54 >> 1] = 1;
       HEAP16[$252 + 56 >> 1] = 1;
       HEAP16[$252 + 58 >> 1] = 1;
       HEAP16[$252 + 60 >> 1] = 1;
       HEAP16[$252 + 62 >> 1] = 1;
       HEAP16[$252 + 64 >> 1] = 1;
       HEAP16[$252 + 66 >> 1] = 1;
       HEAP16[$252 + 68 >> 1] = 1;
       HEAP16[$252 + 70 >> 1] = 1;
       HEAP16[$252 + 72 >> 1] = 1;
       HEAP16[$252 + 74 >> 1] = 1;
       HEAP16[$252 + 76 >> 1] = 1;
       HEAP16[$252 + 78 >> 1] = 1;
       HEAP16[$252 + 80 >> 1] = 1;
       HEAP16[$252 + 82 >> 1] = 1;
       HEAP16[$252 + 84 >> 1] = 1;
       HEAP16[$252 + 86 >> 1] = 1;
       HEAP16[$252 + 88 >> 1] = 1;
       HEAP16[$252 + 90 >> 1] = 1;
       HEAP16[$252 + 92 >> 1] = 1;
       HEAP16[$252 + 94 >> 1] = 1;
       HEAP16[$252 + 96 >> 1] = 1;
       HEAP16[$252 + 98 >> 1] = 1;
       HEAP16[$252 + 100 >> 1] = 1;
       HEAP16[$252 + 102 >> 1] = 1;
       HEAP16[$252 + 104 >> 1] = 1;
       HEAP16[$252 + 106 >> 1] = 1;
       HEAP16[$252 + 108 >> 1] = 1;
       HEAP16[$252 + 110 >> 1] = 1;
       HEAP16[$252 + 112 >> 1] = 1;
       HEAP16[$252 + 114 >> 1] = 1;
       HEAP16[$252 + 116 >> 1] = 1;
       HEAP16[$252 + 118 >> 1] = 1;
       HEAP16[$252 + 120 >> 1] = 1;
       HEAP16[$252 + 122 >> 1] = 1;
       HEAP16[$252 + 124 >> 1] = 1;
       HEAP16[$252 + 126 >> 1] = 1;
       $count$0$i = $dec23$i;
       label = 196;
      } else label = 203;
      L197 : do if ((label | 0) == 196) {
       label = 0;
       switch ($count$0$i | 0) {
       case 4:
        {
         $natural_order$0$ph$i = 1760;
         break;
        }
       case 9:
        {
         $natural_order$0$ph$i = 1648;
         break;
        }
       case 16:
        {
         $natural_order$0$ph$i = 1520;
         break;
        }
       case 25:
        {
         $natural_order$0$ph$i = 1344;
         break;
        }
       case 36:
        {
         $natural_order$0$ph$i = 1136;
         break;
        }
       case 49:
        {
         $natural_order$0$ph$i = 864;
         break;
        }
       default:
        {
         $bytes_in_buffer$4148$i = $bytes_in_buffer$3$i201 + -1 | 0;
         $next_input_byte$4149$i = $next_input_byte$3$i200 + 1 | 0;
         if (($count$0$i | 0) > 0) {
          $bytes_in_buffer$4148174$i = $bytes_in_buffer$4148$i;
          $count$0135171$i = $count$0$i;
          $natural_order$0173$i = 544;
          $next_input_byte$4149175$i = $next_input_byte$4149$i;
          label = 205;
          break L197;
         } else {
          $bytes_in_buffer$4$lcssa$i = $bytes_in_buffer$4148$i;
          $count$0135172$i = $count$0$i;
          $next_input_byte$4$lcssa$i = $next_input_byte$4149$i;
          break L197;
         }
        }
       }
       $bytes_in_buffer$4148174$i = $bytes_in_buffer$3$i201 + -1 | 0;
       $count$0135171$i = $count$0$i;
       $natural_order$0173$i = $natural_order$0$ph$i;
       $next_input_byte$4149175$i = $next_input_byte$3$i200 + 1 | 0;
       label = 205;
      } else if ((label | 0) == 203) {
       label = 0;
       $bytes_in_buffer$4148174$i = $bytes_in_buffer$3$i201 + -1 | 0;
       $count$0135171$i = 64;
       $natural_order$0173$i = 544;
       $next_input_byte$4149175$i = $next_input_byte$3$i200 + 1 | 0;
       label = 205;
      } while (0);
      L208 : do if ((label | 0) == 205) {
       label = 0;
       if (!$tobool69$i) {
        $bytes_in_buffer$4152$i = $bytes_in_buffer$4148174$i;
        $i$2151$i = 0;
        $next_input_byte$4153$i = $next_input_byte$4149175$i;
        while (1) {
         if (!$bytes_in_buffer$4152$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer28$i >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$7$i212 = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
          $next_input_byte$7$i211 = HEAP32[$230 >> 2] | 0;
         } else {
          $bytes_in_buffer$7$i212 = $bytes_in_buffer$4152$i;
          $next_input_byte$7$i211 = $next_input_byte$4153$i;
         }
         HEAP16[$252 + (HEAP32[$natural_order$0173$i + ($i$2151$i << 2) >> 2] << 1) >> 1] = HEAPU8[$next_input_byte$7$i211 >> 0] | 0;
         $i$2151$i = $i$2151$i + 1 | 0;
         $bytes_in_buffer$4$i214 = $bytes_in_buffer$7$i212 + -1 | 0;
         $next_input_byte$4$i215 = $next_input_byte$7$i211 + 1 | 0;
         if (($i$2151$i | 0) >= ($count$0135171$i | 0)) {
          $bytes_in_buffer$4$lcssa$i = $bytes_in_buffer$4$i214;
          $count$0135172$i = $count$0135171$i;
          $next_input_byte$4$lcssa$i = $next_input_byte$4$i215;
          break L208;
         } else {
          $bytes_in_buffer$4152$i = $bytes_in_buffer$4$i214;
          $next_input_byte$4153$i = $next_input_byte$4$i215;
         }
        }
       }
       $bytes_in_buffer$4152$us$i = $bytes_in_buffer$4148174$i;
       $i$2151$us$i = 0;
       $next_input_byte$4153$us$i = $next_input_byte$4149175$i;
       while (1) {
        if (!$bytes_in_buffer$4152$us$i) {
         if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer28$i >> 2] & 127]($cinfo) | 0)) {
          $retval$0 = 0;
          label = 350;
          break L1;
         }
         $bytes_in_buffer$5$us$i = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
         $next_input_byte$5$us$i = HEAP32[$230 >> 2] | 0;
        } else {
         $bytes_in_buffer$5$us$i = $bytes_in_buffer$4152$us$i;
         $next_input_byte$5$us$i = $next_input_byte$4153$us$i;
        }
        $dec118$us$i = $bytes_in_buffer$5$us$i + -1 | 0;
        $incdec$ptr119$us$i = $next_input_byte$5$us$i + 1 | 0;
        $shl121$us$i = HEAPU8[$next_input_byte$5$us$i >> 0] << 8;
        if (!$dec118$us$i) {
         if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer28$i >> 2] & 127]($cinfo) | 0)) {
          $retval$0 = 0;
          label = 350;
          break L1;
         }
         $bytes_in_buffer$6$us$i = HEAP32[$bytes_in_buffer2$i171 >> 2] | 0;
         $next_input_byte$6$us$i = HEAP32[$230 >> 2] | 0;
        } else {
         $bytes_in_buffer$6$us$i = $dec118$us$i;
         $next_input_byte$6$us$i = $incdec$ptr119$us$i;
        }
        HEAP16[$252 + (HEAP32[$natural_order$0173$i + ($i$2151$us$i << 2) >> 2] << 1) >> 1] = $shl121$us$i | HEAPU8[$next_input_byte$6$us$i >> 0];
        $i$2151$us$i = $i$2151$us$i + 1 | 0;
        $bytes_in_buffer$4$us$i = $bytes_in_buffer$6$us$i + -1 | 0;
        $next_input_byte$4$us$i = $next_input_byte$6$us$i + 1 | 0;
        if (($i$2151$us$i | 0) >= ($count$0135171$i | 0)) {
         $bytes_in_buffer$4$lcssa$i = $bytes_in_buffer$4$us$i;
         $count$0135172$i = $count$0135171$i;
         $next_input_byte$4$lcssa$i = $next_input_byte$4$us$i;
         break;
        } else {
         $bytes_in_buffer$4152$us$i = $bytes_in_buffer$4$us$i;
         $next_input_byte$4153$us$i = $next_input_byte$4$us$i;
        }
       }
      } while (0);
      $267 = HEAP32[$cinfo >> 2] | 0;
      L230 : do if ((HEAP32[$267 + 104 >> 2] | 0) > 1) {
       $269 = $267;
       $i$3155$i = 0;
       while (1) {
        HEAP32[$269 + 24 >> 2] = HEAPU16[$252 + ($i$3155$i << 1) >> 1];
        HEAP32[$269 + 28 >> 2] = HEAPU16[$252 + (($i$3155$i | 1) << 1) >> 1];
        HEAP32[$269 + 32 >> 2] = HEAPU16[$252 + (($i$3155$i | 2) << 1) >> 1];
        HEAP32[$269 + 36 >> 2] = HEAPU16[$252 + (($i$3155$i | 3) << 1) >> 1];
        HEAP32[$269 + 40 >> 2] = HEAPU16[$252 + (($i$3155$i | 4) << 1) >> 1];
        HEAP32[$269 + 44 >> 2] = HEAPU16[$252 + (($i$3155$i | 5) << 1) >> 1];
        HEAP32[$269 + 48 >> 2] = HEAPU16[$252 + (($i$3155$i | 6) << 1) >> 1];
        HEAP32[$269 + 52 >> 2] = HEAPU16[$252 + (($i$3155$i | 7) << 1) >> 1];
        HEAP32[$269 + 20 >> 2] = 95;
        FUNCTION_TABLE_vii[HEAP32[$269 + 4 >> 2] & 255]($cinfo, 2);
        $add223$i = $i$3155$i + 8 | 0;
        if ($add223$i >>> 0 >= 64) break L230;
        $269 = HEAP32[$cinfo >> 2] | 0;
        $i$3155$i = $add223$i;
       }
      } while (0);
      $spec$select$i220 = $dec23$i - $count$0135172$i + ($tobool69$i ? 0 - $count$0135172$i | 0 : 0) | 0;
      if (($spec$select$i220 | 0) > 0) {
       $bytes_in_buffer$2159$i = $bytes_in_buffer$4$lcssa$i;
       $length$0157$i = $spec$select$i220;
       $next_input_byte$2158$i = $next_input_byte$4$lcssa$i;
      } else {
       $bytes_in_buffer$2$lcssa$i224 = $bytes_in_buffer$4$lcssa$i;
       $length$0$lcssa$i222 = $spec$select$i220;
       $next_input_byte$2$lcssa$i223 = $next_input_byte$4$lcssa$i;
       break;
      }
     }
    } else {
     $bytes_in_buffer$2$lcssa$i224 = $dec18$i193;
     $length$0$lcssa$i222 = $sub$i197;
     $next_input_byte$2$lcssa$i223 = $incdec$ptr19$i194;
    }
    if ($length$0$lcssa$i222 | 0) {
     $279 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$279 + 20 >> 2] = 12;
     FUNCTION_TABLE_vi[HEAP32[$279 >> 2] & 255]($cinfo);
    }
    HEAP32[$230 >> 2] = $next_input_byte$2$lcssa$i223;
    HEAP32[$bytes_in_buffer2$i171 >> 2] = $bytes_in_buffer$2$lcssa$i224;
    break;
   }
  case 221:
   {
    $281 = HEAP32[$src$i >> 2] | 0;
    $bytes_in_buffer2$i229 = $281 + 4 | 0;
    $282 = HEAP32[$bytes_in_buffer2$i229 >> 2] | 0;
    if (!$282) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$281 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$0$i236 = HEAP32[$bytes_in_buffer2$i229 >> 2] | 0;
    } else $bytes_in_buffer$0$i236 = $282;
    $next_input_byte$0$i237 = HEAP32[$281 >> 2] | 0;
    $dec$i238 = $bytes_in_buffer$0$i236 + -1 | 0;
    $incdec$ptr$i239 = $next_input_byte$0$i237 + 1 | 0;
    $shl$i241 = HEAPU8[$next_input_byte$0$i237 >> 0] << 8;
    if (!$dec$i238) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$281 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$1$i250 = HEAP32[$bytes_in_buffer2$i229 >> 2] | 0;
     $next_input_byte$1$i249 = HEAP32[$281 >> 2] | 0;
    } else {
     $bytes_in_buffer$1$i250 = $dec$i238;
     $next_input_byte$1$i249 = $incdec$ptr$i239;
    }
    $dec18$i251 = $bytes_in_buffer$1$i250 + -1 | 0;
    $incdec$ptr19$i252 = $next_input_byte$1$i249 + 1 | 0;
    if (($shl$i241 | HEAPU8[$next_input_byte$1$i249 >> 0] | 0) != 4) {
     $290 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$290 + 20 >> 2] = 12;
     FUNCTION_TABLE_vi[HEAP32[$290 >> 2] & 255]($cinfo);
    }
    if (!$dec18$i251) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$281 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$2$i262 = HEAP32[$bytes_in_buffer2$i229 >> 2] | 0;
     $next_input_byte$2$i261 = HEAP32[$281 >> 2] | 0;
    } else {
     $bytes_in_buffer$2$i262 = $dec18$i251;
     $next_input_byte$2$i261 = $incdec$ptr19$i252;
    }
    $dec38$i = $bytes_in_buffer$2$i262 + -1 | 0;
    $incdec$ptr39$i = $next_input_byte$2$i261 + 1 | 0;
    $shl41$i = HEAPU8[$next_input_byte$2$i261 >> 0] << 8;
    if (!$dec38$i) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$281 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$3$i264 = HEAP32[$bytes_in_buffer2$i229 >> 2] | 0;
     $next_input_byte$3$i263 = HEAP32[$281 >> 2] | 0;
    } else {
     $bytes_in_buffer$3$i264 = $dec38$i;
     $next_input_byte$3$i263 = $incdec$ptr39$i;
    }
    $add56$i = $shl41$i | HEAPU8[$next_input_byte$3$i263 >> 0];
    $300 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$300 + 20 >> 2] = 84;
    HEAP32[$300 + 24 >> 2] = $add56$i;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    HEAP32[$restart_interval$i >> 2] = $add56$i;
    HEAP32[$281 >> 2] = $next_input_byte$3$i263 + 1;
    HEAP32[$bytes_in_buffer2$i229 >> 2] = $bytes_in_buffer$3$i264 + -1;
    break;
   }
  case 248:
   {
    $303 = HEAP32[$src$i >> 2] | 0;
    $304 = HEAP32[$303 >> 2] | 0;
    $bytes_in_buffer2$i271 = $303 + 4 | 0;
    $305 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
    if (!(HEAP32[(HEAP32[$marker >> 2] | 0) + 16 >> 2] | 0)) {
     $308 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$308 + 20 >> 2] = 60;
     _strncpy($308 + 24 | 0, 27682, 80) | 0;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    }
    do if ((HEAP32[$num_components$i282 >> 2] | 0) >= 3) {
     if (!$305) {
      if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
       $retval$0 = 0;
       label = 350;
       break L1;
      }
      $bytes_in_buffer$0$i290 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
      $next_input_byte$0$i289 = HEAP32[$303 >> 2] | 0;
     } else {
      $bytes_in_buffer$0$i290 = $305;
      $next_input_byte$0$i289 = $304;
     }
     $dec$i291 = $bytes_in_buffer$0$i290 + -1 | 0;
     $incdec$ptr$i292 = $next_input_byte$0$i289 + 1 | 0;
     $shl$i294 = HEAPU8[$next_input_byte$0$i289 >> 0] << 8;
     if (!$dec$i291) {
      if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
       $retval$0 = 0;
       label = 350;
       break L1;
      }
      $bytes_in_buffer$1$i298 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
      $next_input_byte$1$i297 = HEAP32[$303 >> 2] | 0;
     } else {
      $bytes_in_buffer$1$i298 = $dec$i291;
      $next_input_byte$1$i297 = $incdec$ptr$i292;
     }
     $dec27$i = $bytes_in_buffer$1$i298 + -1 | 0;
     $incdec$ptr28$i = $next_input_byte$1$i297 + 1 | 0;
     if (($shl$i294 | HEAPU8[$next_input_byte$1$i297 >> 0] | 0) != 24) {
      $320 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$320 + 20 >> 2] = 12;
      FUNCTION_TABLE_vi[HEAP32[$320 >> 2] & 255]($cinfo);
     }
     if (!$dec27$i) {
      if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
       $retval$0 = 0;
       label = 350;
       break L1;
      }
      $bytes_in_buffer$2$i301 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
      $next_input_byte$2$i300 = HEAP32[$303 >> 2] | 0;
     } else {
      $bytes_in_buffer$2$i301 = $dec27$i;
      $next_input_byte$2$i300 = $incdec$ptr28$i;
     }
     $dec50$i = $bytes_in_buffer$2$i301 + -1 | 0;
     $incdec$ptr51$i = $next_input_byte$2$i300 + 1 | 0;
     if ((HEAP8[$next_input_byte$2$i300 >> 0] | 0) != 13) {
      $326 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$326 + 20 >> 2] = 70;
      HEAP32[$326 + 24 >> 2] = HEAP32[$unread_marker >> 2];
      FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
     }
     if (!$dec50$i) {
      if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
       $retval$0 = 0;
       label = 350;
       break L1;
      }
      $bytes_in_buffer$3$i308 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
      $next_input_byte$3$i307 = HEAP32[$303 >> 2] | 0;
     } else {
      $bytes_in_buffer$3$i308 = $dec50$i;
      $next_input_byte$3$i307 = $incdec$ptr51$i;
     }
     $dec77$i = $bytes_in_buffer$3$i308 + -1 | 0;
     $incdec$ptr78$i = $next_input_byte$3$i307 + 1 | 0;
     $shl80$i = HEAPU8[$next_input_byte$3$i307 >> 0] << 8;
     if (!$dec77$i) {
      if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
       $retval$0 = 0;
       label = 350;
       break L1;
      }
      $bytes_in_buffer$4$i311 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
      $next_input_byte$4$i310 = HEAP32[$303 >> 2] | 0;
     } else {
      $bytes_in_buffer$4$i311 = $dec77$i;
      $next_input_byte$4$i310 = $incdec$ptr78$i;
     }
     $dec92$i = $bytes_in_buffer$4$i311 + -1 | 0;
     $incdec$ptr93$i = $next_input_byte$4$i310 + 1 | 0;
     if (($shl80$i | HEAPU8[$next_input_byte$4$i310 >> 0] | 0) == 255) {
      if (!$dec92$i) {
       if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
        $retval$0 = 0;
        label = 350;
        break L1;
       }
       $bytes_in_buffer$5$i313 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
       $next_input_byte$5$i312 = HEAP32[$303 >> 2] | 0;
      } else {
       $bytes_in_buffer$5$i313 = $dec92$i;
       $next_input_byte$5$i312 = $incdec$ptr93$i;
      }
      $dec114$i = $bytes_in_buffer$5$i313 + -1 | 0;
      $incdec$ptr115$i = $next_input_byte$5$i312 + 1 | 0;
      if ((HEAP8[$next_input_byte$5$i312 >> 0] | 0) == 3) {
       if (!$dec114$i) {
        if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
         $retval$0 = 0;
         label = 350;
         break L1;
        }
        $bytes_in_buffer$6$i316 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
        $next_input_byte$6$i315 = HEAP32[$303 >> 2] | 0;
       } else {
        $bytes_in_buffer$6$i316 = $dec114$i;
        $next_input_byte$6$i315 = $incdec$ptr115$i;
       }
       $dec135$i = $bytes_in_buffer$6$i316 + -1 | 0;
       $incdec$ptr136$i = $next_input_byte$6$i315 + 1 | 0;
       $346 = HEAP32[$comp_info$i317 >> 2] | 0;
       if ((HEAP32[$346 + 88 >> 2] | 0) == (HEAPU8[$next_input_byte$6$i315 >> 0] | 0)) {
        if (!$dec135$i) {
         if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
          $retval$0 = 0;
          label = 350;
          break L1;
         }
         $353 = HEAP32[$comp_info$i317 >> 2] | 0;
         $bytes_in_buffer$7$i321 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
         $next_input_byte$7$i320 = HEAP32[$303 >> 2] | 0;
        } else {
         $353 = $346;
         $bytes_in_buffer$7$i321 = $dec135$i;
         $next_input_byte$7$i320 = $incdec$ptr136$i;
        }
        $dec157$i = $bytes_in_buffer$7$i321 + -1 | 0;
        $incdec$ptr158$i = $next_input_byte$7$i320 + 1 | 0;
        if ((HEAP32[$353 >> 2] | 0) == (HEAPU8[$next_input_byte$7$i320 >> 0] | 0)) {
         if (!$dec157$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $358 = HEAP32[$comp_info$i317 >> 2] | 0;
          $bytes_in_buffer$8$i324 = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$8$i323 = HEAP32[$303 >> 2] | 0;
         } else {
          $358 = $353;
          $bytes_in_buffer$8$i324 = $dec157$i;
          $next_input_byte$8$i323 = $incdec$ptr158$i;
         }
         $dec181$i = $bytes_in_buffer$8$i324 + -1 | 0;
         $incdec$ptr182$i = $next_input_byte$8$i323 + 1 | 0;
         if ((HEAP32[$358 + 176 >> 2] | 0) != (HEAPU8[$next_input_byte$8$i323 >> 0] | 0)) {
          $bytes_in_buffer$24$i = $dec181$i;
          $next_input_byte$24$i = $incdec$ptr182$i;
          label = 335;
          break;
         }
         if (!$dec181$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$9$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$9$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$9$i = $dec181$i;
          $next_input_byte$9$i = $incdec$ptr182$i;
         }
         $dec205$i = $bytes_in_buffer$9$i + -1 | 0;
         $incdec$ptr206$i = $next_input_byte$9$i + 1 | 0;
         if ((HEAP8[$next_input_byte$9$i >> 0] | 0) != -128) {
          $bytes_in_buffer$24$i = $dec205$i;
          $next_input_byte$24$i = $incdec$ptr206$i;
          label = 335;
          break;
         }
         if (!$dec205$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$10$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$10$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$10$i = $dec205$i;
          $next_input_byte$10$i = $incdec$ptr206$i;
         }
         $dec226$i = $bytes_in_buffer$10$i + -1 | 0;
         $incdec$ptr227$i = $next_input_byte$10$i + 1 | 0;
         $shl229$i = HEAPU8[$next_input_byte$10$i >> 0] << 8;
         if (!$dec226$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$11$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$11$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$11$i = $dec226$i;
          $next_input_byte$11$i = $incdec$ptr227$i;
         }
         $dec241$i = $bytes_in_buffer$11$i + -1 | 0;
         $incdec$ptr242$i = $next_input_byte$11$i + 1 | 0;
         if ($shl229$i | HEAPU8[$next_input_byte$11$i >> 0] | 0) {
          $bytes_in_buffer$24$i = $dec241$i;
          $next_input_byte$24$i = $incdec$ptr242$i;
          label = 335;
          break;
         }
         if (!$dec241$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$12$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$12$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$12$i = $dec241$i;
          $next_input_byte$12$i = $incdec$ptr242$i;
         }
         $dec263$i = $bytes_in_buffer$12$i + -1 | 0;
         $incdec$ptr264$i = $next_input_byte$12$i + 1 | 0;
         $shl266$i = HEAPU8[$next_input_byte$12$i >> 0] << 8;
         if (!$dec263$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$13$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$13$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$13$i = $dec263$i;
          $next_input_byte$13$i = $incdec$ptr264$i;
         }
         $dec278$i = $bytes_in_buffer$13$i + -1 | 0;
         $incdec$ptr279$i = $next_input_byte$13$i + 1 | 0;
         if ($shl266$i | HEAPU8[$next_input_byte$13$i >> 0] | 0) {
          $bytes_in_buffer$24$i = $dec278$i;
          $next_input_byte$24$i = $incdec$ptr279$i;
          label = 335;
          break;
         }
         if (!$dec278$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$14$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$14$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$14$i = $dec278$i;
          $next_input_byte$14$i = $incdec$ptr279$i;
         }
         $dec300$i = $bytes_in_buffer$14$i + -1 | 0;
         $incdec$ptr301$i = $next_input_byte$14$i + 1 | 0;
         if (HEAP8[$next_input_byte$14$i >> 0] | 0) {
          $bytes_in_buffer$24$i = $dec300$i;
          $next_input_byte$24$i = $incdec$ptr301$i;
          label = 335;
          break;
         }
         if (!$dec300$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$15$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$15$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$15$i = $dec300$i;
          $next_input_byte$15$i = $incdec$ptr301$i;
         }
         $dec321$i = $bytes_in_buffer$15$i + -1 | 0;
         $incdec$ptr322$i = $next_input_byte$15$i + 1 | 0;
         $shl324$i = HEAPU8[$next_input_byte$15$i >> 0] << 8;
         if (!$dec321$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$16$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$16$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$16$i = $dec321$i;
          $next_input_byte$16$i = $incdec$ptr322$i;
         }
         $dec336$i = $bytes_in_buffer$16$i + -1 | 0;
         $incdec$ptr337$i = $next_input_byte$16$i + 1 | 0;
         if (($shl324$i | HEAPU8[$next_input_byte$16$i >> 0] | 0) != 1) {
          $bytes_in_buffer$24$i = $dec336$i;
          $next_input_byte$24$i = $incdec$ptr337$i;
          label = 335;
          break;
         }
         if (!$dec336$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$17$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$17$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$17$i = $dec336$i;
          $next_input_byte$17$i = $incdec$ptr337$i;
         }
         $dec358$i = $bytes_in_buffer$17$i + -1 | 0;
         $incdec$ptr359$i = $next_input_byte$17$i + 1 | 0;
         $shl361$i = HEAPU8[$next_input_byte$17$i >> 0] << 8;
         if (!$dec358$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$18$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$18$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$18$i = $dec358$i;
          $next_input_byte$18$i = $incdec$ptr359$i;
         }
         $dec373$i = $bytes_in_buffer$18$i + -1 | 0;
         $incdec$ptr374$i = $next_input_byte$18$i + 1 | 0;
         if ($shl361$i | HEAPU8[$next_input_byte$18$i >> 0] | 0) {
          $bytes_in_buffer$24$i = $dec373$i;
          $next_input_byte$24$i = $incdec$ptr374$i;
          label = 335;
          break;
         }
         if (!$dec373$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$19$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$19$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$19$i = $dec373$i;
          $next_input_byte$19$i = $incdec$ptr374$i;
         }
         $dec395$i = $bytes_in_buffer$19$i + -1 | 0;
         $incdec$ptr396$i = $next_input_byte$19$i + 1 | 0;
         if (HEAP8[$next_input_byte$19$i >> 0] | 0) {
          $bytes_in_buffer$24$i = $dec395$i;
          $next_input_byte$24$i = $incdec$ptr396$i;
          label = 335;
          break;
         }
         if (!$dec395$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$20$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$20$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$20$i = $dec395$i;
          $next_input_byte$20$i = $incdec$ptr396$i;
         }
         $dec416$i = $bytes_in_buffer$20$i + -1 | 0;
         $incdec$ptr417$i = $next_input_byte$20$i + 1 | 0;
         $shl419$i = HEAPU8[$next_input_byte$20$i >> 0] << 8;
         if (!$dec416$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$21$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$21$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$21$i = $dec416$i;
          $next_input_byte$21$i = $incdec$ptr417$i;
         }
         $dec431$i = $bytes_in_buffer$21$i + -1 | 0;
         $incdec$ptr432$i = $next_input_byte$21$i + 1 | 0;
         if (($shl419$i | HEAPU8[$next_input_byte$21$i >> 0] | 0) != 1) {
          $bytes_in_buffer$24$i = $dec431$i;
          $next_input_byte$24$i = $incdec$ptr432$i;
          label = 335;
          break;
         }
         if (!$dec431$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$22$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$22$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$22$i = $dec431$i;
          $next_input_byte$22$i = $incdec$ptr432$i;
         }
         $dec453$i = $bytes_in_buffer$22$i + -1 | 0;
         $incdec$ptr454$i = $next_input_byte$22$i + 1 | 0;
         $shl456$i = HEAPU8[$next_input_byte$22$i >> 0] << 8;
         if (!$dec453$i) {
          if (!(FUNCTION_TABLE_ii[HEAP32[$303 + 12 >> 2] & 127]($cinfo) | 0)) {
           $retval$0 = 0;
           label = 350;
           break L1;
          }
          $bytes_in_buffer$23$i = HEAP32[$bytes_in_buffer2$i271 >> 2] | 0;
          $next_input_byte$23$i = HEAP32[$303 >> 2] | 0;
         } else {
          $bytes_in_buffer$23$i = $dec453$i;
          $next_input_byte$23$i = $incdec$ptr454$i;
         }
         $dec468$i = $bytes_in_buffer$23$i + -1 | 0;
         $incdec$ptr469$i = $next_input_byte$23$i + 1 | 0;
         if (!($shl456$i | HEAPU8[$next_input_byte$23$i >> 0])) {
          $bytes_in_buffer$25$i = $dec468$i;
          $next_input_byte$25$i = $incdec$ptr469$i;
         } else {
          $bytes_in_buffer$24$i = $dec468$i;
          $next_input_byte$24$i = $incdec$ptr469$i;
          label = 335;
         }
        } else {
         $bytes_in_buffer$24$i = $dec157$i;
         $next_input_byte$24$i = $incdec$ptr158$i;
         label = 335;
        }
       } else {
        $bytes_in_buffer$24$i = $dec135$i;
        $next_input_byte$24$i = $incdec$ptr136$i;
        label = 335;
       }
      } else {
       $bytes_in_buffer$24$i = $dec114$i;
       $next_input_byte$24$i = $incdec$ptr115$i;
       label = 335;
      }
     } else {
      $bytes_in_buffer$24$i = $dec92$i;
      $next_input_byte$24$i = $incdec$ptr93$i;
      label = 335;
     }
    } else {
     $bytes_in_buffer$24$i = $305;
     $next_input_byte$24$i = $304;
     label = 335;
    } while (0);
    if ((label | 0) == 335) {
     label = 0;
     $420 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$420 + 20 >> 2] = 28;
     FUNCTION_TABLE_vi[HEAP32[$420 >> 2] & 255]($cinfo);
     $bytes_in_buffer$25$i = $bytes_in_buffer$24$i;
     $next_input_byte$25$i = $next_input_byte$24$i;
    }
    HEAP32[$color_transform$i >> 2] = 1;
    HEAP32[$303 >> 2] = $next_input_byte$25$i;
    HEAP32[$bytes_in_buffer2$i271 >> 2] = $bytes_in_buffer$25$i;
    break;
   }
  case 239:
  case 238:
  case 237:
  case 236:
  case 235:
  case 234:
  case 233:
  case 232:
  case 231:
  case 230:
  case 229:
  case 228:
  case 227:
  case 226:
  case 225:
  case 224:
   {
    if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$marker >> 2] | 0) + 32 + ($16 + -224 << 2) >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 254:
   {
    if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$marker >> 2] | 0) + 28 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 350;
     break L1;
    }
    break;
   }
  case 1:
  case 215:
  case 214:
  case 213:
  case 212:
  case 211:
  case 210:
  case 209:
  case 208:
   {
    $426 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$426 + 20 >> 2] = 94;
    HEAP32[$426 + 24 >> 2] = $16;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    break;
   }
  case 220:
   {
    $429 = HEAP32[$src$i >> 2] | 0;
    $bytes_in_buffer2$i331 = $429 + 4 | 0;
    $430 = HEAP32[$bytes_in_buffer2$i331 >> 2] | 0;
    if (!$430) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$429 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$0$i338 = HEAP32[$bytes_in_buffer2$i331 >> 2] | 0;
    } else $bytes_in_buffer$0$i338 = $430;
    $next_input_byte$0$i339 = HEAP32[$429 >> 2] | 0;
    $dec$i340 = $bytes_in_buffer$0$i338 + -1 | 0;
    $incdec$ptr$i341 = $next_input_byte$0$i339 + 1 | 0;
    $shl$i343 = HEAPU8[$next_input_byte$0$i339 >> 0] << 8;
    if (!$dec$i340) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$429 + 12 >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break L1;
     }
     $bytes_in_buffer$1$i352 = HEAP32[$bytes_in_buffer2$i331 >> 2] | 0;
     $next_input_byte$1$i351 = HEAP32[$429 >> 2] | 0;
    } else {
     $bytes_in_buffer$1$i352 = $dec$i340;
     $next_input_byte$1$i351 = $incdec$ptr$i341;
    }
    $add$i356 = $shl$i343 | HEAPU8[$next_input_byte$1$i351 >> 0];
    $sub$i357 = $add$i356 + -2 | 0;
    $438 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$438 + 20 >> 2] = 93;
    HEAP32[$438 + 24 >> 2] = HEAP32[$unread_marker >> 2];
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $sub$i357;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    HEAP32[$429 >> 2] = $next_input_byte$1$i351 + 1;
    HEAP32[$bytes_in_buffer2$i331 >> 2] = $bytes_in_buffer$1$i352 + -1;
    if ($add$i356 >>> 0 > 2) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$src$i >> 2] | 0) + 16 >> 2] & 255]($cinfo, $sub$i357);
    break;
   }
  default:
   {
    $445 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$445 + 20 >> 2] = 70;
    HEAP32[$445 + 24 >> 2] = $16;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
  } while (0);
  HEAP32[$unread_marker >> 2] = 0;
  $0 = 0;
 }
 if ((label | 0) == 25) {
  $26 = HEAP32[$src$i >> 2] | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $bytes_in_buffer2$i51 = $26 + 4 | 0;
  $28 = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
  if (!(HEAP32[(HEAP32[$marker >> 2] | 0) + 16 >> 2] | 0)) {
   $31 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$31 + 20 >> 2] = 60;
   _strncpy($31 + 24 | 0, 27678, 80) | 0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
  do if (!$28) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$0$i62 = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $next_input_byte$0$i61 = HEAP32[$26 >> 2] | 0;
   break;
  } else {
   $bytes_in_buffer$0$i62 = $28;
   $next_input_byte$0$i61 = $27;
  } while (0);
  $dec$i63 = $bytes_in_buffer$0$i62 + -1 | 0;
  $incdec$ptr$i64 = $next_input_byte$0$i61 + 1 | 0;
  $shl$i = HEAPU8[$next_input_byte$0$i61 >> 0] << 8;
  do if (!$dec$i63) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$1$i67 = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $next_input_byte$1$i66 = HEAP32[$26 >> 2] | 0;
   break;
  } else {
   $bytes_in_buffer$1$i67 = $dec$i63;
   $next_input_byte$1$i66 = $incdec$ptr$i64;
  } while (0);
  $dec24$i = $bytes_in_buffer$1$i67 + -1 | 0;
  $incdec$ptr25$i = $next_input_byte$1$i66 + 1 | 0;
  $add$i = $shl$i | HEAPU8[$next_input_byte$1$i66 >> 0];
  do if (!$dec24$i) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$2$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $next_input_byte$2$i = HEAP32[$26 >> 2] | 0;
   break;
  } else {
   $bytes_in_buffer$2$i = $dec24$i;
   $next_input_byte$2$i = $incdec$ptr25$i;
  } while (0);
  $45 = HEAP8[$next_input_byte$2$i >> 0] | 0;
  $conv41$i = $45 & 255;
  $46 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$46 + 20 >> 2] = 105;
  HEAP32[$46 + 24 >> 2] = $conv41$i;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
  do if (!(($45 & 255) > 4 | ($add$i | 0) != (($conv41$i << 1) + 6 | 0))) {
   if ($45 << 24 >> 24) {
    HEAP32[$cinfo + 340 >> 2] = $conv41$i;
    $bytes_in_buffer$3168194$i = $bytes_in_buffer$2$i + -1 | 0;
    $bytes_in_buffer$3168198$i = $bytes_in_buffer$3168194$i;
    $cmp68171201$i = ($bytes_in_buffer$3168194$i | 0) == 0;
    $next_input_byte$3169199$i = $next_input_byte$2$i + 1 | 0;
    label = 42;
    break;
   }
   if (HEAP32[$cinfo + 224 >> 2] | 0) {
    HEAP32[$cinfo + 340 >> 2] = $conv41$i;
    $bytes_in_buffer$3168187$i = $bytes_in_buffer$2$i + -1 | 0;
    if (!$bytes_in_buffer$3168187$i) {
     $cmp65170191203$i = 1;
     label = 64;
    } else {
     $bytes_in_buffer$6$i = $bytes_in_buffer$3168187$i;
     $cmp65170191202$i = 1;
     $next_input_byte$6$i = $next_input_byte$2$i + 1 | 0;
    }
   } else label = 41;
  } else label = 41; while (0);
  if ((label | 0) == 41) {
   $50 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$50 + 20 >> 2] = 12;
   FUNCTION_TABLE_vi[HEAP32[$50 >> 2] & 255]($cinfo);
   HEAP32[$cinfo + 340 >> 2] = $conv41$i;
   $bytes_in_buffer$3168$i = $bytes_in_buffer$2$i + -1 | 0;
   $next_input_byte$3169$i = $next_input_byte$2$i + 1 | 0;
   $cmp68171$i = ($bytes_in_buffer$3168$i | 0) == 0;
   if (!($45 << 24 >> 24)) {
    $bytes_in_buffer$3$lcssa$i = $bytes_in_buffer$3168$i;
    $cmp65170191$i = 1;
    $cmp68$lcssa$i = $cmp68171$i;
    $next_input_byte$3$lcssa$i = $next_input_byte$3169$i;
    label = 63;
   } else {
    $bytes_in_buffer$3168198$i = $bytes_in_buffer$3168$i;
    $cmp68171201$i = $cmp68171$i;
    $next_input_byte$3169199$i = $next_input_byte$3169$i;
    label = 42;
   }
  }
  L436 : do if ((label | 0) == 42) {
   $fill_input_buffer71$i = $26 + 12 | 0;
   $arrayidx93$i = $cinfo + 344 | 0;
   $bytes_in_buffer$3176$i = $bytes_in_buffer$3168198$i;
   $cmp68178$i = $cmp68171201$i;
   $i$0172$i = 0;
   $next_input_byte$3177$i = $next_input_byte$3169199$i;
   while (1) {
    if ($cmp68178$i) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer71$i >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break;
     }
     $bytes_in_buffer$4$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
     $next_input_byte$4$i = HEAP32[$26 >> 2] | 0;
    } else {
     $bytes_in_buffer$4$i = $bytes_in_buffer$3176$i;
     $next_input_byte$4$i = $next_input_byte$3177$i;
    }
    $dec79$i = $bytes_in_buffer$4$i + -1 | 0;
    $incdec$ptr80$i = $next_input_byte$4$i + 1 | 0;
    $conv81$i = HEAPU8[$next_input_byte$4$i >> 0] | 0;
    L444 : do if (!$i$0172$i) $c$2$i = $conv81$i; else {
     $ci$0160$i = 0;
     while (1) {
      if ((HEAP32[HEAP32[$cinfo + 344 + ($ci$0160$i << 2) >> 2] >> 2] | 0) == ($conv81$i | 0)) break;
      $ci$0160$i = $ci$0160$i + 1 | 0;
      if ($ci$0160$i >>> 0 >= $i$0172$i >>> 0) {
       $c$2$i = $conv81$i;
       break L444;
      }
     }
     $59 = HEAP32[HEAP32[$arrayidx93$i >> 2] >> 2] | 0;
     if ($i$0172$i >>> 0 > 1) {
      $c$0163$i = $59;
      $ci$1162$i = 1;
      while (1) {
       $61 = HEAP32[HEAP32[$cinfo + 344 + ($ci$1162$i << 2) >> 2] >> 2] | 0;
       $spec$select$i = ($61 | 0) > ($c$0163$i | 0) ? $61 : $c$0163$i;
       $ci$1162$i = $ci$1162$i + 1 | 0;
       if (($ci$1162$i | 0) == ($i$0172$i | 0)) {
        $c$0$lcssa$i = $spec$select$i;
        break;
       } else $c$0163$i = $spec$select$i;
      }
     } else $c$0$lcssa$i = $59;
     $c$2$i = $c$0$lcssa$i + 1 | 0;
    } while (0);
    $62 = HEAP32[$comp_info$i317 >> 2] | 0;
    $63 = HEAP32[$num_components$i282 >> 2] | 0;
    L456 : do if (($63 | 0) > 0) {
     $ci$2165$i = 0;
     $compptr$0166$i = $62;
     while (1) {
      if (($c$2$i | 0) == (HEAP32[$compptr$0166$i >> 2] | 0)) {
       $compptr$0155$i = $compptr$0166$i;
       break L456;
      }
      $ci$2165$i = $ci$2165$i + 1 | 0;
      $incdec$ptr123$i = $compptr$0166$i + 88 | 0;
      if (($ci$2165$i | 0) >= ($63 | 0)) {
       $compptr$0$lcssa$i = $incdec$ptr123$i;
       label = 58;
       break;
      } else $compptr$0166$i = $incdec$ptr123$i;
     }
    } else {
     $compptr$0$lcssa$i = $62;
     label = 58;
    } while (0);
    if ((label | 0) == 58) {
     label = 0;
     $65 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$65 + 20 >> 2] = 4;
     HEAP32[$65 + 24 >> 2] = $c$2$i;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
     $compptr$0155$i = $compptr$0$lcssa$i;
    }
    HEAP32[$cinfo + 344 + ($i$0172$i << 2) >> 2] = $compptr$0155$i;
    if (!$dec79$i) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer71$i >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 350;
      break;
     }
     $bytes_in_buffer$5$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
     $next_input_byte$5$i = HEAP32[$26 >> 2] | 0;
    } else {
     $bytes_in_buffer$5$i = $dec79$i;
     $next_input_byte$5$i = $incdec$ptr80$i;
    }
    $conv149$i = HEAPU8[$next_input_byte$5$i >> 0] | 0;
    $dc_tbl_no$i = $compptr$0155$i + 20 | 0;
    HEAP32[$dc_tbl_no$i >> 2] = $conv149$i >>> 4;
    $ac_tbl_no$i = $compptr$0155$i + 24 | 0;
    HEAP32[$ac_tbl_no$i >> 2] = $conv149$i & 15;
    $73 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$73 + 24 >> 2] = HEAP32[$compptr$0155$i >> 2];
    HEAP32[$73 + 28 >> 2] = HEAP32[$dc_tbl_no$i >> 2];
    HEAP32[$73 + 32 >> 2] = HEAP32[$ac_tbl_no$i >> 2];
    HEAP32[$73 + 20 >> 2] = 106;
    FUNCTION_TABLE_vii[HEAP32[$73 + 4 >> 2] & 255]($cinfo, 1);
    $i$0172$i = $i$0172$i + 1 | 0;
    $bytes_in_buffer$3$i = $bytes_in_buffer$5$i + -1 | 0;
    $next_input_byte$3$i = $next_input_byte$5$i + 1 | 0;
    $cmp68$i = ($bytes_in_buffer$3$i | 0) == 0;
    if ($i$0172$i >>> 0 >= $conv41$i >>> 0) {
     $bytes_in_buffer$3$lcssa$i = $bytes_in_buffer$3$i;
     $cmp65170191$i = 0;
     $cmp68$lcssa$i = $cmp68$i;
     $next_input_byte$3$lcssa$i = $next_input_byte$3$i;
     label = 63;
     break L436;
    } else {
     $bytes_in_buffer$3176$i = $bytes_in_buffer$3$i;
     $cmp68178$i = $cmp68$i;
     $next_input_byte$3177$i = $next_input_byte$3$i;
    }
   }
   if ((label | 0) == 350) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } while (0);
  if ((label | 0) == 63) if ($cmp68$lcssa$i) {
   $cmp65170191203$i = $cmp65170191$i;
   label = 64;
  } else {
   $bytes_in_buffer$6$i = $bytes_in_buffer$3$lcssa$i;
   $cmp65170191202$i = $cmp65170191$i;
   $next_input_byte$6$i = $next_input_byte$3$lcssa$i;
  }
  do if ((label | 0) == 64) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$6$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $cmp65170191202$i = $cmp65170191203$i;
   $next_input_byte$6$i = HEAP32[$26 >> 2] | 0;
   break;
  } while (0);
  $dec185$i = $bytes_in_buffer$6$i + -1 | 0;
  $incdec$ptr186$i = $next_input_byte$6$i + 1 | 0;
  $Ss$i = $cinfo + 412 | 0;
  HEAP32[$Ss$i >> 2] = HEAPU8[$next_input_byte$6$i >> 0];
  do if (!$dec185$i) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$7$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $next_input_byte$7$i = HEAP32[$26 >> 2] | 0;
   break;
  } else {
   $bytes_in_buffer$7$i = $dec185$i;
   $next_input_byte$7$i = $incdec$ptr186$i;
  } while (0);
  $dec202$i = $bytes_in_buffer$7$i + -1 | 0;
  $incdec$ptr203$i = $next_input_byte$7$i + 1 | 0;
  $Se$i = $cinfo + 416 | 0;
  HEAP32[$Se$i >> 2] = HEAPU8[$next_input_byte$7$i >> 0];
  do if (!$dec202$i) if (!(FUNCTION_TABLE_ii[HEAP32[$26 + 12 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $bytes_in_buffer$8$i = HEAP32[$bytes_in_buffer2$i51 >> 2] | 0;
   $next_input_byte$8$i = HEAP32[$26 >> 2] | 0;
   break;
  } else {
   $bytes_in_buffer$8$i = $dec202$i;
   $next_input_byte$8$i = $incdec$ptr203$i;
  } while (0);
  $conv221$i = HEAPU8[$next_input_byte$8$i >> 0] | 0;
  $Ah$i = $cinfo + 420 | 0;
  HEAP32[$Ah$i >> 2] = $conv221$i >>> 4;
  $Al$i = $cinfo + 424 | 0;
  HEAP32[$Al$i >> 2] = $conv221$i & 15;
  $91 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$91 + 24 >> 2] = HEAP32[$Ss$i >> 2];
  HEAP32[$91 + 28 >> 2] = HEAP32[$Se$i >> 2];
  HEAP32[$91 + 32 >> 2] = HEAP32[$Ah$i >> 2];
  HEAP32[$91 + 36 >> 2] = HEAP32[$Al$i >> 2];
  HEAP32[$91 + 20 >> 2] = 107;
  FUNCTION_TABLE_vii[HEAP32[$91 + 4 >> 2] & 255]($cinfo, 1);
  HEAP32[(HEAP32[$marker >> 2] | 0) + 20 >> 2] = 0;
  if (!$cmp65170191202$i) {
   $input_scan_number$i = $cinfo + 144 | 0;
   HEAP32[$input_scan_number$i >> 2] = (HEAP32[$input_scan_number$i >> 2] | 0) + 1;
  }
  HEAP32[$26 >> 2] = $next_input_byte$8$i + 1;
  HEAP32[$bytes_in_buffer2$i51 >> 2] = $bytes_in_buffer$8$i + -1;
  HEAP32[$unread_marker >> 2] = 0;
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 75) {
  $99 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$99 + 20 >> 2] = 87;
  FUNCTION_TABLE_vii[HEAP32[$99 + 4 >> 2] & 255]($cinfo, 1);
  HEAP32[$unread_marker >> 2] = 0;
  $retval$0 = 2;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 174) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 350) {
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($this) {
 $this = $this | 0;
 var $0 = 0, $Ex = 0, $Global = 0, $Names = 0, $Names297 = 0, $Names684 = 0, $Names745 = 0, $RHS538 = 0, $agg$tmp = 0, $agg$tmp121 = 0, $agg$tmp127 = 0, $agg$tmp170 = 0, $agg$tmp225 = 0, $agg$tmp231 = 0, $agg$tmp242 = 0, $agg$tmp248 = 0, $agg$tmp254 = 0, $agg$tmp265 = 0, $agg$tmp271 = 0, $agg$tmp30 = 0, $agg$tmp327 = 0, $agg$tmp333 = 0, $agg$tmp339 = 0, $agg$tmp345 = 0, $agg$tmp356 = 0, $agg$tmp36 = 0, $agg$tmp362 = 0, $agg$tmp368 = 0, $agg$tmp374 = 0, $agg$tmp382 = 0, $agg$tmp405 = 0, $agg$tmp411 = 0, $agg$tmp417 = 0, $agg$tmp42 = 0, $agg$tmp442 = 0, $agg$tmp448 = 0, $agg$tmp454 = 0, $agg$tmp465 = 0, $agg$tmp471 = 0, $agg$tmp477 = 0, $agg$tmp48 = 0, $agg$tmp485 = 0, $agg$tmp500 = 0, $agg$tmp54 = 0, $agg$tmp575 = 0, $agg$tmp581 = 0, $agg$tmp587 = 0, $agg$tmp593 = 0, $agg$tmp593$byval_copy = 0, $call100 = 0, $call101 = 0, $call105 = 0, $call108 = 0, $call120 = 0, $call126 = 0, $call142 = 0, $call152 = 0, $call153 = 0, $call159 = 0, $call169 = 0, $call177 = 0, $call190 = 0, $call191 = 0, $call196 = 0, $call207 = 0, $call208 = 0, $call214 = 0, $call224 = 0, $call230 = 0, $call241 = 0, $call247 = 0, $call253 = 0, $call264 = 0, $call270 = 0, $call281 = 0, $call282 = 0, $call287 = 0, $call29 = 0, $call298 = 0, $call305 = 0, $call326 = 0, $call332 = 0, $call338 = 0, $call344 = 0, $call35 = 0, $call355 = 0, $call361 = 0, $call367 = 0, $call373 = 0, $call381 = 0, $call387 = 0, $call404 = 0, $call41 = 0, $call410 = 0, $call416 = 0, $call424 = 0, $call441 = 0, $call447 = 0, $call453 = 0, $call464 = 0, $call47 = 0, $call470 = 0, $call476 = 0, $call484 = 0, $call490 = 0, $call499 = 0, $call505 = 0, $call506 = 0, $call511 = 0, $call527 = 0, $call528 = 0, $call53 = 0, $call534 = 0, $call540 = 0, $call557 = 0, $call558 = 0, $call564 = 0, $call574 = 0, $call580 = 0, $call586 = 0, $call592 = 0, $call60 = 0, $call604 = 0, $call605 = 0, $call611 = 0, $call622 = 0, $call636 = 0, $call647 = 0, $call662 = 0, $call673 = 0, $call685 = 0, $call691 = 0, $call70 = 0, $call701 = 0, $call718 = 0, $call729 = 0, $call739 = 0, $call740 = 0, $call746 = 0, $call753 = 0, $call775 = 0, $call84 = 0, $call85 = 0, $call90 = 0, $frombool = 0, $retval$0 = 0, $retval$1 = 0, $retval$10 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$15 = 0, $retval$16 = 0, $retval$17 = 0, $retval$2 = 0, $retval$21 = 0, $retval$22 = 0, $retval$23 = 0, $retval$24 = 0, $retval$25 = 0, $retval$26 = 0, $retval$27 = 0, $retval$28 = 0, $retval$29 = 0, $retval$3 = 0, $retval$30 = 0, $retval$31 = 0, $retval$32 = 0, $retval$33 = 0, $retval$34 = 0, $retval$35 = 0, $retval$36 = 0, $retval$37 = 0, $retval$42 = 0, $retval$43 = 0, $retval$47 = 0, $retval$48 = 0, $retval$49 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp593$byval_copy = sp + 336 | 0;
 $Global = sp + 344 | 0;
 $agg$tmp = sp + 328 | 0;
 $agg$tmp30 = sp + 320 | 0;
 $agg$tmp36 = sp + 312 | 0;
 $agg$tmp42 = sp + 304 | 0;
 $agg$tmp48 = sp + 296 | 0;
 $agg$tmp54 = sp + 288 | 0;
 $Ex = sp + 8 | 0;
 $agg$tmp121 = sp + 280 | 0;
 $agg$tmp127 = sp + 272 | 0;
 $agg$tmp170 = sp + 264 | 0;
 $agg$tmp225 = sp + 256 | 0;
 $agg$tmp231 = sp + 248 | 0;
 $agg$tmp242 = sp + 240 | 0;
 $agg$tmp248 = sp + 232 | 0;
 $agg$tmp254 = sp + 224 | 0;
 $agg$tmp265 = sp + 216 | 0;
 $agg$tmp271 = sp + 208 | 0;
 $agg$tmp327 = sp + 200 | 0;
 $agg$tmp333 = sp + 192 | 0;
 $agg$tmp339 = sp + 184 | 0;
 $agg$tmp345 = sp + 176 | 0;
 $agg$tmp356 = sp + 168 | 0;
 $agg$tmp362 = sp + 160 | 0;
 $agg$tmp368 = sp + 152 | 0;
 $agg$tmp374 = sp + 144 | 0;
 $agg$tmp382 = sp + 136 | 0;
 $agg$tmp405 = sp + 128 | 0;
 $agg$tmp411 = sp + 120 | 0;
 $agg$tmp417 = sp + 112 | 0;
 $agg$tmp442 = sp + 104 | 0;
 $agg$tmp448 = sp + 96 | 0;
 $agg$tmp454 = sp + 88 | 0;
 $agg$tmp465 = sp + 80 | 0;
 $agg$tmp471 = sp + 72 | 0;
 $agg$tmp477 = sp + 64 | 0;
 $agg$tmp485 = sp + 56 | 0;
 $agg$tmp500 = sp + 48 | 0;
 $RHS538 = sp;
 $agg$tmp575 = sp + 40 | 0;
 $agg$tmp581 = sp + 32 | 0;
 $agg$tmp587 = sp + 24 | 0;
 $agg$tmp593 = sp + 16 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29638);
 HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 $frombool = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp593$byval_copy) | 0) & 1;
 HEAP8[$Global >> 0] = $frombool;
 L1 : do if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 2) $retval$49 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  do switch (HEAP8[$0 >> 0] | 0) {
  case 76:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  case 102:
   {
    switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
    case 112:
     {
      label = 7;
      break;
     }
    case 76:
     {
      if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 2) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) label = 7; else label = 8;
      break;
     }
    default:
     label = 8;
    }
    if ((label | 0) == 7) {
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     break L1;
    } else if ((label | 0) == 8) {
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     break L1;
    }
    break;
   }
  case 97:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 97:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp30, 28945);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp30 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp30 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call29, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 100:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp36, 28943);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp36 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp36 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call35, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 110:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call41 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 28943);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call41, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 78:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call47 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp48, 29641);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp48 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call47, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call53 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp54, 29644);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp54 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call53, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call60 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call60;
      if (!$call60) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29646, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$0;
      break L1;
      break;
     }
    case 122:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call70 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call70;
      if (!$call70) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29646, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$1;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call84 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call85 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call84) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call85;
      if (!$call85) $retval$3 = 0; else {
       $call90 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call84) | 0;
       HEAP32[$Ex >> 2] = $call90;
       if (!$call90) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$3 = $retval$2;
      }
      $retval$49 = $retval$3;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call100 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call101 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call101;
      do if ($call101) {
       $Names = $this + 8 | 0;
       $call105 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
       while (1) {
        if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
         label = 33;
         break;
        }
        $call108 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100) | 0;
        HEAP32[$Ex >> 2] = $call108;
        if (!$call108) {
         label = 31;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Ex);
       }
       if ((label | 0) == 31) {
        $retval$7 = 0;
        break;
       } else if ((label | 0) == 33) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call105);
        $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
        break;
       }
      } else $retval$7 = 0; while (0);
      $retval$49 = $retval$7;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call120 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp121, 29656);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp121 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp121 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call120, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call126 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 29658);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp127 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp127 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call126, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 118:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 97:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call142 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call142;
      if (!$call142) $retval$8 = 0; else {
       HEAP8[$Ex >> 0] = 1;
       $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Global, $Ex) | 0;
      }
      $retval$49 = $retval$8;
      break L1;
      break;
     }
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call152 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call153 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call152) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call153;
      if (!$call153) $retval$10 = 0; else {
       $call159 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call152) | 0;
       HEAP32[$Ex >> 2] = $call159;
       if (!$call159) $retval$9 = 0; else $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$10 = $retval$9;
      }
      $retval$49 = $retval$10;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call169 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp170, 29010);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp170 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp170 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call169, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call177 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call177;
      if (!$call177) $retval$11 = 0; else {
       HEAP8[$Ex >> 0] = 0;
       $retval$11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Global, $Ex) | 0;
      }
      $retval$49 = $retval$11;
      break L1;
      break;
     }
    case 110:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call190 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call191 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call191;
      if (!$call191) $retval$13 = 0; else {
       $call196 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190) | 0;
       HEAP32[$Ex >> 2] = $call196;
       if (!$call196) $retval$12 = 0; else $retval$12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, 29660, $Ex) | 0;
       $retval$13 = $retval$12;
      }
      $retval$49 = $retval$13;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call207 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call208 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call208;
      if (!$call208) $retval$15 = 0; else {
       $call214 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207) | 0;
       HEAP32[$Ex >> 2] = $call214;
       if (!$call214) $retval$14 = 0; else $retval$14 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$15 = $retval$14;
      }
      $retval$49 = $retval$15;
      break L1;
      break;
     }
    case 118:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call224 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp225, 29663);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp225 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp225 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call224, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 86:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call230 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp231, 29665);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp231 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp231 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call230, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call241 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp242, 29668);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp242 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp242 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call241, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 79:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call247 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp248, 29670);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp248 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp248 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call247, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 113:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call253 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp254, 29673);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp254 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp254 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call253, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call264 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp265, 29676);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp265 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp265 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call264, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call270 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp271, 29016);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp271 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp271 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call270, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 120:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call281 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call282 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call282;
      if (!$call282) $retval$17 = 0; else {
       $call287 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281) | 0;
       HEAP32[$Ex >> 2] = $call287;
       if (!$call287) $retval$16 = 0; else $retval$16 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$17 = $retval$16;
      }
      $retval$49 = $retval$17;
      break L1;
      break;
     }
    case 108:
     break;
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    HEAP32[$this >> 2] = $0 + 2;
    $Names297 = $this + 8 | 0;
    $call298 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names297) | 0;
    while (1) {
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 82;
      break;
     }
     $call305 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$agg$tmp593$byval_copy >> 2] = $call305;
     if (!$call305) {
      label = 81;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names297, $agg$tmp593$byval_copy);
    }
    if ((label | 0) == 81) {
     $retval$49 = 0;
     break L1;
    } else if ((label | 0) == 82) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call298);
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
     break L1;
    }
    break;
   }
  case 108:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call326 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp327, 29679);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp327 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp327 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call326, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call332 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp333, 29682);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp333 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp333 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call332, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call338 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp339, 29685);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp339 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp339 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call338, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call344 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp345, 29123);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp345 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp345 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call344, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 105:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call355 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp356, 29528);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp356 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp356 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call355, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 73:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call361 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp362, 29689);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp362 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp362 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call361, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call367 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp368, 29010);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp368 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp368 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call367, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call373 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp374, 29692);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp374 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp374 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call373, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call381 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp382, 29695);
       HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp382 >> 2];
       HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp382 + 4 >> 2];
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call381, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      $call387 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call387;
      if (!$call387) $retval$21 = 0; else $retval$21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $agg$tmp593$byval_copy, 29695) | 0;
      $retval$49 = $retval$21;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 119:
    case 97:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call404 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp405, 29698);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp405 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp405 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call404, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 103:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call410 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp411, 29528);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp411 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp411 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call410, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call416 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp417, 29701);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp417 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp417 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call416, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 120:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call424 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call424;
      if (!$call424) $retval$22 = 0; else $retval$22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$22;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 110:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call441 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp442, 29703);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp442 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp442 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call441, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call447 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp448, 29706);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp448 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp448 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call447, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 82:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call453 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp454, 29708);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp454 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp454 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call453, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call464 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp465, 29711);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp465 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp465 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call464, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call470 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp471, 29715);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp471 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp471 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call470, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call476 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp477, 29717);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp477 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp477 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call476, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 112:
     {
      HEAP32[$this >> 2] = $0 + 2;
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call484 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp485, 29720);
       HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp485 >> 2];
       HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp485 + 4 >> 2];
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call484, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      $call490 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call490;
      if (!$call490) $retval$23 = 0; else $retval$23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $agg$tmp593$byval_copy, 29720) | 0;
      $retval$49 = $retval$23;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call499 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp500, 29715);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp500 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp500 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call499, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call505 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call506 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call506;
      if (!$call506) $retval$25 = 0; else {
       $call511 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505) | 0;
       HEAP32[$Ex >> 2] = $call511;
       if (!$call511) $retval$24 = 0; else $retval$24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, 29723, $Ex) | 0;
       $retval$25 = $retval$24;
      }
      $retval$49 = $retval$25;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$0 + 1 >> 0] | 0) != 117) {
     $retval$49 = 0;
     break L1;
    }
    HEAP32[$this >> 2] = $0 + 2;
    $call527 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call528 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
    HEAP32[$agg$tmp593$byval_copy >> 2] = $call528;
    if (!$call528) $retval$28 = 0; else {
     $call534 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
     HEAP32[$Ex >> 2] = $call534;
     if (!$call534) $retval$27 = 0; else {
      $call540 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
      HEAP32[$RHS538 >> 2] = $call540;
      if (!$call540) $retval$26 = 0; else $retval$26 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex, $RHS538) | 0;
      $retval$27 = $retval$26;
     }
     $retval$28 = $retval$27;
    }
    $retval$49 = $retval$28;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call557 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call558 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call557) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call558;
      if (!$call558) $retval$30 = 0; else {
       $call564 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call557) | 0;
       HEAP32[$Ex >> 2] = $call564;
       if (!$call564) $retval$29 = 0; else $retval$29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$30 = $retval$29;
      }
      $retval$49 = $retval$30;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call574 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp575, 29726);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp575 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp575 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call574, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 77:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call580 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp581, 29728);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp581 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp581 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call580, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call586 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp587, 29731);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp587 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp587 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call586, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call592 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp593, 29734);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp593 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp593 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call592, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call604 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call605 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call604) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call605;
      if (!$call605) $retval$32 = 0; else {
       $call611 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call604) | 0;
       HEAP32[$Ex >> 2] = $call611;
       if (!$call611) $retval$31 = 0; else $retval$31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$32 = $retval$31;
      }
      $retval$49 = $retval$32;
      break L1;
      break;
     }
    case 112:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call622 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call622;
      if (!$call622) $retval$33 = 0; else $retval$33 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$33;
      break L1;
      break;
     }
    case 114:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call636 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call636;
      if (!$call636) $retval$34 = 0; else $retval$34 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29738, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$34;
      break L1;
      break;
     }
    case 122:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call647 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call647;
      if (!$call647) $retval$35 = 0; else $retval$35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29738, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$35;
      break L1;
      break;
     }
    case 90:
     {
      HEAP32[$this >> 2] = $0 + 2;
      switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
      case 84:
       {
        $call662 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
        HEAP32[$agg$tmp593$byval_copy >> 2] = $call662;
        if (!$call662) $retval$36 = 0; else $retval$36 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
        $retval$49 = $retval$36;
        break L1;
        break;
       }
      case 102:
       {
        $call673 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
        HEAP32[$agg$tmp593$byval_copy >> 2] = $call673;
        if (!$call673) $retval$37 = 0; else $retval$37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
        $retval$49 = $retval$37;
        break L1;
        break;
       }
      default:
       {
        $retval$49 = 0;
        break L1;
       }
      }
      break;
     }
    case 80:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $Names684 = $this + 8 | 0;
      $call685 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names684) | 0;
      while (1) {
       if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
        label = 172;
        break;
       }
       $call691 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
       HEAP32[$agg$tmp593$byval_copy >> 2] = $call691;
       if (!$call691) {
        label = 171;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names684, $agg$tmp593$byval_copy);
      }
      if ((label | 0) == 171) {
       $retval$49 = 0;
       break L1;
      } else if ((label | 0) == 172) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call685);
       $call701 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $Ex) | 0;
       HEAP32[$agg$tmp593$byval_copy >> 2] = $call701;
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call718 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call718;
      if (!$call718) $retval$42 = 0; else $retval$42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29747, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$42;
      break L1;
      break;
     }
    case 105:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call729 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call729;
      if (!$call729) $retval$43 = 0; else $retval$43 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 29747, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$43;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call739 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call740 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call739) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call740;
      do if ($call740) {
       $Names745 = $this + 8 | 0;
       $call746 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names745) | 0;
       while (1) {
        if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
         label = 186;
         break;
        }
        $call753 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call739) | 0;
        HEAP32[$Ex >> 2] = $call753;
        if (!$call753) {
         label = 185;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names745, $Ex);
       }
       if ((label | 0) == 185) {
        $retval$47 = 0;
        break;
       } else if ((label | 0) == 186) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call746);
        $retval$47 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
        break;
       }
      } else $retval$47 = 0; while (0);
      $retval$49 = $retval$47;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 29756) | 0;
      break L1;
      break;
     }
    case 119:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call775 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call775;
      if (!$call775) $retval$48 = 0; else $retval$48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$48;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  default:
   {
    $retval$49 = 0;
    break L1;
   }
  } while (0);
 } while (0);
 STACKTOP = sp;
 return $retval$49 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0, $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0, $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i188 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i164 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i145 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i174 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i56$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond5$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i190 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i146 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i159 = 0, $spec$select100$i = 0, $spec$select3$i = 0, $ssize$2$ph$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub112$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0, $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, label = 0, sp = 0, $181$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[10867] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 43508 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($3 | 0) != ($arrayidx | 0)) {
    if ((HEAP32[10871] | 0) >>> 0 > $3 >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } else HEAP32[10867] = $0 & ~(1 << $add8); while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[10869] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 43508 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($10 | 0) != ($arrayidx66 | 0)) {
     if ((HEAP32[10871] | 0) >>> 0 > $10 >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } else {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[10867] = $and74;
     $14 = $and74;
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[10872] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 43508 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if ($14 & $shl105) {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ((HEAP32[10871] | 0) >>> 0 > $16 >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     } else {
      HEAP32[10867] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[10869] = $sub91;
    HEAP32[10872] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[10868] | 0;
   if ($18) {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[43772 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $19;
    $v$0$i = $19;
    while (1) {
     $21 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$21) {
      $22 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$22) break; else $cond5$i = $22;
     } else $cond5$i = $21;
     $sub31$i = (HEAP32[$cond5$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond5$i;
     $v$0$i = $cmp32$i ? $cond5$i : $v$0$i;
    }
    $24 = HEAP32[10871] | 0;
    if ($24 >>> 0 > $v$0$i >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 <= $v$0$i >>> 0) _abort();
    $25 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $26 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($26 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $30 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$30) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $31 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$31) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i$ph = $31;
       $RP$1$i$ph = $arrayidx65$i;
      }
     } else {
      $R$1$i$ph = $30;
      $RP$1$i$ph = $arrayidx61$i;
     }
     $R$1$i = $R$1$i$ph;
     $RP$1$i = $RP$1$i$ph;
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $32 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (!$32) {
       $arrayidx75$i = $R$1$i + 16 | 0;
       $33 = HEAP32[$arrayidx75$i >> 2] | 0;
       if (!$33) break; else {
        $R$1$i$be = $33;
        $RP$1$i$be = $arrayidx75$i;
       }
      } else {
       $R$1$i$be = $32;
       $RP$1$i$be = $arrayidx71$i;
      }
      $R$1$i = $R$1$i$be;
      $RP$1$i = $RP$1$i$be;
     }
     if ($24 >>> 0 > $RP$1$i >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $27 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($24 >>> 0 > $27 >>> 0) _abort();
     $bk47$i = $27 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $26 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $26;
      HEAP32[$fd50$i >> 2] = $27;
      $R$3$i = $26;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($25 | 0) {
     $34 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 43772 + ($34 << 2) | 0;
     do if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[10868] = $18 & ~(1 << $34);
       break L78;
      }
     } else if ((HEAP32[10871] | 0) >>> 0 <= $25 >>> 0) {
      $arrayidx113$i = $25 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $25 + 20 | 0) >> 2] = $R$3$i;
      if (!$R$3$i) break L78; else break;
     } else _abort(); while (0);
     $38 = HEAP32[10871] | 0;
     if ($38 >>> 0 > $R$3$i >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $25;
     $39 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($39 | 0) if ($38 >>> 0 > $39 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $39;
      HEAP32[$39 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $40 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($40 | 0) if ((HEAP32[10871] | 0) >>> 0 > $40 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $40;
      HEAP32[$40 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
     if ($7 | 0) {
      $43 = HEAP32[10872] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 43508 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if ($shl198$i & $0) {
       $44 = $arrayidx196$i + 8 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       if ((HEAP32[10871] | 0) >>> 0 > $45 >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $44;
        $F197$0$i = $45;
       }
      } else {
       HEAP32[10867] = $shl198$i | $0;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $43;
      HEAP32[$F197$0$i + 12 >> 2] = $43;
      HEAP32[$43 + 8 >> 2] = $F197$0$i;
      HEAP32[$43 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[10869] = $rsize$0$i;
     HEAP32[10872] = $add$ptr$i;
    }
    $retval$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $cond;
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 <= 4294967231) {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $47 = HEAP32[10868] | 0;
  if ($47) {
   $sub$i140 = 0 - $and145 | 0;
   $shr$i141 = $add144 >>> 8;
   if ($shr$i141) if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i145 = ($shr$i141 + 1048320 | 0) >>> 16 & 8;
    $shl$i146 = $shr$i141 << $and$i145;
    $and8$i = ($shl$i146 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i146 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i145 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   } else $idx$0$i = 0;
   $48 = HEAP32[43772 + ($idx$0$i << 2) >> 2] | 0;
   L122 : do if (!$48) {
    $rsize$3$i = $sub$i140;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 85;
   } else {
    $rsize$0$i154 = $sub$i140;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i153 = $48;
    $v$0$i155 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i153 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i154 >>> 0) if (!$sub33$i) {
      $rsize$420$i$ph = 0;
      $t$519$i$ph = $t$0$i153;
      $v$421$i$ph = $t$0$i153;
      label = 89;
      break L122;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i153;
     } else {
      $rsize$1$i = $rsize$0$i154;
      $v$1$i = $v$0$i155;
     }
     $50 = HEAP32[$t$0$i153 + 20 >> 2] | 0;
     $t$0$i153 = HEAP32[$t$0$i153 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($50 | 0) == 0 | ($50 | 0) == ($t$0$i153 | 0) ? $rst$0$i : $50;
     if (!$t$0$i153) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 85;
      break;
     } else {
      $rsize$0$i154 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i155 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $47;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[43772 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i222 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i222 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i222;
    } else {
     $rsize$420$i$ph = $rsize$3$i;
     $t$519$i$ph = $t$4$i;
     $v$421$i$ph = $v$3$i222;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $rsize$420$i = $rsize$420$i$ph;
    $t$519$i = $t$519$i$ph;
    $v$421$i = $v$421$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$519$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$420$i >>> 0;
     $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
     $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
     $54 = HEAP32[$t$519$i + 16 >> 2] | 0;
     if (!$54) $cond115$i = HEAP32[$t$519$i + 20 >> 2] | 0; else $cond115$i = $54;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i159;
      $v$4$lcssa$i = $spec$select3$i;
      break;
     } else {
      $rsize$420$i = $spec$select$i159;
      $t$519$i = $cond115$i;
      $v$421$i = $spec$select3$i;
     }
    }
   }
   if (($v$4$lcssa$i | 0) != 0 ? $rsize$4$lcssa$i >>> 0 < ((HEAP32[10869] | 0) - $and145 | 0) >>> 0 : 0) {
    $57 = HEAP32[10871] | 0;
    if ($57 >>> 0 > $v$4$lcssa$i >>> 0) _abort();
    $add$ptr$i164 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i164 >>> 0 <= $v$4$lcssa$i >>> 0) _abort();
    $58 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $59 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($59 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $63 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$63) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $64 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$64) {
       $R$3$i177 = 0;
       break;
      } else {
       $R$1$i173$ph = $64;
       $RP$1$i172$ph = $arrayidx155$i;
      }
     } else {
      $R$1$i173$ph = $63;
      $RP$1$i172$ph = $arrayidx151$i;
     }
     $R$1$i173 = $R$1$i173$ph;
     $RP$1$i172 = $RP$1$i172$ph;
     while (1) {
      $arrayidx161$i = $R$1$i173 + 20 | 0;
      $65 = HEAP32[$arrayidx161$i >> 2] | 0;
      if (!$65) {
       $arrayidx165$i174 = $R$1$i173 + 16 | 0;
       $66 = HEAP32[$arrayidx165$i174 >> 2] | 0;
       if (!$66) break; else {
        $R$1$i173$be = $66;
        $RP$1$i172$be = $arrayidx165$i174;
       }
      } else {
       $R$1$i173$be = $65;
       $RP$1$i172$be = $arrayidx161$i;
      }
      $R$1$i173 = $R$1$i173$be;
      $RP$1$i172 = $RP$1$i172$be;
     }
     if ($57 >>> 0 > $RP$1$i172 >>> 0) _abort(); else {
      HEAP32[$RP$1$i172 >> 2] = 0;
      $R$3$i177 = $R$1$i173;
      break;
     }
    } else {
     $60 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($57 >>> 0 > $60 >>> 0) _abort();
     $bk136$i = $60 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $59 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $59;
      HEAP32[$fd139$i >> 2] = $60;
      $R$3$i177 = $59;
      break;
     } else _abort();
    } while (0);
    L176 : do if ($58) {
     $67 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 43772 + ($67 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $and194$i = $47 & ~(1 << $67);
       HEAP32[10868] = $and194$i;
       $80 = $and194$i;
       break L176;
      }
     } else if ((HEAP32[10871] | 0) >>> 0 <= $58 >>> 0) {
      $arrayidx204$i = $58 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $58 + 20 | 0) >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $80 = $47;
       break L176;
      } else break;
     } else _abort(); while (0);
     $71 = HEAP32[10871] | 0;
     if ($71 >>> 0 > $R$3$i177 >>> 0) _abort();
     HEAP32[$R$3$i177 + 24 >> 2] = $58;
     $72 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($72 | 0) if ($71 >>> 0 > $72 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 16 >> 2] = $72;
      HEAP32[$72 + 24 >> 2] = $R$3$i177;
      break;
     } while (0);
     $73 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($73) if ((HEAP32[10871] | 0) >>> 0 > $73 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 20 >> 2] = $73;
      HEAP32[$73 + 24 >> 2] = $R$3$i177;
      $80 = $47;
      break;
     } else $80 = $47;
    } else $80 = $47; while (0);
    L200 : do if ($rsize$4$lcssa$i >>> 0 >= 16) {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i164 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i164 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 43508 + ($shr283$i << 1 << 2) | 0;
      $76 = HEAP32[10867] | 0;
      $shl291$i = 1 << $shr283$i;
      if ($76 & $shl291$i) {
       $77 = $arrayidx289$i + 8 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       if ((HEAP32[10871] | 0) >>> 0 > $78 >>> 0) _abort(); else {
        $$pre$phi$i185Z2D = $77;
        $F290$0$i = $78;
       }
      } else {
       HEAP32[10867] = $76 | $shl291$i;
       $$pre$phi$i185Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      }
      HEAP32[$$pre$phi$i185Z2D >> 2] = $add$ptr$i164;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if ($shr318$i) if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     } else $I316$0$i = 0;
     $arrayidx355$i = 43772 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i164 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i164 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($80 & $shl362$i)) {
      HEAP32[10868] = $80 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
      break;
     }
     $81 = HEAP32[$arrayidx355$i >> 2] | 0;
     L218 : do if ((HEAP32[$81 + 4 >> 2] & -8 | 0) != ($rsize$4$lcssa$i | 0)) {
      $K373$017$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
      $T$016$i = $81;
      while (1) {
       $arrayidx394$i = $T$016$i + 16 + ($K373$017$i >>> 31 << 2) | 0;
       $83 = HEAP32[$arrayidx394$i >> 2] | 0;
       if (!$83) break;
       if ((HEAP32[$83 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
        $T$0$lcssa$i = $83;
        break L218;
       } else {
        $K373$017$i = $K373$017$i << 1;
        $T$016$i = $83;
       }
      }
      if ((HEAP32[10871] | 0) >>> 0 > $arrayidx394$i >>> 0) _abort(); else {
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 24 >> 2] = $T$016$i;
       HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
       break L200;
      }
     } else $T$0$lcssa$i = $81; while (0);
     $fd416$i = $T$0$lcssa$i + 8 | 0;
     $86 = HEAP32[$fd416$i >> 2] | 0;
     $87 = HEAP32[10871] | 0;
     if ($87 >>> 0 <= $86 >>> 0 & $87 >>> 0 <= $T$0$lcssa$i >>> 0) {
      HEAP32[$86 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$fd416$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $86;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i164 + 24 >> 2] = 0;
      break;
     } else _abort();
    } else {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  } else $nb$0 = $and145;
 } else $nb$0 = -1; while (0);
 $89 = HEAP32[10869] | 0;
 if ($89 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $89 - $nb$0 | 0;
  $90 = HEAP32[10872] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $90 + $nb$0 | 0;
   HEAP32[10872] = $add$ptr166;
   HEAP32[10869] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$90 + $89 >> 2] = $sub160;
   HEAP32[$90 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[10869] = 0;
   HEAP32[10872] = 0;
   HEAP32[$90 + 4 >> 2] = $89 | 3;
   $head179 = $90 + $89 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $90 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $92 = HEAP32[10870] | 0;
 if ($92 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $92 - $nb$0 | 0;
  HEAP32[10870] = $sub190;
  $93 = HEAP32[10873] | 0;
  $add$ptr193 = $93 + $nb$0 | 0;
  HEAP32[10873] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$93 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $93 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[10985] | 0)) {
  HEAP32[10987] = 4096;
  HEAP32[10986] = 4096;
  HEAP32[10988] = -1;
  HEAP32[10989] = -1;
  HEAP32[10990] = 0;
  HEAP32[10978] = 0;
  HEAP32[10985] = $magic$i$i & -16 ^ 1431655768;
  $96 = 4096;
 } else $96 = HEAP32[10987] | 0;
 $add$i188 = $nb$0 + 48 | 0;
 $sub$i189 = $nb$0 + 47 | 0;
 $add9$i = $96 + $sub$i189 | 0;
 $neg$i190 = 0 - $96 | 0;
 $and11$i = $add9$i & $neg$i190;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $97 = HEAP32[10977] | 0;
 if ($97 | 0 ? ($98 = HEAP32[10975] | 0, $add17$i191 = $98 + $and11$i | 0, $add17$i191 >>> 0 <= $98 >>> 0 | $add17$i191 >>> 0 > $97 >>> 0) : 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 L257 : do if (!(HEAP32[10978] & 4)) {
  $100 = HEAP32[10873] | 0;
  L259 : do if ($100) {
   $sp$0$i$i = 43916;
   while (1) {
    $101 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($101 >>> 0 <= $100 >>> 0 ? ($101 + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $100 >>> 0 : 0) break;
    $103 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$103) {
     label = 173;
     break L259;
    } else $sp$0$i$i = $103;
   }
   $and80$i = $add9$i - $92 & $neg$i190;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2687886$i = $and80$i; else {
     $tbase$799$i = $call83$i;
     $tsize$798$i = $and80$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } else label = 173; while (0);
  do if ((label | 0) == 173) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) != (-1 | 0) ? ($104 = $call37$i, $105 = HEAP32[10986] | 0, $sub41$i = $105 + -1 | 0, $spec$select100$i = (($sub41$i & $104 | 0) == 0 ? 0 : ($sub41$i + $104 & 0 - $105) - $104 | 0) + $and11$i | 0, $106 = HEAP32[10975] | 0, $add54$i = $spec$select100$i + $106 | 0, $spec$select100$i >>> 0 > $nb$0 >>> 0 & $spec$select100$i >>> 0 < 2147483647) : 0) {
    $107 = HEAP32[10977] | 0;
    if ($107 | 0 ? $add54$i >>> 0 <= $106 >>> 0 | $add54$i >>> 0 > $107 >>> 0 : 0) {
     $tsize$2687886$i = 0;
     break;
    }
    $call68$i = _sbrk($spec$select100$i) | 0;
    if (($call68$i | 0) == ($call37$i | 0)) {
     $tbase$799$i = $call37$i;
     $tsize$798$i = $spec$select100$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call68$i;
     $ssize$2$ph$i = $spec$select100$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } while (0);
  do if ((label | 0) == 181) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i188 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   $110 = HEAP32[10987] | 0;
   $and104$i = $sub$i189 - $ssize$2$ph$i + $110 & 0 - $110;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($and104$i) | 0) == (-1 | 0)) {
    _sbrk($sub112$i) | 0;
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $and104$i + $ssize$2$ph$i | 0;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[10978] = HEAP32[10978] | 4;
  $tsize$4$i = $tsize$2687886$i;
  label = 188;
 } else {
  $tsize$4$i = 0;
  label = 188;
 } while (0);
 if (((label | 0) == 188 ? $and11$i >>> 0 < 2147483647 : 0) ? ($call131$i = _sbrk($and11$i) | 0, $call132$i = _sbrk(0) | 0, $sub$ptr$sub$i = $call132$i - $call131$i | 0, $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0, !(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) : 0) {
  $tbase$799$i = $call131$i;
  $tsize$798$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
  label = 190;
 }
 if ((label | 0) == 190) {
  $add150$i = (HEAP32[10975] | 0) + $tsize$798$i | 0;
  HEAP32[10975] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[10976] | 0) >>> 0) HEAP32[10976] = $add150$i;
  $114 = HEAP32[10873] | 0;
  L294 : do if ($114) {
   $sp$0116$i = 43916;
   while (1) {
    $119 = HEAP32[$sp$0116$i >> 2] | 0;
    $120 = HEAP32[$sp$0116$i + 4 >> 2] | 0;
    if (($tbase$799$i | 0) == ($119 + $120 | 0)) {
     label = 199;
     break;
    }
    $121 = HEAP32[$sp$0116$i + 8 >> 2] | 0;
    if (!$121) break; else $sp$0116$i = $121;
   }
   if (((label | 0) == 199 ? ($size188$i$le = $sp$0116$i + 4 | 0, (HEAP32[$sp$0116$i + 12 >> 2] & 8 | 0) == 0) : 0) ? $tbase$799$i >>> 0 > $114 >>> 0 & $119 >>> 0 <= $114 >>> 0 : 0) {
    HEAP32[$size188$i$le >> 2] = $120 + $tsize$798$i;
    $add215$i = (HEAP32[10870] | 0) + $tsize$798$i | 0;
    $124 = $114 + 8 | 0;
    $cond$i56$i = ($124 & 7 | 0) == 0 ? 0 : 0 - $124 & 7;
    $add$ptr4$i57$i = $114 + $cond$i56$i | 0;
    $sub5$i58$i = $add215$i - $cond$i56$i | 0;
    HEAP32[10873] = $add$ptr4$i57$i;
    HEAP32[10870] = $sub5$i58$i;
    HEAP32[$add$ptr4$i57$i + 4 >> 2] = $sub5$i58$i | 1;
    HEAP32[$114 + $add215$i + 4 >> 2] = 40;
    HEAP32[10874] = HEAP32[10989];
    break;
   }
   $126 = HEAP32[10871] | 0;
   if ($tbase$799$i >>> 0 < $126 >>> 0) {
    HEAP32[10871] = $tbase$799$i;
    $139 = $tbase$799$i;
   } else $139 = $126;
   $add$ptr227$i = $tbase$799$i + $tsize$798$i | 0;
   $sp$1115$i = 43916;
   while (1) {
    if ((HEAP32[$sp$1115$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 207;
     break;
    }
    $128 = HEAP32[$sp$1115$i + 8 >> 2] | 0;
    if (!$128) break; else $sp$1115$i = $128;
   }
   if ((label | 0) == 207 ? (HEAP32[$sp$1115$i + 12 >> 2] & 8 | 0) == 0 : 0) {
    HEAP32[$sp$1115$i >> 2] = $tbase$799$i;
    $size245$i = $sp$1115$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$798$i;
    $131 = $tbase$799$i + 8 | 0;
    $add$ptr4$i28$i = $tbase$799$i + (($131 & 7 | 0) == 0 ? 0 : 0 - $131 & 7) | 0;
    $132 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($132 & 7 | 0) == 0 ? 0 : 0 - $132 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i28$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i28$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i28$i + 4 >> 2] = $nb$0 | 3;
    L317 : do if (($114 | 0) != ($add$ptr16$i$i | 0)) {
     if ((HEAP32[10872] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[10869] | 0) + $sub18$i$i | 0;
      HEAP32[10869] = $add26$i$i;
      HEAP32[10872] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $136 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($136 & 3 | 0) == 1) {
      $and37$i$i = $136 & -8;
      $shr$i36$i = $136 >>> 3;
      L325 : do if ($136 >>> 0 >= 256) {
       $143 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $144 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($144 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $148 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$148) {
         $149 = HEAP32[$child$i$i >> 2] | 0;
         if (!$149) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $149;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $148;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $150 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$150) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $151 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$151) break; else {
           $R$1$i$i$be = $151;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $150;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        if ($139 >>> 0 > $RP$1$i$i >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($139 >>> 0 > $145 >>> 0) _abort();
        $bk82$i$i = $145 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $144 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $144;
         HEAP32[$fd85$i$i >> 2] = $145;
         $R$3$i$i = $144;
         break;
        } else _abort();
       } while (0);
       if (!$143) break;
       $152 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 43772 + ($152 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) if ((HEAP32[10871] | 0) >>> 0 <= $143 >>> 0) {
        $arrayidx143$i$i = $143 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $143 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L325; else break;
       } else _abort(); else {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[10868] = HEAP32[10868] & ~(1 << $152);
        break L325;
       } while (0);
       $157 = HEAP32[10871] | 0;
       if ($157 >>> 0 > $R$3$i$i >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $143;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $158 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($158 | 0) if ($157 >>> 0 > $158 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $158;
        HEAP32[$158 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $159 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$159) break;
       if ((HEAP32[10871] | 0) >>> 0 > $159 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $159;
        HEAP32[$159 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } else {
       $137 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $138 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i39$i = 43508 + ($shr$i36$i << 1 << 2) | 0;
       do if (($137 | 0) != ($arrayidx$i39$i | 0)) {
        if ($139 >>> 0 > $137 >>> 0) _abort();
        if ((HEAP32[$137 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($138 | 0) == ($137 | 0)) {
        HEAP32[10867] = HEAP32[10867] & ~(1 << $shr$i36$i);
        break;
       }
       do if (($138 | 0) == ($arrayidx$i39$i | 0)) $fd68$pre$phi$i$iZ2D = $138 + 8 | 0; else {
        if ($139 >>> 0 > $138 >>> 0) _abort();
        $fd59$i$i = $138 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$137 + 12 >> 2] = $138;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $137;
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 43508 + ($shr214$i$i << 1 << 2) | 0;
      $162 = HEAP32[10867] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($162 & $shl226$i$i)) {
       HEAP32[10867] = $162 | $shl226$i$i;
       $$pre$phi$i48$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $163 = $arrayidx223$i$i + 8 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       if ((HEAP32[10871] | 0) >>> 0 <= $164 >>> 0) {
        $$pre$phi$i48$iZ2D = $163;
        $F224$0$i$i = $164;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i48$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 43772 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $166 = HEAP32[10868] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($166 & $shl294$i$i)) {
      HEAP32[10868] = $166 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $167 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L410 : do if ((HEAP32[$167 + 4 >> 2] & -8 | 0) != ($qsize$0$i$i | 0)) {
      $K305$010$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$09$i$i = $167;
      while (1) {
       $arrayidx325$i$i = $T$09$i$i + 16 + ($K305$010$i$i >>> 31 << 2) | 0;
       $169 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$169) break;
       if ((HEAP32[$169 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i50$i = $169;
        break L410;
       } else {
        $K305$010$i$i = $K305$010$i$i << 1;
        $T$09$i$i = $169;
       }
      }
      if ((HEAP32[10871] | 0) >>> 0 > $arrayidx325$i$i >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$09$i$i;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
       break L317;
      }
     } else $T$0$lcssa$i50$i = $167; while (0);
     $fd344$i$i = $T$0$lcssa$i50$i + 8 | 0;
     $172 = HEAP32[$fd344$i$i >> 2] | 0;
     $173 = HEAP32[10871] | 0;
     if ($173 >>> 0 <= $172 >>> 0 & $173 >>> 0 <= $T$0$lcssa$i50$i >>> 0) {
      HEAP32[$172 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $172;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i50$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
      break;
     } else _abort();
    } else {
     $add$i$i = (HEAP32[10870] | 0) + $sub18$i$i | 0;
     HEAP32[10870] = $add$i$i;
     HEAP32[10873] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } while (0);
    $retval$0 = $add$ptr4$i28$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 43916;
   while (1) {
    $175 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($175 >>> 0 <= $114 >>> 0 ? ($add$ptr$i$i$i = $175 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0, $add$ptr$i$i$i >>> 0 > $114 >>> 0) : 0) break;
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $178 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($178 & 7 | 0) == 0 ? 0 : 0 - $178 & 7) | 0;
   $add$ptr81$i$i = $114 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $114 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$798$i + -40 | 0;
   $179 = $tbase$799$i + 8 | 0;
   $cond$i$i$i = ($179 & 7 | 0) == 0 ? 0 : 0 - $179 & 7;
   $add$ptr4$i$i$i = $tbase$799$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[10873] = $add$ptr4$i$i$i;
   HEAP32[10870] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$799$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[10874] = HEAP32[10989];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[10979];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[10980];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[10981];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[10982];
   HEAP32[10979] = $tbase$799$i;
   HEAP32[10980] = $tsize$798$i;
   HEAP32[10982] = 0;
   HEAP32[10981] = $add$ptr14$i$i;
   $181 = $cond13$i$i + 24 | 0;
   do {
    $181$looptemp = $181;
    $181 = $181 + 4 | 0;
    HEAP32[$181 >> 2] = 7;
   } while (($181$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($114 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $114 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$114 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 43508 + ($shr$i$i << 1 << 2) | 0;
     $183 = HEAP32[10867] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if ($183 & $shl39$i$i) {
      $184 = $arrayidx$i$i + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      if ((HEAP32[10871] | 0) >>> 0 > $185 >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $184;
       $F$0$i$i = $185;
      }
     } else {
      HEAP32[10867] = $183 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $114;
     HEAP32[$F$0$i$i + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $F$0$i$i;
     HEAP32[$114 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if ($shr58$i$i) if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    } else $I57$0$i$i = 0;
    $arrayidx91$i$i = 43772 + ($I57$0$i$i << 2) | 0;
    HEAP32[$114 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$114 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $187 = HEAP32[10868] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($187 & $shl95$i$i)) {
     HEAP32[10868] = $187 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $114;
     HEAP32[$114 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$114 + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $114;
     break;
    }
    $188 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L451 : do if ((HEAP32[$188 + 4 >> 2] & -8 | 0) != ($sub$ptr$sub$i$i | 0)) {
     $K105$011$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$010$i$i = $188;
     while (1) {
      $arrayidx126$i$i = $T$010$i$i + 16 + ($K105$011$i$i >>> 31 << 2) | 0;
      $190 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$190) break;
      if ((HEAP32[$190 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $190;
       break L451;
      } else {
       $K105$011$i$i = $K105$011$i$i << 1;
       $T$010$i$i = $190;
      }
     }
     if ((HEAP32[10871] | 0) >>> 0 > $arrayidx126$i$i >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $114;
      HEAP32[$114 + 24 >> 2] = $T$010$i$i;
      HEAP32[$114 + 12 >> 2] = $114;
      HEAP32[$114 + 8 >> 2] = $114;
      break L294;
     }
    } else $T$0$lcssa$i$i = $188; while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $193 = HEAP32[$fd148$i$i >> 2] | 0;
    $194 = HEAP32[10871] | 0;
    if ($194 >>> 0 <= $193 >>> 0 & $194 >>> 0 <= $T$0$lcssa$i$i >>> 0) {
     HEAP32[$193 + 12 >> 2] = $114;
     HEAP32[$fd148$i$i >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $193;
     HEAP32[$114 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$114 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } else {
   $115 = HEAP32[10871] | 0;
   if (($115 | 0) == 0 | $tbase$799$i >>> 0 < $115 >>> 0) HEAP32[10871] = $tbase$799$i;
   HEAP32[10979] = $tbase$799$i;
   HEAP32[10980] = $tsize$798$i;
   HEAP32[10982] = 0;
   HEAP32[10876] = HEAP32[10985];
   HEAP32[10875] = -1;
   HEAP32[10880] = 43508;
   HEAP32[10879] = 43508;
   HEAP32[10882] = 43516;
   HEAP32[10881] = 43516;
   HEAP32[10884] = 43524;
   HEAP32[10883] = 43524;
   HEAP32[10886] = 43532;
   HEAP32[10885] = 43532;
   HEAP32[10888] = 43540;
   HEAP32[10887] = 43540;
   HEAP32[10890] = 43548;
   HEAP32[10889] = 43548;
   HEAP32[10892] = 43556;
   HEAP32[10891] = 43556;
   HEAP32[10894] = 43564;
   HEAP32[10893] = 43564;
   HEAP32[10896] = 43572;
   HEAP32[10895] = 43572;
   HEAP32[10898] = 43580;
   HEAP32[10897] = 43580;
   HEAP32[10900] = 43588;
   HEAP32[10899] = 43588;
   HEAP32[10902] = 43596;
   HEAP32[10901] = 43596;
   HEAP32[10904] = 43604;
   HEAP32[10903] = 43604;
   HEAP32[10906] = 43612;
   HEAP32[10905] = 43612;
   HEAP32[10908] = 43620;
   HEAP32[10907] = 43620;
   HEAP32[10910] = 43628;
   HEAP32[10909] = 43628;
   HEAP32[10912] = 43636;
   HEAP32[10911] = 43636;
   HEAP32[10914] = 43644;
   HEAP32[10913] = 43644;
   HEAP32[10916] = 43652;
   HEAP32[10915] = 43652;
   HEAP32[10918] = 43660;
   HEAP32[10917] = 43660;
   HEAP32[10920] = 43668;
   HEAP32[10919] = 43668;
   HEAP32[10922] = 43676;
   HEAP32[10921] = 43676;
   HEAP32[10924] = 43684;
   HEAP32[10923] = 43684;
   HEAP32[10926] = 43692;
   HEAP32[10925] = 43692;
   HEAP32[10928] = 43700;
   HEAP32[10927] = 43700;
   HEAP32[10930] = 43708;
   HEAP32[10929] = 43708;
   HEAP32[10932] = 43716;
   HEAP32[10931] = 43716;
   HEAP32[10934] = 43724;
   HEAP32[10933] = 43724;
   HEAP32[10936] = 43732;
   HEAP32[10935] = 43732;
   HEAP32[10938] = 43740;
   HEAP32[10937] = 43740;
   HEAP32[10940] = 43748;
   HEAP32[10939] = 43748;
   HEAP32[10942] = 43756;
   HEAP32[10941] = 43756;
   $sub172$i = $tsize$798$i + -40 | 0;
   $117 = $tbase$799$i + 8 | 0;
   $cond$i20$i = ($117 & 7 | 0) == 0 ? 0 : 0 - $117 & 7;
   $add$ptr4$i$i = $tbase$799$i + $cond$i20$i | 0;
   $sub5$i$i = $sub172$i - $cond$i20$i | 0;
   HEAP32[10873] = $add$ptr4$i$i;
   HEAP32[10870] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$799$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[10874] = HEAP32[10989];
  } while (0);
  $196 = HEAP32[10870] | 0;
  if ($196 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $196 - $nb$0 | 0;
   HEAP32[10870] = $sub260$i;
   $197 = HEAP32[10873] | 0;
   $add$ptr262$i = $197 + $nb$0 | 0;
   HEAP32[10873] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$197 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $197 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $call275$i = ___errno_location() | 0;
 HEAP32[$call275$i >> 2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $134 = 0, $135 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $160 = 0, $164 = 0, $165 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $179 = 0, $180 = 0, $181 = 0, $186 = 0, $188 = 0, $190 = 0, $191 = 0, $195 = 0, $196 = 0, $200 = 0, $201 = 0, $207 = 0, $208 = 0, $21 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $233 = 0, $234 = 0, $238 = 0, $240 = 0, $241 = 0, $248 = 0, $250 = 0, $251 = 0, $255 = 0, $256 = 0, $260 = 0, $261 = 0, $269 = 0, $27 = 0, $270 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $61 = 0, $62 = 0, $66 = 0, $71 = 0, $72 = 0, $76 = 0, $8 = 0, $83 = 0, $84 = 0, $88 = 0, $9 = 0, $95 = 0, $96 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i100 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i147 = 0, $__ninp_$i$i224 = 0, $__ninp_$i$i294 = 0, $__ninp_$i$i324 = 0, $__ninp_$i$i367 = 0, $__ninp_$i$i410 = 0, $__ninp_$i$i652 = 0, $__ninp_$i$i755 = 0, $__ninp_$i$i824 = 0, $__ninp_$i$i914 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i431 = 0, $__size_$i$i244 = 0, $__size_$i$i464 = 0, $__size_$i$i746 = 0, $__size_$i$i927 = 0, $__size_$i3$i = 0, $__size_$i3$i$i583 = 0, $__size_$i3$i246 = 0, $__size_$i3$i466 = 0, $__size_$i3$i748 = 0, $__size_$i3$i929 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__tab_$i216 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i = 0, $add$ptr$i497 = 0, $add$ptr$i497962 = 0, $add$ptr$i552$pre$phiZZZ2D = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx97 = 0, $cmp$i$i282 = 0, $cmp$i$i369 = 0, $cmp102959 = 0, $cmp26 = 0, $cond$i$i$i = 0, $cond$i$i437 = 0, $cond$i$i437992 = 0, $cond$i$i437995 = 0, $cond$i242 = 0, $cond$i250 = 0, $cond$i933 = 0, $conv$i$i468 = 0, $conv$i290 = 0, $conv$i734 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i171 = 0, $retval$0$i$i$i$i511 = 0, $retval$0$i$i$i$i607 = 0, $retval$0$i$i$i$i693 = 0, $retval$0$i$i$i$i779 = 0, $retval$0$i$i$i$i847 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i192 = 0, $retval$0$i$i13$i$i532 = 0, $retval$0$i$i13$i$i628 = 0, $retval$0$i$i13$i$i714 = 0, $retval$0$i$i13$i$i800 = 0, $retval$0$i$i13$i$i868 = 0, $retval$0$i$i157 = 0, $retval$0$i$i211 = 0, $retval$0$i$i234 = 0, $retval$0$i$i289 = 0, $retval$0$i$i354 = 0, $retval$0$i$i397 = 0, $retval$0$i$i483 = 0, $retval$0$i$i647 = 0, $retval$0$i$i733 = 0, $retval$0$i$i820 = 0, $retval$0$i$i888 = 0, $retval$0$i$i910 = 0, $retval$10 = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i432 = 0, $tobool$i$i$i432991 = 0, $tobool$i$i$i432994 = 0, $tobool$i$i$i581 = 0, $tobool$i$i$i667 = 0, $tobool$i$i465 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $__we$addr = sp + 488 | 0;
 $__gbuf = sp;
 $__gb = sp + 480 | 0;
 $__gn = sp + 472 | 0;
 $__ge = sp + 468 | 0;
 $__pat = sp + 496 | 0;
 $__dp = sp + 493 | 0;
 $__ts = sp + 492 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 197;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i100 = 0;
 while (1) {
  if (($__i$0$i$i100 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i100 << 2) >> 2] = 0;
  $__i$0$i$i100 = $__i$0$i$i100 + 1 | 0;
 }
 HEAP32[$__psn >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 HEAP32[$__nsn >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 HEAP32[$__spaces >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__tab_$i216 = $__ct + 8 | 0;
 $__size_$i$i = $__psn + 11 | 0;
 $__size_$i3$i = $__psn + 4 | 0;
 $__size_$i$i244 = $__nsn + 11 | 0;
 $__size_$i3$i246 = $__nsn + 4 | 0;
 $__size_$i$i746 = $__grp + 11 | 0;
 $__size_$i3$i748 = $__grp + 4 | 0;
 $cmp102959 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i431 = $__sym + 11 | 0;
 $arrayidx97 = $__pat + 3 | 0;
 $__size_$i3$i$i583 = $__sym + 4 | 0;
 $__size_$i$i464 = $__spaces + 11 | 0;
 $__size_$i3$i466 = $__spaces + 4 | 0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   label = 243;
   break;
  }
  $3 = HEAP32[$__b >> 2] | 0;
  do if ($3) {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 127]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$4 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $280 = 1;
    break;
   } else {
    $280 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $280 = 1; while (0);
  $8 = HEAP32[$__e >> 2] | 0;
  do if ($8) {
   $9 = HEAP32[$8 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($280) {
    $281 = $8;
    break;
   } else {
    label = 243;
    break L21;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   }
  } else label = 31; while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($280) {
    label = 243;
    break;
   } else $281 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else {
     $14 = HEAP32[$__b >> 2] | 0;
     $15 = HEAP32[$14 + 12 >> 2] | 0;
     if (($15 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$15 >> 0] | 0) | 0;
     if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
      label = 45;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 45;
      break L21;
     }
     $21 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i147 = $21 + 12 | 0;
     $22 = HEAP32[$__ninp_$i$i147 >> 2] | 0;
     if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
      HEAP32[$__ninp_$i$i147 >> 2] = $22 + 1;
      $retval$0$i$i157 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i157 & 255);
     label = 47;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else label = 47;
    break;
   }
  case 3:
   {
    $49 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i242 = $49 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $49 & 255;
    $51 = HEAP8[$__size_$i$i244 >> 0] | 0;
    $cond$i250 = $51 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $51 & 255;
    if (($cond$i242 | 0) == (0 - $cond$i250 | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
     $cmp26 = ($cond$i242 | 0) == 0;
     $53 = HEAP32[$__b >> 2] | 0;
     $54 = HEAP32[$53 + 12 >> 2] | 0;
     $cmp$i$i282 = ($54 | 0) == (HEAP32[$53 + 16 >> 2] | 0);
     if ($cmp26 | ($cond$i250 | 0) == 0) {
      if ($cmp$i$i282) $retval$0$i$i289 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0; else $retval$0$i$i289 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
      $conv$i290 = $retval$0$i$i289 & 255;
      if ($cmp26) {
       if ((HEAP8[((HEAP8[$__size_$i$i244 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $71 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i324 = $71 + 12 | 0;
       $72 = HEAP32[$__ninp_$i$i324 >> 2] | 0;
       if (($72 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 40 >> 2] & 127]($71) | 0; else {
        HEAP32[$__ninp_$i$i324 >> 2] = $72 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$72 >> 0] | 0) | 0;
       }
       HEAP8[$__neg >> 0] = 1;
       $76 = HEAP8[$__size_$i$i244 >> 0] | 0;
       $__trailing_sign$1 = ($76 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $76 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if ((HEAP8[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
       HEAP8[$__neg >> 0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $61 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i294 = $61 + 12 | 0;
      $62 = HEAP32[$__ninp_$i$i294 >> 2] | 0;
      if (($62 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 40 >> 2] & 127]($61) | 0; else {
       HEAP32[$__ninp_$i$i294 >> 2] = $62 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$62 >> 0] | 0) | 0;
      }
      $66 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($66 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $66 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i282) $retval$0$i$i354 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0; else $retval$0$i$i354 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
     $83 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i367 = $83 + 12 | 0;
     $84 = HEAP32[$__ninp_$i$i367 >> 2] | 0;
     $cmp$i$i369 = ($84 | 0) == (HEAP32[$83 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) == ($retval$0$i$i354 & 255) << 24 >> 24) {
      if ($cmp$i$i369) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 40 >> 2] & 127]($83) | 0; else {
       HEAP32[$__ninp_$i$i367 >> 2] = $84 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0;
      }
      $88 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($88 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $88 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i369) $retval$0$i$i397 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $retval$0$i$i397 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[$__size_$i$i244 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != ($retval$0$i$i397 & 255) << 24 >> 24) {
      label = 105;
      break L21;
     }
     $95 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i410 = $95 + 12 | 0;
     $96 = HEAP32[$__ninp_$i$i410 >> 2] | 0;
     if (($96 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 40 >> 2] & 127]($95) | 0; else {
      HEAP32[$__ninp_$i$i410 >> 2] = $96 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$96 >> 0] | 0) | 0;
     }
     HEAP8[$__neg >> 0] = 1;
     $100 = HEAP8[$__size_$i$i244 >> 0] | 0;
     $__trailing_sign$1 = ($100 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $100 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $108 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432 = $108 << 24 >> 24 < 0;
     $109 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437 = $tobool$i$i$i432 ? $109 : $__sym;
     $110 = $cond$i$i437;
     if (!$__p$0) {
      $286 = $109;
      $287 = $108;
      $__sym_space_end$sroa$0$1 = $110;
     } else {
      $113 = $108;
      $119 = $110;
      $285 = $109;
      $cond$i$i437995 = $cond$i$i437;
      $tobool$i$i$i432994 = $tobool$i$i$i432;
      label = 110;
     }
    } else {
     if (!($cmp102959 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx97 >> 0] | 0) != 0)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $105 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432991 = $105 << 24 >> 24 < 0;
     $106 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437992 = $tobool$i$i$i432991 ? $106 : $__sym;
     $113 = $105;
     $119 = $cond$i$i437992;
     $285 = $106;
     $cond$i$i437995 = $cond$i$i437992;
     $tobool$i$i$i432994 = $tobool$i$i$i432991;
     label = 110;
    }
    L109 : do if ((label | 0) == 110) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $add$ptr$i = $cond$i$i437995 + ($tobool$i$i$i432994 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $113 & 255) | 0;
      $__sym_space_end$sroa$0$0 = $119;
      while (1) {
       $114 = $__sym_space_end$sroa$0$0;
       if (($add$ptr$i | 0) == ($114 | 0)) break;
       $115 = HEAP8[$114 >> 0] | 0;
       if ($115 << 24 >> 24 <= -1) break;
       if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($115 << 24 >> 24 << 1) >> 1] & 8192)) break;
       $__sym_space_end$sroa$0$0 = $114 + 1 | 0;
      }
      $sub$ptr$sub$i = $__sym_space_end$sroa$0$0 - $119 | 0;
      $120 = HEAP8[$__size_$i$i464 >> 0] | 0;
      $tobool$i$i465 = $120 << 24 >> 24 < 0;
      $121 = HEAP32[$__size_$i3$i466 >> 2] | 0;
      $conv$i$i468 = $120 & 255;
      if ($sub$ptr$sub$i >>> 0 <= ($tobool$i$i465 ? $121 : $conv$i$i468) >>> 0) {
       $add$ptr$i497962 = (HEAP32[$__spaces >> 2] | 0) + $121 | 0;
       $add$ptr$i497 = $__spaces + $conv$i$i468 | 0;
       $add$ptr$i552$pre$phiZZZ2D = $tobool$i$i465 ? $add$ptr$i497962 : $add$ptr$i497;
       $123 = $tobool$i$i465 ? $add$ptr$i497962 + (0 - $sub$ptr$sub$i) | 0 : $add$ptr$i497 + (0 - $sub$ptr$sub$i) | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i437995;
       while (1) {
        if (($123 | 0) == ($add$ptr$i552$pre$phiZZZ2D | 0)) {
         $286 = $285;
         $287 = $113;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L109;
        }
        if ((HEAP8[$123 >> 0] | 0) != (HEAP8[$agg$tmp26$sroa$0$0$ptr$i >> 0] | 0)) {
         $286 = $285;
         $287 = $113;
         $__sym_space_end$sroa$0$1 = $119;
         break L109;
        }
        $123 = $123 + 1 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 1 | 0;
       }
      } else {
       $286 = $285;
       $287 = $113;
       $__sym_space_end$sroa$0$1 = $119;
      }
     } else {
      $286 = $285;
      $287 = $113;
      $__sym_space_end$sroa$0$1 = $119;
     }
    } while (0);
    $126 = $287;
    $128 = $286;
    $134 = $281;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    L124 : while (1) {
     $tobool$i$i$i581 = $126 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i581 ? $128 : $__sym) + ($tobool$i$i$i581 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $126 & 255) | 0)) break;
     $129 = HEAP32[$__b >> 2] | 0;
     do if ($129) {
      $130 = HEAP32[$129 + 12 >> 2] | 0;
      if (($130 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) $retval$0$i$i$i$i607 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 36 >> 2] & 127]($129) | 0; else $retval$0$i$i$i$i607 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$130 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i607, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $288 = 1;
       break;
      } else {
       $288 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $288 = 1; while (0);
     do if ($134) {
      $135 = HEAP32[$134 + 12 >> 2] | 0;
      if (($135 | 0) == (HEAP32[$134 + 16 >> 2] | 0)) $retval$0$i$i13$i$i628 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$134 >> 2] | 0) + 36 >> 2] & 127]($134) | 0; else $retval$0$i$i13$i$i628 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$135 >> 0] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i628, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($288) {
       $289 = $134;
       break;
      } else break L124; else {
       HEAP32[$__e >> 2] = 0;
       label = 136;
       break;
      }
     } else label = 136; while (0);
     if ((label | 0) == 136) {
      label = 0;
      if ($288) break; else $289 = 0;
     }
     $139 = HEAP32[$__b >> 2] | 0;
     $140 = HEAP32[$139 + 12 >> 2] | 0;
     if (($140 | 0) == (HEAP32[$139 + 16 >> 2] | 0)) $retval$0$i$i647 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$139 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; else $retval$0$i$i647 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$140 >> 0] | 0) | 0;
     if ((HEAP8[$__sym_curr_char$sroa$0$0$ptr >> 0] | 0) != ($retval$0$i$i647 & 255) << 24 >> 24) break;
     $145 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i652 = $145 + 12 | 0;
     $146 = HEAP32[$__ninp_$i$i652 >> 2] | 0;
     if (($146 | 0) == (HEAP32[$145 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 40 >> 2] & 127]($145) | 0; else {
      HEAP32[$__ninp_$i$i652 >> 2] = $146 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$146 >> 0] | 0) | 0;
     }
     $126 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $128 = HEAP32[$__sym >> 2] | 0;
     $134 = $289;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 1 | 0;
    }
    if ($cmp102959 ? ($150 = HEAP8[$__size_$i$i$i431 >> 0] | 0, $tobool$i$i$i667 = $150 << 24 >> 24 < 0, ($__sym_curr_char$sroa$0$0$ptr | 0) != (($tobool$i$i$i667 ? HEAP32[$__sym >> 2] | 0 : $__sym) + ($tobool$i$i$i667 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $150 & 255) | 0)) : 0) {
     label = 148;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  case 4:
   {
    $159 = $281;
    $282 = $281;
    $__ng$0 = 0;
    L161 : while (1) {
     $154 = HEAP32[$__b >> 2] | 0;
     do if ($154) {
      $155 = HEAP32[$154 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) $retval$0$i$i$i$i693 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 127]($154) | 0; else $retval$0$i$i$i$i693 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$155 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i693, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $290 = 1;
       break;
      } else {
       $290 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $290 = 1; while (0);
     do if ($159) {
      $160 = HEAP32[$159 + 12 >> 2] | 0;
      if (($160 | 0) == (HEAP32[$159 + 16 >> 2] | 0)) $retval$0$i$i13$i$i714 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 127]($159) | 0; else $retval$0$i$i13$i$i714 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i714, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($290) {
       $292 = $282;
       $293 = $159;
       break;
      } else {
       $195 = $282;
       break L161;
      } else {
       HEAP32[$__e >> 2] = 0;
       $291 = 0;
       label = 162;
       break;
      }
     } else {
      $291 = $282;
      label = 162;
     } while (0);
     if ((label | 0) == 162) {
      label = 0;
      if ($290) {
       $195 = $291;
       break;
      } else {
       $292 = $291;
       $293 = 0;
      }
     }
     $164 = HEAP32[$__b >> 2] | 0;
     $165 = HEAP32[$164 + 12 >> 2] | 0;
     if (($165 | 0) == (HEAP32[$164 + 16 >> 2] | 0)) $retval$0$i$i733 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$164 >> 2] | 0) + 36 >> 2] & 127]($164) | 0; else $retval$0$i$i733 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0;
     $conv$i734 = $retval$0$i$i733 & 255;
     if ($conv$i734 << 24 >> 24 > -1 ? (HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i733 << 24 >> 24 << 1) >> 1] & 2048) != 0 : 0) {
      $171 = HEAP32[$__wn >> 2] | 0;
      if (($171 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $173 = HEAP32[$__wn >> 2] | 0;
      } else $173 = $171;
      HEAP32[$__wn >> 2] = $173 + 1;
      HEAP8[$173 >> 0] = $conv$i734;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $174 = HEAP8[$__size_$i$i746 >> 0] | 0;
      if (!((HEAP8[$__ts >> 0] | 0) == $conv$i734 << 24 >> 24 & ($__ng$0 | 0 ? (($174 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i748 >> 2] | 0 : $174 & 255) | 0) != 0 : 0))) {
       $195 = $292;
       break;
      }
      $177 = HEAP32[$__gn >> 2] | 0;
      if (($177 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $179 = HEAP32[$__gn >> 2] | 0;
      } else $179 = $177;
      HEAP32[$__gn >> 2] = $179 + 4;
      HEAP32[$179 >> 2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $180 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i755 = $180 + 12 | 0;
     $181 = HEAP32[$__ninp_$i$i755 >> 2] | 0;
     if (($181 | 0) == (HEAP32[$180 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$180 >> 2] | 0) + 40 >> 2] & 127]($180) | 0; else {
      HEAP32[$__ninp_$i$i755 >> 2] = $181 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$181 >> 0] | 0) | 0;
     }
     $159 = $293;
     $282 = $292;
     $__ng$0 = $__ng$2$ph;
    }
    $186 = HEAP32[$__gn >> 2] | 0;
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($186 | 0) : 0) {
     if (($186 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $188 = HEAP32[$__gn >> 2] | 0;
     } else $188 = $186;
     HEAP32[$__gn >> 2] = $188 + 4;
     HEAP32[$188 >> 2] = $__ng$0;
    }
    L213 : do if ((HEAP32[$__fd >> 2] | 0) > 0) {
     $190 = HEAP32[$__b >> 2] | 0;
     do if ($190) {
      $191 = HEAP32[$190 + 12 >> 2] | 0;
      if (($191 | 0) == (HEAP32[$190 + 16 >> 2] | 0)) $retval$0$i$i$i$i779 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$190 >> 2] | 0) + 36 >> 2] & 127]($190) | 0; else $retval$0$i$i$i$i779 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$191 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i779, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $294 = 1;
       break;
      } else {
       $294 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $294 = 1; while (0);
     do if ($195) {
      $196 = HEAP32[$195 + 12 >> 2] | 0;
      if (($196 | 0) == (HEAP32[$195 + 16 >> 2] | 0)) $retval$0$i$i13$i$i800 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$195 >> 2] | 0) + 36 >> 2] & 127]($195) | 0; else $retval$0$i$i13$i$i800 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$196 >> 0] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i800, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($294) {
       $295 = $195;
       break;
      } else {
       label = 204;
       break L21;
      } else {
       HEAP32[$__e >> 2] = 0;
       label = 198;
       break;
      }
     } else label = 198; while (0);
     if ((label | 0) == 198) {
      label = 0;
      if ($294) {
       label = 204;
       break L21;
      } else $295 = 0;
     }
     $200 = HEAP32[$__b >> 2] | 0;
     $201 = HEAP32[$200 + 12 >> 2] | 0;
     if (($201 | 0) == (HEAP32[$200 + 16 >> 2] | 0)) $retval$0$i$i820 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$200 >> 2] | 0) + 36 >> 2] & 127]($200) | 0; else $retval$0$i$i820 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$201 >> 0] | 0) | 0;
     if ((HEAP8[$__dp >> 0] | 0) != ($retval$0$i$i820 & 255) << 24 >> 24) {
      label = 204;
      break L21;
     }
     $207 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i824 = $207 + 12 | 0;
     $208 = HEAP32[$__ninp_$i$i824 >> 2] | 0;
     if (($208 | 0) == (HEAP32[$207 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$207 >> 2] | 0) + 40 >> 2] & 127]($207) | 0; else {
      HEAP32[$__ninp_$i$i824 >> 2] = $208 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$208 >> 0] | 0) | 0;
     }
     $218 = $295;
     while (1) {
      if ((HEAP32[$__fd >> 2] | 0) <= 0) break L213;
      $213 = HEAP32[$__b >> 2] | 0;
      do if ($213) {
       $214 = HEAP32[$213 + 12 >> 2] | 0;
       if (($214 | 0) == (HEAP32[$213 + 16 >> 2] | 0)) $retval$0$i$i$i$i847 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$213 >> 2] | 0) + 36 >> 2] & 127]($213) | 0; else $retval$0$i$i$i$i847 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$214 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i847, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$__b >> 2] = 0;
        $296 = 1;
        break;
       } else {
        $296 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } else $296 = 1; while (0);
      do if ($218) {
       $219 = HEAP32[$218 + 12 >> 2] | 0;
       if (($219 | 0) == (HEAP32[$218 + 16 >> 2] | 0)) $retval$0$i$i13$i$i868 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$218 >> 2] | 0) + 36 >> 2] & 127]($218) | 0; else $retval$0$i$i13$i$i868 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$219 >> 0] | 0) | 0;
       if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i868, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($296) {
        $297 = $218;
        break;
       } else {
        label = 230;
        break L21;
       } else {
        HEAP32[$__e >> 2] = 0;
        label = 223;
        break;
       }
      } else label = 223; while (0);
      if ((label | 0) == 223) {
       label = 0;
       if ($296) {
        label = 230;
        break L21;
       } else $297 = 0;
      }
      $223 = HEAP32[$__b >> 2] | 0;
      $224 = HEAP32[$223 + 12 >> 2] | 0;
      if (($224 | 0) == (HEAP32[$223 + 16 >> 2] | 0)) $retval$0$i$i888 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$223 >> 2] | 0) + 36 >> 2] & 127]($223) | 0; else $retval$0$i$i888 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$224 >> 0] | 0) | 0;
      if (($retval$0$i$i888 & 255) << 24 >> 24 <= -1) {
       label = 230;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i888 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 230;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $233 = HEAP32[$__b >> 2] | 0;
      $234 = HEAP32[$233 + 12 >> 2] | 0;
      if (($234 | 0) == (HEAP32[$233 + 16 >> 2] | 0)) $retval$0$i$i910 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$233 >> 2] | 0) + 36 >> 2] & 127]($233) | 0; else $retval$0$i$i910 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$234 >> 0] | 0) | 0;
      $238 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $238 + 1;
      HEAP8[$238 >> 0] = $retval$0$i$i910;
      HEAP32[$__fd >> 2] = (HEAP32[$__fd >> 2] | 0) + -1;
      $240 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i914 = $240 + 12 | 0;
      $241 = HEAP32[$__ninp_$i$i914 >> 2] | 0;
      if (($241 | 0) == (HEAP32[$240 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$240 >> 2] | 0) + 40 >> 2] & 127]($240) | 0; else {
       HEAP32[$__ninp_$i$i914 >> 2] = $241 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$241 >> 0] | 0) | 0;
      }
      $218 = $297;
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 241;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  default:
   $__trailing_sign$1 = $__trailing_sign$0;
  } while (0);
  L289 : do if ((label | 0) == 47) {
   label = 0;
   $32 = $281;
   while (1) {
    $27 = HEAP32[$__b >> 2] | 0;
    do if ($27) {
     $28 = HEAP32[$27 + 12 >> 2] | 0;
     if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i$i$i171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i$i$i171 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i171, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $283 = 1;
      break;
     } else {
      $283 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } else $283 = 1; while (0);
    do if ($32) {
     $33 = HEAP32[$32 + 12 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $retval$0$i$i13$i$i192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $retval$0$i$i13$i$i192 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i192, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($283) {
      $284 = $32;
      break;
     } else {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     } else {
      HEAP32[$__e >> 2] = 0;
      label = 61;
      break;
     }
    } else label = 61; while (0);
    if ((label | 0) == 61) {
     label = 0;
     if ($283) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     } else $284 = 0;
    }
    $37 = HEAP32[$__b >> 2] | 0;
    $38 = HEAP32[$37 + 12 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $retval$0$i$i211 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $retval$0$i$i211 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0;
    if (($retval$0$i$i211 & 255) << 24 >> 24 <= -1) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L289;
    }
    if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i211 << 24 >> 24 << 1) >> 1] & 8192)) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L289;
    }
    $44 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i224 = $44 + 12 | 0;
    $45 = HEAP32[$__ninp_$i$i224 >> 2] | 0;
    if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i234 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 40 >> 2] & 127]($44) | 0; else {
     HEAP32[$__ninp_$i$i224 >> 2] = $45 + 1;
     $retval$0$i$i234 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i234 & 255);
    $32 = $284;
   }
  } while (0);
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L326 : do if ((label | 0) == 45) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 105) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 148) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 204) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 230) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 241) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 243) {
  L328 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i927 = $__trailing_sign$0 + 11 | 0;
   $__size_$i3$i929 = $__trailing_sign$0 + 4 | 0;
   $__i$0 = 1;
   L330 : while (1) {
    $248 = HEAP8[$__size_$i$i927 >> 0] | 0;
    if ($248 << 24 >> 24 < 0) $cond$i933 = HEAP32[$__size_$i3$i929 >> 2] | 0; else $cond$i933 = $248 & 255;
    if ($__i$0 >>> 0 >= $cond$i933 >>> 0) break L328;
    $250 = HEAP32[$__b >> 2] | 0;
    do if ($250) {
     $251 = HEAP32[$250 + 12 >> 2] | 0;
     if (($251 | 0) == (HEAP32[$250 + 16 >> 2] | 0)) $retval$0$i$i$i$i511 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$250 >> 2] | 0) + 36 >> 2] & 127]($250) | 0; else $retval$0$i$i$i$i511 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$251 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i511, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $298 = 1;
      break;
     } else {
      $298 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } else $298 = 1; while (0);
    $255 = HEAP32[$__e >> 2] | 0;
    do if ($255) {
     $256 = HEAP32[$255 + 12 >> 2] | 0;
     if (($256 | 0) == (HEAP32[$255 + 16 >> 2] | 0)) $retval$0$i$i13$i$i532 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 36 >> 2] & 127]($255) | 0; else $retval$0$i$i13$i$i532 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$256 >> 0] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i532, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($298) break; else break L330; else {
      HEAP32[$__e >> 2] = 0;
      label = 262;
      break;
     }
    } else label = 262; while (0);
    if ((label | 0) == 262 ? (label = 0, $298) : 0) break;
    $260 = HEAP32[$__b >> 2] | 0;
    $261 = HEAP32[$260 + 12 >> 2] | 0;
    if (($261 | 0) == (HEAP32[$260 + 16 >> 2] | 0)) $retval$0$i$i483 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$260 >> 2] | 0) + 36 >> 2] & 127]($260) | 0; else $retval$0$i$i483 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$261 >> 0] | 0) | 0;
    if ((HEAP8[$__size_$i$i927 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if ((HEAP8[$cond$i$i$i + $__i$0 >> 0] | 0) != ($retval$0$i$i483 & 255) << 24 >> 24) break;
    $269 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $269 + 12 | 0;
    $270 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($270 | 0) == (HEAP32[$269 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$269 >> 2] | 0) + 40 >> 2] & 127]($269) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $270 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$270 >> 0] | 0) | 0;
    }
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L326;
  } while (0);
  $274 = HEAP32[$__gb >> 2] | 0;
  $275 = HEAP32[$__gn >> 2] | 0;
  if (($274 | 0) != ($275 | 0)) {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $274, $275, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  } else $retval$10 = 1;
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $278 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($278 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 255]($278);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $102 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $159 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $191 = 0, $193 = 0, $194 = 0, $198 = 0, $199 = 0, $203 = 0, $204 = 0, $210 = 0, $211 = 0, $216 = 0, $217 = 0, $221 = 0, $222 = 0, $226 = 0, $227 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $25 = 0, $251 = 0, $253 = 0, $254 = 0, $258 = 0, $259 = 0, $263 = 0, $264 = 0, $272 = 0, $273 = 0, $277 = 0, $278 = 0, $281 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, $90 = 0, $97 = 0, $98 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i101 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i146 = 0, $__ninp_$i$i215 = 0, $__ninp_$i$i277 = 0, $__ninp_$i$i305 = 0, $__ninp_$i$i345 = 0, $__ninp_$i$i385 = 0, $__ninp_$i$i609 = 0, $__ninp_$i$i701 = 0, $__ninp_$i$i769 = 0, $__ninp_$i$i851 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i404 = 0, $__size_$i$i231 = 0, $__size_$i$i428 = 0, $__size_$i$i694 = 0, $__size_$i$i863 = 0, $__size_$i2$i = 0, $__size_$i2$i$i541 = 0, $__size_$i2$i233 = 0, $__size_$i2$i430 = 0, $__size_$i2$i865 = 0, $__size_$i3$i = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i446 = 0, $add$ptr$i446898 = 0, $add$ptr$i458$pre$phiZZZ2D = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx89 = 0, $cmp$i$i266 = 0, $cmp$i$i347 = 0, $cmp26 = 0, $cmp94895 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i426 = 0, $cond$i237 = 0, $cond$i869 = 0, $conv$i$i432 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i169 = 0, $retval$0$i$i$i$i500 = 0, $retval$0$i$i$i$i565 = 0, $retval$0$i$i$i$i649 = 0, $retval$0$i$i$i$i725 = 0, $retval$0$i$i$i$i792 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i190 = 0, $retval$0$i$i13$i$i521 = 0, $retval$0$i$i13$i$i586 = 0, $retval$0$i$i13$i$i670 = 0, $retval$0$i$i13$i$i746 = 0, $retval$0$i$i13$i$i813 = 0, $retval$0$i$i156 = 0, $retval$0$i$i209 = 0, $retval$0$i$i225 = 0, $retval$0$i$i273 = 0, $retval$0$i$i334 = 0, $retval$0$i$i374 = 0, $retval$0$i$i471 = 0, $retval$0$i$i605 = 0, $retval$0$i$i689 = 0, $retval$0$i$i766 = 0, $retval$0$i$i833 = 0, $retval$0$i$i848 = 0, $retval$10 = 0, $sub$ptr$div$i = 0, $tobool$i$i$i412 = 0, $tobool$i$i$i539 = 0, $tobool$i$i$i623 = 0, $tobool$i$i429 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $__we$addr = sp + 496 | 0;
 $__gbuf = sp;
 $__gb = sp + 488 | 0;
 $__gn = sp + 480 | 0;
 $__ge = sp + 476 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 472 | 0;
 $__ts = sp + 468 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 197;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i101 = 0;
 while (1) {
  if (($__i$0$i$i101 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i101 << 2) >> 2] = 0;
  $__i$0$i$i101 = $__i$0$i$i101 + 1 | 0;
 }
 HEAP32[$__psn >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 HEAP32[$__nsn >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 HEAP32[$__spaces >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__size_$i$i = $__psn + 8 + 3 | 0;
 $__size_$i2$i = $__psn + 4 | 0;
 $__size_$i$i231 = $__nsn + 8 + 3 | 0;
 $__size_$i2$i233 = $__nsn + 4 | 0;
 $__size_$i$i694 = $__grp + 11 | 0;
 $__size_$i3$i = $__grp + 4 | 0;
 $cmp94895 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i404 = $__sym + 8 + 3 | 0;
 $arrayidx89 = $__pat + 3 | 0;
 $__size_$i2$i$i541 = $__sym + 4 | 0;
 $__size_$i$i428 = $__spaces + 8 + 3 | 0;
 $__size_$i2$i430 = $__spaces + 4 | 0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   label = 239;
   break;
  }
  $7 = HEAP32[$__b >> 2] | 0;
  do if ($7) {
   $8 = HEAP32[$7 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $283 = 1;
    break;
   } else {
    $283 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $283 = 1; while (0);
  $12 = HEAP32[$__e >> 2] | 0;
  do if ($12) {
   $13 = HEAP32[$12 + 12 >> 2] | 0;
   if (($13 | 0) == (HEAP32[$12 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$13 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($283) {
    $284 = $12;
    break;
   } else {
    label = 239;
    break L21;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   }
  } else label = 31; while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($283) {
    label = 239;
    break;
   } else $284 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else {
     $18 = HEAP32[$__b >> 2] | 0;
     $19 = HEAP32[$18 + 12 >> 2] | 0;
     if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i) | 0)) {
      label = 44;
      break L21;
     }
     $24 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i146 = $24 + 12 | 0;
     $25 = HEAP32[$__ninp_$i$i146 >> 2] | 0;
     if (($25 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $retval$0$i$i156 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 127]($24) | 0; else {
      HEAP32[$__ninp_$i$i146 >> 2] = $25 + 4;
      $retval$0$i$i156 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$25 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i156);
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else label = 46;
    break;
   }
  case 3:
   {
    $51 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i = $51 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $51 & 255;
    $53 = HEAP8[$__size_$i$i231 >> 0] | 0;
    $cond$i237 = $53 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $53 & 255;
    if (($cond$i | 0) == (0 - $cond$i237 | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
     $cmp26 = ($cond$i | 0) == 0;
     $55 = HEAP32[$__b >> 2] | 0;
     $56 = HEAP32[$55 + 12 >> 2] | 0;
     $cmp$i$i266 = ($56 | 0) == (HEAP32[$55 + 16 >> 2] | 0);
     if ($cmp26 | ($cond$i237 | 0) == 0) {
      if ($cmp$i$i266) $retval$0$i$i273 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 127]($55) | 0; else $retval$0$i$i273 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$56 >> 2] | 0) | 0;
      if ($cmp26) {
       if (($retval$0$i$i273 | 0) != (HEAP32[((HEAP8[$__size_$i$i231 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $73 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i305 = $73 + 12 | 0;
       $74 = HEAP32[$__ninp_$i$i305 >> 2] | 0;
       if (($74 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 40 >> 2] & 127]($73) | 0; else {
        HEAP32[$__ninp_$i$i305 >> 2] = $74 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$74 >> 2] | 0) | 0;
       }
       HEAP8[$__neg >> 0] = 1;
       $78 = HEAP8[$__size_$i$i231 >> 0] | 0;
       $__trailing_sign$1 = ($78 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $78 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if (($retval$0$i$i273 | 0) != (HEAP32[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $63 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i277 = $63 + 12 | 0;
      $64 = HEAP32[$__ninp_$i$i277 >> 2] | 0;
      if (($64 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 40 >> 2] & 127]($63) | 0; else {
       HEAP32[$__ninp_$i$i277 >> 2] = $64 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$64 >> 2] | 0) | 0;
      }
      $68 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($68 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $68 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i266) $retval$0$i$i334 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 127]($55) | 0; else $retval$0$i$i334 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$56 >> 2] | 0) | 0;
     $85 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i345 = $85 + 12 | 0;
     $86 = HEAP32[$__ninp_$i$i345 >> 2] | 0;
     $cmp$i$i347 = ($86 | 0) == (HEAP32[$85 + 16 >> 2] | 0);
     if (($retval$0$i$i334 | 0) == (HEAP32[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
      if ($cmp$i$i347) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 40 >> 2] & 127]($85) | 0; else {
       HEAP32[$__ninp_$i$i345 >> 2] = $86 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$86 >> 2] | 0) | 0;
      }
      $90 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($90 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $90 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i347) $retval$0$i$i374 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 127]($85) | 0; else $retval$0$i$i374 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$86 >> 2] | 0) | 0;
     if (($retval$0$i$i374 | 0) != (HEAP32[((HEAP8[$__size_$i$i231 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
      label = 103;
      break L21;
     }
     $97 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i385 = $97 + 12 | 0;
     $98 = HEAP32[$__ninp_$i$i385 >> 2] | 0;
     if (($98 | 0) == (HEAP32[$97 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 40 >> 2] & 127]($97) | 0; else {
      HEAP32[$__ninp_$i$i385 >> 2] = $98 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$98 >> 2] | 0) | 0;
     }
     HEAP8[$__neg >> 0] = 1;
     $102 = HEAP8[$__size_$i$i231 >> 0] | 0;
     $__trailing_sign$1 = ($102 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $102 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $110 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $111 = HEAP32[$__sym >> 2] | 0;
     $112 = $110 << 24 >> 24 < 0 ? $111 : $__sym;
     if (!$__p$0) {
      $291 = $111;
      $292 = $110;
      $__sym_space_end$sroa$0$1 = $112;
     } else {
      $288 = $112;
      $289 = $111;
      $290 = $110;
      label = 108;
     }
    } else {
     if (!($cmp94895 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx89 >> 0] | 0) != 0)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $107 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $108 = HEAP32[$__sym >> 2] | 0;
     $288 = $107 << 24 >> 24 < 0 ? $108 : $__sym;
     $289 = $108;
     $290 = $107;
     label = 108;
    }
    L108 : do if ((label | 0) == 108) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $114 = $290;
      $116 = $289;
      $__sym_space_end$sroa$0$0 = $288;
      while (1) {
       $tobool$i$i$i412 = $114 << 24 >> 24 < 0;
       $117 = $__sym_space_end$sroa$0$0;
       if ((($tobool$i$i$i412 ? $116 : $__sym) + (($tobool$i$i$i412 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $114 & 255) << 2) | 0) == ($117 | 0)) {
        $121 = $114;
        $122 = $116;
        break;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$117 >> 2] | 0) | 0)) {
        label = 112;
        break;
       }
       $114 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $116 = HEAP32[$__sym >> 2] | 0;
       $__sym_space_end$sroa$0$0 = $117 + 4 | 0;
      }
      if ((label | 0) == 112) {
       label = 0;
       $121 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $122 = HEAP32[$__sym >> 2] | 0;
      }
      $cond$i$i426 = $121 << 24 >> 24 < 0 ? $122 : $__sym;
      $123 = $cond$i$i426;
      $sub$ptr$div$i = $__sym_space_end$sroa$0$0 - $123 >> 2;
      $124 = HEAP8[$__size_$i$i428 >> 0] | 0;
      $tobool$i$i429 = $124 << 24 >> 24 < 0;
      $125 = HEAP32[$__size_$i2$i430 >> 2] | 0;
      $conv$i$i432 = $124 & 255;
      if ($sub$ptr$div$i >>> 0 > ($tobool$i$i429 ? $125 : $conv$i$i432) >>> 0) {
       $291 = $122;
       $292 = $121;
       $__sym_space_end$sroa$0$1 = $123;
      } else {
       $add$ptr$i446898 = (HEAP32[$__spaces >> 2] | 0) + ($125 << 2) | 0;
       $add$ptr$i446 = $__spaces + ($conv$i$i432 << 2) | 0;
       $add$ptr$i458$pre$phiZZZ2D = $tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446;
       $127 = ($tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446) + (0 - $sub$ptr$div$i << 2) | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i426;
       while (1) {
        if (($127 | 0) == ($add$ptr$i458$pre$phiZZZ2D | 0)) {
         $291 = $122;
         $292 = $121;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L108;
        }
        if ((HEAP32[$127 >> 2] | 0) != (HEAP32[$agg$tmp26$sroa$0$0$ptr$i >> 2] | 0)) {
         $291 = $122;
         $292 = $121;
         $__sym_space_end$sroa$0$1 = $123;
         break L108;
        }
        $127 = $127 + 4 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 4 | 0;
       }
      }
     } else {
      $291 = $289;
      $292 = $290;
      $__sym_space_end$sroa$0$1 = $288;
     }
    } while (0);
    $130 = $292;
    $132 = $291;
    $138 = $284;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    L124 : while (1) {
     $tobool$i$i$i539 = $130 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i539 ? $132 : $__sym) + (($tobool$i$i$i539 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $130 & 255) << 2) | 0)) break;
     $133 = HEAP32[$__b >> 2] | 0;
     do if ($133) {
      $134 = HEAP32[$133 + 12 >> 2] | 0;
      if (($134 | 0) == (HEAP32[$133 + 16 >> 2] | 0)) $retval$0$i$i$i$i565 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 127]($133) | 0; else $retval$0$i$i$i$i565 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$134 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i565, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $293 = 1;
       break;
      } else {
       $293 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $293 = 1; while (0);
     do if ($138) {
      $139 = HEAP32[$138 + 12 >> 2] | 0;
      if (($139 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) $retval$0$i$i13$i$i586 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 36 >> 2] & 127]($138) | 0; else $retval$0$i$i13$i$i586 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$139 >> 2] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i586, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($293) {
       $294 = $138;
       break;
      } else break L124; else {
       HEAP32[$__e >> 2] = 0;
       label = 134;
       break;
      }
     } else label = 134; while (0);
     if ((label | 0) == 134) {
      label = 0;
      if ($293) break; else $294 = 0;
     }
     $143 = HEAP32[$__b >> 2] | 0;
     $144 = HEAP32[$143 + 12 >> 2] | 0;
     if (($144 | 0) == (HEAP32[$143 + 16 >> 2] | 0)) $retval$0$i$i605 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$143 >> 2] | 0) + 36 >> 2] & 127]($143) | 0; else $retval$0$i$i605 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$144 >> 2] | 0) | 0;
     if (($retval$0$i$i605 | 0) != (HEAP32[$__sym_curr_char$sroa$0$0$ptr >> 2] | 0)) break;
     $149 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i609 = $149 + 12 | 0;
     $150 = HEAP32[$__ninp_$i$i609 >> 2] | 0;
     if (($150 | 0) == (HEAP32[$149 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$149 >> 2] | 0) + 40 >> 2] & 127]($149) | 0; else {
      HEAP32[$__ninp_$i$i609 >> 2] = $150 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$150 >> 2] | 0) | 0;
     }
     $130 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $132 = HEAP32[$__sym >> 2] | 0;
     $138 = $294;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 4 | 0;
    }
    if ($cmp94895 ? ($154 = HEAP8[$__size_$i$i$i404 >> 0] | 0, $tobool$i$i$i623 = $154 << 24 >> 24 < 0, ($__sym_curr_char$sroa$0$0$ptr | 0) != (($tobool$i$i$i623 ? HEAP32[$__sym >> 2] | 0 : $__sym) + (($tobool$i$i$i623 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $154 & 255) << 2) | 0)) : 0) {
     label = 146;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  case 4:
   {
    $163 = $284;
    $285 = $284;
    $__ng$0 = 0;
    L161 : while (1) {
     $158 = HEAP32[$__b >> 2] | 0;
     do if ($158) {
      $159 = HEAP32[$158 + 12 >> 2] | 0;
      if (($159 | 0) == (HEAP32[$158 + 16 >> 2] | 0)) $retval$0$i$i$i$i649 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$158 >> 2] | 0) + 36 >> 2] & 127]($158) | 0; else $retval$0$i$i$i$i649 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i649, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $295 = 1;
       break;
      } else {
       $295 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $295 = 1; while (0);
     do if ($163) {
      $164 = HEAP32[$163 + 12 >> 2] | 0;
      if (($164 | 0) == (HEAP32[$163 + 16 >> 2] | 0)) $retval$0$i$i13$i$i670 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$163 >> 2] | 0) + 36 >> 2] & 127]($163) | 0; else $retval$0$i$i13$i$i670 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i670, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($295) {
       $297 = $285;
       $298 = $163;
       break;
      } else {
       $198 = $285;
       break L161;
      } else {
       HEAP32[$__e >> 2] = 0;
       $296 = 0;
       label = 160;
       break;
      }
     } else {
      $296 = $285;
      label = 160;
     } while (0);
     if ((label | 0) == 160) {
      label = 0;
      if ($295) {
       $198 = $296;
       break;
      } else {
       $297 = $296;
       $298 = 0;
      }
     }
     $168 = HEAP32[$__b >> 2] | 0;
     $169 = HEAP32[$168 + 12 >> 2] | 0;
     if (($169 | 0) == (HEAP32[$168 + 16 >> 2] | 0)) $retval$0$i$i689 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$168 >> 2] | 0) + 36 >> 2] & 127]($168) | 0; else $retval$0$i$i689 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i689) | 0) {
      $174 = HEAP32[$__wn >> 2] | 0;
      if (($174 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $176 = HEAP32[$__wn >> 2] | 0;
      } else $176 = $174;
      HEAP32[$__wn >> 2] = $176 + 4;
      HEAP32[$176 >> 2] = $retval$0$i$i689;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $177 = HEAP8[$__size_$i$i694 >> 0] | 0;
      if (!(($retval$0$i$i689 | 0) == (HEAP32[$__ts >> 2] | 0) & ($__ng$0 | 0 ? (($177 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $177 & 255) | 0) != 0 : 0))) {
       $198 = $297;
       break;
      }
      $180 = HEAP32[$__gn >> 2] | 0;
      if (($180 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $182 = HEAP32[$__gn >> 2] | 0;
      } else $182 = $180;
      HEAP32[$__gn >> 2] = $182 + 4;
      HEAP32[$182 >> 2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $183 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i701 = $183 + 12 | 0;
     $184 = HEAP32[$__ninp_$i$i701 >> 2] | 0;
     if (($184 | 0) == (HEAP32[$183 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$183 >> 2] | 0) + 40 >> 2] & 127]($183) | 0; else {
      HEAP32[$__ninp_$i$i701 >> 2] = $184 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$184 >> 2] | 0) | 0;
     }
     $163 = $298;
     $285 = $297;
     $__ng$0 = $__ng$2$ph;
    }
    $189 = HEAP32[$__gn >> 2] | 0;
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($189 | 0) : 0) {
     if (($189 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $191 = HEAP32[$__gn >> 2] | 0;
     } else $191 = $189;
     HEAP32[$__gn >> 2] = $191 + 4;
     HEAP32[$191 >> 2] = $__ng$0;
    }
    L211 : do if ((HEAP32[$__fd >> 2] | 0) > 0) {
     $193 = HEAP32[$__b >> 2] | 0;
     do if ($193) {
      $194 = HEAP32[$193 + 12 >> 2] | 0;
      if (($194 | 0) == (HEAP32[$193 + 16 >> 2] | 0)) $retval$0$i$i$i$i725 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$193 >> 2] | 0) + 36 >> 2] & 127]($193) | 0; else $retval$0$i$i$i$i725 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$194 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i725, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $299 = 1;
       break;
      } else {
       $299 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } else $299 = 1; while (0);
     do if ($198) {
      $199 = HEAP32[$198 + 12 >> 2] | 0;
      if (($199 | 0) == (HEAP32[$198 + 16 >> 2] | 0)) $retval$0$i$i13$i$i746 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$198 >> 2] | 0) + 36 >> 2] & 127]($198) | 0; else $retval$0$i$i13$i$i746 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$199 >> 2] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i746, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($299) {
       $300 = $198;
       break;
      } else {
       label = 201;
       break L21;
      } else {
       HEAP32[$__e >> 2] = 0;
       label = 195;
       break;
      }
     } else label = 195; while (0);
     if ((label | 0) == 195) {
      label = 0;
      if ($299) {
       label = 201;
       break L21;
      } else $300 = 0;
     }
     $203 = HEAP32[$__b >> 2] | 0;
     $204 = HEAP32[$203 + 12 >> 2] | 0;
     if (($204 | 0) == (HEAP32[$203 + 16 >> 2] | 0)) $retval$0$i$i766 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 36 >> 2] & 127]($203) | 0; else $retval$0$i$i766 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$204 >> 2] | 0) | 0;
     if (($retval$0$i$i766 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 201;
      break L21;
     }
     $210 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i769 = $210 + 12 | 0;
     $211 = HEAP32[$__ninp_$i$i769 >> 2] | 0;
     if (($211 | 0) == (HEAP32[$210 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$210 >> 2] | 0) + 40 >> 2] & 127]($210) | 0; else {
      HEAP32[$__ninp_$i$i769 >> 2] = $211 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$211 >> 2] | 0) | 0;
     }
     $221 = $300;
     while (1) {
      if ((HEAP32[$__fd >> 2] | 0) <= 0) break L211;
      $216 = HEAP32[$__b >> 2] | 0;
      do if ($216) {
       $217 = HEAP32[$216 + 12 >> 2] | 0;
       if (($217 | 0) == (HEAP32[$216 + 16 >> 2] | 0)) $retval$0$i$i$i$i792 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$216 >> 2] | 0) + 36 >> 2] & 127]($216) | 0; else $retval$0$i$i$i$i792 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$217 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i792, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$__b >> 2] = 0;
        $301 = 1;
        break;
       } else {
        $301 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } else $301 = 1; while (0);
      do if ($221) {
       $222 = HEAP32[$221 + 12 >> 2] | 0;
       if (($222 | 0) == (HEAP32[$221 + 16 >> 2] | 0)) $retval$0$i$i13$i$i813 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$221 >> 2] | 0) + 36 >> 2] & 127]($221) | 0; else $retval$0$i$i13$i$i813 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$222 >> 2] | 0) | 0;
       if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i813, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($301) {
        $302 = $221;
        break;
       } else {
        label = 226;
        break L21;
       } else {
        HEAP32[$__e >> 2] = 0;
        label = 220;
        break;
       }
      } else label = 220; while (0);
      if ((label | 0) == 220) {
       label = 0;
       if ($301) {
        label = 226;
        break L21;
       } else $302 = 0;
      }
      $226 = HEAP32[$__b >> 2] | 0;
      $227 = HEAP32[$226 + 12 >> 2] | 0;
      if (($227 | 0) == (HEAP32[$226 + 16 >> 2] | 0)) $retval$0$i$i833 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$226 >> 2] | 0) + 36 >> 2] & 127]($226) | 0; else $retval$0$i$i833 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$227 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i833) | 0)) {
       label = 226;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $235 = HEAP32[$__b >> 2] | 0;
      $236 = HEAP32[$235 + 12 >> 2] | 0;
      if (($236 | 0) == (HEAP32[$235 + 16 >> 2] | 0)) $retval$0$i$i848 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$235 >> 2] | 0) + 36 >> 2] & 127]($235) | 0; else $retval$0$i$i848 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$236 >> 2] | 0) | 0;
      $240 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $240 + 4;
      HEAP32[$240 >> 2] = $retval$0$i$i848;
      HEAP32[$__fd >> 2] = (HEAP32[$__fd >> 2] | 0) + -1;
      $242 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i851 = $242 + 12 | 0;
      $243 = HEAP32[$__ninp_$i$i851 >> 2] | 0;
      if (($243 | 0) == (HEAP32[$242 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$242 >> 2] | 0) + 40 >> 2] & 127]($242) | 0; else {
       HEAP32[$__ninp_$i$i851 >> 2] = $243 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$243 >> 2] | 0) | 0;
      }
      $221 = $302;
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 237;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  default:
   $__trailing_sign$1 = $__trailing_sign$0;
  } while (0);
  L286 : do if ((label | 0) == 46) {
   label = 0;
   $35 = $284;
   while (1) {
    $30 = HEAP32[$__b >> 2] | 0;
    do if ($30) {
     $31 = HEAP32[$30 + 12 >> 2] | 0;
     if (($31 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $retval$0$i$i$i$i169 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $retval$0$i$i$i$i169 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$31 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i169, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $286 = 1;
      break;
     } else {
      $286 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } else $286 = 1; while (0);
    do if ($35) {
     $36 = HEAP32[$35 + 12 >> 2] | 0;
     if (($36 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $retval$0$i$i13$i$i190 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $retval$0$i$i13$i$i190 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i190, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($286) {
      $287 = $35;
      break;
     } else {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L286;
     } else {
      HEAP32[$__e >> 2] = 0;
      label = 60;
      break;
     }
    } else label = 60; while (0);
    if ((label | 0) == 60) {
     label = 0;
     if ($286) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L286;
     } else $287 = 0;
    }
    $40 = HEAP32[$__b >> 2] | 0;
    $41 = HEAP32[$40 + 12 >> 2] | 0;
    if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i209 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 127]($40) | 0; else $retval$0$i$i209 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i209) | 0)) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L286;
    }
    $46 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i215 = $46 + 12 | 0;
    $47 = HEAP32[$__ninp_$i$i215 >> 2] | 0;
    if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i225 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 127]($46) | 0; else {
     HEAP32[$__ninp_$i$i215 >> 2] = $47 + 4;
     $retval$0$i$i225 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$47 >> 2] | 0) | 0;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i225);
    $35 = $287;
   }
  } while (0);
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L322 : do if ((label | 0) == 44) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 103) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 146) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 201) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 226) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 237) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 239) {
  L324 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i863 = $__trailing_sign$0 + 8 + 3 | 0;
   $__size_$i2$i865 = $__trailing_sign$0 + 4 | 0;
   $__i$0 = 1;
   L326 : while (1) {
    $251 = HEAP8[$__size_$i$i863 >> 0] | 0;
    if ($251 << 24 >> 24 < 0) $cond$i869 = HEAP32[$__size_$i2$i865 >> 2] | 0; else $cond$i869 = $251 & 255;
    if ($__i$0 >>> 0 >= $cond$i869 >>> 0) break L324;
    $253 = HEAP32[$__b >> 2] | 0;
    do if ($253) {
     $254 = HEAP32[$253 + 12 >> 2] | 0;
     if (($254 | 0) == (HEAP32[$253 + 16 >> 2] | 0)) $retval$0$i$i$i$i500 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$253 >> 2] | 0) + 36 >> 2] & 127]($253) | 0; else $retval$0$i$i$i$i500 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$254 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i500, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $303 = 1;
      break;
     } else {
      $303 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } else $303 = 1; while (0);
    $258 = HEAP32[$__e >> 2] | 0;
    do if ($258) {
     $259 = HEAP32[$258 + 12 >> 2] | 0;
     if (($259 | 0) == (HEAP32[$258 + 16 >> 2] | 0)) $retval$0$i$i13$i$i521 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$258 >> 2] | 0) + 36 >> 2] & 127]($258) | 0; else $retval$0$i$i13$i$i521 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$259 >> 2] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i521, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($303) break; else break L326; else {
      HEAP32[$__e >> 2] = 0;
      label = 258;
      break;
     }
    } else label = 258; while (0);
    if ((label | 0) == 258 ? (label = 0, $303) : 0) break;
    $263 = HEAP32[$__b >> 2] | 0;
    $264 = HEAP32[$263 + 12 >> 2] | 0;
    if (($264 | 0) == (HEAP32[$263 + 16 >> 2] | 0)) $retval$0$i$i471 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$263 >> 2] | 0) + 36 >> 2] & 127]($263) | 0; else $retval$0$i$i471 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$264 >> 2] | 0) | 0;
    if ((HEAP8[$__size_$i$i863 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if (($retval$0$i$i471 | 0) != (HEAP32[$cond$i$i$i + ($__i$0 << 2) >> 2] | 0)) break;
    $272 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $272 + 12 | 0;
    $273 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($273 | 0) == (HEAP32[$272 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$272 >> 2] | 0) + 40 >> 2] & 127]($272) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $273 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$273 >> 2] | 0) | 0;
    }
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L322;
  } while (0);
  $277 = HEAP32[$__gb >> 2] | 0;
  $278 = HEAP32[$__gn >> 2] | 0;
  if (($277 | 0) != ($278 | 0)) {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $277, $278, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  } else $retval$10 = 1;
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $281 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($281 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 255]($281);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _jpeg_make_d_derived_tbl($cinfo, $isDC, $tblno, $pdtbl) {
 $cinfo = $cinfo | 0;
 $isDC = $isDC | 0;
 $tblno = $tblno | 0;
 $pdtbl = $pdtbl | 0;
 var $$pre$phiZ2D = 0, $$sink = 0, $$sink$1 = 0, $$sink$10 = 0, $$sink$11 = 0, $$sink$12 = 0, $$sink$13 = 0, $$sink$14 = 0, $$sink$15 = 0, $$sink$2 = 0, $$sink$3 = 0, $$sink$4 = 0, $$sink$5 = 0, $$sink$6 = 0, $$sink$7 = 0, $$sink$8 = 0, $$sink$9 = 0, $1 = 0, $10 = 0, $11 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $199 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $30 = 0, $4 = 0, $7 = 0, $add$1 = 0, $add$10 = 0, $add$11 = 0, $add$12 = 0, $add$13 = 0, $add$14 = 0, $add$15 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$6 = 0, $add$7 = 0, $add$8 = 0, $add$9 = 0, $add79$1 = 0, $add79$10 = 0, $add79$11 = 0, $add79$12 = 0, $add79$13 = 0, $add79$14 = 0, $add79$2 = 0, $add79$3 = 0, $add79$4 = 0, $add79$5 = 0, $add79$6 = 0, $add79$7 = 0, $add79$8 = 0, $add79$9 = 0, $arrayidx113$us = 0, $arrayidx113$us$1 = 0, $arrayidx113$us$2 = 0, $arrayidx113$us$3 = 0, $arrayidx113$us$4 = 0, $arrayidx113$us$5 = 0, $arrayidx113$us$6 = 0, $arrayidx71 = 0, $arrayidx71$1 = 0, $arrayidx71$10 = 0, $arrayidx71$11 = 0, $arrayidx71$12 = 0, $arrayidx71$13 = 0, $arrayidx71$14 = 0, $arrayidx71$15 = 0, $arrayidx71$2 = 0, $arrayidx71$3 = 0, $arrayidx71$4 = 0, $arrayidx71$5 = 0, $arrayidx71$6 = 0, $arrayidx71$7 = 0, $arrayidx71$8 = 0, $arrayidx71$9 = 0, $arrayidx97 = 0, $arrayidx97$1 = 0, $arrayidx97$2 = 0, $arrayidx97$3 = 0, $arrayidx97$4 = 0, $arrayidx97$5 = 0, $arrayidx97$6 = 0, $arrayidx97$7 = 0, $call = 0, $code$0123 = 0, $code$1$lcssa = 0, $code$1115 = 0, $cond = 0, $conv = 0, $conv$1 = 0, $conv$10 = 0, $conv$11 = 0, $conv$12 = 0, $conv$13 = 0, $conv$14 = 0, $conv$15 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$6 = 0, $conv$7 = 0, $conv$8 = 0, $conv$9 = 0, $conv78 = 0, $ctr$0101$us = 0, $ctr$0101$us$1 = 0, $huffcode = 0, $huffsize = 0, $i$1104$us = 0, $i$1104$us$1 = 0, $i$1104$us$2 = 0, $i$1104$us$3 = 0, $i$1104$us$4 = 0, $i$1104$us$5 = 0, $i$1104$us$6 = 0, $i$1104$us$7 = 0, $i$298 = 0, $inc115$us$2 = 0, $inc115$us$2$1 = 0, $inc115$us$2$10 = 0, $inc115$us$2$11 = 0, $inc115$us$2$12 = 0, $inc115$us$2$13 = 0, $inc115$us$2$14 = 0, $inc115$us$2$15 = 0, $inc115$us$2$16 = 0, $inc115$us$2$17 = 0, $inc115$us$2$18 = 0, $inc115$us$2$19 = 0, $inc115$us$2$2 = 0, $inc115$us$2$20 = 0, $inc115$us$2$21 = 0, $inc115$us$2$22 = 0, $inc115$us$2$23 = 0, $inc115$us$2$24 = 0, $inc115$us$2$25 = 0, $inc115$us$2$26 = 0, $inc115$us$2$27 = 0, $inc115$us$2$28 = 0, $inc115$us$2$29 = 0, $inc115$us$2$3 = 0, $inc115$us$2$30 = 0, $inc115$us$2$4 = 0, $inc115$us$2$5 = 0, $inc115$us$2$6 = 0, $inc115$us$2$7 = 0, $inc115$us$2$8 = 0, $inc115$us$2$9 = 0, $inc115$us$3 = 0, $inc115$us$3$1 = 0, $inc115$us$3$10 = 0, $inc115$us$3$11 = 0, $inc115$us$3$12 = 0, $inc115$us$3$13 = 0, $inc115$us$3$14 = 0, $inc115$us$3$2 = 0, $inc115$us$3$3 = 0, $inc115$us$3$4 = 0, $inc115$us$3$5 = 0, $inc115$us$3$6 = 0, $inc115$us$3$7 = 0, $inc115$us$3$8 = 0, $inc115$us$3$9 = 0, $inc115$us$4 = 0, $inc115$us$4$1 = 0, $inc115$us$4$2 = 0, $inc115$us$4$3 = 0, $inc115$us$4$4 = 0, $inc115$us$4$5 = 0, $inc115$us$4$6 = 0, $inc115$us$5 = 0, $inc115$us$5$1 = 0, $inc115$us$5$2 = 0, $inc115$us$6 = 0, $inc121$us = 0, $inc121$us$1 = 0, $inc121$us$2 = 0, $inc121$us$3 = 0, $inc121$us$4 = 0, $inc121$us$5 = 0, $inc121$us$6 = 0, $inc51 = 0, $inc53 = 0, $lookbits$0100$us = 0, $lookbits$0100$us$1 = 0, $p$1$lcssa = 0, $p$1$lcssa$1 = 0, $p$1$lcssa$10 = 0, $p$1$lcssa$11 = 0, $p$1$lcssa$12 = 0, $p$1$lcssa$13 = 0, $p$1$lcssa$14 = 0, $p$1$lcssa$15 = 0, $p$1$lcssa$2 = 0, $p$1$lcssa$3 = 0, $p$1$lcssa$4 = 0, $p$1$lcssa$5 = 0, $p$1$lcssa$6 = 0, $p$1$lcssa$7 = 0, $p$1$lcssa$8 = 0, $p$1$lcssa$9 = 0, $p$2124 = 0, $p$3$lcssa = 0, $p$3116 = 0, $p$5 = 0, $p$5$1 = 0, $p$5$10 = 0, $p$5$11 = 0, $p$5$12 = 0, $p$5$13 = 0, $p$5$14 = 0, $p$5$2 = 0, $p$5$3 = 0, $p$5$4 = 0, $p$5$5 = 0, $p$5$6 = 0, $p$5$7 = 0, $p$5$8 = 0, $p$5$9 = 0, $p$7$lcssa = 0, $p$7$lcssa$1 = 0, $p$7$lcssa$2 = 0, $p$7$lcssa$3 = 0, $p$7$lcssa$4 = 0, $p$7$lcssa$5 = 0, $p$7$lcssa$6 = 0, $p$7105$us = 0, $p$7105$us$1 = 0, $p$7105$us$2 = 0, $p$7105$us$3 = 0, $p$7105$us$4 = 0, $p$7105$us$5 = 0, $p$7105$us$6 = 0, $p$7105$us$7 = 0, $shl104$us$2 = 0, $shl104$us$3 = 0, $shl104$us$4 = 0, $shl104$us$5 = 0, $shl104$us$6 = 0, $si$0121 = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312);
 $huffsize = sp + 1040 | 0;
 $huffcode = sp;
 if ($tblno >>> 0 > 3) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 52;
  HEAP32[$1 + 24 >> 2] = $tblno;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $tobool = ($isDC | 0) != 0;
 $cond = HEAP32[($tobool ? $cinfo + 180 + ($tblno << 2) | 0 : $cinfo + 196 + ($tblno << 2) | 0) >> 2] | 0;
 if (!$cond) {
  $4 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$4 + 20 >> 2] = 52;
  HEAP32[$4 + 24 >> 2] = $tblno;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $7 = HEAP32[$pdtbl >> 2] | 0;
 if (!$7) {
  $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 1, 1424) | 0;
  HEAP32[$pdtbl >> 2] = $call;
  $$pre$phiZ2D = $cinfo;
  $10 = $call;
 } else {
  $$pre$phiZ2D = $cinfo;
  $10 = $7;
 }
 HEAP32[$10 + 140 >> 2] = $cond;
 $11 = HEAP8[$cond + 1 >> 0] | 0;
 $conv = $11 & 255;
 if (!($11 << 24 >> 24)) $p$1$lcssa = 0; else {
  _memset($huffsize | 0, 1, $conv | 0) | 0;
  $p$1$lcssa = $conv;
 }
 $12 = HEAP8[$cond + 2 >> 0] | 0;
 $conv$1 = $12 & 255;
 $add$1 = $p$1$lcssa + $conv$1 | 0;
 if ($add$1 >>> 0 > 256) {
  $191 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$191 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$191 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($12 << 24 >> 24)) $p$1$lcssa$1 = $p$1$lcssa; else {
  _memset($huffsize + $p$1$lcssa | 0, 2, $conv$1 | 0) | 0;
  $p$1$lcssa$1 = $add$1;
 }
 $193 = HEAP8[$cond + 3 >> 0] | 0;
 $conv$2 = $193 & 255;
 $add$2 = $p$1$lcssa$1 + $conv$2 | 0;
 if (($add$2 | 0) > 256) {
  $194 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$194 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$194 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($193 << 24 >> 24)) $p$1$lcssa$2 = $p$1$lcssa$1; else {
  _memset($huffsize + $p$1$lcssa$1 | 0, 3, $conv$2 | 0) | 0;
  $p$1$lcssa$2 = $add$2;
 }
 $196 = HEAP8[$cond + 4 >> 0] | 0;
 $conv$3 = $196 & 255;
 $add$3 = $p$1$lcssa$2 + $conv$3 | 0;
 if (($add$3 | 0) > 256) {
  $197 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$197 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$197 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($196 << 24 >> 24)) $p$1$lcssa$3 = $p$1$lcssa$2; else {
  _memset($huffsize + $p$1$lcssa$2 | 0, 4, $conv$3 | 0) | 0;
  $p$1$lcssa$3 = $add$3;
 }
 $199 = HEAP8[$cond + 5 >> 0] | 0;
 $conv$4 = $199 & 255;
 $add$4 = $p$1$lcssa$3 + $conv$4 | 0;
 if (($add$4 | 0) > 256) {
  $200 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$200 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$200 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($199 << 24 >> 24)) $p$1$lcssa$4 = $p$1$lcssa$3; else {
  _memset($huffsize + $p$1$lcssa$3 | 0, 5, $conv$4 | 0) | 0;
  $p$1$lcssa$4 = $add$4;
 }
 $202 = HEAP8[$cond + 6 >> 0] | 0;
 $conv$5 = $202 & 255;
 $add$5 = $p$1$lcssa$4 + $conv$5 | 0;
 if (($add$5 | 0) > 256) {
  $203 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$203 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$203 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($202 << 24 >> 24)) $p$1$lcssa$5 = $p$1$lcssa$4; else {
  _memset($huffsize + $p$1$lcssa$4 | 0, 6, $conv$5 | 0) | 0;
  $p$1$lcssa$5 = $add$5;
 }
 $205 = HEAP8[$cond + 7 >> 0] | 0;
 $conv$6 = $205 & 255;
 $add$6 = $p$1$lcssa$5 + $conv$6 | 0;
 if (($add$6 | 0) > 256) {
  $206 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$206 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$206 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($205 << 24 >> 24)) $p$1$lcssa$6 = $p$1$lcssa$5; else {
  _memset($huffsize + $p$1$lcssa$5 | 0, 7, $conv$6 | 0) | 0;
  $p$1$lcssa$6 = $add$6;
 }
 $208 = HEAP8[$cond + 8 >> 0] | 0;
 $conv$7 = $208 & 255;
 $add$7 = $p$1$lcssa$6 + $conv$7 | 0;
 if (($add$7 | 0) > 256) {
  $209 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$209 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$209 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($208 << 24 >> 24)) $p$1$lcssa$7 = $p$1$lcssa$6; else {
  _memset($huffsize + $p$1$lcssa$6 | 0, 8, $conv$7 | 0) | 0;
  $p$1$lcssa$7 = $add$7;
 }
 $211 = HEAP8[$cond + 9 >> 0] | 0;
 $conv$8 = $211 & 255;
 $add$8 = $p$1$lcssa$7 + $conv$8 | 0;
 if (($add$8 | 0) > 256) {
  $212 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$212 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$212 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($211 << 24 >> 24)) $p$1$lcssa$8 = $p$1$lcssa$7; else {
  _memset($huffsize + $p$1$lcssa$7 | 0, 9, $conv$8 | 0) | 0;
  $p$1$lcssa$8 = $add$8;
 }
 $214 = HEAP8[$cond + 10 >> 0] | 0;
 $conv$9 = $214 & 255;
 $add$9 = $p$1$lcssa$8 + $conv$9 | 0;
 if (($add$9 | 0) > 256) {
  $215 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$215 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$215 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($214 << 24 >> 24)) $p$1$lcssa$9 = $p$1$lcssa$8; else {
  _memset($huffsize + $p$1$lcssa$8 | 0, 10, $conv$9 | 0) | 0;
  $p$1$lcssa$9 = $add$9;
 }
 $217 = HEAP8[$cond + 11 >> 0] | 0;
 $conv$10 = $217 & 255;
 $add$10 = $p$1$lcssa$9 + $conv$10 | 0;
 if (($add$10 | 0) > 256) {
  $218 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$218 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$218 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($217 << 24 >> 24)) $p$1$lcssa$10 = $p$1$lcssa$9; else {
  _memset($huffsize + $p$1$lcssa$9 | 0, 11, $conv$10 | 0) | 0;
  $p$1$lcssa$10 = $add$10;
 }
 $220 = HEAP8[$cond + 12 >> 0] | 0;
 $conv$11 = $220 & 255;
 $add$11 = $p$1$lcssa$10 + $conv$11 | 0;
 if (($add$11 | 0) > 256) {
  $221 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$221 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$221 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($220 << 24 >> 24)) $p$1$lcssa$11 = $p$1$lcssa$10; else {
  _memset($huffsize + $p$1$lcssa$10 | 0, 12, $conv$11 | 0) | 0;
  $p$1$lcssa$11 = $add$11;
 }
 $223 = HEAP8[$cond + 13 >> 0] | 0;
 $conv$12 = $223 & 255;
 $add$12 = $p$1$lcssa$11 + $conv$12 | 0;
 if (($add$12 | 0) > 256) {
  $224 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$224 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$224 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($223 << 24 >> 24)) $p$1$lcssa$12 = $p$1$lcssa$11; else {
  _memset($huffsize + $p$1$lcssa$11 | 0, 13, $conv$12 | 0) | 0;
  $p$1$lcssa$12 = $add$12;
 }
 $226 = HEAP8[$cond + 14 >> 0] | 0;
 $conv$13 = $226 & 255;
 $add$13 = $p$1$lcssa$12 + $conv$13 | 0;
 if (($add$13 | 0) > 256) {
  $227 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$227 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$227 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($226 << 24 >> 24)) $p$1$lcssa$13 = $p$1$lcssa$12; else {
  _memset($huffsize + $p$1$lcssa$12 | 0, 14, $conv$13 | 0) | 0;
  $p$1$lcssa$13 = $add$13;
 }
 $229 = HEAP8[$cond + 15 >> 0] | 0;
 $conv$14 = $229 & 255;
 $add$14 = $p$1$lcssa$13 + $conv$14 | 0;
 if (($add$14 | 0) > 256) {
  $230 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$230 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$230 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($229 << 24 >> 24)) $p$1$lcssa$14 = $p$1$lcssa$13; else {
  _memset($huffsize + $p$1$lcssa$13 | 0, 15, $conv$14 | 0) | 0;
  $p$1$lcssa$14 = $add$14;
 }
 $232 = HEAP8[$cond + 16 >> 0] | 0;
 $conv$15 = $232 & 255;
 $add$15 = $p$1$lcssa$14 + $conv$15 | 0;
 if (($add$15 | 0) > 256) {
  $233 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$233 + 20 >> 2] = 9;
  FUNCTION_TABLE_vi[HEAP32[$233 >> 2] & 255]($$pre$phiZ2D);
 }
 if (!($232 << 24 >> 24)) $p$1$lcssa$15 = $p$1$lcssa$14; else {
  _memset($huffsize + $p$1$lcssa$14 | 0, 16, $conv$15 | 0) | 0;
  $p$1$lcssa$15 = $add$15;
 }
 HEAP8[$huffsize + $p$1$lcssa$15 >> 0] = 0;
 $13 = HEAP8[$huffsize >> 0] | 0;
 if ($13 << 24 >> 24) {
  $14 = $13;
  $code$0123 = 0;
  $p$2124 = 0;
  $si$0121 = $13 << 24 >> 24;
  while (1) {
   if (($si$0121 | 0) == ($14 << 24 >> 24 | 0)) {
    $code$1115 = $code$0123;
    $p$3116 = $p$2124;
    while (1) {
     $inc51 = $p$3116 + 1 | 0;
     HEAP32[$huffcode + ($p$3116 << 2) >> 2] = $code$1115;
     $inc53 = $code$1115 + 1 | 0;
     $15 = HEAP8[$huffsize + $inc51 >> 0] | 0;
     if (($si$0121 | 0) == ($15 << 24 >> 24 | 0)) {
      $code$1115 = $inc53;
      $p$3116 = $inc51;
     } else {
      $18 = $15;
      $code$1$lcssa = $inc53;
      $p$3$lcssa = $inc51;
      break;
     }
    }
   } else {
    $18 = $14;
    $code$1$lcssa = $code$0123;
    $p$3$lcssa = $p$2124;
   }
   if (($code$1$lcssa | 0) >= (1 << $si$0121 | 0)) {
    $16 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$16 + 20 >> 2] = 9;
    FUNCTION_TABLE_vi[HEAP32[$16 >> 2] & 255]($$pre$phiZ2D);
   }
   if (!($18 << 24 >> 24)) break; else {
    $14 = $18;
    $code$0123 = $code$1$lcssa << 1;
    $p$2124 = $p$3$lcssa;
    $si$0121 = $si$0121 + 1 | 0;
   }
  }
 }
 $arrayidx71 = $cond + 1 | 0;
 if (!(HEAP8[$arrayidx71 >> 0] | 0)) {
  $$sink = -1;
  $p$5 = 0;
 } else {
  HEAP32[$10 + 76 >> 2] = 0 - (HEAP32[$huffcode >> 2] | 0);
  $conv78 = HEAPU8[$arrayidx71 >> 0] | 0;
  $$sink = HEAP32[$huffcode + ($conv78 + -1 << 2) >> 2] | 0;
  $p$5 = $conv78;
 }
 HEAP32[$10 + 4 >> 2] = $$sink;
 $arrayidx71$1 = $cond + 2 | 0;
 if (!(HEAP8[$arrayidx71$1 >> 0] | 0)) {
  $$sink$1 = -1;
  $p$5$1 = $p$5;
 } else {
  HEAP32[$10 + 80 >> 2] = $p$5 - (HEAP32[$huffcode + ($p$5 << 2) >> 2] | 0);
  $add79$1 = $p$5 + (HEAPU8[$arrayidx71$1 >> 0] | 0) | 0;
  $$sink$1 = HEAP32[$huffcode + ($add79$1 + -1 << 2) >> 2] | 0;
  $p$5$1 = $add79$1;
 }
 HEAP32[$10 + 8 >> 2] = $$sink$1;
 $arrayidx71$2 = $cond + 3 | 0;
 if (!(HEAP8[$arrayidx71$2 >> 0] | 0)) {
  $$sink$2 = -1;
  $p$5$2 = $p$5$1;
 } else {
  HEAP32[$10 + 84 >> 2] = $p$5$1 - (HEAP32[$huffcode + ($p$5$1 << 2) >> 2] | 0);
  $add79$2 = $p$5$1 + (HEAPU8[$arrayidx71$2 >> 0] | 0) | 0;
  $$sink$2 = HEAP32[$huffcode + ($add79$2 + -1 << 2) >> 2] | 0;
  $p$5$2 = $add79$2;
 }
 HEAP32[$10 + 12 >> 2] = $$sink$2;
 $arrayidx71$3 = $cond + 4 | 0;
 if (!(HEAP8[$arrayidx71$3 >> 0] | 0)) {
  $$sink$3 = -1;
  $p$5$3 = $p$5$2;
 } else {
  HEAP32[$10 + 88 >> 2] = $p$5$2 - (HEAP32[$huffcode + ($p$5$2 << 2) >> 2] | 0);
  $add79$3 = $p$5$2 + (HEAPU8[$arrayidx71$3 >> 0] | 0) | 0;
  $$sink$3 = HEAP32[$huffcode + ($add79$3 + -1 << 2) >> 2] | 0;
  $p$5$3 = $add79$3;
 }
 HEAP32[$10 + 16 >> 2] = $$sink$3;
 $arrayidx71$4 = $cond + 5 | 0;
 if (!(HEAP8[$arrayidx71$4 >> 0] | 0)) {
  $$sink$4 = -1;
  $p$5$4 = $p$5$3;
 } else {
  HEAP32[$10 + 92 >> 2] = $p$5$3 - (HEAP32[$huffcode + ($p$5$3 << 2) >> 2] | 0);
  $add79$4 = $p$5$3 + (HEAPU8[$arrayidx71$4 >> 0] | 0) | 0;
  $$sink$4 = HEAP32[$huffcode + ($add79$4 + -1 << 2) >> 2] | 0;
  $p$5$4 = $add79$4;
 }
 HEAP32[$10 + 20 >> 2] = $$sink$4;
 $arrayidx71$5 = $cond + 6 | 0;
 if (!(HEAP8[$arrayidx71$5 >> 0] | 0)) {
  $$sink$5 = -1;
  $p$5$5 = $p$5$4;
 } else {
  HEAP32[$10 + 96 >> 2] = $p$5$4 - (HEAP32[$huffcode + ($p$5$4 << 2) >> 2] | 0);
  $add79$5 = $p$5$4 + (HEAPU8[$arrayidx71$5 >> 0] | 0) | 0;
  $$sink$5 = HEAP32[$huffcode + ($add79$5 + -1 << 2) >> 2] | 0;
  $p$5$5 = $add79$5;
 }
 HEAP32[$10 + 24 >> 2] = $$sink$5;
 $arrayidx71$6 = $cond + 7 | 0;
 if (!(HEAP8[$arrayidx71$6 >> 0] | 0)) {
  $$sink$6 = -1;
  $p$5$6 = $p$5$5;
 } else {
  HEAP32[$10 + 100 >> 2] = $p$5$5 - (HEAP32[$huffcode + ($p$5$5 << 2) >> 2] | 0);
  $add79$6 = $p$5$5 + (HEAPU8[$arrayidx71$6 >> 0] | 0) | 0;
  $$sink$6 = HEAP32[$huffcode + ($add79$6 + -1 << 2) >> 2] | 0;
  $p$5$6 = $add79$6;
 }
 HEAP32[$10 + 28 >> 2] = $$sink$6;
 $arrayidx71$7 = $cond + 8 | 0;
 if (!(HEAP8[$arrayidx71$7 >> 0] | 0)) {
  $$sink$7 = -1;
  $p$5$7 = $p$5$6;
 } else {
  HEAP32[$10 + 104 >> 2] = $p$5$6 - (HEAP32[$huffcode + ($p$5$6 << 2) >> 2] | 0);
  $add79$7 = $p$5$6 + (HEAPU8[$arrayidx71$7 >> 0] | 0) | 0;
  $$sink$7 = HEAP32[$huffcode + ($add79$7 + -1 << 2) >> 2] | 0;
  $p$5$7 = $add79$7;
 }
 HEAP32[$10 + 32 >> 2] = $$sink$7;
 $arrayidx71$8 = $cond + 9 | 0;
 if (!(HEAP8[$arrayidx71$8 >> 0] | 0)) {
  $$sink$8 = -1;
  $p$5$8 = $p$5$7;
 } else {
  HEAP32[$10 + 108 >> 2] = $p$5$7 - (HEAP32[$huffcode + ($p$5$7 << 2) >> 2] | 0);
  $add79$8 = $p$5$7 + (HEAPU8[$arrayidx71$8 >> 0] | 0) | 0;
  $$sink$8 = HEAP32[$huffcode + ($add79$8 + -1 << 2) >> 2] | 0;
  $p$5$8 = $add79$8;
 }
 HEAP32[$10 + 36 >> 2] = $$sink$8;
 $arrayidx71$9 = $cond + 10 | 0;
 if (!(HEAP8[$arrayidx71$9 >> 0] | 0)) {
  $$sink$9 = -1;
  $p$5$9 = $p$5$8;
 } else {
  HEAP32[$10 + 112 >> 2] = $p$5$8 - (HEAP32[$huffcode + ($p$5$8 << 2) >> 2] | 0);
  $add79$9 = $p$5$8 + (HEAPU8[$arrayidx71$9 >> 0] | 0) | 0;
  $$sink$9 = HEAP32[$huffcode + ($add79$9 + -1 << 2) >> 2] | 0;
  $p$5$9 = $add79$9;
 }
 HEAP32[$10 + 40 >> 2] = $$sink$9;
 $arrayidx71$10 = $cond + 11 | 0;
 if (!(HEAP8[$arrayidx71$10 >> 0] | 0)) {
  $$sink$10 = -1;
  $p$5$10 = $p$5$9;
 } else {
  HEAP32[$10 + 116 >> 2] = $p$5$9 - (HEAP32[$huffcode + ($p$5$9 << 2) >> 2] | 0);
  $add79$10 = $p$5$9 + (HEAPU8[$arrayidx71$10 >> 0] | 0) | 0;
  $$sink$10 = HEAP32[$huffcode + ($add79$10 + -1 << 2) >> 2] | 0;
  $p$5$10 = $add79$10;
 }
 HEAP32[$10 + 44 >> 2] = $$sink$10;
 $arrayidx71$11 = $cond + 12 | 0;
 if (!(HEAP8[$arrayidx71$11 >> 0] | 0)) {
  $$sink$11 = -1;
  $p$5$11 = $p$5$10;
 } else {
  HEAP32[$10 + 120 >> 2] = $p$5$10 - (HEAP32[$huffcode + ($p$5$10 << 2) >> 2] | 0);
  $add79$11 = $p$5$10 + (HEAPU8[$arrayidx71$11 >> 0] | 0) | 0;
  $$sink$11 = HEAP32[$huffcode + ($add79$11 + -1 << 2) >> 2] | 0;
  $p$5$11 = $add79$11;
 }
 HEAP32[$10 + 48 >> 2] = $$sink$11;
 $arrayidx71$12 = $cond + 13 | 0;
 if (!(HEAP8[$arrayidx71$12 >> 0] | 0)) {
  $$sink$12 = -1;
  $p$5$12 = $p$5$11;
 } else {
  HEAP32[$10 + 124 >> 2] = $p$5$11 - (HEAP32[$huffcode + ($p$5$11 << 2) >> 2] | 0);
  $add79$12 = $p$5$11 + (HEAPU8[$arrayidx71$12 >> 0] | 0) | 0;
  $$sink$12 = HEAP32[$huffcode + ($add79$12 + -1 << 2) >> 2] | 0;
  $p$5$12 = $add79$12;
 }
 HEAP32[$10 + 52 >> 2] = $$sink$12;
 $arrayidx71$13 = $cond + 14 | 0;
 if (!(HEAP8[$arrayidx71$13 >> 0] | 0)) {
  $$sink$13 = -1;
  $p$5$13 = $p$5$12;
 } else {
  HEAP32[$10 + 128 >> 2] = $p$5$12 - (HEAP32[$huffcode + ($p$5$12 << 2) >> 2] | 0);
  $add79$13 = $p$5$12 + (HEAPU8[$arrayidx71$13 >> 0] | 0) | 0;
  $$sink$13 = HEAP32[$huffcode + ($add79$13 + -1 << 2) >> 2] | 0;
  $p$5$13 = $add79$13;
 }
 HEAP32[$10 + 56 >> 2] = $$sink$13;
 $arrayidx71$14 = $cond + 15 | 0;
 if (!(HEAP8[$arrayidx71$14 >> 0] | 0)) {
  $$sink$14 = -1;
  $p$5$14 = $p$5$13;
 } else {
  HEAP32[$10 + 132 >> 2] = $p$5$13 - (HEAP32[$huffcode + ($p$5$13 << 2) >> 2] | 0);
  $add79$14 = $p$5$13 + (HEAPU8[$arrayidx71$14 >> 0] | 0) | 0;
  $$sink$14 = HEAP32[$huffcode + ($add79$14 + -1 << 2) >> 2] | 0;
  $p$5$14 = $add79$14;
 }
 HEAP32[$10 + 60 >> 2] = $$sink$14;
 $arrayidx71$15 = $cond + 16 | 0;
 if (!(HEAP8[$arrayidx71$15 >> 0] | 0)) $$sink$15 = -1; else {
  HEAP32[$10 + 136 >> 2] = $p$5$14 - (HEAP32[$huffcode + ($p$5$14 << 2) >> 2] | 0);
  $$sink$15 = HEAP32[$huffcode + ($p$5$14 + (HEAPU8[$arrayidx71$15 >> 0] | 0) + -1 << 2) >> 2] | 0;
 }
 HEAP32[$10 + 64 >> 2] = $$sink$15;
 HEAP32[$10 + 68 >> 2] = 1048575;
 _memset($10 + 144 | 0, 0, 1024) | 0;
 $arrayidx97 = $cond + 1 | 0;
 if (!(HEAP8[$arrayidx97 >> 0] | 0)) $p$7$lcssa = 0; else {
  $i$1104$us = 1;
  $p$7105$us = 0;
  while (1) {
   $arrayidx113$us = $cond + 17 + $p$7105$us | 0;
   $ctr$0101$us = 128;
   $lookbits$0100$us = HEAP32[$huffcode + ($p$7105$us << 2) >> 2] << 7;
   while (1) {
    HEAP32[$10 + 144 + ($lookbits$0100$us << 2) >> 2] = 1;
    HEAP8[$10 + 1168 + $lookbits$0100$us >> 0] = HEAP8[$arrayidx113$us >> 0] | 0;
    if (($ctr$0101$us | 0) > 1) {
     $ctr$0101$us = $ctr$0101$us + -1 | 0;
     $lookbits$0100$us = $lookbits$0100$us + 1 | 0;
    } else break;
   }
   $inc121$us = $p$7105$us + 1 | 0;
   if ($i$1104$us >>> 0 < (HEAPU8[$arrayidx97 >> 0] | 0) >>> 0) {
    $i$1104$us = $i$1104$us + 1 | 0;
    $p$7105$us = $inc121$us;
   } else {
    $p$7$lcssa = $inc121$us;
    break;
   }
  }
 }
 $arrayidx97$1 = $cond + 2 | 0;
 if (!(HEAP8[$arrayidx97$1 >> 0] | 0)) $p$7$lcssa$1 = $p$7$lcssa; else {
  $i$1104$us$1 = 1;
  $p$7105$us$1 = $p$7$lcssa;
  while (1) {
   $arrayidx113$us$1 = $cond + 17 + $p$7105$us$1 | 0;
   $ctr$0101$us$1 = 64;
   $lookbits$0100$us$1 = HEAP32[$huffcode + ($p$7105$us$1 << 2) >> 2] << 6;
   while (1) {
    HEAP32[$10 + 144 + ($lookbits$0100$us$1 << 2) >> 2] = 2;
    HEAP8[$10 + 1168 + $lookbits$0100$us$1 >> 0] = HEAP8[$arrayidx113$us$1 >> 0] | 0;
    if (($ctr$0101$us$1 | 0) > 1) {
     $ctr$0101$us$1 = $ctr$0101$us$1 + -1 | 0;
     $lookbits$0100$us$1 = $lookbits$0100$us$1 + 1 | 0;
    } else break;
   }
   $inc121$us$1 = $p$7105$us$1 + 1 | 0;
   if ($i$1104$us$1 >>> 0 < (HEAPU8[$arrayidx97$1 >> 0] | 0) >>> 0) {
    $i$1104$us$1 = $i$1104$us$1 + 1 | 0;
    $p$7105$us$1 = $inc121$us$1;
   } else {
    $p$7$lcssa$1 = $inc121$us$1;
    break;
   }
  }
 }
 $arrayidx97$2 = $cond + 3 | 0;
 if (!(HEAP8[$arrayidx97$2 >> 0] | 0)) $p$7$lcssa$2 = $p$7$lcssa$1; else {
  $i$1104$us$2 = 1;
  $p$7105$us$2 = $p$7$lcssa$1;
  while (1) {
   $shl104$us$2 = HEAP32[$huffcode + ($p$7105$us$2 << 2) >> 2] << 5;
   $arrayidx113$us$2 = $cond + 17 + $p$7105$us$2 | 0;
   HEAP32[$10 + 144 + ($shl104$us$2 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $shl104$us$2 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2 = $shl104$us$2 | 1;
   HEAP32[$10 + 144 + ($inc115$us$2 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$1 = $inc115$us$2 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$1 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$1 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$2 = $shl104$us$2 | 3;
   HEAP32[$10 + 144 + ($inc115$us$2$2 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$2 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$3 = $inc115$us$2$2 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$3 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$3 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$4 = $inc115$us$2$2 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$4 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$4 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$5 = $inc115$us$2$2 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$5 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$5 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$6 = $shl104$us$2 | 7;
   HEAP32[$10 + 144 + ($inc115$us$2$6 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$6 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$7 = $inc115$us$2$6 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$7 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$7 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$8 = $inc115$us$2$6 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$8 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$8 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$9 = $inc115$us$2$6 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$9 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$9 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$10 = $inc115$us$2$6 + 4 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$10 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$10 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$11 = $inc115$us$2$6 + 5 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$11 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$11 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$12 = $inc115$us$2$6 + 6 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$12 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$12 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$13 = $inc115$us$2$6 + 7 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$13 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$13 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$14 = $shl104$us$2 | 15;
   HEAP32[$10 + 144 + ($inc115$us$2$14 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$14 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$15 = $inc115$us$2$14 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$15 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$15 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$16 = $inc115$us$2$14 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$16 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$16 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$17 = $inc115$us$2$14 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$17 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$17 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$18 = $inc115$us$2$14 + 4 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$18 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$18 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$19 = $inc115$us$2$14 + 5 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$19 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$19 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$20 = $inc115$us$2$14 + 6 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$20 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$20 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$21 = $inc115$us$2$14 + 7 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$21 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$21 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$22 = $inc115$us$2$14 + 8 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$22 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$22 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$23 = $inc115$us$2$14 + 9 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$23 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$23 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$24 = $inc115$us$2$14 + 10 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$24 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$24 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$25 = $inc115$us$2$14 + 11 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$25 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$25 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$26 = $inc115$us$2$14 + 12 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$26 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$26 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$27 = $inc115$us$2$14 + 13 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$27 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$27 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$28 = $inc115$us$2$14 + 14 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$28 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$28 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$29 = $inc115$us$2$14 + 15 | 0;
   HEAP32[$10 + 144 + ($inc115$us$2$29 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$29 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc115$us$2$30 = $shl104$us$2 | 31;
   HEAP32[$10 + 144 + ($inc115$us$2$30 << 2) >> 2] = 3;
   HEAP8[$10 + 1168 + $inc115$us$2$30 >> 0] = HEAP8[$arrayidx113$us$2 >> 0] | 0;
   $inc121$us$2 = $p$7105$us$2 + 1 | 0;
   if ($i$1104$us$2 >>> 0 < (HEAPU8[$arrayidx97$2 >> 0] | 0) >>> 0) {
    $i$1104$us$2 = $i$1104$us$2 + 1 | 0;
    $p$7105$us$2 = $inc121$us$2;
   } else {
    $p$7$lcssa$2 = $inc121$us$2;
    break;
   }
  }
 }
 $arrayidx97$3 = $cond + 4 | 0;
 if (!(HEAP8[$arrayidx97$3 >> 0] | 0)) $p$7$lcssa$3 = $p$7$lcssa$2; else {
  $i$1104$us$3 = 1;
  $p$7105$us$3 = $p$7$lcssa$2;
  while (1) {
   $shl104$us$3 = HEAP32[$huffcode + ($p$7105$us$3 << 2) >> 2] << 4;
   $arrayidx113$us$3 = $cond + 17 + $p$7105$us$3 | 0;
   HEAP32[$10 + 144 + ($shl104$us$3 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $shl104$us$3 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3 = $shl104$us$3 | 1;
   HEAP32[$10 + 144 + ($inc115$us$3 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$1 = $inc115$us$3 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$1 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$1 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$2 = $shl104$us$3 | 3;
   HEAP32[$10 + 144 + ($inc115$us$3$2 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$2 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$3 = $inc115$us$3$2 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$3 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$3 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$4 = $inc115$us$3$2 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$4 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$4 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$5 = $inc115$us$3$2 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$5 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$5 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$6 = $shl104$us$3 | 7;
   HEAP32[$10 + 144 + ($inc115$us$3$6 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$6 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$7 = $inc115$us$3$6 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$7 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$7 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$8 = $inc115$us$3$6 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$8 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$8 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$9 = $inc115$us$3$6 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$9 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$9 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$10 = $inc115$us$3$6 + 4 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$10 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$10 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$11 = $inc115$us$3$6 + 5 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$11 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$11 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$12 = $inc115$us$3$6 + 6 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$12 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$12 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$13 = $inc115$us$3$6 + 7 | 0;
   HEAP32[$10 + 144 + ($inc115$us$3$13 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$13 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc115$us$3$14 = $shl104$us$3 | 15;
   HEAP32[$10 + 144 + ($inc115$us$3$14 << 2) >> 2] = 4;
   HEAP8[$10 + 1168 + $inc115$us$3$14 >> 0] = HEAP8[$arrayidx113$us$3 >> 0] | 0;
   $inc121$us$3 = $p$7105$us$3 + 1 | 0;
   if ($i$1104$us$3 >>> 0 < (HEAPU8[$arrayidx97$3 >> 0] | 0) >>> 0) {
    $i$1104$us$3 = $i$1104$us$3 + 1 | 0;
    $p$7105$us$3 = $inc121$us$3;
   } else {
    $p$7$lcssa$3 = $inc121$us$3;
    break;
   }
  }
 }
 $arrayidx97$4 = $cond + 5 | 0;
 if (!(HEAP8[$arrayidx97$4 >> 0] | 0)) $p$7$lcssa$4 = $p$7$lcssa$3; else {
  $i$1104$us$4 = 1;
  $p$7105$us$4 = $p$7$lcssa$3;
  while (1) {
   $shl104$us$4 = HEAP32[$huffcode + ($p$7105$us$4 << 2) >> 2] << 3;
   $arrayidx113$us$4 = $cond + 17 + $p$7105$us$4 | 0;
   HEAP32[$10 + 144 + ($shl104$us$4 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $shl104$us$4 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4 = $shl104$us$4 | 1;
   HEAP32[$10 + 144 + ($inc115$us$4 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$1 = $inc115$us$4 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$4$1 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$1 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$2 = $shl104$us$4 | 3;
   HEAP32[$10 + 144 + ($inc115$us$4$2 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$2 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$3 = $inc115$us$4$2 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$4$3 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$3 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$4 = $inc115$us$4$2 + 2 | 0;
   HEAP32[$10 + 144 + ($inc115$us$4$4 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$4 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$5 = $inc115$us$4$2 + 3 | 0;
   HEAP32[$10 + 144 + ($inc115$us$4$5 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$5 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc115$us$4$6 = $shl104$us$4 | 7;
   HEAP32[$10 + 144 + ($inc115$us$4$6 << 2) >> 2] = 5;
   HEAP8[$10 + 1168 + $inc115$us$4$6 >> 0] = HEAP8[$arrayidx113$us$4 >> 0] | 0;
   $inc121$us$4 = $p$7105$us$4 + 1 | 0;
   if ($i$1104$us$4 >>> 0 < (HEAPU8[$arrayidx97$4 >> 0] | 0) >>> 0) {
    $i$1104$us$4 = $i$1104$us$4 + 1 | 0;
    $p$7105$us$4 = $inc121$us$4;
   } else {
    $p$7$lcssa$4 = $inc121$us$4;
    break;
   }
  }
 }
 $arrayidx97$5 = $cond + 6 | 0;
 if (!(HEAP8[$arrayidx97$5 >> 0] | 0)) $p$7$lcssa$5 = $p$7$lcssa$4; else {
  $i$1104$us$5 = 1;
  $p$7105$us$5 = $p$7$lcssa$4;
  while (1) {
   $shl104$us$5 = HEAP32[$huffcode + ($p$7105$us$5 << 2) >> 2] << 2;
   $arrayidx113$us$5 = $cond + 17 + $p$7105$us$5 | 0;
   HEAP32[$10 + 144 + ($shl104$us$5 << 2) >> 2] = 6;
   HEAP8[$10 + 1168 + $shl104$us$5 >> 0] = HEAP8[$arrayidx113$us$5 >> 0] | 0;
   $inc115$us$5 = $shl104$us$5 | 1;
   HEAP32[$10 + 144 + ($inc115$us$5 << 2) >> 2] = 6;
   HEAP8[$10 + 1168 + $inc115$us$5 >> 0] = HEAP8[$arrayidx113$us$5 >> 0] | 0;
   $inc115$us$5$1 = $inc115$us$5 + 1 | 0;
   HEAP32[$10 + 144 + ($inc115$us$5$1 << 2) >> 2] = 6;
   HEAP8[$10 + 1168 + $inc115$us$5$1 >> 0] = HEAP8[$arrayidx113$us$5 >> 0] | 0;
   $inc115$us$5$2 = $shl104$us$5 | 3;
   HEAP32[$10 + 144 + ($inc115$us$5$2 << 2) >> 2] = 6;
   HEAP8[$10 + 1168 + $inc115$us$5$2 >> 0] = HEAP8[$arrayidx113$us$5 >> 0] | 0;
   $inc121$us$5 = $p$7105$us$5 + 1 | 0;
   if ($i$1104$us$5 >>> 0 < (HEAPU8[$arrayidx97$5 >> 0] | 0) >>> 0) {
    $i$1104$us$5 = $i$1104$us$5 + 1 | 0;
    $p$7105$us$5 = $inc121$us$5;
   } else {
    $p$7$lcssa$5 = $inc121$us$5;
    break;
   }
  }
 }
 $arrayidx97$6 = $cond + 7 | 0;
 if (!(HEAP8[$arrayidx97$6 >> 0] | 0)) $p$7$lcssa$6 = $p$7$lcssa$5; else {
  $i$1104$us$6 = 1;
  $p$7105$us$6 = $p$7$lcssa$5;
  while (1) {
   $shl104$us$6 = HEAP32[$huffcode + ($p$7105$us$6 << 2) >> 2] << 1;
   $arrayidx113$us$6 = $cond + 17 + $p$7105$us$6 | 0;
   HEAP32[$10 + 144 + ($shl104$us$6 << 2) >> 2] = 7;
   HEAP8[$10 + 1168 + $shl104$us$6 >> 0] = HEAP8[$arrayidx113$us$6 >> 0] | 0;
   $inc115$us$6 = $shl104$us$6 | 1;
   HEAP32[$10 + 144 + ($inc115$us$6 << 2) >> 2] = 7;
   HEAP8[$10 + 1168 + $inc115$us$6 >> 0] = HEAP8[$arrayidx113$us$6 >> 0] | 0;
   $inc121$us$6 = $p$7105$us$6 + 1 | 0;
   if ($i$1104$us$6 >>> 0 < (HEAPU8[$arrayidx97$6 >> 0] | 0) >>> 0) {
    $i$1104$us$6 = $i$1104$us$6 + 1 | 0;
    $p$7105$us$6 = $inc121$us$6;
   } else {
    $p$7$lcssa$6 = $inc121$us$6;
    break;
   }
  }
 }
 $arrayidx97$7 = $cond + 8 | 0;
 if (HEAP8[$arrayidx97$7 >> 0] | 0) {
  $i$1104$us$7 = 1;
  $p$7105$us$7 = $p$7$lcssa$6;
  while (1) {
   $113 = HEAP32[$huffcode + ($p$7105$us$7 << 2) >> 2] | 0;
   HEAP32[$10 + 144 + ($113 << 2) >> 2] = 8;
   HEAP8[$10 + 1168 + $113 >> 0] = HEAP8[$cond + 17 + $p$7105$us$7 >> 0] | 0;
   if ($i$1104$us$7 >>> 0 < (HEAPU8[$arrayidx97$7 >> 0] | 0) >>> 0) {
    $i$1104$us$7 = $i$1104$us$7 + 1 | 0;
    $p$7105$us$7 = $p$7105$us$7 + 1 | 0;
   } else break;
  }
 }
 if (!($tobool & ($p$1$lcssa$15 | 0) > 0)) {
  STACKTOP = sp;
  return;
 }
 $i$298 = 0;
 do {
  if ((HEAPU8[$cond + 17 + $i$298 >> 0] | 0) > 15) {
   $30 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$30 + 20 >> 2] = 9;
   FUNCTION_TABLE_vi[HEAP32[$30 >> 2] & 255]($$pre$phiZ2D);
  }
  $i$298 = $i$298 + 1 | 0;
 } while (($i$298 | 0) != ($p$1$lcssa$15 | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__next_primeEm($n) {
 $n = $n | 0;
 var $2 = 0, $add108 = 0, $add117 = 0, $add126 = 0, $add135 = 0, $add144 = 0, $add153 = 0, $add162 = 0, $add171 = 0, $add180 = 0, $add189 = 0, $add198 = 0, $add207 = 0, $add216 = 0, $add225 = 0, $add234 = 0, $add243 = 0, $add252 = 0, $add261 = 0, $add27 = 0, $add270 = 0, $add279 = 0, $add288 = 0, $add297 = 0, $add306 = 0, $add315 = 0, $add324 = 0, $add333 = 0, $add342 = 0, $add351 = 0, $add36 = 0, $add360 = 0, $add369 = 0, $add378 = 0, $add387 = 0, $add396 = 0, $add405 = 0, $add414 = 0, $add423 = 0, $add432 = 0, $add441 = 0, $add45 = 0, $add464 = 0, $add54 = 0, $add63 = 0, $add72 = 0, $add81 = 0, $add90 = 0, $add99 = 0, $agg$tmp1$i314 = 0, $call$i$i = 0, $cleanup$dest$slot$2 = 0, $cmp443 = 0, $cmp447 = 0, $cmp458 = 0, $div = 0, $div100 = 0, $div109 = 0, $div118 = 0, $div127 = 0, $div136 = 0, $div145 = 0, $div154 = 0, $div163 = 0, $div172 = 0, $div181 = 0, $div19 = 0, $div190 = 0, $div199 = 0, $div208 = 0, $div217 = 0, $div226 = 0, $div235 = 0, $div244 = 0, $div253 = 0, $div262 = 0, $div271 = 0, $div28 = 0, $div280 = 0, $div289 = 0, $div298 = 0, $div307 = 0, $div316 = 0, $div325 = 0, $div334 = 0, $div343 = 0, $div352 = 0, $div361 = 0, $div37 = 0, $div370 = 0, $div379 = 0, $div388 = 0, $div397 = 0, $div406 = 0, $div415 = 0, $div424 = 0, $div433 = 0, $div442 = 0, $div46 = 0, $div5 = 0, $div55 = 0, $div64 = 0, $div73 = 0, $div82 = 0, $div91 = 0, $i$0 = 0, $i$1 = 0, $inc457 = 0, $j$0 = 0, $k0$0 = 0, $mul = 0, $mul462$sink = 0, $n$addr = 0, $ref$tmp = 0, $retval$0 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$8 = 0, $spec$select = 0, $spec$select311$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp1$i314 = sp;
 $n$addr = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP32[$n$addr >> 2] = $n;
 do if ($n >>> 0 >= 212) {
  $div = ($n >>> 0) / 210 | 0;
  $mul = $div * 210 | 0;
  HEAP32[$ref$tmp >> 2] = $n - $mul;
  $k0$0 = $div;
  $mul462$sink = $mul;
  $retval$0 = 0;
  $spec$select311$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_(10704, 10896, $ref$tmp, $agg$tmp1$i314) | 0) - 10704 >> 2;
  L4 : while (1) {
   $add464 = (HEAP32[10704 + ($spec$select311$sink << 2) >> 2] | 0) + $mul462$sink | 0;
   $j$0 = 5;
   while (1) {
    if ($j$0 >>> 0 >= 47) {
     label = 6;
     break;
    }
    $2 = HEAP32[10512 + ($j$0 << 2) >> 2] | 0;
    $div5 = ($add464 >>> 0) / ($2 >>> 0) | 0;
    if ($div5 >>> 0 < $2 >>> 0) {
     label = 107;
     break L4;
    }
    if (($add464 | 0) == (Math_imul($div5, $2) | 0)) {
     $retval$6 = $retval$0;
     break;
    } else $j$0 = $j$0 + 1 | 0;
   }
   L10 : do if ((label | 0) == 6) {
    label = 0;
    $i$0 = 211;
    $retval$4 = $retval$0;
    L12 : while (1) {
     $div19 = ($add464 >>> 0) / ($i$0 >>> 0) | 0;
     do if ($div19 >>> 0 >= $i$0 >>> 0) if (($add464 | 0) != (Math_imul($div19, $i$0) | 0)) {
      $add27 = $i$0 + 10 | 0;
      $div28 = ($add464 >>> 0) / ($add27 >>> 0) | 0;
      if ($div28 >>> 0 >= $add27 >>> 0) if (($add464 | 0) != (Math_imul($div28, $add27) | 0)) {
       $add36 = $i$0 + 12 | 0;
       $div37 = ($add464 >>> 0) / ($add36 >>> 0) | 0;
       if ($div37 >>> 0 >= $add36 >>> 0) if (($add464 | 0) != (Math_imul($div37, $add36) | 0)) {
        $add45 = $i$0 + 16 | 0;
        $div46 = ($add464 >>> 0) / ($add45 >>> 0) | 0;
        if ($div46 >>> 0 >= $add45 >>> 0) if (($add464 | 0) != (Math_imul($div46, $add45) | 0)) {
         $add54 = $i$0 + 18 | 0;
         $div55 = ($add464 >>> 0) / ($add54 >>> 0) | 0;
         if ($div55 >>> 0 >= $add54 >>> 0) if (($add464 | 0) != (Math_imul($div55, $add54) | 0)) {
          $add63 = $i$0 + 22 | 0;
          $div64 = ($add464 >>> 0) / ($add63 >>> 0) | 0;
          if ($div64 >>> 0 >= $add63 >>> 0) if (($add464 | 0) != (Math_imul($div64, $add63) | 0)) {
           $add72 = $i$0 + 28 | 0;
           $div73 = ($add464 >>> 0) / ($add72 >>> 0) | 0;
           if ($div73 >>> 0 >= $add72 >>> 0) if (($add464 | 0) == (Math_imul($div73, $add72) | 0)) {
            $cleanup$dest$slot$2 = 9;
            $i$1 = $add72;
            $retval$5 = $retval$4;
           } else {
            $add81 = $i$0 + 30 | 0;
            $div82 = ($add464 >>> 0) / ($add81 >>> 0) | 0;
            if ($div82 >>> 0 < $add81 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add81;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div82, $add81) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add81;
             $retval$5 = $retval$4;
             break;
            }
            $add90 = $i$0 + 36 | 0;
            $div91 = ($add464 >>> 0) / ($add90 >>> 0) | 0;
            if ($div91 >>> 0 < $add90 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add90;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div91, $add90) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add90;
             $retval$5 = $retval$4;
             break;
            }
            $add99 = $i$0 + 40 | 0;
            $div100 = ($add464 >>> 0) / ($add99 >>> 0) | 0;
            if ($div100 >>> 0 < $add99 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add99;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div100, $add99) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add99;
             $retval$5 = $retval$4;
             break;
            }
            $add108 = $i$0 + 42 | 0;
            $div109 = ($add464 >>> 0) / ($add108 >>> 0) | 0;
            if ($div109 >>> 0 < $add108 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add108;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div109, $add108) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add108;
             $retval$5 = $retval$4;
             break;
            }
            $add117 = $i$0 + 46 | 0;
            $div118 = ($add464 >>> 0) / ($add117 >>> 0) | 0;
            if ($div118 >>> 0 < $add117 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add117;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div118, $add117) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add117;
             $retval$5 = $retval$4;
             break;
            }
            $add126 = $i$0 + 52 | 0;
            $div127 = ($add464 >>> 0) / ($add126 >>> 0) | 0;
            if ($div127 >>> 0 < $add126 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add126;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div127, $add126) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add126;
             $retval$5 = $retval$4;
             break;
            }
            $add135 = $i$0 + 58 | 0;
            $div136 = ($add464 >>> 0) / ($add135 >>> 0) | 0;
            if ($div136 >>> 0 < $add135 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add135;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div136, $add135) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add135;
             $retval$5 = $retval$4;
             break;
            }
            $add144 = $i$0 + 60 | 0;
            $div145 = ($add464 >>> 0) / ($add144 >>> 0) | 0;
            if ($div145 >>> 0 < $add144 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add144;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div145, $add144) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add144;
             $retval$5 = $retval$4;
             break;
            }
            $add153 = $i$0 + 66 | 0;
            $div154 = ($add464 >>> 0) / ($add153 >>> 0) | 0;
            if ($div154 >>> 0 < $add153 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add153;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div154, $add153) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add153;
             $retval$5 = $retval$4;
             break;
            }
            $add162 = $i$0 + 70 | 0;
            $div163 = ($add464 >>> 0) / ($add162 >>> 0) | 0;
            if ($div163 >>> 0 < $add162 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add162;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div163, $add162) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add162;
             $retval$5 = $retval$4;
             break;
            }
            $add171 = $i$0 + 72 | 0;
            $div172 = ($add464 >>> 0) / ($add171 >>> 0) | 0;
            if ($div172 >>> 0 < $add171 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add171;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div172, $add171) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add171;
             $retval$5 = $retval$4;
             break;
            }
            $add180 = $i$0 + 78 | 0;
            $div181 = ($add464 >>> 0) / ($add180 >>> 0) | 0;
            if ($div181 >>> 0 < $add180 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add180;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div181, $add180) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add180;
             $retval$5 = $retval$4;
             break;
            }
            $add189 = $i$0 + 82 | 0;
            $div190 = ($add464 >>> 0) / ($add189 >>> 0) | 0;
            if ($div190 >>> 0 < $add189 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add189;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div190, $add189) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add189;
             $retval$5 = $retval$4;
             break;
            }
            $add198 = $i$0 + 88 | 0;
            $div199 = ($add464 >>> 0) / ($add198 >>> 0) | 0;
            if ($div199 >>> 0 < $add198 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add198;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div199, $add198) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add198;
             $retval$5 = $retval$4;
             break;
            }
            $add207 = $i$0 + 96 | 0;
            $div208 = ($add464 >>> 0) / ($add207 >>> 0) | 0;
            if ($div208 >>> 0 < $add207 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add207;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div208, $add207) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add207;
             $retval$5 = $retval$4;
             break;
            }
            $add216 = $i$0 + 100 | 0;
            $div217 = ($add464 >>> 0) / ($add216 >>> 0) | 0;
            if ($div217 >>> 0 < $add216 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add216;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div217, $add216) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add216;
             $retval$5 = $retval$4;
             break;
            }
            $add225 = $i$0 + 102 | 0;
            $div226 = ($add464 >>> 0) / ($add225 >>> 0) | 0;
            if ($div226 >>> 0 < $add225 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add225;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div226, $add225) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add225;
             $retval$5 = $retval$4;
             break;
            }
            $add234 = $i$0 + 106 | 0;
            $div235 = ($add464 >>> 0) / ($add234 >>> 0) | 0;
            if ($div235 >>> 0 < $add234 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add234;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div235, $add234) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add234;
             $retval$5 = $retval$4;
             break;
            }
            $add243 = $i$0 + 108 | 0;
            $div244 = ($add464 >>> 0) / ($add243 >>> 0) | 0;
            if ($div244 >>> 0 < $add243 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add243;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div244, $add243) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add243;
             $retval$5 = $retval$4;
             break;
            }
            $add252 = $i$0 + 112 | 0;
            $div253 = ($add464 >>> 0) / ($add252 >>> 0) | 0;
            if ($div253 >>> 0 < $add252 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add252;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div253, $add252) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add252;
             $retval$5 = $retval$4;
             break;
            }
            $add261 = $i$0 + 120 | 0;
            $div262 = ($add464 >>> 0) / ($add261 >>> 0) | 0;
            if ($div262 >>> 0 < $add261 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add261;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div262, $add261) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add261;
             $retval$5 = $retval$4;
             break;
            }
            $add270 = $i$0 + 126 | 0;
            $div271 = ($add464 >>> 0) / ($add270 >>> 0) | 0;
            if ($div271 >>> 0 < $add270 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add270;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div271, $add270) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add270;
             $retval$5 = $retval$4;
             break;
            }
            $add279 = $i$0 + 130 | 0;
            $div280 = ($add464 >>> 0) / ($add279 >>> 0) | 0;
            if ($div280 >>> 0 < $add279 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add279;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div280, $add279) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add279;
             $retval$5 = $retval$4;
             break;
            }
            $add288 = $i$0 + 136 | 0;
            $div289 = ($add464 >>> 0) / ($add288 >>> 0) | 0;
            if ($div289 >>> 0 < $add288 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add288;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div289, $add288) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add288;
             $retval$5 = $retval$4;
             break;
            }
            $add297 = $i$0 + 138 | 0;
            $div298 = ($add464 >>> 0) / ($add297 >>> 0) | 0;
            if ($div298 >>> 0 < $add297 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add297;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div298, $add297) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add297;
             $retval$5 = $retval$4;
             break;
            }
            $add306 = $i$0 + 142 | 0;
            $div307 = ($add464 >>> 0) / ($add306 >>> 0) | 0;
            if ($div307 >>> 0 < $add306 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add306;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div307, $add306) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add306;
             $retval$5 = $retval$4;
             break;
            }
            $add315 = $i$0 + 148 | 0;
            $div316 = ($add464 >>> 0) / ($add315 >>> 0) | 0;
            if ($div316 >>> 0 < $add315 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add315;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div316, $add315) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add315;
             $retval$5 = $retval$4;
             break;
            }
            $add324 = $i$0 + 150 | 0;
            $div325 = ($add464 >>> 0) / ($add324 >>> 0) | 0;
            if ($div325 >>> 0 < $add324 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add324;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div325, $add324) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add324;
             $retval$5 = $retval$4;
             break;
            }
            $add333 = $i$0 + 156 | 0;
            $div334 = ($add464 >>> 0) / ($add333 >>> 0) | 0;
            if ($div334 >>> 0 < $add333 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add333;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div334, $add333) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add333;
             $retval$5 = $retval$4;
             break;
            }
            $add342 = $i$0 + 162 | 0;
            $div343 = ($add464 >>> 0) / ($add342 >>> 0) | 0;
            if ($div343 >>> 0 < $add342 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add342;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div343, $add342) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add342;
             $retval$5 = $retval$4;
             break;
            }
            $add351 = $i$0 + 166 | 0;
            $div352 = ($add464 >>> 0) / ($add351 >>> 0) | 0;
            if ($div352 >>> 0 < $add351 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add351;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div352, $add351) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add351;
             $retval$5 = $retval$4;
             break;
            }
            $add360 = $i$0 + 168 | 0;
            $div361 = ($add464 >>> 0) / ($add360 >>> 0) | 0;
            if ($div361 >>> 0 < $add360 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add360;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div361, $add360) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add360;
             $retval$5 = $retval$4;
             break;
            }
            $add369 = $i$0 + 172 | 0;
            $div370 = ($add464 >>> 0) / ($add369 >>> 0) | 0;
            if ($div370 >>> 0 < $add369 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add369;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div370, $add369) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add369;
             $retval$5 = $retval$4;
             break;
            }
            $add378 = $i$0 + 178 | 0;
            $div379 = ($add464 >>> 0) / ($add378 >>> 0) | 0;
            if ($div379 >>> 0 < $add378 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add378;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div379, $add378) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add378;
             $retval$5 = $retval$4;
             break;
            }
            $add387 = $i$0 + 180 | 0;
            $div388 = ($add464 >>> 0) / ($add387 >>> 0) | 0;
            if ($div388 >>> 0 < $add387 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add387;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div388, $add387) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add387;
             $retval$5 = $retval$4;
             break;
            }
            $add396 = $i$0 + 186 | 0;
            $div397 = ($add464 >>> 0) / ($add396 >>> 0) | 0;
            if ($div397 >>> 0 < $add396 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add396;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div397, $add396) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add396;
             $retval$5 = $retval$4;
             break;
            }
            $add405 = $i$0 + 190 | 0;
            $div406 = ($add464 >>> 0) / ($add405 >>> 0) | 0;
            if ($div406 >>> 0 < $add405 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add405;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div406, $add405) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add405;
             $retval$5 = $retval$4;
             break;
            }
            $add414 = $i$0 + 192 | 0;
            $div415 = ($add464 >>> 0) / ($add414 >>> 0) | 0;
            if ($div415 >>> 0 < $add414 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add414;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div415, $add414) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add414;
             $retval$5 = $retval$4;
             break;
            }
            $add423 = $i$0 + 196 | 0;
            $div424 = ($add464 >>> 0) / ($add423 >>> 0) | 0;
            if ($div424 >>> 0 < $add423 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add423;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div424, $add423) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add423;
             $retval$5 = $retval$4;
             break;
            }
            $add432 = $i$0 + 198 | 0;
            $div433 = ($add464 >>> 0) / ($add432 >>> 0) | 0;
            if ($div433 >>> 0 < $add432 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add432;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div433, $add432) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add432;
             $retval$5 = $retval$4;
             break;
            }
            $add441 = $i$0 + 208 | 0;
            $div442 = ($add464 >>> 0) / ($add441 >>> 0) | 0;
            $cmp443 = $div442 >>> 0 < $add441 >>> 0;
            $cmp447 = ($add464 | 0) == (Math_imul($div442, $add441) | 0);
            $cleanup$dest$slot$2 = $cmp443 ? 1 : $cmp447 ? 9 : 0;
            $i$1 = $cmp443 | $cmp447 ? $add441 : $i$0 + 210 | 0;
            $retval$5 = $cmp443 ? $add464 : $retval$4;
           } else {
            $cleanup$dest$slot$2 = 1;
            $i$1 = $add72;
            $retval$5 = $add464;
           }
          } else {
           $cleanup$dest$slot$2 = 9;
           $i$1 = $add63;
           $retval$5 = $retval$4;
          } else {
           $cleanup$dest$slot$2 = 1;
           $i$1 = $add63;
           $retval$5 = $add464;
          }
         } else {
          $cleanup$dest$slot$2 = 9;
          $i$1 = $add54;
          $retval$5 = $retval$4;
         } else {
          $cleanup$dest$slot$2 = 1;
          $i$1 = $add54;
          $retval$5 = $add464;
         }
        } else {
         $cleanup$dest$slot$2 = 9;
         $i$1 = $add45;
         $retval$5 = $retval$4;
        } else {
         $cleanup$dest$slot$2 = 1;
         $i$1 = $add45;
         $retval$5 = $add464;
        }
       } else {
        $cleanup$dest$slot$2 = 9;
        $i$1 = $add36;
        $retval$5 = $retval$4;
       } else {
        $cleanup$dest$slot$2 = 1;
        $i$1 = $add36;
        $retval$5 = $add464;
       }
      } else {
       $cleanup$dest$slot$2 = 9;
       $i$1 = $add27;
       $retval$5 = $retval$4;
      } else {
       $cleanup$dest$slot$2 = 1;
       $i$1 = $add27;
       $retval$5 = $add464;
      }
     } else {
      $cleanup$dest$slot$2 = 9;
      $i$1 = $i$0;
      $retval$5 = $retval$4;
     } else {
      $cleanup$dest$slot$2 = 1;
      $i$1 = $i$0;
      $retval$5 = $add464;
     } while (0);
     switch ($cleanup$dest$slot$2 & 15) {
     case 9:
      {
       $retval$6 = $retval$5;
       break L10;
       break;
      }
     case 0:
      {
       $i$0 = $i$1;
       $retval$4 = $retval$5;
       break;
      }
     default:
      break L12;
     }
    }
    if (!$cleanup$dest$slot$2) $retval$6 = $retval$5; else {
     label = 108;
     break L4;
    }
   } while (0);
   $inc457 = $spec$select311$sink + 1 | 0;
   $cmp458 = ($inc457 | 0) == 48;
   $spec$select = $k0$0 + ($cmp458 & 1) | 0;
   $k0$0 = $spec$select;
   $mul462$sink = $spec$select * 210 | 0;
   $retval$0 = $retval$6;
   $spec$select311$sink = $cmp458 ? 0 : $inc457;
  }
  if ((label | 0) == 107) {
   HEAP32[$n$addr >> 2] = $add464;
   $retval$8 = $add464;
   break;
  } else if ((label | 0) == 108) {
   HEAP32[$n$addr >> 2] = $add464;
   $retval$8 = $retval$5;
   break;
  }
 } else {
  $call$i$i = __ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_(10512, 10704, $n$addr, $agg$tmp1$i314) | 0;
  $retval$8 = HEAP32[$call$i$i >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$8 | 0;
}

function _fill_inverse_cmap($cinfo, $c0, $c1, $c2) {
 $cinfo = $cinfo | 0;
 $c0 = $c0 | 0;
 $c1 = $c1 | 0;
 $c2 = $c2 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $5 = 0, $54 = 0, $6 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i38 = 0, $add19$1 = 0, $add19$2 = 0, $add19$3 = 0, $add19$4 = 0, $add19$5 = 0, $add19$6 = 0, $add19$7 = 0, $add2$i = 0, $add26$i = 0, $add28$i = 0, $add45$1$1$i = 0, $add45$1$2$i = 0, $add45$1$3$i = 0, $add45$1$4$i = 0, $add45$1$5$i = 0, $add45$1$6$i = 0, $add45$1$7$i = 0, $add45$1$i = 0, $add45$175$i = 0, $add45$2$1$i = 0, $add45$2$2$i = 0, $add45$2$3$i = 0, $add45$2$4$i = 0, $add45$2$5$i = 0, $add45$2$6$i = 0, $add45$2$7$i = 0, $add45$2$i = 0, $add45$282$i = 0, $add45$3$i = 0, $add45$4$i = 0, $add45$5$i = 0, $add45$6$i = 0, $add45$7$i = 0, $add45$i = 0, $add46$1$i = 0, $add46$i = 0, $add5$i = 0, $add52$1$i = 0, $add52$2$i = 0, $add52$3$i = 0, $add52$4$i = 0, $add52$5$i = 0, $add52$6$i = 0, $add52$i = 0, $add53$1$i = 0, $add53$2$i = 0, $add53$3$i = 0, $add53$4$i = 0, $add53$5$i = 0, $add53$i = 0, $add6 = 0, $add8 = 0, $arrayidx = 0, $arrayidx21 = 0, $arrayidx21$1 = 0, $arrayidx21$2 = 0, $arrayidx21$3 = 0, $arrayidx21$4 = 0, $arrayidx21$5 = 0, $arrayidx21$6 = 0, $arrayidx21$7 = 0, $bestcolor = 0, $bestdist$i = 0, $bptr$161$i = 0, $colorlist = 0, $colormap$i31 = 0, $conv$i = 0, $conv$i32 = 0, $conv40$i = 0, $conv83$i = 0, $cptr$049 = 0, $cptr$062$i = 0, $dist0$063$i = 0, $i$0127$i = 0, $i$1124$i = 0, $i$167$i = 0, $ic0$048 = 0, $ic0$065$i = 0, $incdec$ptr47$1$1$i = 0, $incdec$ptr47$1$2$i = 0, $incdec$ptr47$1$3$i = 0, $incdec$ptr47$1$4$i = 0, $incdec$ptr47$1$5$i = 0, $incdec$ptr47$1$6$i = 0, $incdec$ptr47$1$7$i = 0, $incdec$ptr47$1$i = 0, $incdec$ptr47$177$i = 0, $incdec$ptr47$2$1$i = 0, $incdec$ptr47$2$2$i = 0, $incdec$ptr47$2$3$i = 0, $incdec$ptr47$2$4$i = 0, $incdec$ptr47$2$5$i = 0, $incdec$ptr47$2$6$i = 0, $incdec$ptr47$2$7$i = 0, $incdec$ptr47$2$i = 0, $incdec$ptr47$284$i = 0, $incdec$ptr47$3$i = 0, $incdec$ptr47$4$i = 0, $incdec$ptr47$5$i = 0, $incdec$ptr47$6$i = 0, $incdec$ptr47$7$i = 0, $incdec$ptr47$i = 0, $max_dist$0$i = 0, $max_dist$1$i = 0, $max_dist$2$i = 0, $min_dist$0$i = 0, $min_dist$1$i = 0, $min_dist$2$i = 0, $minmaxdist$0128$i = 0, $mul$i = 0, $mul$i34 = 0, $mul13$i = 0, $mul13$i36 = 0, $mul19$i = 0, $mul22$i = 0, $mul25$i = 0, $mul27$i = 0, $mul29$i = 0, $mul33$i = 0, $mul45$i = 0, $mul49$i = 0, $mul50$pn$i = 0, $mul57$i = 0, $mul61$i = 0, $mul69$i = 0, $mul7$i = 0, $mul74$i = 0, $mul93$pn$i = 0, $ncolors$0$lcssa$i = 0, $ncolors$0125$i = 0, $ncolors$1$i = 0, $scevgep$1$i = 0, $scevgep$2$i = 0, $scevgep$3$i = 0, $scevgep$4$i = 0, $scevgep$5$i = 0, $scevgep$6$i = 0, $scevgep$i = 0, $shl = 0, $shl11 = 0, $shl12 = 0, $shl13 = 0, $shl5 = 0, $shl7 = 0, $shr$i = 0, $shr4$i = 0, $shr7$i = 0, $sub$i33 = 0, $sub103$i = 0, $sub111$i = 0, $sub116$i = 0, $sub12$i35 = 0, $sub19$i = 0, $sub87$i = 0, $sub91$i = 0, $sub99$i = 0, $xx0$064$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1408 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1408);
 $bestdist$i = sp + 384 | 0;
 $colorlist = sp + 128 | 0;
 $bestcolor = sp;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $shl = $c0 >>> 2 << 5;
 $add = $shl | 4;
 $shl5 = $c1 >>> 3 << 5;
 $add6 = $shl5 | 2;
 $shl7 = $c2 >>> 2 << 5;
 $add8 = $shl7 | 4;
 $5 = HEAP32[$cinfo + 132 >> 2] | 0;
 $add$i = $shl | 28;
 $shr$i = $add$i + $add >> 1;
 $add2$i = $shl5 | 30;
 $shr4$i = $add2$i + $add6 >> 1;
 $add5$i = $shl7 | 28;
 $shr7$i = $add5$i + $add8 >> 1;
 if (($5 | 0) > 0) {
  $6 = HEAP32[$cinfo + 136 >> 2] | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = HEAP32[$6 + 4 >> 2] | 0;
  $9 = HEAP32[$6 + 8 >> 2] | 0;
  $i$0127$i = 0;
  $minmaxdist$0128$i = 2147483647;
  do {
   $conv$i = HEAPU8[$7 + $i$0127$i >> 0] | 0;
   do if (($add | 0) <= ($conv$i | 0)) {
    if (($add$i | 0) < ($conv$i | 0)) {
     $mul19$i = $conv$i - $add$i << 1;
     $mul22$i = $conv$i - $add << 1;
     $max_dist$0$i = Math_imul($mul22$i, $mul22$i) | 0;
     $min_dist$0$i = Math_imul($mul19$i, $mul19$i) | 0;
     break;
    }
    if (($shr$i | 0) < ($conv$i | 0)) {
     $mul33$i = $conv$i - $add << 1;
     $max_dist$0$i = Math_imul($mul33$i, $mul33$i) | 0;
     $min_dist$0$i = 0;
     break;
    } else {
     $mul29$i = $conv$i - $add$i << 1;
     $max_dist$0$i = Math_imul($mul29$i, $mul29$i) | 0;
     $min_dist$0$i = 0;
     break;
    }
   } else {
    $mul$i = $conv$i - $add << 1;
    $mul13$i = $conv$i - $add$i << 1;
    $max_dist$0$i = Math_imul($mul13$i, $mul13$i) | 0;
    $min_dist$0$i = Math_imul($mul$i, $mul$i) | 0;
   } while (0);
   $conv40$i = HEAPU8[$8 + $i$0127$i >> 0] | 0;
   do if (($add6 | 0) <= ($conv40$i | 0)) {
    if (($add2$i | 0) < ($conv40$i | 0)) {
     $mul57$i = ($conv40$i - $add2$i | 0) * 3 | 0;
     $mul61$i = ($conv40$i - $add6 | 0) * 3 | 0;
     $min_dist$1$i = (Math_imul($mul57$i, $mul57$i) | 0) + $min_dist$0$i | 0;
     $mul50$pn$i = Math_imul($mul61$i, $mul61$i) | 0;
     break;
    }
    if (($shr4$i | 0) < ($conv40$i | 0)) {
     $mul74$i = ($conv40$i - $add6 | 0) * 3 | 0;
     $min_dist$1$i = $min_dist$0$i;
     $mul50$pn$i = Math_imul($mul74$i, $mul74$i) | 0;
     break;
    } else {
     $mul69$i = ($conv40$i - $add2$i | 0) * 3 | 0;
     $min_dist$1$i = $min_dist$0$i;
     $mul50$pn$i = Math_imul($mul69$i, $mul69$i) | 0;
     break;
    }
   } else {
    $mul45$i = ($conv40$i - $add6 | 0) * 3 | 0;
    $mul49$i = ($conv40$i - $add2$i | 0) * 3 | 0;
    $min_dist$1$i = (Math_imul($mul45$i, $mul45$i) | 0) + $min_dist$0$i | 0;
    $mul50$pn$i = Math_imul($mul49$i, $mul49$i) | 0;
   } while (0);
   $max_dist$1$i = $mul50$pn$i + $max_dist$0$i | 0;
   $conv83$i = HEAPU8[$9 + $i$0127$i >> 0] | 0;
   do if (($add8 | 0) <= ($conv83$i | 0)) {
    if (($add5$i | 0) < ($conv83$i | 0)) {
     $sub99$i = $conv83$i - $add5$i | 0;
     $sub103$i = $conv83$i - $add8 | 0;
     $min_dist$2$i = (Math_imul($sub99$i, $sub99$i) | 0) + $min_dist$1$i | 0;
     $mul93$pn$i = Math_imul($sub103$i, $sub103$i) | 0;
     break;
    }
    if (($shr7$i | 0) < ($conv83$i | 0)) {
     $sub116$i = $conv83$i - $add8 | 0;
     $min_dist$2$i = $min_dist$1$i;
     $mul93$pn$i = Math_imul($sub116$i, $sub116$i) | 0;
     break;
    } else {
     $sub111$i = $conv83$i - $add5$i | 0;
     $min_dist$2$i = $min_dist$1$i;
     $mul93$pn$i = Math_imul($sub111$i, $sub111$i) | 0;
     break;
    }
   } else {
    $sub87$i = $conv83$i - $add8 | 0;
    $sub91$i = $conv83$i - $add5$i | 0;
    $min_dist$2$i = (Math_imul($sub87$i, $sub87$i) | 0) + $min_dist$1$i | 0;
    $mul93$pn$i = Math_imul($sub91$i, $sub91$i) | 0;
   } while (0);
   $max_dist$2$i = $max_dist$1$i + $mul93$pn$i | 0;
   HEAP32[$bestdist$i + ($i$0127$i << 2) >> 2] = $min_dist$2$i;
   $minmaxdist$0128$i = ($max_dist$2$i | 0) < ($minmaxdist$0128$i | 0) ? $max_dist$2$i : $minmaxdist$0128$i;
   $i$0127$i = $i$0127$i + 1 | 0;
  } while (($i$0127$i | 0) != ($5 | 0));
  $i$1124$i = 0;
  $ncolors$0125$i = 0;
  while (1) {
   if ((HEAP32[$bestdist$i + ($i$1124$i << 2) >> 2] | 0) > ($minmaxdist$0128$i | 0)) $ncolors$1$i = $ncolors$0125$i; else {
    HEAP8[$colorlist + $ncolors$0125$i >> 0] = $i$1124$i;
    $ncolors$1$i = $ncolors$0125$i + 1 | 0;
   }
   $i$1124$i = $i$1124$i + 1 | 0;
   if (($i$1124$i | 0) == ($5 | 0)) {
    $ncolors$0$lcssa$i = $ncolors$1$i;
    break;
   } else $ncolors$0125$i = $ncolors$1$i;
  }
 } else $ncolors$0$lcssa$i = 0;
 HEAP32[$bestdist$i >> 2] = 2147483647;
 HEAP32[$bestdist$i + 4 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 8 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 12 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 16 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 20 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 24 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 28 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 32 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 36 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 40 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 44 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 48 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 52 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 56 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 60 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 64 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 68 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 72 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 76 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 80 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 84 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 88 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 92 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 96 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 100 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 104 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 108 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 112 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 116 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 120 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 124 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 128 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 132 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 136 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 140 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 144 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 148 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 152 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 156 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 160 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 164 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 168 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 172 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 176 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 180 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 184 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 188 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 192 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 196 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 200 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 204 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 208 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 212 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 216 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 220 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 224 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 228 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 232 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 236 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 240 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 244 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 248 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 252 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 256 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 260 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 264 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 268 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 272 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 276 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 280 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 284 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 288 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 292 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 296 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 300 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 304 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 308 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 312 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 316 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 320 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 324 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 328 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 332 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 336 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 340 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 344 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 348 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 352 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 356 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 360 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 364 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 368 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 372 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 376 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 380 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 384 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 388 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 392 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 396 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 400 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 404 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 408 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 412 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 416 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 420 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 424 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 428 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 432 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 436 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 440 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 444 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 448 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 452 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 456 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 460 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 464 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 468 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 472 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 476 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 480 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 484 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 488 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 492 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 496 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 500 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 504 >> 2] = 2147483647;
 HEAP32[$bestdist$i + 508 >> 2] = 2147483647;
 if (($ncolors$0$lcssa$i | 0) > 0) {
  $colormap$i31 = $cinfo + 136 | 0;
  $i$167$i = 0;
  do {
   $14 = HEAP8[$colorlist + $i$167$i >> 0] | 0;
   $conv$i32 = $14 & 255;
   $15 = HEAP32[$colormap$i31 >> 2] | 0;
   $sub$i33 = $add - (HEAPU8[(HEAP32[$15 >> 2] | 0) + $conv$i32 >> 0] | 0) | 0;
   $mul$i34 = $sub$i33 << 1;
   $mul7$i = Math_imul($mul$i34, $mul$i34) | 0;
   $sub12$i35 = $add6 - (HEAPU8[(HEAP32[$15 + 4 >> 2] | 0) + $conv$i32 >> 0] | 0) | 0;
   $mul13$i36 = $sub12$i35 * 3 | 0;
   $add$i38 = (Math_imul($mul13$i36, $mul13$i36) | 0) + $mul7$i | 0;
   $sub19$i = $add8 - (HEAPU8[(HEAP32[$15 + 8 >> 2] | 0) + $conv$i32 >> 0] | 0) | 0;
   $mul25$i = $sub12$i35 * 72 | 0;
   $add26$i = $mul25$i + 144 | 0;
   $mul27$i = $sub19$i << 4;
   $add28$i = $mul27$i + 64 | 0;
   $add46$i = $mul27$i + 192 | 0;
   $add46$1$i = $mul27$i + 320 | 0;
   $add53$i = $mul25$i + 432 | 0;
   $add53$1$i = $mul25$i + 720 | 0;
   $add53$2$i = $mul25$i + 1008 | 0;
   $add53$3$i = $mul25$i + 1296 | 0;
   $add53$4$i = $mul25$i + 1584 | 0;
   $add53$5$i = $mul25$i + 1872 | 0;
   $bptr$161$i = $bestdist$i;
   $cptr$062$i = $bestcolor;
   $dist0$063$i = $add$i38 + (Math_imul($sub19$i, $sub19$i) | 0) | 0;
   $ic0$065$i = 3;
   $xx0$064$i = ($sub$i33 << 6) + 256 | 0;
   while (1) {
    $scevgep$i = $bptr$161$i + 16 | 0;
    if (($dist0$063$i | 0) < (HEAP32[$bptr$161$i >> 2] | 0)) {
     HEAP32[$bptr$161$i >> 2] = $dist0$063$i;
     HEAP8[$cptr$062$i >> 0] = $14;
    }
    $add45$i = $dist0$063$i + $add28$i | 0;
    $incdec$ptr47$i = $bptr$161$i + 4 | 0;
    if (($add45$i | 0) < (HEAP32[$incdec$ptr47$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$i >> 2] = $add45$i;
     HEAP8[$cptr$062$i + 1 >> 0] = $14;
    }
    $add45$1$i = $add45$i + $add46$i | 0;
    $incdec$ptr47$1$i = $bptr$161$i + 8 | 0;
    if (($add45$1$i | 0) < (HEAP32[$incdec$ptr47$1$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$i >> 2] = $add45$1$i;
     HEAP8[$cptr$062$i + 2 >> 0] = $14;
    }
    $add45$2$i = $add45$1$i + $add46$1$i | 0;
    $incdec$ptr47$2$i = $bptr$161$i + 12 | 0;
    if (($add45$2$i | 0) < (HEAP32[$incdec$ptr47$2$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$i >> 2] = $add45$2$i;
     HEAP8[$cptr$062$i + 3 >> 0] = $14;
    }
    $add52$i = $add26$i + $dist0$063$i | 0;
    $scevgep$1$i = $bptr$161$i + 32 | 0;
    if (($add52$i | 0) < (HEAP32[$scevgep$i >> 2] | 0)) {
     HEAP32[$scevgep$i >> 2] = $add52$i;
     HEAP8[$cptr$062$i + 4 >> 0] = $14;
    }
    $add45$175$i = $add52$i + $add28$i | 0;
    $incdec$ptr47$177$i = $bptr$161$i + 20 | 0;
    if (($add45$175$i | 0) < (HEAP32[$incdec$ptr47$177$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$177$i >> 2] = $add45$175$i;
     HEAP8[$cptr$062$i + 5 >> 0] = $14;
    }
    $add45$1$1$i = $add45$175$i + $add46$i | 0;
    $incdec$ptr47$1$1$i = $bptr$161$i + 24 | 0;
    if (($add45$1$1$i | 0) < (HEAP32[$incdec$ptr47$1$1$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$1$i >> 2] = $add45$1$1$i;
     HEAP8[$cptr$062$i + 6 >> 0] = $14;
    }
    $add45$2$1$i = $add45$1$1$i + $add46$1$i | 0;
    $incdec$ptr47$2$1$i = $bptr$161$i + 28 | 0;
    if (($add45$2$1$i | 0) < (HEAP32[$incdec$ptr47$2$1$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$1$i >> 2] = $add45$2$1$i;
     HEAP8[$cptr$062$i + 7 >> 0] = $14;
    }
    $add52$1$i = $add53$i + $add52$i | 0;
    $scevgep$2$i = $bptr$161$i + 48 | 0;
    if (($add52$1$i | 0) < (HEAP32[$scevgep$1$i >> 2] | 0)) {
     HEAP32[$scevgep$1$i >> 2] = $add52$1$i;
     HEAP8[$cptr$062$i + 8 >> 0] = $14;
    }
    $add45$282$i = $add52$1$i + $add28$i | 0;
    $incdec$ptr47$284$i = $bptr$161$i + 36 | 0;
    if (($add45$282$i | 0) < (HEAP32[$incdec$ptr47$284$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$284$i >> 2] = $add45$282$i;
     HEAP8[$cptr$062$i + 9 >> 0] = $14;
    }
    $add45$1$2$i = $add45$282$i + $add46$i | 0;
    $incdec$ptr47$1$2$i = $bptr$161$i + 40 | 0;
    if (($add45$1$2$i | 0) < (HEAP32[$incdec$ptr47$1$2$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$2$i >> 2] = $add45$1$2$i;
     HEAP8[$cptr$062$i + 10 >> 0] = $14;
    }
    $add45$2$2$i = $add45$1$2$i + $add46$1$i | 0;
    $incdec$ptr47$2$2$i = $bptr$161$i + 44 | 0;
    if (($add45$2$2$i | 0) < (HEAP32[$incdec$ptr47$2$2$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$2$i >> 2] = $add45$2$2$i;
     HEAP8[$cptr$062$i + 11 >> 0] = $14;
    }
    $add52$2$i = $add53$1$i + $add52$1$i | 0;
    $scevgep$3$i = $bptr$161$i + 64 | 0;
    if (($add52$2$i | 0) < (HEAP32[$scevgep$2$i >> 2] | 0)) {
     HEAP32[$scevgep$2$i >> 2] = $add52$2$i;
     HEAP8[$cptr$062$i + 12 >> 0] = $14;
    }
    $add45$3$i = $add52$2$i + $add28$i | 0;
    $incdec$ptr47$3$i = $bptr$161$i + 52 | 0;
    if (($add45$3$i | 0) < (HEAP32[$incdec$ptr47$3$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$3$i >> 2] = $add45$3$i;
     HEAP8[$cptr$062$i + 13 >> 0] = $14;
    }
    $add45$1$3$i = $add45$3$i + $add46$i | 0;
    $incdec$ptr47$1$3$i = $bptr$161$i + 56 | 0;
    if (($add45$1$3$i | 0) < (HEAP32[$incdec$ptr47$1$3$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$3$i >> 2] = $add45$1$3$i;
     HEAP8[$cptr$062$i + 14 >> 0] = $14;
    }
    $add45$2$3$i = $add45$1$3$i + $add46$1$i | 0;
    $incdec$ptr47$2$3$i = $bptr$161$i + 60 | 0;
    if (($add45$2$3$i | 0) < (HEAP32[$incdec$ptr47$2$3$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$3$i >> 2] = $add45$2$3$i;
     HEAP8[$cptr$062$i + 15 >> 0] = $14;
    }
    $add52$3$i = $add53$2$i + $add52$2$i | 0;
    $scevgep$4$i = $bptr$161$i + 80 | 0;
    if (($add52$3$i | 0) < (HEAP32[$scevgep$3$i >> 2] | 0)) {
     HEAP32[$scevgep$3$i >> 2] = $add52$3$i;
     HEAP8[$cptr$062$i + 16 >> 0] = $14;
    }
    $add45$4$i = $add52$3$i + $add28$i | 0;
    $incdec$ptr47$4$i = $bptr$161$i + 68 | 0;
    if (($add45$4$i | 0) < (HEAP32[$incdec$ptr47$4$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$4$i >> 2] = $add45$4$i;
     HEAP8[$cptr$062$i + 17 >> 0] = $14;
    }
    $add45$1$4$i = $add45$4$i + $add46$i | 0;
    $incdec$ptr47$1$4$i = $bptr$161$i + 72 | 0;
    if (($add45$1$4$i | 0) < (HEAP32[$incdec$ptr47$1$4$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$4$i >> 2] = $add45$1$4$i;
     HEAP8[$cptr$062$i + 18 >> 0] = $14;
    }
    $add45$2$4$i = $add45$1$4$i + $add46$1$i | 0;
    $incdec$ptr47$2$4$i = $bptr$161$i + 76 | 0;
    if (($add45$2$4$i | 0) < (HEAP32[$incdec$ptr47$2$4$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$4$i >> 2] = $add45$2$4$i;
     HEAP8[$cptr$062$i + 19 >> 0] = $14;
    }
    $add52$4$i = $add53$3$i + $add52$3$i | 0;
    $scevgep$5$i = $bptr$161$i + 96 | 0;
    if (($add52$4$i | 0) < (HEAP32[$scevgep$4$i >> 2] | 0)) {
     HEAP32[$scevgep$4$i >> 2] = $add52$4$i;
     HEAP8[$cptr$062$i + 20 >> 0] = $14;
    }
    $add45$5$i = $add52$4$i + $add28$i | 0;
    $incdec$ptr47$5$i = $bptr$161$i + 84 | 0;
    if (($add45$5$i | 0) < (HEAP32[$incdec$ptr47$5$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$5$i >> 2] = $add45$5$i;
     HEAP8[$cptr$062$i + 21 >> 0] = $14;
    }
    $add45$1$5$i = $add45$5$i + $add46$i | 0;
    $incdec$ptr47$1$5$i = $bptr$161$i + 88 | 0;
    if (($add45$1$5$i | 0) < (HEAP32[$incdec$ptr47$1$5$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$5$i >> 2] = $add45$1$5$i;
     HEAP8[$cptr$062$i + 22 >> 0] = $14;
    }
    $add45$2$5$i = $add45$1$5$i + $add46$1$i | 0;
    $incdec$ptr47$2$5$i = $bptr$161$i + 92 | 0;
    if (($add45$2$5$i | 0) < (HEAP32[$incdec$ptr47$2$5$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$5$i >> 2] = $add45$2$5$i;
     HEAP8[$cptr$062$i + 23 >> 0] = $14;
    }
    $add52$5$i = $add53$4$i + $add52$4$i | 0;
    $scevgep$6$i = $bptr$161$i + 112 | 0;
    if (($add52$5$i | 0) < (HEAP32[$scevgep$5$i >> 2] | 0)) {
     HEAP32[$scevgep$5$i >> 2] = $add52$5$i;
     HEAP8[$cptr$062$i + 24 >> 0] = $14;
    }
    $add45$6$i = $add52$5$i + $add28$i | 0;
    $incdec$ptr47$6$i = $bptr$161$i + 100 | 0;
    if (($add45$6$i | 0) < (HEAP32[$incdec$ptr47$6$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$6$i >> 2] = $add45$6$i;
     HEAP8[$cptr$062$i + 25 >> 0] = $14;
    }
    $add45$1$6$i = $add45$6$i + $add46$i | 0;
    $incdec$ptr47$1$6$i = $bptr$161$i + 104 | 0;
    if (($add45$1$6$i | 0) < (HEAP32[$incdec$ptr47$1$6$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$6$i >> 2] = $add45$1$6$i;
     HEAP8[$cptr$062$i + 26 >> 0] = $14;
    }
    $add45$2$6$i = $add45$1$6$i + $add46$1$i | 0;
    $incdec$ptr47$2$6$i = $bptr$161$i + 108 | 0;
    if (($add45$2$6$i | 0) < (HEAP32[$incdec$ptr47$2$6$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$6$i >> 2] = $add45$2$6$i;
     HEAP8[$cptr$062$i + 27 >> 0] = $14;
    }
    $add52$6$i = $add53$5$i + $add52$5$i | 0;
    if (($add52$6$i | 0) < (HEAP32[$scevgep$6$i >> 2] | 0)) {
     HEAP32[$scevgep$6$i >> 2] = $add52$6$i;
     HEAP8[$cptr$062$i + 28 >> 0] = $14;
    }
    $add45$7$i = $add52$6$i + $add28$i | 0;
    $incdec$ptr47$7$i = $bptr$161$i + 116 | 0;
    if (($add45$7$i | 0) < (HEAP32[$incdec$ptr47$7$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$7$i >> 2] = $add45$7$i;
     HEAP8[$cptr$062$i + 29 >> 0] = $14;
    }
    $add45$1$7$i = $add45$7$i + $add46$i | 0;
    $incdec$ptr47$1$7$i = $bptr$161$i + 120 | 0;
    if (($add45$1$7$i | 0) < (HEAP32[$incdec$ptr47$1$7$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$1$7$i >> 2] = $add45$1$7$i;
     HEAP8[$cptr$062$i + 30 >> 0] = $14;
    }
    $add45$2$7$i = $add45$1$7$i + $add46$1$i | 0;
    $incdec$ptr47$2$7$i = $bptr$161$i + 124 | 0;
    if (($add45$2$7$i | 0) < (HEAP32[$incdec$ptr47$2$7$i >> 2] | 0)) {
     HEAP32[$incdec$ptr47$2$7$i >> 2] = $add45$2$7$i;
     HEAP8[$cptr$062$i + 31 >> 0] = $14;
    }
    if (!$ic0$065$i) break; else {
     $bptr$161$i = $bptr$161$i + 128 | 0;
     $cptr$062$i = $cptr$062$i + 32 | 0;
     $dist0$063$i = $dist0$063$i + $xx0$064$i | 0;
     $ic0$065$i = $ic0$065$i + -1 | 0;
     $xx0$064$i = $xx0$064$i + 512 | 0;
    }
   }
   $i$167$i = $i$167$i + 1 | 0;
  } while (($i$167$i | 0) != ($ncolors$0$lcssa$i | 0));
 }
 $shl11 = $c0 & -4;
 $shl12 = $c1 & -8;
 $shl13 = $c2 & -4;
 $add19$1 = $shl12 | 1;
 $add19$2 = $shl12 | 2;
 $add19$3 = $shl12 | 3;
 $add19$4 = $shl12 | 4;
 $add19$5 = $shl12 | 5;
 $add19$6 = $shl12 | 6;
 $add19$7 = $c1 | 7;
 $cptr$049 = $bestcolor;
 $ic0$048 = 0;
 while (1) {
  $arrayidx = $1 + ($ic0$048 + $shl11 << 2) | 0;
  $54 = HEAP32[$arrayidx >> 2] | 0;
  $arrayidx21 = $54 + ($shl12 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21 >> 1] = (HEAPU8[$cptr$049 >> 0] | 0) + 1;
  HEAP16[$arrayidx21 + 2 >> 1] = (HEAPU8[$cptr$049 + 1 >> 0] | 0) + 1;
  HEAP16[$arrayidx21 + 4 >> 1] = (HEAPU8[$cptr$049 + 2 >> 0] | 0) + 1;
  HEAP16[$arrayidx21 + 6 >> 1] = (HEAPU8[$cptr$049 + 3 >> 0] | 0) + 1;
  $arrayidx21$1 = $54 + ($add19$1 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$1 >> 1] = (HEAPU8[$cptr$049 + 4 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$1 + 2 >> 1] = (HEAPU8[$cptr$049 + 5 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$1 + 4 >> 1] = (HEAPU8[$cptr$049 + 6 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$1 + 6 >> 1] = (HEAPU8[$cptr$049 + 7 >> 0] | 0) + 1;
  $arrayidx21$2 = $54 + ($add19$2 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$2 >> 1] = (HEAPU8[$cptr$049 + 8 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$2 + 2 >> 1] = (HEAPU8[$cptr$049 + 9 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$2 + 4 >> 1] = (HEAPU8[$cptr$049 + 10 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$2 + 6 >> 1] = (HEAPU8[$cptr$049 + 11 >> 0] | 0) + 1;
  $arrayidx21$3 = $54 + ($add19$3 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$3 >> 1] = (HEAPU8[$cptr$049 + 12 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$3 + 2 >> 1] = (HEAPU8[$cptr$049 + 13 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$3 + 4 >> 1] = (HEAPU8[$cptr$049 + 14 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$3 + 6 >> 1] = (HEAPU8[$cptr$049 + 15 >> 0] | 0) + 1;
  $71 = HEAP32[$arrayidx >> 2] | 0;
  $arrayidx21$4 = $71 + ($add19$4 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$4 >> 1] = (HEAPU8[$cptr$049 + 16 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$4 + 2 >> 1] = (HEAPU8[$cptr$049 + 17 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$4 + 4 >> 1] = (HEAPU8[$cptr$049 + 18 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$4 + 6 >> 1] = (HEAPU8[$cptr$049 + 19 >> 0] | 0) + 1;
  $arrayidx21$5 = $71 + ($add19$5 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$5 >> 1] = (HEAPU8[$cptr$049 + 20 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$5 + 2 >> 1] = (HEAPU8[$cptr$049 + 21 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$5 + 4 >> 1] = (HEAPU8[$cptr$049 + 22 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$5 + 6 >> 1] = (HEAPU8[$cptr$049 + 23 >> 0] | 0) + 1;
  $arrayidx21$6 = $71 + ($add19$6 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$6 >> 1] = (HEAPU8[$cptr$049 + 24 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$6 + 2 >> 1] = (HEAPU8[$cptr$049 + 25 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$6 + 4 >> 1] = (HEAPU8[$cptr$049 + 26 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$6 + 6 >> 1] = (HEAPU8[$cptr$049 + 27 >> 0] | 0) + 1;
  $arrayidx21$7 = $71 + ($add19$7 << 6) + ($shl13 << 1) | 0;
  HEAP16[$arrayidx21$7 >> 1] = (HEAPU8[$cptr$049 + 28 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$7 + 2 >> 1] = (HEAPU8[$cptr$049 + 29 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$7 + 4 >> 1] = (HEAPU8[$cptr$049 + 30 >> 0] | 0) + 1;
  HEAP16[$arrayidx21$7 + 6 >> 1] = (HEAPU8[$cptr$049 + 31 >> 0] | 0) + 1;
  $ic0$048 = $ic0$048 + 1 | 0;
  if (($ic0$048 | 0) == 4) break; else $cptr$049 = $cptr$049 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($this) {
 $this = $this | 0;
 var $1 = 0, $101 = 0, $106 = 0, $107 = 0, $11 = 0, $111 = 0, $116 = 0, $117 = 0, $121 = 0, $126 = 0, $127 = 0, $131 = 0, $136 = 0, $137 = 0, $141 = 0, $146 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $166 = 0, $167 = 0, $17 = 0, $171 = 0, $176 = 0, $177 = 0, $181 = 0, $186 = 0, $187 = 0, $191 = 0, $196 = 0, $197 = 0, $201 = 0, $206 = 0, $207 = 0, $21 = 0, $211 = 0, $216 = 0, $217 = 0, $221 = 0, $226 = 0, $227 = 0, $231 = 0, $236 = 0, $237 = 0, $241 = 0, $246 = 0, $247 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $266 = 0, $267 = 0, $27 = 0, $271 = 0, $276 = 0, $277 = 0, $281 = 0, $286 = 0, $287 = 0, $291 = 0, $296 = 0, $297 = 0, $301 = 0, $306 = 0, $307 = 0, $31 = 0, $311 = 0, $36 = 0, $37 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $76 = 0, $77 = 0, $81 = 0, $86 = 0, $87 = 0, $91 = 0, $96 = 0, $97 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $agg$tmp = 0, $agg$tmp102 = 0, $agg$tmp107 = 0, $agg$tmp112 = 0, $agg$tmp117 = 0, $agg$tmp122 = 0, $agg$tmp127 = 0, $agg$tmp132 = 0, $agg$tmp137 = 0, $agg$tmp142 = 0, $agg$tmp147 = 0, $agg$tmp152 = 0, $agg$tmp157 = 0, $agg$tmp162 = 0, $agg$tmp167 = 0, $agg$tmp167$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp27 = 0, $agg$tmp32 = 0, $agg$tmp37 = 0, $agg$tmp42 = 0, $agg$tmp47 = 0, $agg$tmp52 = 0, $agg$tmp57 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp72 = 0, $agg$tmp77 = 0, $agg$tmp82 = 0, $agg$tmp87 = 0, $agg$tmp92 = 0, $agg$tmp97 = 0, $call2 = 0, $call203 = 0, $call204 = 0, $call210 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $agg$tmp167$byval_copy = sp + 8 | 0;
 $IsLeftFold = sp + 272 | 0;
 $OperatorName = sp;
 $agg$tmp = sp + 264 | 0;
 $agg$tmp22 = sp + 256 | 0;
 $agg$tmp27 = sp + 248 | 0;
 $agg$tmp32 = sp + 240 | 0;
 $agg$tmp37 = sp + 232 | 0;
 $agg$tmp42 = sp + 224 | 0;
 $agg$tmp47 = sp + 216 | 0;
 $agg$tmp52 = sp + 208 | 0;
 $agg$tmp57 = sp + 200 | 0;
 $agg$tmp62 = sp + 192 | 0;
 $agg$tmp67 = sp + 184 | 0;
 $agg$tmp72 = sp + 176 | 0;
 $agg$tmp77 = sp + 168 | 0;
 $agg$tmp82 = sp + 160 | 0;
 $agg$tmp87 = sp + 152 | 0;
 $agg$tmp92 = sp + 144 | 0;
 $agg$tmp97 = sp + 136 | 0;
 $agg$tmp102 = sp + 128 | 0;
 $agg$tmp107 = sp + 120 | 0;
 $agg$tmp112 = sp + 112 | 0;
 $agg$tmp117 = sp + 104 | 0;
 $agg$tmp122 = sp + 96 | 0;
 $agg$tmp127 = sp + 88 | 0;
 $agg$tmp132 = sp + 80 | 0;
 $agg$tmp137 = sp + 72 | 0;
 $agg$tmp142 = sp + 64 | 0;
 $agg$tmp147 = sp + 56 | 0;
 $agg$tmp152 = sp + 48 | 0;
 $agg$tmp157 = sp + 40 | 0;
 $agg$tmp162 = sp + 32 | 0;
 $agg$tmp167 = sp + 24 | 0;
 $Init = sp + 16 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 102) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
  switch ($call2 << 24 >> 24) {
  case 76:
  case 108:
   {
    $storemerge = 1;
    label = 4;
    break;
   }
  case 82:
  case 114:
   {
    $storemerge = 0;
    label = 4;
    break;
   }
  default:
   $retval$2 = 0;
  }
  if ((label | 0) == 4) {
   HEAP8[$IsLeftFold >> 0] = $storemerge;
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   __ZN12_GLOBAL__N_110StringViewC2Ev($OperatorName);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31737);
   HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 28945);
    $1 = $agg$tmp167$byval_copy;
    $6 = HEAP32[$1 + 4 >> 2] | 0;
    $7 = $OperatorName;
    HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    label = 66;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 31740);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp22 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 28943);
     $11 = $agg$tmp167$byval_copy;
     $16 = HEAP32[$11 + 4 >> 2] | 0;
     $17 = $OperatorName;
     HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 31743);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29641);
     $21 = $agg$tmp167$byval_copy;
     $26 = HEAP32[$21 + 4 >> 2] | 0;
     $27 = $OperatorName;
     HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$27 + 4 >> 2] = $26;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp32, 31746);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp32 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29644);
     $31 = $agg$tmp167$byval_copy;
     $36 = HEAP32[$31 + 4 >> 2] | 0;
     $37 = $OperatorName;
     HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
     HEAP32[$37 + 4 >> 2] = $36;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp37, 31749);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp37 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29656);
     $41 = $agg$tmp167$byval_copy;
     $46 = HEAP32[$41 + 4 >> 2] | 0;
     $47 = $OperatorName;
     HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$47 + 4 >> 2] = $46;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 31752);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29660);
     $51 = $agg$tmp167$byval_copy;
     $56 = HEAP32[$51 + 4 >> 2] | 0;
     $57 = $OperatorName;
     HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
     HEAP32[$57 + 4 >> 2] = $56;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp47, 31755);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp47 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29663);
     $61 = $agg$tmp167$byval_copy;
     $66 = HEAP32[$61 + 4 >> 2] | 0;
     $67 = $OperatorName;
     HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
     HEAP32[$67 + 4 >> 2] = $66;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp52, 31758);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp52 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp52 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29665);
     $71 = $agg$tmp167$byval_copy;
     $76 = HEAP32[$71 + 4 >> 2] | 0;
     $77 = $OperatorName;
     HEAP32[$77 >> 2] = HEAP32[$71 >> 2];
     HEAP32[$77 + 4 >> 2] = $76;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 31761);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp57 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29668);
     $81 = $agg$tmp167$byval_copy;
     $86 = HEAP32[$81 + 4 >> 2] | 0;
     $87 = $OperatorName;
     HEAP32[$87 >> 2] = HEAP32[$81 >> 2];
     HEAP32[$87 + 4 >> 2] = $86;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp62, 31764);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp62 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29670);
     $91 = $agg$tmp167$byval_copy;
     $96 = HEAP32[$91 + 4 >> 2] | 0;
     $97 = $OperatorName;
     HEAP32[$97 >> 2] = HEAP32[$91 >> 2];
     HEAP32[$97 + 4 >> 2] = $96;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 31767);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp67 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29673);
     $101 = $agg$tmp167$byval_copy;
     $106 = HEAP32[$101 + 4 >> 2] | 0;
     $107 = $OperatorName;
     HEAP32[$107 >> 2] = HEAP32[$101 >> 2];
     HEAP32[$107 + 4 >> 2] = $106;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp72, 31770);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp72 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29676);
     $111 = $agg$tmp167$byval_copy;
     $116 = HEAP32[$111 + 4 >> 2] | 0;
     $117 = $OperatorName;
     HEAP32[$117 >> 2] = HEAP32[$111 >> 2];
     HEAP32[$117 + 4 >> 2] = $116;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp77, 31773);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp77 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp77 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29016);
     $121 = $agg$tmp167$byval_copy;
     $126 = HEAP32[$121 + 4 >> 2] | 0;
     $127 = $OperatorName;
     HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
     HEAP32[$127 + 4 >> 2] = $126;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp82, 31776);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp82 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29679);
     $131 = $agg$tmp167$byval_copy;
     $136 = HEAP32[$131 + 4 >> 2] | 0;
     $137 = $OperatorName;
     HEAP32[$137 >> 2] = HEAP32[$131 >> 2];
     HEAP32[$137 + 4 >> 2] = $136;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 31779);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp87 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29682);
     $141 = $agg$tmp167$byval_copy;
     $146 = HEAP32[$141 + 4 >> 2] | 0;
     $147 = $OperatorName;
     HEAP32[$147 >> 2] = HEAP32[$141 >> 2];
     HEAP32[$147 + 4 >> 2] = $146;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp92, 31782);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp92 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp92 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29685);
     $151 = $agg$tmp167$byval_copy;
     $156 = HEAP32[$151 + 4 >> 2] | 0;
     $157 = $OperatorName;
     HEAP32[$157 >> 2] = HEAP32[$151 >> 2];
     HEAP32[$157 + 4 >> 2] = $156;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp97, 31785);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp97 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp97 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29123);
     $161 = $agg$tmp167$byval_copy;
     $166 = HEAP32[$161 + 4 >> 2] | 0;
     $167 = $OperatorName;
     HEAP32[$167 >> 2] = HEAP32[$161 >> 2];
     HEAP32[$167 + 4 >> 2] = $166;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp102, 31788);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp102 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp102 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29528);
     $171 = $agg$tmp167$byval_copy;
     $176 = HEAP32[$171 + 4 >> 2] | 0;
     $177 = $OperatorName;
     HEAP32[$177 >> 2] = HEAP32[$171 >> 2];
     HEAP32[$177 + 4 >> 2] = $176;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp107, 31791);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp107 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp107 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29689);
     $181 = $agg$tmp167$byval_copy;
     $186 = HEAP32[$181 + 4 >> 2] | 0;
     $187 = $OperatorName;
     HEAP32[$187 >> 2] = HEAP32[$181 >> 2];
     HEAP32[$187 + 4 >> 2] = $186;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp112, 31794);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp112 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp112 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29010);
     $191 = $agg$tmp167$byval_copy;
     $196 = HEAP32[$191 + 4 >> 2] | 0;
     $197 = $OperatorName;
     HEAP32[$197 >> 2] = HEAP32[$191 >> 2];
     HEAP32[$197 + 4 >> 2] = $196;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp117, 31797);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp117 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp117 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29692);
     $201 = $agg$tmp167$byval_copy;
     $206 = HEAP32[$201 + 4 >> 2] | 0;
     $207 = $OperatorName;
     HEAP32[$207 >> 2] = HEAP32[$201 >> 2];
     HEAP32[$207 + 4 >> 2] = $206;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp122, 31800);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp122 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp122 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29698);
     $211 = $agg$tmp167$byval_copy;
     $216 = HEAP32[$211 + 4 >> 2] | 0;
     $217 = $OperatorName;
     HEAP32[$217 >> 2] = HEAP32[$211 >> 2];
     HEAP32[$217 + 4 >> 2] = $216;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 31803);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp127 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp127 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29703);
     $221 = $agg$tmp167$byval_copy;
     $226 = HEAP32[$221 + 4 >> 2] | 0;
     $227 = $OperatorName;
     HEAP32[$227 >> 2] = HEAP32[$221 >> 2];
     HEAP32[$227 + 4 >> 2] = $226;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp132, 31806);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp132 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp132 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29706);
     $231 = $agg$tmp167$byval_copy;
     $236 = HEAP32[$231 + 4 >> 2] | 0;
     $237 = $OperatorName;
     HEAP32[$237 >> 2] = HEAP32[$231 >> 2];
     HEAP32[$237 + 4 >> 2] = $236;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp137, 31809);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp137 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp137 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29708);
     $241 = $agg$tmp167$byval_copy;
     $246 = HEAP32[$241 + 4 >> 2] | 0;
     $247 = $OperatorName;
     HEAP32[$247 >> 2] = HEAP32[$241 >> 2];
     HEAP32[$247 + 4 >> 2] = $246;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp142, 31812);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp142 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp142 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29715);
     $251 = $agg$tmp167$byval_copy;
     $256 = HEAP32[$251 + 4 >> 2] | 0;
     $257 = $OperatorName;
     HEAP32[$257 >> 2] = HEAP32[$251 >> 2];
     HEAP32[$257 + 4 >> 2] = $256;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp147, 31815);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp147 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp147 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29717);
     $261 = $agg$tmp167$byval_copy;
     $266 = HEAP32[$261 + 4 >> 2] | 0;
     $267 = $OperatorName;
     HEAP32[$267 >> 2] = HEAP32[$261 >> 2];
     HEAP32[$267 + 4 >> 2] = $266;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp152, 31818);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp152 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp152 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29726);
     $271 = $agg$tmp167$byval_copy;
     $276 = HEAP32[$271 + 4 >> 2] | 0;
     $277 = $OperatorName;
     HEAP32[$277 >> 2] = HEAP32[$271 >> 2];
     HEAP32[$277 + 4 >> 2] = $276;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp157, 31821);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp157 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp157 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29728);
     $281 = $agg$tmp167$byval_copy;
     $286 = HEAP32[$281 + 4 >> 2] | 0;
     $287 = $OperatorName;
     HEAP32[$287 >> 2] = HEAP32[$281 >> 2];
     HEAP32[$287 + 4 >> 2] = $286;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp162, 31824);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp162 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp162 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29731);
     $291 = $agg$tmp167$byval_copy;
     $296 = HEAP32[$291 + 4 >> 2] | 0;
     $297 = $OperatorName;
     HEAP32[$297 >> 2] = HEAP32[$291 >> 2];
     HEAP32[$297 + 4 >> 2] = $296;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167, 31827);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp167 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp167 + 4 >> 2];
    if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0)) {
     $retval$1 = 0;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 29734);
    $301 = $agg$tmp167$byval_copy;
    $306 = HEAP32[$301 + 4 >> 2] | 0;
    $307 = $OperatorName;
    HEAP32[$307 >> 2] = HEAP32[$301 >> 2];
    HEAP32[$307 + 4 >> 2] = $306;
    label = 66;
   } while (0);
   if ((label | 0) == 66) {
    $call203 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call204 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203) | 0;
    HEAP32[$agg$tmp167$byval_copy >> 2] = $call204;
    HEAP32[$Init >> 2] = 0;
    $311 = $call204;
    L100 : do if (!$call204) $retval$0 = 0; else {
     switch ($call2 << 24 >> 24) {
     case 76:
     case 82:
      {
       $call210 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203) | 0;
       HEAP32[$Init >> 2] = $call210;
       if (!$call210) {
        $retval$0 = 0;
        break L100;
       }
       if ($storemerge << 24 >> 24) {
        HEAP32[$agg$tmp167$byval_copy >> 2] = $call210;
        HEAP32[$Init >> 2] = $311;
       }
       break;
      }
     default:
      {}
     }
     $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this, $IsLeftFold, $OperatorName, $agg$tmp167$byval_copy, $Init) | 0;
    } while (0);
    $retval$1 = $retval$0;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else $retval$3 = 0;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $1 = 0, $10 = 0, $102 = 0, $109 = 0, $116 = 0, $119 = 0, $120 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $134 = 0, $139 = 0, $145 = 0, $147 = 0, $150 = 0, $155 = 0, $160 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $54 = 0, $60 = 0, $67 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $94 = 0, $98 = 0, $add$ptr = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0, $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx34 = 0, $base$0 = 0, $c$0304 = 0, $call310 = 0, $call352 = 0, $call365 = 0, $call395 = 0, $call529 = 0.0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp202 = 0, $cmp223 = 0, $cmp304 = 0, $cmp32 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0, $conv131 = 0, $conv238 = 0, $conv247 = 0, $conv289$pre$phiZ2D = 0, $dest$0 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$3 = 0, $i$4 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr164 = 0, $incdec$ptr221 = 0, $incdec$ptr25 = 0, $incdec$ptr454 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $st = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub98 = 0, $tobool307 = 0, $tobool339 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0, $i$2$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $st = sp + 264 | 0;
 $scanset = sp;
 $wc = sp + 260 | 0;
 $$compoundliteral333 = sp + 272 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 L4 : do if ($1 << 24 >> 24) {
  $rpos42 = $f + 4 | 0;
  $shend43 = $f + 104 | 0;
  $shcnt = $f + 120 | 0;
  $rend = $f + 8 | 0;
  $arrayidx213 = $scanset + 10 | 0;
  $arrayidx218 = $scanset + 33 | 0;
  $arrayidx239 = $scanset + 46 | 0;
  $arrayidx248 = $scanset + 94 | 0;
  $$compoundliteral$sroa$2$0$$sroa_idx8 = $st + 4 | 0;
  $178 = 0;
  $2 = $1;
  $20 = 0;
  $21 = 0;
  $matches$0308 = 0;
  $p$0312 = $fmt;
  $s$0306 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($2 & 255) | 0)) {
    $cmp32 = (HEAP8[$p$0312 >> 0] | 0) == 37;
    L10 : do if ($cmp32) {
     $arrayidx34 = $p$0312 + 1 | 0;
     $27 = HEAP8[$arrayidx34 >> 0] | 0;
     L12 : do switch ($27 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0312 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit($27 & 255) | 0 ? (HEAP8[$p$0312 + 2 >> 0] | 0) == 36 : 0) {
        $dest$0 = _arg_n_510($ap, (HEAPU8[$arrayidx34 >> 0] | 0) + -48 | 0) | 0;
        $p$2 = $p$0312 + 3 | 0;
        break L12;
       }
       $43 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $44 = HEAP32[$43 >> 2] | 0;
       HEAP32[$ap >> 2] = $43 + 4;
       $dest$0 = $44;
       $p$2 = $arrayidx34;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[$p$2 >> 0] | 0) | 0)) {
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     } else {
      $p$3299 = $p$2;
      $width$0300 = 0;
      while (1) {
       $sub98 = ($width$0300 * 10 | 0) + -48 + (HEAPU8[$p$3299 >> 0] | 0) | 0;
       $incdec$ptr99 = $p$3299 + 1 | 0;
       if (!(_isdigit(HEAPU8[$incdec$ptr99 >> 0] | 0) | 0)) {
        $p$3$lcssa = $incdec$ptr99;
        $width$0$lcssa = $sub98;
        break;
       } else {
        $p$3299 = $incdec$ptr99;
        $width$0300 = $sub98;
       }
      }
     }
     $48 = HEAP8[$p$3$lcssa >> 0] | 0;
     $incdec$ptr106 = $p$3$lcssa + 1 | 0;
     if ($48 << 24 >> 24 == 109) {
      $183 = 0;
      $49 = HEAP8[$incdec$ptr106 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $incdec$ptr109$pre$phiZZ2D = $p$3$lcssa + 2 | 0;
      $p$4 = $incdec$ptr106;
      $s$1 = 0;
     } else {
      $183 = $178;
      $49 = $48;
      $alloc$0 = 0;
      $incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0306;
     }
     switch ($49 << 24 >> 24) {
     case 104:
      {
       $cmp112 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 104;
       $p$5 = $cmp112 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp112 ? -2 : -1;
       break;
      }
     case 108:
      {
       $cmp120 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 108;
       $p$5 = $cmp120 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp120 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $184 = $183;
       $s$8 = $s$1;
       label = 143;
       break L6;
      }
     }
     $conv131 = HEAPU8[$p$5 >> 0] | 0;
     $cmp132 = ($conv131 & 47 | 0) == 3;
     $spec$select = $cmp132 ? $conv131 | 32 : $conv131;
     $spec$select219 = $cmp132 ? 1 : $size$0;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $170 = $20;
       $171 = $21;
       $width$1 = ($width$0$lcssa | 0) > 1 ? $width$0$lcssa : 1;
       break;
      }
     case 91:
      {
       $170 = $20;
       $171 = $21;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       _store_int_511($dest$0, $spec$select219, $20, $21);
       $179 = $183;
       $180 = $20;
       $181 = $21;
       $matches$1 = $matches$0308;
       $p$12 = $p$5;
       $s$7 = $s$1;
       break L8;
       break;
      }
     default:
      {
       ___shlim($f, 0, 0);
       do {
        $54 = HEAP32[$rpos42 >> 2] | 0;
        if ($54 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
         HEAP32[$rpos42 >> 2] = $54 + 1;
         $cond155 = HEAPU8[$54 >> 0] | 0;
        } else $cond155 = ___shgetc($f) | 0;
       } while ((_isspace($cond155) | 0) != 0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $67 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr164 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr164;
        $67 = $incdec$ptr164;
       }
       $60 = $shcnt;
       $sub$ptr$sub172 = $67 - (HEAP32[$rend >> 2] | 0) | 0;
       $70 = _i64Add(HEAP32[$60 >> 2] | 0, HEAP32[$60 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
       $72 = _i64Add($70 | 0, getTempRet0() | 0, $sub$ptr$sub172 | 0, (($sub$ptr$sub172 | 0) < 0) << 31 >> 31 | 0) | 0;
       $170 = $72;
       $171 = getTempRet0() | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     $75 = (($width$1 | 0) < 0) << 31 >> 31;
     ___shlim($f, $width$1, $75);
     $76 = HEAP32[$rpos42 >> 2] | 0;
     $77 = HEAP32[$shend43 >> 2] | 0;
     if ($76 >>> 0 < $77 >>> 0) {
      HEAP32[$rpos42 >> 2] = $76 + 1;
      $78 = $77;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $184 = $183;
       $s$8 = $s$1;
       label = 143;
       break L6;
      }
      $78 = HEAP32[$shend43 >> 2] | 0;
     }
     if ($78 | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
     L59 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $cmp202 = ($spec$select | 0) == 99;
       L61 : do if (($spec$select | 16 | 0) == 115) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$arrayidx218 >> 0] = 0;
         HEAP16[$arrayidx213 >> 1] = 0;
         HEAP16[$arrayidx213 + 2 >> 1] = 0;
         HEAP8[$arrayidx213 + 4 >> 0] = 0;
         $p$10 = $p$5;
        } else $p$10 = $p$5;
       } else {
        $incdec$ptr221 = $p$5 + 1 | 0;
        $cmp223 = (HEAP8[$incdec$ptr221 >> 0] | 0) == 94;
        $invert$0 = $cmp223 & 1;
        $p$6 = $cmp223 ? $p$5 + 2 | 0 : $incdec$ptr221;
        _memset($scanset | 0, $invert$0 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $conv238 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx239 >> 0] = $conv238;
          $conv289$pre$phiZ2D = $conv238;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        case 93:
         {
          $conv247 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx248 >> 0] = $conv247;
          $conv289$pre$phiZ2D = $conv247;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        default:
         {
          $conv289$pre$phiZ2D = ($invert$0 ^ 1) & 255;
          $p$7 = $p$6;
         }
        }
        $p$8 = $p$7;
        while (1) {
         $84 = HEAP8[$p$8 >> 0] | 0;
         L72 : do switch ($84 << 24 >> 24) {
         case 0:
          {
           $184 = $183;
           $s$8 = $s$1;
           label = 143;
           break L6;
           break;
          }
         case 93:
          {
           $p$10 = $p$8;
           break L61;
           break;
          }
         case 45:
          {
           $arrayidx263 = $p$8 + 1 | 0;
           $85 = HEAP8[$arrayidx263 >> 0] | 0;
           switch ($85 << 24 >> 24) {
           case 93:
           case 0:
            {
             $88 = 45;
             $p$9 = $p$8;
             break L72;
             break;
            }
           default:
            {}
           }
           $86 = HEAP8[$p$8 + -1 >> 0] | 0;
           if (($86 & 255) < ($85 & 255)) {
            $c$0304 = $86 & 255;
            do {
             $c$0304 = $c$0304 + 1 | 0;
             HEAP8[$scanset + $c$0304 >> 0] = $conv289$pre$phiZ2D;
             $87 = HEAP8[$arrayidx263 >> 0] | 0;
            } while ($c$0304 >>> 0 < ($87 & 255) >>> 0);
            $88 = $87;
            $p$9 = $arrayidx263;
           } else {
            $88 = $85;
            $p$9 = $arrayidx263;
           }
           break;
          }
         default:
          {
           $88 = $84;
           $p$9 = $p$8;
          }
         } while (0);
         HEAP8[$scanset + (($88 & 255) + 1) >> 0] = $conv289$pre$phiZ2D;
         $p$8 = $p$9 + 1 | 0;
        }
       } while (0);
       $cond303 = $cmp202 ? $width$1 + 1 | 0 : 31;
       $cmp304 = ($spec$select219 | 0) == 1;
       $tobool307 = ($alloc$0 | 0) != 0;
       L80 : do if ($cmp304) {
        if ($tobool307) {
         $call310 = _malloc($cond303 << 2) | 0;
         if (!$call310) {
          $184 = 0;
          $s$8 = 0;
          label = 143;
          break L6;
         } else $186 = $call310;
        } else $186 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8 >> 2] = 0;
        $$ph$ph = $186;
        $i$0$ph$ph = 0;
        $k$0$ph$ph = $cond303;
        L85 : while (1) {
         $tobool339 = ($$ph$ph | 0) == 0;
         $i$0$ph = $i$0$ph$ph;
         while (1) {
          L89 : while (1) {
           $89 = HEAP32[$rpos42 >> 2] | 0;
           if ($89 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $89 + 1;
            $cond328 = HEAPU8[$89 >> 0] | 0;
           } else $cond328 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond328 + 1) >> 0] | 0)) break L85;
           HEAP8[$$compoundliteral333 >> 0] = $cond328;
           switch (_mbrtowc($wc, $$compoundliteral333, 1, $st) | 0) {
           case -1:
            {
             $184 = $$ph$ph;
             $s$8 = 0;
             label = 143;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if ($tobool339) $i$1 = $i$0$ph; else {
           HEAP32[$$ph$ph + ($i$0$ph << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph + 1 | 0;
          }
          if ($tobool307 & ($i$1 | 0) == ($k$0$ph$ph | 0)) break; else $i$0$ph = $i$1;
         }
         $k$0$ph$ph = $k$0$ph$ph << 1 | 1;
         $call352 = _realloc($$ph$ph, $k$0$ph$ph << 2) | 0;
         if (!$call352) {
          $184 = $$ph$ph;
          $s$8 = 0;
          label = 143;
          break L6;
         } else {
          $$ph$ph = $call352;
          $i$0$ph$ph = $i$1;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $184 = $$ph$ph;
         $s$8 = 0;
         label = 143;
         break L6;
        } else {
         $187 = $$ph$ph;
         $i$4 = $i$0$ph;
         $s$5 = 0;
         $wcs$6 = $$ph$ph;
        }
       } else {
        if ($tobool307) {
         $call365 = _malloc($cond303) | 0;
         if (!$call365) {
          $184 = 0;
          $s$8 = 0;
          label = 143;
          break L6;
         }
         $i$2$ph = 0;
         $k$2$ph = $cond303;
         $s$2$ph = $call365;
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $94 = HEAP32[$rpos42 >> 2] | 0;
           if ($94 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $94 + 1;
            $cond381 = HEAPU8[$94 >> 0] | 0;
           } else $cond381 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond381 + 1) >> 0] | 0)) {
            $187 = 0;
            $i$4 = $i$2;
            $s$5 = $s$2$ph;
            $wcs$6 = 0;
            break L80;
           }
           $i$2$looptemp = $i$2;
           $i$2 = $i$2 + 1 | 0;
           HEAP8[$s$2$ph + $i$2$looptemp >> 0] = $cond381;
          } while (($i$2 | 0) != ($k$2$ph | 0));
          $k$2$ph = $k$2$ph << 1 | 1;
          $call395 = _realloc($s$2$ph, $k$2$ph) | 0;
          if (!$call395) {
           $184 = 0;
           $s$8 = $s$2$ph;
           label = 143;
           break L6;
          } else {
           $i$2$ph = $i$2;
           $s$2$ph = $call395;
          }
         }
        }
        if (!$dest$0) while (1) {
         $102 = HEAP32[$rpos42 >> 2] | 0;
         if ($102 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $102 + 1;
          $cond441 = HEAPU8[$102 >> 0] | 0;
         } else $cond441 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond441 + 1) >> 0] | 0)) {
          $187 = 0;
          $i$4 = 0;
          $s$5 = 0;
          $wcs$6 = 0;
          break L80;
         }
        }
        $i$3 = 0;
        while (1) {
         $98 = HEAP32[$rpos42 >> 2] | 0;
         if ($98 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $98 + 1;
          $cond419 = HEAPU8[$98 >> 0] | 0;
         } else $cond419 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond419 + 1) >> 0] | 0)) {
          $187 = 0;
          $i$4 = $i$3;
          $s$5 = $dest$0;
          $wcs$6 = 0;
          break L80;
         }
         HEAP8[$dest$0 + $i$3 >> 0] = $cond419;
         $i$3 = $i$3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $116 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr454 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr454;
        $116 = $incdec$ptr454;
       }
       $109 = $shcnt;
       $sub$ptr$sub462 = $116 - (HEAP32[$rend >> 2] | 0) | 0;
       $119 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $sub$ptr$sub462 | 0, (($sub$ptr$sub462 | 0) < 0) << 31 >> 31 | 0) | 0;
       $120 = getTempRet0() | 0;
       if (($119 | 0) == 0 & ($120 | 0) == 0) {
        $177 = $187;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L6;
       }
       if (!(($119 | 0) == ($width$1 | 0) & ($120 | 0) == ($75 | 0) | $cmp202 ^ 1)) {
        $177 = $187;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L6;
       }
       do if ($tobool307) if ($cmp304) {
        HEAP32[$dest$0 >> 2] = $wcs$6;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$5;
        break;
       } while (0);
       if ($cmp202) {
        $185 = $187;
        $p$11 = $p$10;
        $s$6 = $s$5;
       } else {
        if ($wcs$6 | 0) HEAP32[$wcs$6 + ($i$4 << 2) >> 2] = 0;
        if (!$s$5) {
         $185 = $187;
         $p$11 = $p$10;
         $s$6 = 0;
         break L59;
        }
        HEAP8[$s$5 + $i$4 >> 0] = 0;
        $185 = $187;
        $p$11 = $p$10;
        $s$6 = $s$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 131;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 131;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 131;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $call529 = +___floatscan($f, $spec$select219, 0);
       $145 = $shcnt;
       $147 = HEAP32[$145 >> 2] | 0;
       $150 = HEAP32[$145 + 4 >> 2] | 0;
       $sub$ptr$sub535 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
       $155 = _i64Subtract(0, 0, $sub$ptr$sub535 | 0, (($sub$ptr$sub535 | 0) < 0) << 31 >> 31 | 0) | 0;
       if (($147 | 0) == ($155 | 0) & ($150 | 0) == (getTempRet0() | 0)) {
        $177 = $183;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$1;
        break L6;
       }
       if (!$dest$0) {
        $185 = $183;
        $p$11 = $p$5;
        $s$6 = $s$1;
       } else switch ($spec$select219 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $call529;
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       default:
        {
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
        }
       }
       break;
      }
     default:
      {
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
      }
     } while (0);
     do if ((label | 0) == 131) {
      label = 0;
      $127 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      $128 = getTempRet0() | 0;
      $129 = $shcnt;
      $131 = HEAP32[$129 >> 2] | 0;
      $134 = HEAP32[$129 + 4 >> 2] | 0;
      $sub$ptr$sub514 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
      $139 = _i64Subtract(0, 0, $sub$ptr$sub514 | 0, (($sub$ptr$sub514 | 0) < 0) << 31 >> 31 | 0) | 0;
      if (($131 | 0) == ($139 | 0) & ($134 | 0) == (getTempRet0() | 0)) {
       $177 = $183;
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0308;
       $s$10 = $s$1;
       break L6;
      }
      if (($dest$0 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $127;
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      } else {
       _store_int_511($dest$0, $spec$select219, $127, $128);
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      }
     } while (0);
     $160 = $shcnt;
     $sub$ptr$sub555 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
     $172 = _i64Add(HEAP32[$160 >> 2] | 0, HEAP32[$160 + 4 >> 2] | 0, $170 | 0, $171 | 0) | 0;
     $174 = _i64Add($172 | 0, getTempRet0() | 0, $sub$ptr$sub555 | 0, (($sub$ptr$sub555 | 0) < 0) << 31 >> 31 | 0) | 0;
     $179 = $185;
     $180 = $174;
     $181 = getTempRet0() | 0;
     $matches$1 = $matches$0308 + (($dest$0 | 0) != 0 & 1) | 0;
     $p$12 = $p$11;
     $s$7 = $s$6;
     break L8;
    } while (0);
    $add$ptr = $p$0312 + ($cmp32 & 1) | 0;
    ___shlim($f, 0, 0);
    $28 = HEAP32[$rpos42 >> 2] | 0;
    if ($28 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
     HEAP32[$rpos42 >> 2] = $28 + 1;
     $cond53 = HEAPU8[$28 >> 0] | 0;
    } else $cond53 = ___shgetc($f) | 0;
    if (($cond53 | 0) != (HEAPU8[$add$ptr >> 0] | 0)) {
     label = 23;
     break L6;
    }
    $34 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0;
    $179 = $178;
    $180 = $34;
    $181 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $add$ptr;
    $s$7 = $s$0306;
   } else {
    $p$1 = $p$0312;
    while (1) {
     $arrayidx = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$arrayidx >> 0] | 0) | 0)) break; else $p$1 = $arrayidx;
    }
    ___shlim($f, 0, 0);
    do {
     $4 = HEAP32[$rpos42 >> 2] | 0;
     if ($4 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
      HEAP32[$rpos42 >> 2] = $4 + 1;
      $cond16 = HEAPU8[$4 >> 0] | 0;
     } else $cond16 = ___shgetc($f) | 0;
    } while ((_isspace($cond16) | 0) != 0);
    if (!(HEAP32[$shend43 >> 2] | 0)) $17 = HEAP32[$rpos42 >> 2] | 0; else {
     $incdec$ptr25 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
     HEAP32[$rpos42 >> 2] = $incdec$ptr25;
     $17 = $incdec$ptr25;
    }
    $10 = $shcnt;
    $sub$ptr$sub = $17 - (HEAP32[$rend >> 2] | 0) | 0;
    $22 = _i64Add(HEAP32[$10 >> 2] | 0, HEAP32[$10 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
    $24 = _i64Add($22 | 0, getTempRet0() | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
    $179 = $178;
    $180 = $24;
    $181 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $p$1;
    $s$7 = $s$0306;
   } while (0);
   $p$0312 = $p$12 + 1 | 0;
   $2 = HEAP8[$p$0312 >> 0] | 0;
   if (!($2 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $178 = $179;
    $20 = $180;
    $21 = $181;
    $matches$0308 = $matches$1;
    $s$0306 = $s$7;
   }
  }
  if ((label | 0) == 23) {
   if (HEAP32[$shend43 >> 2] | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
   if (($matches$0308 | 0) != 0 | ($cond53 | 0) > -1) {
    $matches$3 = $matches$0308;
    break;
   } else {
    $182 = $178;
    $alloc$1 = 0;
    $s$9 = $s$0306;
    label = 144;
   }
  } else if ((label | 0) == 143) if (!$matches$0308) {
   $182 = $184;
   $alloc$1 = $alloc$0;
   $s$9 = $s$8;
   label = 144;
  } else {
   $177 = $184;
   $alloc$2 = $alloc$0;
   $matches$2 = $matches$0308;
   $s$10 = $s$8;
  }
  if ((label | 0) == 144) {
   $177 = $182;
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$10 = $s$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$10);
   _free($177);
   $matches$3 = $matches$2;
  }
 } else $matches$3 = 0; while (0);
 if ($cond | 0) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($this) {
 $this = $this | 0;
 var $39 = 0, $AfterQuals$1 = 0, $Res = 0, $Result = 0, $call = 0, $call177 = 0, $call180 = 0, $call185 = 0, $call188 = 0, $call193 = 0, $call196 = 0, $call199 = 0, $call202 = 0, $call217 = 0, $call219 = 0, $call220 = 0, $call231 = 0, $call235 = 0, $call244 = 0, $call248 = 0, $call255 = 0, $call259 = 0, $call267 = 0, $call272 = 0, $call279 = 0, $call283 = 0, $call291 = 0, $call295 = 0, $call306 = 0, $call307 = 0, $call320 = 0, $call324 = 0, $call331 = 0, $call42 = 0, $call46 = 0, $cmp = 0, $cmp6 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$10 = 0, $retval$9$ph = 0, $spec$select = 0, $spec$select28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $Result = sp + 16 | 0;
 $Res = sp + 8 | 0;
 $ref$tmp = sp;
 HEAP32[$Result >> 2] = 0;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 L1 : do switch ($call << 24 >> 24 | 0) {
 case 75:
 case 86:
 case 114:
  {
   $cmp = $call << 24 >> 24 == 114;
   $spec$select = $cmp & 1;
   $cmp6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select) | 0) << 24 >> 24 == 86;
   $AfterQuals$1 = $cmp6 ? ($cmp ? 2 : 1) : $spec$select;
   $spec$select28 = $AfterQuals$1 + ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $AfterQuals$1) | 0) << 24 >> 24 == 75 & 1) | 0;
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select28) | 0) << 24 >> 24) {
   case 70:
    break;
   case 68:
    {
     switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select28 + 1 | 0) | 0) << 24 >> 24) {
     case 120:
     case 119:
     case 79:
     case 111:
      break;
     default:
      {
       label = 5;
       break L1;
      }
     }
     break;
    }
   default:
    {
     label = 5;
     break L1;
    }
   }
   $call42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call42;
   $39 = $call42;
   label = 81;
   break;
  }
 case 85:
  {
   label = 5;
   break;
  }
 case 118:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 34041) | 0;
   break;
  }
 case 119:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 98:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 34046) | 0;
   break;
  }
 case 99:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 34051) | 0;
   break;
  }
 case 97:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 34056) | 0;
   break;
  }
 case 104:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, 34068) | 0;
   break;
  }
 case 115:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 34082) | 0;
   break;
  }
 case 116:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 34088) | 0;
   break;
  }
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 34103) | 0;
   break;
  }
 case 106:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, 34107) | 0;
   break;
  }
 case 108:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 34120) | 0;
   break;
  }
 case 109:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, 34125) | 0;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 28423) | 0;
   break;
  }
 case 121:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 110:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 28433) | 0;
   break;
  }
 case 111:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, 28442) | 0;
   break;
  }
 case 102:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 34139) | 0;
   break;
  }
 case 100:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 101:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 28460) | 0;
   break;
  }
 case 103:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 28472) | 0;
   break;
  }
 case 122:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 28483) | 0;
   break;
  }
 case 117:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Res, $this);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Res) | 0) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Res) | 0;
   $retval$10 = $retval$0;
   break;
  }
 case 68:
  {
   do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 100:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 28487) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 28497) | 0;
     break L1;
     break;
    }
   case 102:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 28508) | 0;
     break L1;
     break;
    }
   case 104:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 28518) | 0;
     break L1;
     break;
    }
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 28528) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 28537) | 0;
     break L1;
     break;
    }
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 28546) | 0;
     break L1;
     break;
    }
   case 99:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 28551) | 0;
     break L1;
     break;
    }
   case 110:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 28566) | 0;
     break L1;
     break;
    }
   case 84:
   case 116:
    {
     $call177 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call177;
     $39 = $call177;
     label = 81;
     break L1;
     break;
    }
   case 118:
    {
     $call180 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call180;
     $39 = $call180;
     label = 81;
     break L1;
     break;
    }
   case 112:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call185 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Res >> 2] = $call185;
     if (!$call185) {
      $retval$10 = 0;
      break L1;
     } else {
      $call188 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $Res) | 0;
      HEAP32[$Result >> 2] = $call188;
      label = 82;
      break L1;
     }
     break;
    }
   case 120:
   case 119:
   case 79:
   case 111:
    {
     $call193 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call193;
     $39 = $call193;
     label = 81;
     break L1;
     break;
    }
   default:
    {
     $retval$10 = 0;
     break L1;
    }
   } while (0);
   break;
  }
 case 70:
  {
   $call196 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call196;
   $39 = $call196;
   label = 81;
   break;
  }
 case 65:
  {
   $call199 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call199;
   $39 = $call199;
   label = 81;
   break;
  }
 case 77:
  {
   $call202 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call202;
   $39 = $call202;
   label = 81;
   break;
  }
 case 84:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
   case 101:
   case 117:
   case 115:
    {
     $call217 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call217;
     $39 = $call217;
     label = 81;
     break L1;
     break;
    }
   default:
    {}
   }
   $call219 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call220 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call219) | 0;
   HEAP32[$Result >> 2] = $call220;
   if ($call220) if ((HEAP8[$this + 360 >> 0] | 0) != 0 ? (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73 : 0) {
    $call231 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call219, 0) | 0;
    HEAP32[$Res >> 2] = $call231;
    if (!$call231) {
     $retval$10 = 0;
     break L1;
    } else {
     $call235 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Result, $Res) | 0;
     HEAP32[$Result >> 2] = $call235;
     label = 82;
     break L1;
    }
   } else label = 82; else $retval$10 = 0;
   break;
  }
 case 80:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call244 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call244;
   if (!$call244) {
    $retval$10 = 0;
    break L1;
   } else {
    $call248 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $Res) | 0;
    HEAP32[$Result >> 2] = $call248;
    label = 82;
    break L1;
   }
   break;
  }
 case 82:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call255 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call255;
   if (!$call255) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp >> 2] = 0;
    $call259 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
    HEAP32[$Result >> 2] = $call259;
    label = 82;
    break L1;
   }
   break;
  }
 case 79:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call267 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call267;
   if (!$call267) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp >> 2] = 1;
    $call272 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
    HEAP32[$Result >> 2] = $call272;
    label = 82;
    break L1;
   }
   break;
  }
 case 67:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call279 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call279;
   if (!$call279) {
    $retval$10 = 0;
    break L1;
   } else {
    $call283 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this, $Res) | 0;
    HEAP32[$Result >> 2] = $call283;
    label = 82;
    break L1;
   }
   break;
  }
 case 71:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call291 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call291;
   if (!$call291) {
    $retval$10 = 0;
    break L1;
   } else {
    $call295 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this, $Res) | 0;
    HEAP32[$Result >> 2] = $call295;
    label = 82;
    break L1;
   }
   break;
  }
 case 83:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
   case 116:
   case 0:
    {
     label = 80;
     break L1;
     break;
    }
   default:
    {}
   }
   $call306 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call307 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call306) | 0;
   HEAP32[$Res >> 2] = $call307;
   if ($call307) if ((HEAP8[$this + 360 >> 0] | 0) != 0 ? (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73 : 0) {
    $call320 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call306, 0) | 0;
    HEAP32[$ref$tmp >> 2] = $call320;
    if (!$call320) {
     $retval$10 = 0;
     break L1;
    } else {
     $call324 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
     HEAP32[$Result >> 2] = $call324;
     label = 82;
     break L1;
    }
   } else $retval$9$ph = $call307; else $retval$9$ph = 0;
   $retval$10 = $retval$9$ph;
   break;
  }
 default:
  label = 80;
 } while (0);
 if ((label | 0) == 5) {
  $call46 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Result >> 2] = $call46;
  $39 = $call46;
  label = 81;
 } else if ((label | 0) == 80) {
  $call331 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Result >> 2] = $call331;
  $39 = $call331;
  label = 81;
 }
 if ((label | 0) == 81) if (!$39) $retval$10 = 0; else label = 82;
 if ((label | 0) == 82) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $Result);
  $retval$10 = HEAP32[$Result >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_419($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_419($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 27769;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 27770 : 27775) : 27772;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_418($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 27809 : 27796) : $tobool37 ? 27788 : 27792, 3);
  _pad_418($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if (!($p >>> 0 > 11 | ($sub74 | 0) == 0)) {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } else $y$addr$1 = $mul; while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[4720 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1 ? !($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) : 0) {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (($p | 0) != 0 ? (-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0) : 0) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_418($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_418($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_418($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_418($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $26 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($26 | 0) < 29 ? $26 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 >= $a$1502 >>> 0) {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if ($carry$0493) {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     } else $a$2 = $a$1502;
    } else $a$2 = $a$1502;
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $26 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 - ($div356 * 9 | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $53 = $51 - (Math_imul($div378, $i$1$lcssa) | 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if (!($cmp374 & ($53 | 0) == 0)) {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    $sub409 = $51 - $53 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   } else {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa ? ($58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0, ($58 | 0) != 0) : 0) if (!(($58 >>> 0) % 10 | 0)) {
     $i$3455 = 10;
     $j$1456 = 0;
     while (1) {
      $i$3455 = $i$3455 * 10 | 0;
      $inc500 = $j$1456 + 1 | 0;
      if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
       $j$2 = $inc500;
       break;
      } else $j$1456 = $inc500;
     }
    } else $j$2 = 0; else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_418($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_418($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 30615, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_418($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 30615, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_418($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_418($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $PermitForwardTemplateReferences = 0, $SavePermit = 0, $SaveTemplate = 0, $Ty = 0, $call121 = 0, $call280 = 0, $call38 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $SaveTemplate = sp + 16 | 0;
 $SavePermit = sp + 8 | 0;
 $Ty = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 97:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30736) | 0;
     break L1;
     break;
    }
   case 110:
   case 100:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30747) | 0;
     break L1;
     break;
    }
   case 78:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30757) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30768) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 99:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30778) | 0;
     break L1;
     break;
    }
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30789) | 0;
     break L1;
     break;
    }
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30799) | 0;
     break L1;
     break;
    }
   case 118:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemplate, $this + 360 | 0, 0);
     $PermitForwardTemplateReferences = $this + 361 | 0;
     $cmp = ($State | 0) != 0;
     __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePermit, $PermitForwardTemplateReferences, $cmp | (HEAP8[$PermitForwardTemplateReferences >> 0] | 0) != 0);
     $call38 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call38;
     if (!$call38) $retval$0 = 0; else {
      if ($cmp) HEAP8[$State >> 0] = 1;
      $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $Ty) | 0;
     }
     __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePermit);
     __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemplate);
     $retval$3 = $retval$0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 100:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, 30809) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30827) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
     break L1;
     break;
    }
   case 118:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30837) | 0;
     break L1;
     break;
    }
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30847) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 101:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30858) | 0;
     break L1;
     break;
    }
   case 79:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30868) | 0;
     break L1;
     break;
    }
   case 113:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30879) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 103:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30890) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30901) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 105:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 120) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30911) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 108:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30922) | 0;
     break L1;
     break;
    }
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call121 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$SaveTemplate >> 2] = $call121;
     if (!$call121) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this, $SaveTemplate) | 0;
     $retval$3 = $retval$1;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30933) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 30944) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30956) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 109:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30966) | 0;
     break L1;
     break;
    }
   case 73:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30976) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30827) | 0;
     break L1;
     break;
    }
   case 76:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30987) | 0;
     break L1;
     break;
    }
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 30998) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 110:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 31009) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31024) | 0;
     break L1;
     break;
    }
   case 103:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 30966) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31035) | 0;
     break L1;
     break;
    }
   case 119:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, 31045) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 111:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31058) | 0;
     break L1;
     break;
    }
   case 114:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31069) | 0;
     break L1;
     break;
    }
   case 82:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31079) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 112:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 31090) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31102) | 0;
     break L1;
     break;
    }
   case 76:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31112) | 0;
     break L1;
     break;
    }
   case 112:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31123) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31102) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31134) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 113:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 117) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31145) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 114:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 31155) | 0;
     break L1;
     break;
    }
   case 77:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31165) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 31176) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 31187) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 115:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 115) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 31199) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 118:
  {
   if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $call280 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$SaveTemplate >> 2] = $call280;
    if (!$call280) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $SaveTemplate) | 0;
    $retval$3 = $retval$2;
   } else $retval$3 = 0;
   break;
  }
 default:
  $retval$3 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _decfloat($f, $c, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $c = $c | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $58 = 0, $65 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add265 = 0, $add307$sink$off0 = 0, $add400 = 0, $add412 = 0, $add478 = 0, $and347 = 0, $and352 = 0, $and368 = 0, $and434 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $arrayidx186 = 0, $arrayidx261 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx356 = 0, $arrayidx406 = 0, $arrayidx444 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call135 = 0, $call165 = 0, $call175 = 0, $call496 = 0.0, $call499 = 0.0, $call594 = 0, $carry$0335 = 0, $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp289 = 0, $cmp292 = 0, $cmp325 = 0, $cmp392 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp480 = 0, $cmp51 = 0, $cmp572 = 0, $cmp67 = 0, $cond17 = 0, $cond254 = 0, $cond34 = 0, $cond93 = 0, $conv476 = 0.0, $div = 0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc66 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0, $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul187341 = 0, $mul477 = 0.0, $or$cond262 = 0, $or$cond266 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0, $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shr414 = 0, $spec$select265 = 0, $spec$select292 = 0, $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub225 = 0, $sub299 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0, $sub479 = 0, $sub564 = 0.0, $tobool95 = 0, $tobool98 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0, $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $x = sp;
 $0 = $emin + $bits | 0;
 $sub1 = 0 - $0 | 0;
 $rpos = $f + 4 | 0;
 $shend = $f + 104 | 0;
 $c$addr$0 = $c;
 $gotdig$0 = 0;
 L1 : while (1) {
  switch ($c$addr$0 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$addr$2 = $c$addr$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    break L1;
   }
  }
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $c$addr$0$be = HEAPU8[$1 >> 0] | 0;
  } else $c$addr$0$be = ___shgetc($f) | 0;
  $c$addr$0 = $c$addr$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 7) {
  $4 = HEAP32[$rpos >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $4 + 1;
   $cond17 = HEAPU8[$4 >> 0] | 0;
  } else $cond17 = ___shgetc($f) | 0;
  if (($cond17 | 0) == 48) {
   $7 = 0;
   $8 = 0;
   while (1) {
    $9 = _i64Add($7 | 0, $8 | 0, -1, -1) | 0;
    $10 = getTempRet0() | 0;
    $11 = HEAP32[$rpos >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $11 + 1;
     $cond34 = HEAPU8[$11 >> 0] | 0;
    } else $cond34 = ___shgetc($f) | 0;
    if (($cond34 | 0) == 48) {
     $7 = $9;
     $8 = $10;
    } else {
     $106 = $9;
     $107 = $10;
     $c$addr$2 = $cond34;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$addr$2 = $cond17;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
  }
 }
 HEAP32[$x >> 2] = 0;
 $sub37342 = $c$addr$2 + -48 | 0;
 $cmp40344 = ($c$addr$2 | 0) == 46;
 L22 : do if ($cmp40344 | $sub37342 >>> 0 < 10) {
  $arrayidx77 = $x + 496 | 0;
  $108 = $106;
  $109 = $107;
  $15 = 0;
  $16 = 0;
  $c$addr$3352 = $c$addr$2;
  $cmp40354 = $cmp40344;
  $gotdig$3348 = $gotdig$2;
  $gotrad$1349 = $gotrad$0;
  $j$0351 = 0;
  $k$0350 = 0;
  $lnz$0347 = 0;
  $sub37353 = $sub37342;
  L24 : while (1) {
   do if ($cmp40354) if (!$gotrad$1349) {
    $110 = $15;
    $111 = $16;
    $112 = $15;
    $113 = $16;
    $gotdig$4 = $gotdig$3348;
    $gotrad$2 = 1;
    $j$2 = $j$0351;
    $k$2 = $k$0350;
    $lnz$2 = $lnz$0347;
   } else break L24; else {
    $17 = _i64Add($15 | 0, $16 | 0, 1, 0) | 0;
    $18 = getTempRet0() | 0;
    $cmp51 = ($c$addr$3352 | 0) != 48;
    if (($k$0350 | 0) >= 125) {
     if (!$cmp51) {
      $110 = $108;
      $111 = $109;
      $112 = $17;
      $113 = $18;
      $gotdig$4 = $gotdig$3348;
      $gotrad$2 = $gotrad$1349;
      $j$2 = $j$0351;
      $k$2 = $k$0350;
      $lnz$2 = $lnz$0347;
      break;
     }
     HEAP32[$arrayidx77 >> 2] = HEAP32[$arrayidx77 >> 2] | 1;
     $110 = $108;
     $111 = $109;
     $112 = $17;
     $113 = $18;
     $gotdig$4 = $gotdig$3348;
     $gotrad$2 = $gotrad$1349;
     $j$2 = $j$0351;
     $k$2 = $k$0350;
     $lnz$2 = $lnz$0347;
     break;
    }
    $arrayidx64 = $x + ($k$0350 << 2) | 0;
    if (!$j$0351) $storemerge296 = $sub37353; else $storemerge296 = $c$addr$3352 + -48 + ((HEAP32[$arrayidx64 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$arrayidx64 >> 2] = $storemerge296;
    $inc66 = $j$0351 + 1 | 0;
    $cmp67 = ($inc66 | 0) == 9;
    $110 = $108;
    $111 = $109;
    $112 = $17;
    $113 = $18;
    $gotdig$4 = 1;
    $gotrad$2 = $gotrad$1349;
    $j$2 = $cmp67 ? 0 : $inc66;
    $k$2 = $k$0350 + ($cmp67 & 1) | 0;
    $lnz$2 = $cmp51 ? $17 : $lnz$0347;
   } while (0);
   $21 = HEAP32[$rpos >> 2] | 0;
   if ($21 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $21 + 1;
    $cond93 = HEAPU8[$21 >> 0] | 0;
   } else $cond93 = ___shgetc($f) | 0;
   $sub37353 = $cond93 + -48 | 0;
   $cmp40354 = ($cond93 | 0) == 46;
   if (!($cmp40354 | $sub37353 >>> 0 < 10)) {
    $26 = $112;
    $27 = $110;
    $29 = $113;
    $30 = $111;
    $c$addr$3$lcssa = $cond93;
    $gotdig$3$lcssa = $gotdig$4;
    $gotrad$1$lcssa = $gotrad$2;
    $j$0$lcssa = $j$2;
    $k$0$lcssa = $k$2;
    $lnz$0$lcssa = $lnz$2;
    label = 31;
    break L22;
   } else {
    $108 = $110;
    $109 = $111;
    $15 = $112;
    $16 = $113;
    $c$addr$3352 = $cond93;
    $gotdig$3348 = $gotdig$4;
    $gotrad$1349 = $gotrad$2;
    $j$0351 = $j$2;
    $k$0350 = $k$2;
    $lnz$0347 = $lnz$2;
   }
  }
  $114 = $15;
  $115 = $16;
  $116 = $108;
  $117 = $109;
  $j$0302 = $j$0351;
  $k$0306 = $k$0350;
  $lnz$0312 = $lnz$0347;
  $tobool98275277 = ($gotdig$3348 | 0) != 0;
  label = 39;
 } else {
  $26 = 0;
  $27 = $106;
  $29 = 0;
  $30 = $107;
  $c$addr$3$lcssa = $c$addr$2;
  $gotdig$3$lcssa = $gotdig$2;
  $gotrad$1$lcssa = $gotrad$0;
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
  $lnz$0$lcssa = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $tobool95 = ($gotrad$1$lcssa | 0) == 0;
  $25 = $tobool95 ? $26 : $27;
  $28 = $tobool95 ? $29 : $30;
  $tobool98 = ($gotdig$3$lcssa | 0) != 0;
  if (!($tobool98 & ($c$addr$3$lcssa | 32 | 0) == 101)) if (($c$addr$3$lcssa | 0) > -1) {
   $114 = $26;
   $115 = $29;
   $116 = $25;
   $117 = $28;
   $j$0302 = $j$0$lcssa;
   $k$0306 = $k$0$lcssa;
   $lnz$0312 = $lnz$0$lcssa;
   $tobool98275277 = $tobool98;
   label = 39;
   break;
  } else {
   $118 = $26;
   $119 = $29;
   $120 = $25;
   $121 = $28;
   $j$0301 = $j$0$lcssa;
   $k$0305 = $k$0$lcssa;
   $lnz$0311 = $lnz$0$lcssa;
   $tobool98274 = $tobool98;
   label = 41;
   break;
  }
  $31 = _scanexp($f, $pok) | 0;
  $32 = getTempRet0() | 0;
  if (($31 | 0) == 0 & ($32 | 0) == -2147483648) {
   if (!$pok) {
    ___shlim($f, 0, 0);
    $retval$1 = 0.0;
    break;
   }
   if (!(HEAP32[$shend >> 2] | 0)) {
    $38 = 0;
    $39 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $38 = 0;
    $39 = 0;
   }
  } else {
   $38 = $31;
   $39 = $32;
  }
  $40 = _i64Add($38 | 0, $39 | 0, $25 | 0, $28 | 0) | 0;
  $46 = $40;
  $47 = $26;
  $49 = getTempRet0() | 0;
  $50 = $29;
  $j$0300 = $j$0$lcssa;
  $k$0304 = $k$0$lcssa;
  $lnz$0310 = $lnz$0$lcssa;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (HEAP32[$shend >> 2] | 0) {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($tobool98275277) {
   $46 = $116;
   $47 = $114;
   $49 = $117;
   $50 = $115;
   $j$0300 = $j$0302;
   $k$0304 = $k$0306;
   $lnz$0310 = $lnz$0312;
   label = 43;
  } else label = 42;
 } else {
  $118 = $114;
  $119 = $115;
  $120 = $116;
  $121 = $117;
  $j$0301 = $j$0302;
  $k$0305 = $k$0306;
  $lnz$0311 = $lnz$0312;
  $tobool98274 = $tobool98275277;
  label = 41;
 }
 if ((label | 0) == 41) if ($tobool98274) {
  $46 = $120;
  $47 = $118;
  $49 = $121;
  $50 = $119;
  $j$0300 = $j$0301;
  $k$0304 = $k$0305;
  $lnz$0310 = $lnz$0311;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  $call135 = ___errno_location() | 0;
  HEAP32[$call135 >> 2] = 28;
  ___shlim($f, 0, 0);
  $retval$1 = 0.0;
 } else if ((label | 0) == 43) {
  $44 = HEAP32[$x >> 2] | 0;
  if (!$44) {
   $retval$1 = +($sign | 0) * 0.0;
   break;
  }
  if ((($50 | 0) < 0 | ($50 | 0) == 0 & $47 >>> 0 < 10) & (($46 | 0) == ($47 | 0) & ($49 | 0) == ($50 | 0)) ? ($bits | 0) > 30 | ($44 >>> $bits | 0) == 0 : 0) {
   $retval$1 = +($sign | 0) * +($44 >>> 0);
   break;
  }
  $div = ($emin | 0) / -2 | 0;
  $58 = (($div | 0) < 0) << 31 >> 31;
  if (($49 | 0) > ($58 | 0) | ($49 | 0) == ($58 | 0) & $46 >>> 0 > $div >>> 0) {
   $call165 = ___errno_location() | 0;
   HEAP32[$call165 >> 2] = 68;
   $retval$1 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub170 = $emin + -106 | 0;
  $65 = (($sub170 | 0) < 0) << 31 >> 31;
  if (($49 | 0) < ($65 | 0) | ($49 | 0) == ($65 | 0) & $46 >>> 0 < $sub170 >>> 0) {
   $call175 = ___errno_location() | 0;
   HEAP32[$call175 >> 2] = 68;
   $retval$1 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$j$0300) $k$3 = $k$0304; else {
   if (($j$0300 | 0) < 9) {
    $arrayidx186 = $x + ($k$0304 << 2) | 0;
    $j$3340 = $j$0300;
    $mul187341 = HEAP32[$arrayidx186 >> 2] | 0;
    while (1) {
     $mul187341 = $mul187341 * 10 | 0;
     if (($j$3340 | 0) >= 8) break; else $j$3340 = $j$3340 + 1 | 0;
    }
    HEAP32[$arrayidx186 >> 2] = $mul187341;
   }
   $k$3 = $k$0304 + 1 | 0;
  }
  if (($lnz$0310 | 0) < 9 ? ($lnz$0310 | 0) <= ($46 | 0) & ($46 | 0) < 18 : 0) {
   if (($46 | 0) == 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0);
    break;
   }
   if (($46 | 0) < 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0) / +(HEAP32[6640 + (8 - $46 << 2) >> 2] | 0);
    break;
   }
   $sub225 = $bits + 27 + (Math_imul($46, -3) | 0) | 0;
   $$pre = HEAP32[$x >> 2] | 0;
   if (($sub225 | 0) > 30 | ($$pre >>> $sub225 | 0) == 0) {
    $retval$1 = +($sign | 0) * +($$pre >>> 0) * +(HEAP32[6640 + ($46 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $rem = ($46 | 0) % 9 | 0;
  if (!$rem) {
   $a$3$ph = 0;
   $rp$3$ph = $46;
   $z$2$ph = $k$3;
  } else {
   $cond254 = ($46 | 0) > -1 ? $rem : $rem + 9 | 0;
   $75 = HEAP32[6640 + (8 - $cond254 << 2) >> 2] | 0;
   if ($k$3) {
    $div267 = 1e9 / ($75 | 0) | 0;
    $a$0333 = 0;
    $carry$0335 = 0;
    $k$4334 = 0;
    $rp$0332 = $46;
    do {
     $arrayidx261 = $x + ($k$4334 << 2) | 0;
     $76 = HEAP32[$arrayidx261 >> 2] | 0;
     $div264 = ($76 >>> 0) / ($75 >>> 0) | 0;
     $78 = $76 - (Math_imul($div264, $75) | 0) | 0;
     $add265 = $div264 + $carry$0335 | 0;
     HEAP32[$arrayidx261 >> 2] = $add265;
     $carry$0335 = Math_imul($div267, $78) | 0;
     $or$cond262 = ($k$4334 | 0) == ($a$0333 | 0) & ($add265 | 0) == 0;
     $rp$0332 = $or$cond262 ? $rp$0332 + -9 | 0 : $rp$0332;
     $a$0333 = $or$cond262 ? $a$0333 + 1 & 127 : $a$0333;
     $k$4334 = $k$4334 + 1 | 0;
    } while (($k$4334 | 0) != ($k$3 | 0));
    if (!$carry$0335) {
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3;
    } else {
     HEAP32[$x + ($k$3 << 2) >> 2] = $carry$0335;
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3 + 1 | 0;
    }
   } else {
    $a$0$lcssa379 = 0;
    $rp$0$lcssa378 = $46;
    $z$0 = 0;
   }
   $a$3$ph = $a$0$lcssa379;
   $rp$3$ph = 9 - $cond254 + $rp$0$lcssa378 | 0;
   $z$2$ph = $z$0;
  }
  $a$3$ph406 = $a$3$ph;
  $e2$0$ph = 0;
  $rp$3$ph404 = $rp$3$ph;
  $z$2$ph405 = $z$2$ph;
  L104 : while (1) {
   $cmp289 = ($rp$3$ph404 | 0) < 18;
   $cmp292 = ($rp$3$ph404 | 0) == 18;
   $arrayidx294 = $x + ($a$3$ph406 << 2) | 0;
   $e2$0 = $e2$0$ph;
   $z$2 = $z$2$ph405;
   while (1) {
    if (!$cmp289) {
     if (!$cmp292) {
      $rp$5$ph = $rp$3$ph404;
      break L104;
     }
     if ((HEAP32[$arrayidx294 >> 2] | 0) >>> 0 >= 9007199) {
      $rp$5$ph = 18;
      break L104;
     }
    }
    $carry298$0 = 0;
    $k$5$in = $z$2 + 127 | 0;
    $z$3 = $z$2;
    while (1) {
     $k$5 = $k$5$in & 127;
     $arrayidx304 = $x + ($k$5 << 2) | 0;
     $81 = _bitshift64Shl(HEAP32[$arrayidx304 >> 2] | 0, 0, 29) | 0;
     $83 = _i64Add($81 | 0, getTempRet0() | 0, $carry298$0 | 0, 0) | 0;
     $84 = getTempRet0() | 0;
     if ($84 >>> 0 > 0 | ($84 | 0) == 0 & $83 >>> 0 > 1e9) {
      $90 = ___udivdi3($83 | 0, $84 | 0, 1e9, 0) | 0;
      $92 = ___muldi3($90 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $94 = _i64Subtract($83 | 0, $84 | 0, $92 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      $add307$sink$off0 = $94;
      $carry298$1 = $90;
     } else {
      $add307$sink$off0 = $83;
      $carry298$1 = 0;
     }
     HEAP32[$arrayidx304 >> 2] = $add307$sink$off0;
     $cmp325 = ($k$5 | 0) == ($a$3$ph406 | 0);
     $spec$select292 = ($k$5 | 0) != ($z$3 + 127 & 127 | 0) | $cmp325 ? $z$3 : ($add307$sink$off0 | 0) == 0 ? $k$5 : $z$3;
     if ($cmp325) break; else {
      $carry298$0 = $carry298$1;
      $k$5$in = $k$5 + -1 | 0;
      $z$3 = $spec$select292;
     }
    }
    $sub299 = $e2$0 + -29 | 0;
    if (!$carry298$1) {
     $e2$0 = $sub299;
     $z$2 = $z$3;
    } else break;
   }
   $and347 = $a$3$ph406 + 127 & 127;
   $and352 = $spec$select292 + 127 & 127;
   $arrayidx356 = $x + (($spec$select292 + 126 & 127) << 2) | 0;
   if (($and347 | 0) == ($spec$select292 | 0)) {
    HEAP32[$arrayidx356 >> 2] = HEAP32[$arrayidx356 >> 2] | HEAP32[$x + ($and352 << 2) >> 2];
    $z$5 = $and352;
   } else $z$5 = $z$3;
   HEAP32[$x + ($and347 << 2) >> 2] = $carry298$1;
   $a$3$ph406 = $and347;
   $e2$0$ph = $sub299;
   $rp$3$ph404 = $rp$3$ph404 + 9 | 0;
   $z$2$ph405 = $z$5;
  }
  $a$5$ph$ph = $a$3$ph406;
  $e2$1$ph$ph = $e2$0;
  $rp$5$ph403$ph = $rp$5$ph;
  $z$7$ph$ph = $z$2;
  L123 : while (1) {
   $and434 = $z$7$ph$ph + 1 & 127;
   $arrayidx444 = $x + (($z$7$ph$ph + 127 & 127) << 2) | 0;
   $a$5$ph = $a$5$ph$ph;
   $e2$1$ph = $e2$1$ph$ph;
   $rp$5$ph403 = $rp$5$ph403$ph;
   while (1) {
    $cmp392 = ($rp$5$ph403 | 0) == 18;
    $spec$select265 = ($rp$5$ph403 | 0) > 27 ? 9 : 1;
    $a$5 = $a$5$ph;
    $e2$1 = $e2$1$ph;
    while (1) {
     $i$0323 = 0;
     while (1) {
      $and368 = $i$0323 + $a$5 & 127;
      if (($and368 | 0) == ($z$7$ph$ph | 0)) {
       label = 92;
       break;
      }
      $98 = HEAP32[$x + ($and368 << 2) >> 2] | 0;
      $99 = HEAP32[14964 + ($i$0323 << 2) >> 2] | 0;
      if ($98 >>> 0 < $99 >>> 0) {
       label = 92;
       break;
      }
      if ($98 >>> 0 > $99 >>> 0) break;
      if (($i$0323 + 1 | 0) >>> 0 < 2) $i$0323 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92 ? (label = 0, $cmp392) : 0) break L123;
     $add400 = $spec$select265 + $e2$1 | 0;
     if (($a$5 | 0) == ($z$7$ph$ph | 0)) {
      $a$5 = $z$7$ph$ph;
      $e2$1 = $add400;
     } else break;
    }
    $sub408 = (1 << $spec$select265) + -1 | 0;
    $shr414 = 1e9 >>> $spec$select265;
    $a$6326 = $a$5;
    $carry362$0328 = 0;
    $k$6327 = $a$5;
    $rp$6325 = $rp$5$ph403;
    do {
     $arrayidx406 = $x + ($k$6327 << 2) | 0;
     $100 = HEAP32[$arrayidx406 >> 2] | 0;
     $add412 = ($100 >>> $spec$select265) + $carry362$0328 | 0;
     HEAP32[$arrayidx406 >> 2] = $add412;
     $carry362$0328 = Math_imul($100 & $sub408, $shr414) | 0;
     $or$cond266 = ($k$6327 | 0) == ($a$6326 | 0) & ($add412 | 0) == 0;
     $rp$6325 = $or$cond266 ? $rp$6325 + -9 | 0 : $rp$6325;
     $a$6326 = $or$cond266 ? $a$6326 + 1 & 127 : $a$6326;
     $k$6327 = $k$6327 + 1 & 127;
    } while (($k$6327 | 0) != ($z$7$ph$ph | 0));
    if ($carry362$0328 | 0) {
     if (($and434 | 0) != ($a$6326 | 0)) break;
     HEAP32[$arrayidx444 >> 2] = HEAP32[$arrayidx444 >> 2] | 1;
    }
    $a$5$ph = $a$6326;
    $e2$1$ph = $add400;
    $rp$5$ph403 = $rp$6325;
   }
   HEAP32[$x + ($z$7$ph$ph << 2) >> 2] = $carry362$0328;
   $a$5$ph$ph = $a$6326;
   $e2$1$ph$ph = $add400;
   $rp$5$ph403$ph = $rp$6325;
   $z$7$ph$ph = $and434;
  }
  $i$4322 = 0;
  $y$0321 = 0.0;
  $z$10320 = $z$7$ph$ph;
  while (1) {
   $and458 = $i$4322 + $a$5 & 127;
   $and463 = $z$10320 + 1 & 127;
   if (($and458 | 0) == ($z$10320 | 0)) {
    HEAP32[$x + ($and463 + -1 << 2) >> 2] = 0;
    $z$11 = $and463;
   } else $z$11 = $z$10320;
   $y$0321 = $y$0321 * 1.0e9 + +((HEAP32[$x + ($and458 << 2) >> 2] | 0) >>> 0);
   $i$4322 = $i$4322 + 1 | 0;
   if (($i$4322 | 0) == 2) break; else $z$10320 = $z$11;
  }
  $conv476 = +($sign | 0);
  $mul477 = $y$0321 * $conv476;
  $add478 = $e2$1 + 53 | 0;
  $sub479 = $add478 - $emin | 0;
  $cmp480 = ($sub479 | 0) < ($bits | 0);
  $bits$addr$0 = $cmp480 ? (($sub479 | 0) > 0 ? $sub479 : 0) : $bits;
  if (($bits$addr$0 | 0) < 53) {
   $call496 = +_copysignl(+_scalbn(1.0, 105 - $bits$addr$0 | 0), $mul477);
   $call499 = +_fmodl($mul477, +_scalbn(1.0, 53 - $bits$addr$0 | 0));
   $bias$0 = $call496;
   $frac$0 = $call499;
   $y$1 = $call496 + ($mul477 - $call499);
  } else {
   $bias$0 = 0.0;
   $frac$0 = 0.0;
   $y$1 = $mul477;
  }
  $and504 = $a$5 + 2 & 127;
  if (($and504 | 0) != ($z$11 | 0)) {
   $104 = HEAP32[$x + ($and504 << 2) >> 2] | 0;
   do if ($104 >>> 0 >= 5e8) {
    if (($104 | 0) != 5e8) {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
    if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $conv476 * .5 + $frac$0;
     break;
    } else {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
   } else {
    if (($104 | 0) == 0 ? ($a$5 + 3 & 127 | 0) == ($z$11 | 0) : 0) {
     $frac$1 = $frac$0;
     break;
    }
    $frac$1 = $conv476 * .25 + $frac$0;
   } while (0);
   if ((53 - $bits$addr$0 | 0) > 1 ? !(+_fmodl($frac$1, 1.0) != 0.0) : 0) $frac$3 = $frac$1 + 1.0; else $frac$3 = $frac$1;
  } else $frac$3 = $frac$0;
  $sub564 = $y$1 + $frac$3 - $bias$0;
  do if (($add478 & 2147483647 | 0) > (-2 - $0 | 0)) {
   $cmp572 = !(+Math_abs(+$sub564) >= 9007199254740992.0);
   $e2$3 = $e2$1 + (($cmp572 ^ 1) & 1) | 0;
   $y$2 = $cmp572 ? $sub564 : $sub564 * .5;
   if (($e2$3 + 50 | 0) <= ($sub1 | 0) ? !($frac$3 != 0.0 & ($cmp480 & (($bits$addr$0 | 0) != ($sub479 | 0) | $cmp572))) : 0) {
    $e2$4 = $e2$3;
    $y$3 = $y$2;
    break;
   }
   $call594 = ___errno_location() | 0;
   HEAP32[$call594 >> 2] = 68;
   $e2$4 = $e2$3;
   $y$3 = $y$2;
  } else {
   $e2$4 = $e2$1;
   $y$3 = $sub564;
  } while (0);
  $retval$1 = +_scalbnl($y$3, $e2$4);
 } while (0);
 STACKTOP = sp;
 return +$retval$1;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $$lcssa213 = 0, $$pre261 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $154 = 0, $162 = 0, $164 = 0, $166 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $42 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $82 = 0, $92 = 0, $96 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx129 = 0, $arrayidx365 = 0, $arrayidx78 = 0, $buf = 0, $call = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond350 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool34 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0, $55$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    $call = ___errno_location() | 0;
    HEAP32[$call >> 2] = 61;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $tobool34 = (_isdigit(HEAP8[(HEAP32[$s >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre261 = HEAP32[$s >> 2] | 0;
  if (!$tobool34 ? (HEAP8[$$pre261 + 2 >> 0] | 0) == 36 : 0) {
   $$sink = 3;
   $argpos$0 = (HEAP8[$$pre261 + 1 >> 0] | 0) + -48 | 0;
   $l10n$1 = 1;
  } else {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  }
  $incdec$ptr45 = $$pre261 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($11 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $11;
   $fl$0$lcssa = 0;
   $storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($12 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $12;
     $fl$0$lcssa = $or;
     $storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   if ((_isdigit(HEAP8[$storemerge187$lcssa + 1 >> 0] | 0) | 0) != 0 ? ($14 = HEAP32[$s >> 2] | 0, (HEAP8[$14 + 2 >> 0] | 0) == 36) : 0) {
    $arrayidx78 = $14 + 1 | 0;
    HEAP32[$nl_type + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge188 = $14 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else {
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $30 = HEAP32[$29 >> 2] | 0;
     HEAP32[$ap >> 2] = $29 + 4;
     $cond = $30;
    } else $cond = 0;
    $l10n$2 = 0;
    $storemerge188 = (HEAP32[$s >> 2] | 0) + 1 | 0;
    $w$0 = $cond;
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $33 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $33 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$33 >> 0] | 0) == 46) {
   $arrayidx114 = $33 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   if (_isdigit(HEAP8[$33 + 2 >> 0] | 0) | 0 ? ($36 = HEAP32[$s >> 2] | 0, (HEAP8[$36 + 3 >> 0] | 0) == 36) : 0) {
    $arrayidx129 = $36 + 2 | 0;
    HEAP32[$nl_type + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 2) >> 2] = 10;
    $42 = HEAP32[$nl_arg + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $add$ptr139 = $36 + 4 | 0;
    HEAP32[$s >> 2] = $add$ptr139;
    $$pre263 = $add$ptr139;
    $p$0 = $42;
    break;
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $51 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$ap >> 2] = $51 + 4;
    $cond149 = $52;
   } else $cond149 = 0;
   $add$ptr150 = (HEAP32[$s >> 2] | 0) + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr150;
   $$pre263 = $add$ptr150;
   $p$0 = $cond149;
  } else {
   $$pre263 = $33;
   $p$0 = -1;
  } while (0);
  $55 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$55 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $55$looptemp = $55;
   $55 = $55 + 1 | 0;
   HEAP32[$s >> 2] = $55;
   $57 = HEAP8[(HEAP8[$55$looptemp >> 0] | 0) + -65 + (4256 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $57 & 255;
   if (($conv175 + -1 | 0) >>> 0 >= 8) break; else $st$0 = $conv175;
  }
  if (!($57 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($57 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 54; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $59 = $nl_arg + ($argpos$0 << 3) | 0;
    $64 = HEAP32[$59 + 4 >> 2] | 0;
    $65 = $arg;
    HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$65 + 4 >> 2] = $64;
    label = 54;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
   $69 = HEAP32[$s >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $55;
    label = 55;
   } else $l$0$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $conv208 = HEAP8[$69 + -1 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L79 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $82 = HEAP32[$arg >> 2] | 0;
       HEAP32[$82 >> 2] = $cnt$1;
       HEAP32[$82 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $92 = HEAP32[$arg >> 2] | 0;
       HEAP32[$92 >> 2] = $cnt$1;
       HEAP32[$92 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 67;
     break;
    }
   case 111:
    {
     $112 = $arg;
     $118 = _fmt_o(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $118 | 0;
     $a$0 = $118;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 27752;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $120 = $arg;
     $122 = HEAP32[$120 >> 2] | 0;
     $125 = HEAP32[$120 + 4 >> 2] | 0;
     if (($125 | 0) < 0) {
      $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
      $128 = getTempRet0() | 0;
      $129 = $arg;
      HEAP32[$129 >> 2] = $127;
      HEAP32[$129 + 4 >> 2] = $128;
      $135 = $127;
      $136 = $128;
      $pl$0 = 1;
      $prefix$0 = 27752;
      label = 72;
      break L79;
     } else {
      $135 = $122;
      $136 = $125;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 27752 : 27754) : 27753;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $71 = $arg;
     $135 = HEAP32[$71 >> 2] | 0;
     $136 = HEAP32[$71 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 27752;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 27752;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $154 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($154 | 0) == 0 ? 27762 : $154;
     $call351 = _memchr($cond350, 0, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 27752;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4269 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_418($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 89;
     } else {
      $p$4269 = $p$0;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L77;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 27752;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $96 = $arg;
    $102 = _fmt_x(HEAP32[$96 >> 2] | 0, HEAP32[$96 + 4 >> 2] | 0, $add$ptr206, $t$1 & 32) | 0;
    $103 = $arg;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | (HEAP32[$103 >> 2] | 0) == 0 & (HEAP32[$103 + 4 >> 2] | 0) == 0;
    $a$0 = $102;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 27752 : 27752 + ($t$1 >>> 4) | 0;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $a$0 = _fmt_u($135, $136, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $162 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$162) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $162) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 83;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_418($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 89;
    } else {
     $i$1248 = 0;
     $ws$1249 = HEAP32[$arg >> 2] | 0;
     while (1) {
      $164 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$164) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      $call406 = _wctomb($mb, $164) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 89;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $138 = $arg;
    $146 = (HEAP32[$138 >> 2] | 0) != 0 | (HEAP32[$138 + 4 >> 2] | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $146;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($146 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_418($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_418($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_418($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_418($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_418($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L123 : do if ((label | 0) == 92) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $166 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$166) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $166, $ap, $pop_arg_long_double);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L123;
   }
  }
  $i$3221 = $i$2224;
  while (1) {
   if (HEAP32[$nl_type + ($i$3221 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L123;
   }
   $i$3221 = $i$3221 + 1 | 0;
   if ($i$3221 >>> 0 >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _decode_mcu_sub($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $$in = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $50 = 0, $51 = 0, $52 = 0, $59 = 0, $61 = 0, $add = 0, $add128 = 0, $and = 0, $and101 = 0, $and125 = 0, $and142 = 0, $and201 = 0, $and225 = 0, $and65 = 0, $arrayidx74 = 0, $bits_left$0$lcssa = 0, $bits_left$0205 = 0, $bits_left$1 = 0, $bits_left$11$ph = 0, $bits_left$12 = 0, $bits_left$13 = 0, $bits_left$14 = 0, $bits_left$15 = 0, $bits_left$16198 = 0, $bits_left$17 = 0, $bits_left$18 = 0, $bits_left$2 = 0, $bits_left$20$ph = 0, $bits_left$21 = 0, $bits_left$22 = 0, $bits_left$24 = 0, $bits_left$4$ph = 0, $bits_left$5 = 0, $bits_left$6 = 0, $bits_left$7192 = 0, $bits_left$8 = 0, $bits_left$9 = 0, $bits_left$i$i = 0, $bits_left16 = 0, $bits_left26 = 0, $blkn$0207 = 0, $blocks_in_MCU = 0, $br_state = 0, $bytes_in_buffer13 = 0, $call112 = 0, $call212 = 0, $call36 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $discarded_bytes$i$i = 0, $get_buffer$0$lcssa = 0, $get_buffer$0206 = 0, $get_buffer$1 = 0, $get_buffer$11$ph = 0, $get_buffer$12 = 0, $get_buffer$13 = 0, $get_buffer$14 = 0, $get_buffer$15 = 0, $get_buffer$16199 = 0, $get_buffer$17 = 0, $get_buffer$18 = 0, $get_buffer$2 = 0, $get_buffer$20$ph = 0, $get_buffer$21 = 0, $get_buffer$22 = 0, $get_buffer$24 = 0, $get_buffer$4$ph = 0, $get_buffer$5 = 0, $get_buffer$6 = 0, $get_buffer$7193 = 0, $get_buffer$8 = 0, $get_buffer$9 = 0, $get_buffer14 = 0, $get_buffer25 = 0, $inc = 0, $k$0191 = 0, $k$1 = 0, $k$2 = 0, $k$3197 = 0, $nb$0 = 0, $nb183$0 = 0, $nb83$0 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go274 = 0, $retval$9 = 0, $s$11$ph = 0, $s$2$ph = 0, $s$3 = 0, $s$6$ph = 0, $saved = 0, $shr124174 = 0, $shr224$pn = 0, $shr224173 = 0, $src = 0, $state = 0, $sub139 = 0, $sub62 = 0, $tobool50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $br_state = sp + 20 | 0;
 $state = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $4 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $4 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$4 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$9 = 0;
   STACKTOP = sp;
   return $retval$9 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 if (!(HEAP32[$0 + 40 >> 2] | 0)) {
  $12 = HEAP32[$cinfo + 432 >> 2] | 0;
  $13 = HEAP32[$cinfo + 436 >> 2] | 0;
  HEAP32[$br_state + 16 >> 2] = $cinfo;
  $src = $cinfo + 24 | 0;
  $14 = HEAP32[$src >> 2] | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  HEAP32[$br_state >> 2] = $15;
  $17 = HEAP32[$14 + 4 >> 2] | 0;
  $bytes_in_buffer13 = $br_state + 4 | 0;
  HEAP32[$bytes_in_buffer13 >> 2] = $17;
  $get_buffer14 = $0 + 12 | 0;
  $18 = HEAP32[$get_buffer14 >> 2] | 0;
  $bits_left16 = $0 + 16 | 0;
  $19 = HEAP32[$bits_left16 >> 2] | 0;
  $saved = $0 + 20 | 0;
  HEAP32[$state >> 2] = HEAP32[$saved >> 2];
  HEAP32[$state + 4 >> 2] = HEAP32[$saved + 4 >> 2];
  HEAP32[$state + 8 >> 2] = HEAP32[$saved + 8 >> 2];
  HEAP32[$state + 12 >> 2] = HEAP32[$saved + 12 >> 2];
  HEAP32[$state + 16 >> 2] = HEAP32[$saved + 16 >> 2];
  $blocks_in_MCU = $cinfo + 368 | 0;
  do if ((HEAP32[$blocks_in_MCU >> 2] | 0) > 0) {
   $get_buffer25 = $br_state + 8 | 0;
   $bits_left26 = $br_state + 12 | 0;
   $bits_left$0205 = $19;
   $blkn$0207 = 0;
   $get_buffer$0206 = $18;
   L18 : while (1) {
    $21 = HEAP32[$MCU_data + ($blkn$0207 << 2) >> 2] | 0;
    $22 = HEAP32[$0 + 100 + ($blkn$0207 << 2) >> 2] | 0;
    if (($bits_left$0205 | 0) < 8) {
     if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$0206, $bits_left$0205, 0) | 0)) {
      $retval$9 = 0;
      label = 67;
      break;
     }
     $23 = HEAP32[$get_buffer25 >> 2] | 0;
     $24 = HEAP32[$bits_left26 >> 2] | 0;
     if (($24 | 0) < 8) {
      $bits_left$2 = $24;
      $get_buffer$2 = $23;
      $nb$0 = 1;
      label = 17;
     } else {
      $bits_left$1 = $24;
      $get_buffer$1 = $23;
      label = 15;
     }
    } else {
     $bits_left$1 = $bits_left$0205;
     $get_buffer$1 = $get_buffer$0206;
     label = 15;
    }
    if ((label | 0) == 15) {
     label = 0;
     $and = $get_buffer$1 >> $bits_left$1 + -8 & 255;
     $25 = HEAP32[$22 + 144 + ($and << 2) >> 2] | 0;
     if (!$25) {
      $bits_left$2 = $bits_left$1;
      $get_buffer$2 = $get_buffer$1;
      $nb$0 = 9;
      label = 17;
     } else {
      $bits_left$4$ph = $bits_left$1 - $25 | 0;
      $get_buffer$4$ph = $get_buffer$1;
      $s$2$ph = HEAPU8[$22 + 1168 + $and >> 0] | 0;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     $call36 = _jpeg_huff_decode($br_state, $get_buffer$2, $bits_left$2, $22, $nb$0) | 0;
     if (($call36 | 0) < 0) {
      $retval$9 = 0;
      label = 67;
      break;
     }
     $bits_left$4$ph = HEAP32[$bits_left26 >> 2] | 0;
     $get_buffer$4$ph = HEAP32[$get_buffer25 >> 2] | 0;
     $s$2$ph = $call36;
    }
    $29 = HEAP32[$0 + 140 + ($blkn$0207 << 2) >> 2] | 0;
    $30 = HEAP32[$0 + 180 + ($blkn$0207 << 2) >> 2] | 0;
    $tobool50 = ($s$2$ph | 0) != 0;
    L30 : do if (!$30) if ($tobool50) {
     if (($bits_left$4$ph | 0) < ($s$2$ph | 0)) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $s$2$ph) | 0)) {
       $retval$9 = 0;
       label = 67;
       break L18;
      }
      $bits_left$14 = HEAP32[$bits_left26 >> 2] | 0;
      $get_buffer$14 = HEAP32[$get_buffer25 >> 2] | 0;
     } else {
      $bits_left$14 = $bits_left$4$ph;
      $get_buffer$14 = $get_buffer$4$ph;
     }
     $bits_left$15 = $bits_left$14 - $s$2$ph | 0;
     $get_buffer$15 = $get_buffer$14;
     $k$2 = 1;
     label = 47;
    } else {
     $bits_left$15 = $bits_left$4$ph;
     $get_buffer$15 = $get_buffer$4$ph;
     $k$2 = 1;
     label = 47;
    } else {
     if ($tobool50) {
      if (($bits_left$4$ph | 0) < ($s$2$ph | 0)) {
       if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $s$2$ph) | 0)) {
        $retval$9 = 0;
        label = 67;
        break L18;
       }
       $bits_left$5 = HEAP32[$bits_left26 >> 2] | 0;
       $get_buffer$5 = HEAP32[$get_buffer25 >> 2] | 0;
      } else {
       $bits_left$5 = $bits_left$4$ph;
       $get_buffer$5 = $get_buffer$4$ph;
      }
      $sub62 = $bits_left$5 - $s$2$ph | 0;
      $33 = HEAP32[3152 + ($s$2$ph << 2) >> 2] | 0;
      $and65 = $get_buffer$5 >> $sub62 & $33;
      $bits_left$6 = $sub62;
      $get_buffer$6 = $get_buffer$5;
      $s$3 = $and65 - (($and65 | 0) > (HEAP32[3152 + ($s$2$ph + -1 << 2) >> 2] | 0) ? 0 : $33) | 0;
     } else {
      $bits_left$6 = $bits_left$4$ph;
      $get_buffer$6 = $get_buffer$4$ph;
      $s$3 = 0;
     }
     $arrayidx74 = $state + 4 + (HEAP32[$cinfo + 372 + ($blkn$0207 << 2) >> 2] << 2) | 0;
     $add = (HEAP32[$arrayidx74 >> 2] | 0) + $s$3 | 0;
     HEAP32[$arrayidx74 >> 2] = $add;
     HEAP16[$21 >> 1] = $add;
     if (($30 | 0) > 1) {
      $bits_left$7192 = $bits_left$6;
      $get_buffer$7193 = $get_buffer$6;
      $k$0191 = 1;
      while (1) {
       if (($bits_left$7192 | 0) < 8) {
        if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$7193, $bits_left$7192, 0) | 0)) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $37 = HEAP32[$get_buffer25 >> 2] | 0;
        $38 = HEAP32[$bits_left26 >> 2] | 0;
        if (($38 | 0) < 8) {
         $bits_left$9 = $38;
         $get_buffer$9 = $37;
         $nb83$0 = 1;
         label = 32;
        } else {
         $bits_left$8 = $38;
         $get_buffer$8 = $37;
         label = 30;
        }
       } else {
        $bits_left$8 = $bits_left$7192;
        $get_buffer$8 = $get_buffer$7193;
        label = 30;
       }
       if ((label | 0) == 30) {
        label = 0;
        $and101 = $get_buffer$8 >> $bits_left$8 + -8 & 255;
        $39 = HEAP32[$29 + 144 + ($and101 << 2) >> 2] | 0;
        if (!$39) {
         $bits_left$9 = $bits_left$8;
         $get_buffer$9 = $get_buffer$8;
         $nb83$0 = 9;
         label = 32;
        } else {
         $bits_left$11$ph = $bits_left$8 - $39 | 0;
         $get_buffer$11$ph = $get_buffer$8;
         $s$6$ph = HEAPU8[$29 + 1168 + $and101 >> 0] | 0;
        }
       }
       if ((label | 0) == 32) {
        label = 0;
        $call112 = _jpeg_huff_decode($br_state, $get_buffer$9, $bits_left$9, $29, $nb83$0) | 0;
        if (($call112 | 0) < 0) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $bits_left$11$ph = HEAP32[$bits_left26 >> 2] | 0;
        $get_buffer$11$ph = HEAP32[$get_buffer25 >> 2] | 0;
        $s$6$ph = $call112;
       }
       $shr124174 = $s$6$ph >>> 4;
       $and125 = $s$6$ph & 15;
       if (!$and125) {
        if (($shr124174 | 0) != 15) {
         $bits_left$24 = $bits_left$11$ph;
         $get_buffer$24 = $get_buffer$11$ph;
         break L30;
        }
        $bits_left$13 = $bits_left$11$ph;
        $get_buffer$13 = $get_buffer$11$ph;
        $k$1 = $k$0191 + 15 | 0;
       } else {
        $add128 = $shr124174 + $k$0191 | 0;
        if (($bits_left$11$ph | 0) < ($and125 | 0)) {
         if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$11$ph, $bits_left$11$ph, $and125) | 0)) {
          $retval$9 = 0;
          label = 67;
          break L18;
         }
         $bits_left$12 = HEAP32[$bits_left26 >> 2] | 0;
         $get_buffer$12 = HEAP32[$get_buffer25 >> 2] | 0;
        } else {
         $bits_left$12 = $bits_left$11$ph;
         $get_buffer$12 = $get_buffer$11$ph;
        }
        $sub139 = $bits_left$12 - $and125 | 0;
        $45 = HEAP32[3152 + ($and125 << 2) >> 2] | 0;
        $and142 = $get_buffer$12 >> $sub139 & $45;
        HEAP16[$21 + (HEAP32[$12 + ($add128 << 2) >> 2] << 1) >> 1] = $and142 - (($and142 | 0) > (HEAP32[3152 + ($and125 + -1 << 2) >> 2] | 0) ? 0 : $45);
        $bits_left$13 = $sub139;
        $get_buffer$13 = $get_buffer$12;
        $k$1 = $add128;
       }
       $inc = $k$1 + 1 | 0;
       if (($inc | 0) < ($30 | 0)) {
        $bits_left$7192 = $bits_left$13;
        $get_buffer$7193 = $get_buffer$13;
        $k$0191 = $inc;
       } else {
        $bits_left$15 = $bits_left$13;
        $get_buffer$15 = $get_buffer$13;
        $k$2 = $inc;
        label = 47;
        break;
       }
      }
     } else {
      $bits_left$15 = $bits_left$6;
      $get_buffer$15 = $get_buffer$6;
      $k$2 = 1;
      label = 47;
     }
    } while (0);
    L67 : do if ((label | 0) == 47) {
     label = 0;
     if (($k$2 | 0) > ($13 | 0)) {
      $bits_left$24 = $bits_left$15;
      $get_buffer$24 = $get_buffer$15;
     } else {
      $bits_left$16198 = $bits_left$15;
      $get_buffer$16199 = $get_buffer$15;
      $k$3197 = $k$2;
      while (1) {
       if (($bits_left$16198 | 0) < 8) {
        if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$16199, $bits_left$16198, 0) | 0)) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $50 = HEAP32[$get_buffer25 >> 2] | 0;
        $51 = HEAP32[$bits_left26 >> 2] | 0;
        if (($51 | 0) < 8) {
         $bits_left$18 = $51;
         $get_buffer$18 = $50;
         $nb183$0 = 1;
         label = 54;
        } else {
         $bits_left$17 = $51;
         $get_buffer$17 = $50;
         label = 52;
        }
       } else {
        $bits_left$17 = $bits_left$16198;
        $get_buffer$17 = $get_buffer$16199;
        label = 52;
       }
       if ((label | 0) == 52) {
        label = 0;
        $and201 = $get_buffer$17 >> $bits_left$17 + -8 & 255;
        $52 = HEAP32[$29 + 144 + ($and201 << 2) >> 2] | 0;
        if (!$52) {
         $bits_left$18 = $bits_left$17;
         $get_buffer$18 = $get_buffer$17;
         $nb183$0 = 9;
         label = 54;
        } else {
         $bits_left$20$ph = $bits_left$17 - $52 | 0;
         $get_buffer$20$ph = $get_buffer$17;
         $s$11$ph = HEAPU8[$29 + 1168 + $and201 >> 0] | 0;
        }
       }
       if ((label | 0) == 54) {
        label = 0;
        $call212 = _jpeg_huff_decode($br_state, $get_buffer$18, $bits_left$18, $29, $nb183$0) | 0;
        if (($call212 | 0) < 0) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $bits_left$20$ph = HEAP32[$bits_left26 >> 2] | 0;
        $get_buffer$20$ph = HEAP32[$get_buffer25 >> 2] | 0;
        $s$11$ph = $call212;
       }
       $shr224173 = $s$11$ph >>> 4;
       $and225 = $s$11$ph & 15;
       if (!$and225) if (($shr224173 | 0) == 15) {
        $bits_left$22 = $bits_left$20$ph;
        $get_buffer$22 = $get_buffer$20$ph;
        $shr224$pn = 15;
       } else {
        $bits_left$24 = $bits_left$20$ph;
        $get_buffer$24 = $get_buffer$20$ph;
        break L67;
       } else {
        if (($bits_left$20$ph | 0) < ($and225 | 0)) {
         if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$20$ph, $bits_left$20$ph, $and225) | 0)) {
          $retval$9 = 0;
          label = 67;
          break L18;
         }
         $bits_left$21 = HEAP32[$bits_left26 >> 2] | 0;
         $get_buffer$21 = HEAP32[$get_buffer25 >> 2] | 0;
        } else {
         $bits_left$21 = $bits_left$20$ph;
         $get_buffer$21 = $get_buffer$20$ph;
        }
        $bits_left$22 = $bits_left$21 - $and225 | 0;
        $get_buffer$22 = $get_buffer$21;
        $shr224$pn = $shr224173;
       }
       $k$3197 = $k$3197 + 1 + $shr224$pn | 0;
       if (($k$3197 | 0) > ($13 | 0)) {
        $bits_left$24 = $bits_left$22;
        $get_buffer$24 = $get_buffer$22;
        break;
       } else {
        $bits_left$16198 = $bits_left$22;
        $get_buffer$16199 = $get_buffer$22;
       }
      }
     }
    } while (0);
    $blkn$0207 = $blkn$0207 + 1 | 0;
    if (($blkn$0207 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
     label = 64;
     break;
    } else {
     $bits_left$0205 = $bits_left$24;
     $get_buffer$0206 = $get_buffer$24;
    }
   }
   if ((label | 0) == 64) {
    $$in = HEAP32[$src >> 2] | 0;
    $59 = HEAP32[$br_state >> 2] | 0;
    $61 = HEAP32[$bytes_in_buffer13 >> 2] | 0;
    $bits_left$0$lcssa = $bits_left$24;
    $get_buffer$0$lcssa = $get_buffer$24;
    break;
   } else if ((label | 0) == 67) {
    STACKTOP = sp;
    return $retval$9 | 0;
   }
  } else {
   $$in = $14;
   $59 = $15;
   $61 = $17;
   $bits_left$0$lcssa = $19;
   $get_buffer$0$lcssa = $18;
  } while (0);
  HEAP32[$$in >> 2] = $59;
  HEAP32[$$in + 4 >> 2] = $61;
  HEAP32[$get_buffer14 >> 2] = $get_buffer$0$lcssa;
  HEAP32[$bits_left16 >> 2] = $bits_left$0$lcssa;
  HEAP32[$saved >> 2] = HEAP32[$state >> 2];
  HEAP32[$saved + 4 >> 2] = HEAP32[$state + 4 >> 2];
  HEAP32[$saved + 8 >> 2] = HEAP32[$state + 8 >> 2];
  HEAP32[$saved + 12 >> 2] = HEAP32[$state + 12 >> 2];
  HEAP32[$saved + 16 >> 2] = HEAP32[$state + 16 >> 2];
 }
 $restarts_to_go274 = $0 + 44 | 0;
 HEAP32[$restarts_to_go274 >> 2] = (HEAP32[$restarts_to_go274 >> 2] | 0) + -1;
 $retval$9 = 1;
 STACKTOP = sp;
 return $retval$9 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($this) {
 $this = $this | 0;
 var $N = 0, $agg$tmp = 0, $agg$tmp11 = 0, $agg$tmp111 = 0, $agg$tmp111$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp27 = 0, $agg$tmp33 = 0, $agg$tmp39 = 0, $agg$tmp45 = 0, $agg$tmp51 = 0, $agg$tmp57 = 0, $agg$tmp6 = 0, $agg$tmp63 = 0, $agg$tmp69 = 0, $agg$tmp75 = 0, $agg$tmp81 = 0, $agg$tmp87 = 0, $agg$tmp93 = 0, $call115 = 0, $call122 = 0, $call126 = 0, $call133 = 0, $call20 = 0, $call26 = 0, $call3 = 0, $call32 = 0, $call38 = 0, $call44 = 0, $call50 = 0, $call56 = 0, $call62 = 0, $call68 = 0, $call74 = 0, $call80 = 0, $call86 = 0, $call92 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $agg$tmp111$byval_copy = sp + 144 | 0;
 $agg$tmp = sp + 136 | 0;
 $agg$tmp6 = sp + 128 | 0;
 $agg$tmp11 = sp + 120 | 0;
 $agg$tmp21 = sp + 112 | 0;
 $agg$tmp27 = sp + 104 | 0;
 $agg$tmp33 = sp + 96 | 0;
 $agg$tmp39 = sp + 88 | 0;
 $agg$tmp45 = sp + 80 | 0;
 $agg$tmp51 = sp + 72 | 0;
 $agg$tmp57 = sp + 64 | 0;
 $agg$tmp63 = sp + 56 | 0;
 $agg$tmp69 = sp + 48 | 0;
 $agg$tmp75 = sp + 40 | 0;
 $agg$tmp81 = sp + 32 | 0;
 $agg$tmp87 = sp + 24 | 0;
 $agg$tmp93 = sp + 16 | 0;
 $agg$tmp111 = sp + 8 | 0;
 $N = sp;
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0) do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 84:
  {
   $retval$3 = 0;
   break L1;
   break;
  }
 case 119:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29227);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call3, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 98:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 29235);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0) {
    HEAP32[$agg$tmp111$byval_copy >> 2] = 0;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $agg$tmp111$byval_copy) | 0;
    break L1;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 29239);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp11 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   HEAP32[$agg$tmp111$byval_copy >> 2] = 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 99:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call20 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 34051);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call20, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 97:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call26 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 34056);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call26, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 104:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp33, 34068);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp33 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp33 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call32, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 115:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call38 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp39, 34082);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp39 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call38, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 116:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call44 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp45, 34088);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp45 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp45 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call44, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call50 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp51, 43974);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp51 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp51 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call50, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 106:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call56 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 29243);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp57 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call56, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 108:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call62 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 36168);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp63 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call62, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 109:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call68 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp69, 29245);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp69 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp69 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call68, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call74 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp75, 36159);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp75 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp75 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call74, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 121:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call80 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp81, 29248);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp81 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp81 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call80, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 110:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call86 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 28433);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp87 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call86, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 111:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call92 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp93, 28442);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp93 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp93 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call92, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 102:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 100:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 101:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 95:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp111, 28367);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp111 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp111 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $call115 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if ($call115 | 0 ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0 : 0) {
    $retval$3 = $call115;
    break L1;
   }
   $retval$3 = 0;
   break L1;
   break;
  }
 default:
  {
   $call122 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp111$byval_copy >> 2] = $call122;
   if (!$call122) $retval$2 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($N, $this, 0);
    $call126 = __ZNK12_GLOBAL__N_110StringView5emptyEv($N) | 0;
    $call133 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    if (!$call126) if ($call133) $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $agg$tmp111$byval_copy, $N) | 0; else $retval$1 = 0; else $retval$1 = $call133 ? $call122 : 0;
    $retval$2 = $retval$1;
   }
   $retval$3 = $retval$2;
   break L1;
  }
 } while (0); else $retval$3 = 0; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _decode_mcu_66($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $$in = 0, $0 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $48 = 0, $49 = 0, $50 = 0, $57 = 0, $59 = 0, $add = 0, $add127 = 0, $and = 0, $and100 = 0, $and124 = 0, $and141 = 0, $and200 = 0, $and224 = 0, $and64 = 0, $arrayidx73 = 0, $bits_left$0$lcssa = 0, $bits_left$0201 = 0, $bits_left$1 = 0, $bits_left$11$ph = 0, $bits_left$12 = 0, $bits_left$13 = 0, $bits_left$14 = 0, $bits_left$16194 = 0, $bits_left$16194$ph = 0, $bits_left$17 = 0, $bits_left$18 = 0, $bits_left$2 = 0, $bits_left$20$ph = 0, $bits_left$21 = 0, $bits_left$22 = 0, $bits_left$24 = 0, $bits_left$4$ph = 0, $bits_left$5 = 0, $bits_left$6 = 0, $bits_left$7188 = 0, $bits_left$8 = 0, $bits_left$9 = 0, $bits_left$i$i = 0, $bits_left15 = 0, $bits_left25 = 0, $blkn$0203 = 0, $blocks_in_MCU = 0, $br_state = 0, $bytes_in_buffer12 = 0, $call111 = 0, $call211 = 0, $call35 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $discarded_bytes$i$i = 0, $get_buffer$0$lcssa = 0, $get_buffer$0202 = 0, $get_buffer$1 = 0, $get_buffer$11$ph = 0, $get_buffer$12 = 0, $get_buffer$13 = 0, $get_buffer$14 = 0, $get_buffer$16195 = 0, $get_buffer$16195$ph = 0, $get_buffer$17 = 0, $get_buffer$18 = 0, $get_buffer$2 = 0, $get_buffer$20$ph = 0, $get_buffer$21 = 0, $get_buffer$22 = 0, $get_buffer$24 = 0, $get_buffer$4$ph = 0, $get_buffer$5 = 0, $get_buffer$6 = 0, $get_buffer$7189 = 0, $get_buffer$8 = 0, $get_buffer$9 = 0, $get_buffer13 = 0, $get_buffer24 = 0, $k$0187 = 0, $k$1 = 0, $k$3193 = 0, $k$3193$ph = 0, $nb$0 = 0, $nb182$0 = 0, $nb82$0 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go273 = 0, $retval$9 = 0, $s$11$ph = 0, $s$2$ph = 0, $s$3 = 0, $s$6$ph = 0, $saved = 0, $shr123170 = 0, $shr223$pn = 0, $shr223169 = 0, $src = 0, $state = 0, $sub138 = 0, $sub61 = 0, $tobool49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $br_state = sp + 20 | 0;
 $state = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $4 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $4 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$4 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$9 = 0;
   STACKTOP = sp;
   return $retval$9 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 if (!(HEAP32[$0 + 40 >> 2] | 0)) {
  HEAP32[$br_state + 16 >> 2] = $cinfo;
  $src = $cinfo + 24 | 0;
  $12 = HEAP32[$src >> 2] | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  HEAP32[$br_state >> 2] = $13;
  $15 = HEAP32[$12 + 4 >> 2] | 0;
  $bytes_in_buffer12 = $br_state + 4 | 0;
  HEAP32[$bytes_in_buffer12 >> 2] = $15;
  $get_buffer13 = $0 + 12 | 0;
  $16 = HEAP32[$get_buffer13 >> 2] | 0;
  $bits_left15 = $0 + 16 | 0;
  $17 = HEAP32[$bits_left15 >> 2] | 0;
  $saved = $0 + 20 | 0;
  HEAP32[$state >> 2] = HEAP32[$saved >> 2];
  HEAP32[$state + 4 >> 2] = HEAP32[$saved + 4 >> 2];
  HEAP32[$state + 8 >> 2] = HEAP32[$saved + 8 >> 2];
  HEAP32[$state + 12 >> 2] = HEAP32[$saved + 12 >> 2];
  HEAP32[$state + 16 >> 2] = HEAP32[$saved + 16 >> 2];
  $blocks_in_MCU = $cinfo + 368 | 0;
  do if ((HEAP32[$blocks_in_MCU >> 2] | 0) > 0) {
   $get_buffer24 = $br_state + 8 | 0;
   $bits_left25 = $br_state + 12 | 0;
   $bits_left$0201 = $17;
   $blkn$0203 = 0;
   $get_buffer$0202 = $16;
   L18 : while (1) {
    $19 = HEAP32[$MCU_data + ($blkn$0203 << 2) >> 2] | 0;
    $20 = HEAP32[$0 + 100 + ($blkn$0203 << 2) >> 2] | 0;
    if (($bits_left$0201 | 0) < 8) {
     if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$0202, $bits_left$0201, 0) | 0)) {
      $retval$9 = 0;
      label = 67;
      break;
     }
     $21 = HEAP32[$get_buffer24 >> 2] | 0;
     $22 = HEAP32[$bits_left25 >> 2] | 0;
     if (($22 | 0) < 8) {
      $bits_left$2 = $22;
      $get_buffer$2 = $21;
      $nb$0 = 1;
      label = 17;
     } else {
      $bits_left$1 = $22;
      $get_buffer$1 = $21;
      label = 15;
     }
    } else {
     $bits_left$1 = $bits_left$0201;
     $get_buffer$1 = $get_buffer$0202;
     label = 15;
    }
    if ((label | 0) == 15) {
     label = 0;
     $and = $get_buffer$1 >> $bits_left$1 + -8 & 255;
     $23 = HEAP32[$20 + 144 + ($and << 2) >> 2] | 0;
     if (!$23) {
      $bits_left$2 = $bits_left$1;
      $get_buffer$2 = $get_buffer$1;
      $nb$0 = 9;
      label = 17;
     } else {
      $bits_left$4$ph = $bits_left$1 - $23 | 0;
      $get_buffer$4$ph = $get_buffer$1;
      $s$2$ph = HEAPU8[$20 + 1168 + $and >> 0] | 0;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     $call35 = _jpeg_huff_decode($br_state, $get_buffer$2, $bits_left$2, $20, $nb$0) | 0;
     if (($call35 | 0) < 0) {
      $retval$9 = 0;
      label = 67;
      break;
     }
     $bits_left$4$ph = HEAP32[$bits_left25 >> 2] | 0;
     $get_buffer$4$ph = HEAP32[$get_buffer24 >> 2] | 0;
     $s$2$ph = $call35;
    }
    $27 = HEAP32[$0 + 140 + ($blkn$0203 << 2) >> 2] | 0;
    $28 = HEAP32[$0 + 180 + ($blkn$0203 << 2) >> 2] | 0;
    $tobool49 = ($s$2$ph | 0) != 0;
    L30 : do if (!$28) if ($tobool49) {
     if (($bits_left$4$ph | 0) < ($s$2$ph | 0)) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $s$2$ph) | 0)) {
       $retval$9 = 0;
       label = 67;
       break L18;
      }
      $bits_left$14 = HEAP32[$bits_left25 >> 2] | 0;
      $get_buffer$14 = HEAP32[$get_buffer24 >> 2] | 0;
     } else {
      $bits_left$14 = $bits_left$4$ph;
      $get_buffer$14 = $get_buffer$4$ph;
     }
     $bits_left$16194$ph = $bits_left$14 - $s$2$ph | 0;
     $get_buffer$16195$ph = $get_buffer$14;
     $k$3193$ph = 1;
     label = 48;
    } else {
     $bits_left$16194$ph = $bits_left$4$ph;
     $get_buffer$16195$ph = $get_buffer$4$ph;
     $k$3193$ph = 1;
     label = 48;
    } else {
     if ($tobool49) {
      if (($bits_left$4$ph | 0) < ($s$2$ph | 0)) {
       if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $s$2$ph) | 0)) {
        $retval$9 = 0;
        label = 67;
        break L18;
       }
       $bits_left$5 = HEAP32[$bits_left25 >> 2] | 0;
       $get_buffer$5 = HEAP32[$get_buffer24 >> 2] | 0;
      } else {
       $bits_left$5 = $bits_left$4$ph;
       $get_buffer$5 = $get_buffer$4$ph;
      }
      $sub61 = $bits_left$5 - $s$2$ph | 0;
      $31 = HEAP32[3152 + ($s$2$ph << 2) >> 2] | 0;
      $and64 = $get_buffer$5 >> $sub61 & $31;
      $bits_left$6 = $sub61;
      $get_buffer$6 = $get_buffer$5;
      $s$3 = $and64 - (($and64 | 0) > (HEAP32[3152 + ($s$2$ph + -1 << 2) >> 2] | 0) ? 0 : $31) | 0;
     } else {
      $bits_left$6 = $bits_left$4$ph;
      $get_buffer$6 = $get_buffer$4$ph;
      $s$3 = 0;
     }
     $arrayidx73 = $state + 4 + (HEAP32[$cinfo + 372 + ($blkn$0203 << 2) >> 2] << 2) | 0;
     $add = (HEAP32[$arrayidx73 >> 2] | 0) + $s$3 | 0;
     HEAP32[$arrayidx73 >> 2] = $add;
     HEAP16[$19 >> 1] = $add;
     if (($28 | 0) > 1) {
      $bits_left$7188 = $bits_left$6;
      $get_buffer$7189 = $get_buffer$6;
      $k$0187 = 1;
      while (1) {
       if (($bits_left$7188 | 0) < 8) {
        if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$7189, $bits_left$7188, 0) | 0)) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $35 = HEAP32[$get_buffer24 >> 2] | 0;
        $36 = HEAP32[$bits_left25 >> 2] | 0;
        if (($36 | 0) < 8) {
         $bits_left$9 = $36;
         $get_buffer$9 = $35;
         $nb82$0 = 1;
         label = 32;
        } else {
         $bits_left$8 = $36;
         $get_buffer$8 = $35;
         label = 30;
        }
       } else {
        $bits_left$8 = $bits_left$7188;
        $get_buffer$8 = $get_buffer$7189;
        label = 30;
       }
       if ((label | 0) == 30) {
        label = 0;
        $and100 = $get_buffer$8 >> $bits_left$8 + -8 & 255;
        $37 = HEAP32[$27 + 144 + ($and100 << 2) >> 2] | 0;
        if (!$37) {
         $bits_left$9 = $bits_left$8;
         $get_buffer$9 = $get_buffer$8;
         $nb82$0 = 9;
         label = 32;
        } else {
         $bits_left$11$ph = $bits_left$8 - $37 | 0;
         $get_buffer$11$ph = $get_buffer$8;
         $s$6$ph = HEAPU8[$27 + 1168 + $and100 >> 0] | 0;
        }
       }
       if ((label | 0) == 32) {
        label = 0;
        $call111 = _jpeg_huff_decode($br_state, $get_buffer$9, $bits_left$9, $27, $nb82$0) | 0;
        if (($call111 | 0) < 0) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $bits_left$11$ph = HEAP32[$bits_left25 >> 2] | 0;
        $get_buffer$11$ph = HEAP32[$get_buffer24 >> 2] | 0;
        $s$6$ph = $call111;
       }
       $shr123170 = $s$6$ph >>> 4;
       $and124 = $s$6$ph & 15;
       if (!$and124) {
        if (($shr123170 | 0) != 15) {
         $bits_left$24 = $bits_left$11$ph;
         $get_buffer$24 = $get_buffer$11$ph;
         break L30;
        }
        $bits_left$13 = $bits_left$11$ph;
        $get_buffer$13 = $get_buffer$11$ph;
        $k$1 = $k$0187 + 15 | 0;
       } else {
        $add127 = $shr123170 + $k$0187 | 0;
        if (($bits_left$11$ph | 0) < ($and124 | 0)) {
         if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$11$ph, $bits_left$11$ph, $and124) | 0)) {
          $retval$9 = 0;
          label = 67;
          break L18;
         }
         $bits_left$12 = HEAP32[$bits_left25 >> 2] | 0;
         $get_buffer$12 = HEAP32[$get_buffer24 >> 2] | 0;
        } else {
         $bits_left$12 = $bits_left$11$ph;
         $get_buffer$12 = $get_buffer$11$ph;
        }
        $sub138 = $bits_left$12 - $and124 | 0;
        $43 = HEAP32[3152 + ($and124 << 2) >> 2] | 0;
        $and141 = $get_buffer$12 >> $sub138 & $43;
        HEAP16[$19 + (HEAP32[544 + ($add127 << 2) >> 2] << 1) >> 1] = $and141 - (($and141 | 0) > (HEAP32[3152 + ($and124 + -1 << 2) >> 2] | 0) ? 0 : $43);
        $bits_left$13 = $sub138;
        $get_buffer$13 = $get_buffer$12;
        $k$1 = $add127;
       }
       $k$0187 = $k$1 + 1 | 0;
       if (($k$0187 | 0) >= ($28 | 0)) break; else {
        $bits_left$7188 = $bits_left$13;
        $get_buffer$7189 = $get_buffer$13;
       }
      }
      if (($k$1 | 0) < 63) {
       $bits_left$16194$ph = $bits_left$13;
       $get_buffer$16195$ph = $get_buffer$13;
       $k$3193$ph = $k$0187;
       label = 48;
      } else {
       $bits_left$24 = $bits_left$13;
       $get_buffer$24 = $get_buffer$13;
      }
     } else {
      $bits_left$16194$ph = $bits_left$6;
      $get_buffer$16195$ph = $get_buffer$6;
      $k$3193$ph = 1;
      label = 48;
     }
    } while (0);
    L68 : do if ((label | 0) == 48) {
     label = 0;
     $bits_left$16194 = $bits_left$16194$ph;
     $get_buffer$16195 = $get_buffer$16195$ph;
     $k$3193 = $k$3193$ph;
     while (1) {
      if (($bits_left$16194 | 0) < 8) {
       if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$16195, $bits_left$16194, 0) | 0)) {
        $retval$9 = 0;
        label = 67;
        break L18;
       }
       $48 = HEAP32[$get_buffer24 >> 2] | 0;
       $49 = HEAP32[$bits_left25 >> 2] | 0;
       if (($49 | 0) < 8) {
        $bits_left$18 = $49;
        $get_buffer$18 = $48;
        $nb182$0 = 1;
        label = 54;
       } else {
        $bits_left$17 = $49;
        $get_buffer$17 = $48;
        label = 52;
       }
      } else {
       $bits_left$17 = $bits_left$16194;
       $get_buffer$17 = $get_buffer$16195;
       label = 52;
      }
      if ((label | 0) == 52) {
       label = 0;
       $and200 = $get_buffer$17 >> $bits_left$17 + -8 & 255;
       $50 = HEAP32[$27 + 144 + ($and200 << 2) >> 2] | 0;
       if (!$50) {
        $bits_left$18 = $bits_left$17;
        $get_buffer$18 = $get_buffer$17;
        $nb182$0 = 9;
        label = 54;
       } else {
        $bits_left$20$ph = $bits_left$17 - $50 | 0;
        $get_buffer$20$ph = $get_buffer$17;
        $s$11$ph = HEAPU8[$27 + 1168 + $and200 >> 0] | 0;
       }
      }
      if ((label | 0) == 54) {
       label = 0;
       $call211 = _jpeg_huff_decode($br_state, $get_buffer$18, $bits_left$18, $27, $nb182$0) | 0;
       if (($call211 | 0) < 0) {
        $retval$9 = 0;
        label = 67;
        break L18;
       }
       $bits_left$20$ph = HEAP32[$bits_left25 >> 2] | 0;
       $get_buffer$20$ph = HEAP32[$get_buffer24 >> 2] | 0;
       $s$11$ph = $call211;
      }
      $shr223169 = $s$11$ph >>> 4;
      $and224 = $s$11$ph & 15;
      if (!$and224) if (($shr223169 | 0) == 15) {
       $bits_left$22 = $bits_left$20$ph;
       $get_buffer$22 = $get_buffer$20$ph;
       $shr223$pn = 15;
      } else {
       $bits_left$24 = $bits_left$20$ph;
       $get_buffer$24 = $get_buffer$20$ph;
       break L68;
      } else {
       if (($bits_left$20$ph | 0) < ($and224 | 0)) {
        if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$20$ph, $bits_left$20$ph, $and224) | 0)) {
         $retval$9 = 0;
         label = 67;
         break L18;
        }
        $bits_left$21 = HEAP32[$bits_left25 >> 2] | 0;
        $get_buffer$21 = HEAP32[$get_buffer24 >> 2] | 0;
       } else {
        $bits_left$21 = $bits_left$20$ph;
        $get_buffer$21 = $get_buffer$20$ph;
       }
       $bits_left$22 = $bits_left$21 - $and224 | 0;
       $get_buffer$22 = $get_buffer$21;
       $shr223$pn = $shr223169;
      }
      $k$3193 = $k$3193 + 1 + $shr223$pn | 0;
      if (($k$3193 | 0) >= 64) {
       $bits_left$24 = $bits_left$22;
       $get_buffer$24 = $get_buffer$22;
       break;
      } else {
       $bits_left$16194 = $bits_left$22;
       $get_buffer$16195 = $get_buffer$22;
      }
     }
    } while (0);
    $blkn$0203 = $blkn$0203 + 1 | 0;
    if (($blkn$0203 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
     label = 64;
     break;
    } else {
     $bits_left$0201 = $bits_left$24;
     $get_buffer$0202 = $get_buffer$24;
    }
   }
   if ((label | 0) == 64) {
    $$in = HEAP32[$src >> 2] | 0;
    $57 = HEAP32[$br_state >> 2] | 0;
    $59 = HEAP32[$bytes_in_buffer12 >> 2] | 0;
    $bits_left$0$lcssa = $bits_left$24;
    $get_buffer$0$lcssa = $get_buffer$24;
    break;
   } else if ((label | 0) == 67) {
    STACKTOP = sp;
    return $retval$9 | 0;
   }
  } else {
   $$in = $12;
   $57 = $13;
   $59 = $15;
   $bits_left$0$lcssa = $17;
   $get_buffer$0$lcssa = $16;
  } while (0);
  HEAP32[$$in >> 2] = $57;
  HEAP32[$$in + 4 >> 2] = $59;
  HEAP32[$get_buffer13 >> 2] = $get_buffer$0$lcssa;
  HEAP32[$bits_left15 >> 2] = $bits_left$0$lcssa;
  HEAP32[$saved >> 2] = HEAP32[$state >> 2];
  HEAP32[$saved + 4 >> 2] = HEAP32[$state + 4 >> 2];
  HEAP32[$saved + 8 >> 2] = HEAP32[$state + 8 >> 2];
  HEAP32[$saved + 12 >> 2] = HEAP32[$state + 12 >> 2];
  HEAP32[$saved + 16 >> 2] = HEAP32[$state + 16 >> 2];
 }
 $restarts_to_go273 = $0 + 44 | 0;
 HEAP32[$restarts_to_go273 >> 2] = (HEAP32[$restarts_to_go273 >> 2] | 0) + -1;
 $retval$9 = 1;
 STACKTOP = sp;
 return $retval$9 | 0;
}
function _jpeg_idct_5x5($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$ptr = 0, $add$ptr53 = 0, $add$ptr53$1 = 0, $add$ptr53$2 = 0, $add$ptr53$3 = 0, $add$ptr53$4 = 0, $add13 = 0, $add13$1 = 0, $add13$2 = 0, $add13$3 = 0, $add13$4 = 0, $add14 = 0, $add14$1 = 0, $add14$2 = 0, $add14$3 = 0, $add14$4 = 0, $add29 = 0, $add29$1 = 0, $add29$2 = 0, $add29$3 = 0, $add29$4 = 0, $add63 = 0, $add63$1 = 0, $add63$2 = 0, $add63$3 = 0, $add63$4 = 0, $add64 = 0, $add64$1 = 0, $add64$2 = 0, $add64$3 = 0, $add64$4 = 0, $add73 = 0, $add73$1 = 0, $add73$2 = 0, $add73$3 = 0, $add73$4 = 0, $arrayidx39 = 0, $incdec$ptr46 = 0, $mul11 = 0, $mul11$1 = 0, $mul11$2 = 0, $mul11$3 = 0, $mul11$4 = 0, $mul21 = 0, $mul21$1 = 0, $mul21$2 = 0, $mul21$3 = 0, $mul21$4 = 0, $mul25 = 0, $mul25$1 = 0, $mul25$2 = 0, $mul25$3 = 0, $mul25$4 = 0, $mul27 = 0, $mul27$1 = 0, $mul27$2 = 0, $mul27$3 = 0, $mul27$4 = 0, $mul5 = 0, $mul5$1 = 0, $mul5$2 = 0, $mul5$3 = 0, $mul5$4 = 0, $mul60 = 0, $mul60$1 = 0, $mul60$2 = 0, $mul60$3 = 0, $mul60$4 = 0, $mul71 = 0, $mul71$1 = 0, $mul71$2 = 0, $mul71$3 = 0, $mul71$4 = 0, $mul9 = 0, $mul9$1 = 0, $mul9$2 = 0, $mul9$3 = 0, $mul9$4 = 0, $shl56 = 0, $shl56$1 = 0, $shl56$2 = 0, $shl56$3 = 0, $shl56$4 = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0, $sub$4 = 0, $sub15 = 0, $sub15$1 = 0, $sub15$2 = 0, $sub15$3 = 0, $sub15$4 = 0, $sub17 = 0, $sub17$1 = 0, $sub17$2 = 0, $sub17$3 = 0, $sub17$4 = 0, $sub31 = 0, $sub31$1 = 0, $sub31$2 = 0, $sub31$3 = 0, $sub31$4 = 0, $sub61 = 0, $sub61$1 = 0, $sub61$2 = 0, $sub61$3 = 0, $sub61$4 = 0, $sub65 = 0, $sub65$1 = 0, $sub65$2 = 0, $sub65$3 = 0, $sub65$4 = 0, $sub67 = 0, $sub67$1 = 0, $sub67$2 = 0, $sub67$3 = 0, $sub67$4 = 0, $sub75 = 0, $sub75$1 = 0, $sub75$2 = 0, $sub75$3 = 0, $sub75$4 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add = Math_imul(HEAP16[$coef_block >> 1] << 13, HEAP32[$1 >> 2] | 0) | 0 | 1024;
 $mul5 = Math_imul(HEAP32[$1 + 64 >> 2] | 0, HEAP16[$coef_block + 32 >> 1] | 0) | 0;
 $mul9 = Math_imul(HEAP32[$1 + 128 >> 2] | 0, HEAP16[$coef_block + 64 >> 1] | 0) | 0;
 $mul11 = ($mul9 + $mul5 | 0) * 6476 | 0;
 $sub = $mul5 - $mul9 | 0;
 $add13 = ($sub * 2896 | 0) + $add | 0;
 $add14 = $add13 + $mul11 | 0;
 $sub15 = $add13 - $mul11 | 0;
 $sub17 = (Math_imul($sub, -11584) | 0) + $add | 0;
 $mul21 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $mul25 = Math_imul(HEAP32[$1 + 96 >> 2] | 0, HEAP16[$coef_block + 48 >> 1] | 0) | 0;
 $mul27 = ($mul25 + $mul21 | 0) * 6810 | 0;
 $add29 = $mul27 + ($mul21 * 4209 | 0) | 0;
 $sub31 = $mul27 + (Math_imul($mul25, -17828) | 0) | 0;
 HEAP32[$workspace >> 2] = $add29 + $add14 >> 11;
 HEAP32[$workspace + 80 >> 2] = $add14 - $add29 >> 11;
 $arrayidx39 = $workspace + 20 | 0;
 HEAP32[$arrayidx39 >> 2] = $sub31 + $sub15 >> 11;
 HEAP32[$workspace + 60 >> 2] = $sub15 - $sub31 >> 11;
 HEAP32[$workspace + 40 >> 2] = $sub17 >> 11;
 $incdec$ptr46 = $workspace + 4 | 0;
 $add$1 = Math_imul(HEAP16[$coef_block + 2 >> 1] << 13, HEAP32[$1 + 4 >> 2] | 0) | 0 | 1024;
 $mul5$1 = Math_imul(HEAP32[$1 + 68 >> 2] | 0, HEAP16[$coef_block + 34 >> 1] | 0) | 0;
 $mul9$1 = Math_imul(HEAP32[$1 + 132 >> 2] | 0, HEAP16[$coef_block + 66 >> 1] | 0) | 0;
 $mul11$1 = ($mul9$1 + $mul5$1 | 0) * 6476 | 0;
 $sub$1 = $mul5$1 - $mul9$1 | 0;
 $add13$1 = ($sub$1 * 2896 | 0) + $add$1 | 0;
 $add14$1 = $add13$1 + $mul11$1 | 0;
 $sub15$1 = $add13$1 - $mul11$1 | 0;
 $sub17$1 = (Math_imul($sub$1, -11584) | 0) + $add$1 | 0;
 $mul21$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $mul25$1 = Math_imul(HEAP32[$1 + 100 >> 2] | 0, HEAP16[$coef_block + 50 >> 1] | 0) | 0;
 $mul27$1 = ($mul25$1 + $mul21$1 | 0) * 6810 | 0;
 $add29$1 = $mul27$1 + ($mul21$1 * 4209 | 0) | 0;
 $sub31$1 = $mul27$1 + (Math_imul($mul25$1, -17828) | 0) | 0;
 HEAP32[$incdec$ptr46 >> 2] = $add29$1 + $add14$1 >> 11;
 HEAP32[$workspace + 84 >> 2] = $add14$1 - $add29$1 >> 11;
 HEAP32[$workspace + 24 >> 2] = $sub31$1 + $sub15$1 >> 11;
 HEAP32[$workspace + 64 >> 2] = $sub15$1 - $sub31$1 >> 11;
 HEAP32[$workspace + 44 >> 2] = $sub17$1 >> 11;
 $add$2 = Math_imul(HEAP16[$coef_block + 4 >> 1] << 13, HEAP32[$1 + 8 >> 2] | 0) | 0 | 1024;
 $mul5$2 = Math_imul(HEAP32[$1 + 72 >> 2] | 0, HEAP16[$coef_block + 36 >> 1] | 0) | 0;
 $mul9$2 = Math_imul(HEAP32[$1 + 136 >> 2] | 0, HEAP16[$coef_block + 68 >> 1] | 0) | 0;
 $mul11$2 = ($mul9$2 + $mul5$2 | 0) * 6476 | 0;
 $sub$2 = $mul5$2 - $mul9$2 | 0;
 $add13$2 = ($sub$2 * 2896 | 0) + $add$2 | 0;
 $add14$2 = $add13$2 + $mul11$2 | 0;
 $sub15$2 = $add13$2 - $mul11$2 | 0;
 $sub17$2 = (Math_imul($sub$2, -11584) | 0) + $add$2 | 0;
 $mul21$2 = Math_imul(HEAP32[$1 + 40 >> 2] | 0, HEAP16[$coef_block + 20 >> 1] | 0) | 0;
 $mul25$2 = Math_imul(HEAP32[$1 + 104 >> 2] | 0, HEAP16[$coef_block + 52 >> 1] | 0) | 0;
 $mul27$2 = ($mul25$2 + $mul21$2 | 0) * 6810 | 0;
 $add29$2 = $mul27$2 + ($mul21$2 * 4209 | 0) | 0;
 $sub31$2 = $mul27$2 + (Math_imul($mul25$2, -17828) | 0) | 0;
 HEAP32[$workspace + 8 >> 2] = $add29$2 + $add14$2 >> 11;
 HEAP32[$workspace + 88 >> 2] = $add14$2 - $add29$2 >> 11;
 HEAP32[$workspace + 28 >> 2] = $sub31$2 + $sub15$2 >> 11;
 HEAP32[$workspace + 68 >> 2] = $sub15$2 - $sub31$2 >> 11;
 HEAP32[$workspace + 48 >> 2] = $sub17$2 >> 11;
 $add$3 = Math_imul(HEAP16[$coef_block + 6 >> 1] << 13, HEAP32[$1 + 12 >> 2] | 0) | 0 | 1024;
 $mul5$3 = Math_imul(HEAP32[$1 + 76 >> 2] | 0, HEAP16[$coef_block + 38 >> 1] | 0) | 0;
 $mul9$3 = Math_imul(HEAP32[$1 + 140 >> 2] | 0, HEAP16[$coef_block + 70 >> 1] | 0) | 0;
 $mul11$3 = ($mul9$3 + $mul5$3 | 0) * 6476 | 0;
 $sub$3 = $mul5$3 - $mul9$3 | 0;
 $add13$3 = ($sub$3 * 2896 | 0) + $add$3 | 0;
 $add14$3 = $add13$3 + $mul11$3 | 0;
 $sub15$3 = $add13$3 - $mul11$3 | 0;
 $sub17$3 = (Math_imul($sub$3, -11584) | 0) + $add$3 | 0;
 $mul21$3 = Math_imul(HEAP32[$1 + 44 >> 2] | 0, HEAP16[$coef_block + 22 >> 1] | 0) | 0;
 $mul25$3 = Math_imul(HEAP32[$1 + 108 >> 2] | 0, HEAP16[$coef_block + 54 >> 1] | 0) | 0;
 $mul27$3 = ($mul25$3 + $mul21$3 | 0) * 6810 | 0;
 $add29$3 = $mul27$3 + ($mul21$3 * 4209 | 0) | 0;
 $sub31$3 = $mul27$3 + (Math_imul($mul25$3, -17828) | 0) | 0;
 HEAP32[$workspace + 12 >> 2] = $add29$3 + $add14$3 >> 11;
 HEAP32[$workspace + 92 >> 2] = $add14$3 - $add29$3 >> 11;
 HEAP32[$workspace + 32 >> 2] = $sub31$3 + $sub15$3 >> 11;
 HEAP32[$workspace + 72 >> 2] = $sub15$3 - $sub31$3 >> 11;
 HEAP32[$workspace + 52 >> 2] = $sub17$3 >> 11;
 $add$4 = Math_imul(HEAP16[$coef_block + 8 >> 1] << 13, HEAP32[$1 + 16 >> 2] | 0) | 0 | 1024;
 $mul5$4 = Math_imul(HEAP32[$1 + 80 >> 2] | 0, HEAP16[$coef_block + 40 >> 1] | 0) | 0;
 $mul9$4 = Math_imul(HEAP32[$1 + 144 >> 2] | 0, HEAP16[$coef_block + 72 >> 1] | 0) | 0;
 $mul11$4 = ($mul9$4 + $mul5$4 | 0) * 6476 | 0;
 $sub$4 = $mul5$4 - $mul9$4 | 0;
 $add13$4 = ($sub$4 * 2896 | 0) + $add$4 | 0;
 $add14$4 = $add13$4 + $mul11$4 | 0;
 $sub15$4 = $add13$4 - $mul11$4 | 0;
 $sub17$4 = (Math_imul($sub$4, -11584) | 0) + $add$4 | 0;
 $mul21$4 = Math_imul(HEAP32[$1 + 48 >> 2] | 0, HEAP16[$coef_block + 24 >> 1] | 0) | 0;
 $mul25$4 = Math_imul(HEAP32[$1 + 112 >> 2] | 0, HEAP16[$coef_block + 56 >> 1] | 0) | 0;
 $mul27$4 = ($mul25$4 + $mul21$4 | 0) * 6810 | 0;
 $add29$4 = $mul27$4 + ($mul21$4 * 4209 | 0) | 0;
 $sub31$4 = $mul27$4 + (Math_imul($mul25$4, -17828) | 0) | 0;
 HEAP32[$workspace + 16 >> 2] = $add29$4 + $add14$4 >> 11;
 HEAP32[$workspace + 96 >> 2] = $add14$4 - $add29$4 >> 11;
 HEAP32[$workspace + 36 >> 2] = $sub31$4 + $sub15$4 >> 11;
 HEAP32[$workspace + 76 >> 2] = $sub15$4 - $sub31$4 >> 11;
 HEAP32[$workspace + 56 >> 2] = $sub17$4 >> 11;
 $add$ptr = $0 + -384 | 0;
 $add$ptr53 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $shl56 = (HEAP32[$workspace >> 2] << 13) + 134348800 | 0;
 $64 = HEAP32[$workspace + 8 >> 2] | 0;
 $65 = HEAP32[$workspace + 16 >> 2] | 0;
 $mul60 = ($65 + $64 | 0) * 6476 | 0;
 $sub61 = $64 - $65 | 0;
 $add63 = ($sub61 * 2896 | 0) + $shl56 | 0;
 $add64 = $add63 + $mul60 | 0;
 $sub65 = $add63 - $mul60 | 0;
 $sub67 = (Math_imul($sub61, -11584) | 0) + $shl56 | 0;
 $67 = HEAP32[$incdec$ptr46 >> 2] | 0;
 $68 = HEAP32[$workspace + 12 >> 2] | 0;
 $mul71 = ($68 + $67 | 0) * 6810 | 0;
 $add73 = $mul71 + ($67 * 4209 | 0) | 0;
 $sub75 = $mul71 + (Math_imul($68, -17828) | 0) | 0;
 HEAP8[$add$ptr53 >> 0] = HEAP8[$add$ptr + (($add73 + $add64 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53 + 4 >> 0] = HEAP8[$add$ptr + (($add64 - $add73 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53 + 1 >> 0] = HEAP8[$add$ptr + (($sub75 + $sub65 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53 + 3 >> 0] = HEAP8[$add$ptr + (($sub65 - $sub75 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53 + 2 >> 0] = HEAP8[$add$ptr + ($sub67 >>> 18 & 1023) >> 0] | 0;
 $add$ptr53$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $shl56$1 = (HEAP32[$arrayidx39 >> 2] << 13) + 134348800 | 0;
 $82 = HEAP32[$workspace + 28 >> 2] | 0;
 $83 = HEAP32[$workspace + 36 >> 2] | 0;
 $mul60$1 = ($83 + $82 | 0) * 6476 | 0;
 $sub61$1 = $82 - $83 | 0;
 $add63$1 = ($sub61$1 * 2896 | 0) + $shl56$1 | 0;
 $add64$1 = $add63$1 + $mul60$1 | 0;
 $sub65$1 = $add63$1 - $mul60$1 | 0;
 $sub67$1 = (Math_imul($sub61$1, -11584) | 0) + $shl56$1 | 0;
 $85 = HEAP32[$workspace + 24 >> 2] | 0;
 $86 = HEAP32[$workspace + 32 >> 2] | 0;
 $mul71$1 = ($86 + $85 | 0) * 6810 | 0;
 $add73$1 = $mul71$1 + ($85 * 4209 | 0) | 0;
 $sub75$1 = $mul71$1 + (Math_imul($86, -17828) | 0) | 0;
 HEAP8[$add$ptr53$1 >> 0] = HEAP8[$add$ptr + (($add73$1 + $add64$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$1 + 4 >> 0] = HEAP8[$add$ptr + (($add64$1 - $add73$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$1 + 1 >> 0] = HEAP8[$add$ptr + (($sub75$1 + $sub65$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$1 + 3 >> 0] = HEAP8[$add$ptr + (($sub65$1 - $sub75$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$1 + 2 >> 0] = HEAP8[$add$ptr + ($sub67$1 >>> 18 & 1023) >> 0] | 0;
 $add$ptr53$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $shl56$2 = (HEAP32[$workspace + 40 >> 2] << 13) + 134348800 | 0;
 $100 = HEAP32[$workspace + 48 >> 2] | 0;
 $101 = HEAP32[$workspace + 56 >> 2] | 0;
 $mul60$2 = ($101 + $100 | 0) * 6476 | 0;
 $sub61$2 = $100 - $101 | 0;
 $add63$2 = ($sub61$2 * 2896 | 0) + $shl56$2 | 0;
 $add64$2 = $add63$2 + $mul60$2 | 0;
 $sub65$2 = $add63$2 - $mul60$2 | 0;
 $sub67$2 = (Math_imul($sub61$2, -11584) | 0) + $shl56$2 | 0;
 $103 = HEAP32[$workspace + 44 >> 2] | 0;
 $104 = HEAP32[$workspace + 52 >> 2] | 0;
 $mul71$2 = ($104 + $103 | 0) * 6810 | 0;
 $add73$2 = $mul71$2 + ($103 * 4209 | 0) | 0;
 $sub75$2 = $mul71$2 + (Math_imul($104, -17828) | 0) | 0;
 HEAP8[$add$ptr53$2 >> 0] = HEAP8[$add$ptr + (($add73$2 + $add64$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$2 + 4 >> 0] = HEAP8[$add$ptr + (($add64$2 - $add73$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$2 + 1 >> 0] = HEAP8[$add$ptr + (($sub75$2 + $sub65$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$2 + 3 >> 0] = HEAP8[$add$ptr + (($sub65$2 - $sub75$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$2 + 2 >> 0] = HEAP8[$add$ptr + ($sub67$2 >>> 18 & 1023) >> 0] | 0;
 $add$ptr53$3 = (HEAP32[$output_buf + 12 >> 2] | 0) + $output_col | 0;
 $shl56$3 = (HEAP32[$workspace + 60 >> 2] << 13) + 134348800 | 0;
 $118 = HEAP32[$workspace + 68 >> 2] | 0;
 $119 = HEAP32[$workspace + 76 >> 2] | 0;
 $mul60$3 = ($119 + $118 | 0) * 6476 | 0;
 $sub61$3 = $118 - $119 | 0;
 $add63$3 = ($sub61$3 * 2896 | 0) + $shl56$3 | 0;
 $add64$3 = $add63$3 + $mul60$3 | 0;
 $sub65$3 = $add63$3 - $mul60$3 | 0;
 $sub67$3 = (Math_imul($sub61$3, -11584) | 0) + $shl56$3 | 0;
 $121 = HEAP32[$workspace + 64 >> 2] | 0;
 $122 = HEAP32[$workspace + 72 >> 2] | 0;
 $mul71$3 = ($122 + $121 | 0) * 6810 | 0;
 $add73$3 = $mul71$3 + ($121 * 4209 | 0) | 0;
 $sub75$3 = $mul71$3 + (Math_imul($122, -17828) | 0) | 0;
 HEAP8[$add$ptr53$3 >> 0] = HEAP8[$add$ptr + (($add73$3 + $add64$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$3 + 4 >> 0] = HEAP8[$add$ptr + (($add64$3 - $add73$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$3 + 1 >> 0] = HEAP8[$add$ptr + (($sub75$3 + $sub65$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$3 + 3 >> 0] = HEAP8[$add$ptr + (($sub65$3 - $sub75$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$3 + 2 >> 0] = HEAP8[$add$ptr + ($sub67$3 >>> 18 & 1023) >> 0] | 0;
 $add$ptr53$4 = (HEAP32[$output_buf + 16 >> 2] | 0) + $output_col | 0;
 $shl56$4 = (HEAP32[$workspace + 80 >> 2] << 13) + 134348800 | 0;
 $136 = HEAP32[$workspace + 88 >> 2] | 0;
 $137 = HEAP32[$workspace + 96 >> 2] | 0;
 $mul60$4 = ($137 + $136 | 0) * 6476 | 0;
 $sub61$4 = $136 - $137 | 0;
 $add63$4 = ($sub61$4 * 2896 | 0) + $shl56$4 | 0;
 $add64$4 = $add63$4 + $mul60$4 | 0;
 $sub65$4 = $add63$4 - $mul60$4 | 0;
 $sub67$4 = (Math_imul($sub61$4, -11584) | 0) + $shl56$4 | 0;
 $139 = HEAP32[$workspace + 84 >> 2] | 0;
 $140 = HEAP32[$workspace + 92 >> 2] | 0;
 $mul71$4 = ($140 + $139 | 0) * 6810 | 0;
 $add73$4 = $mul71$4 + ($139 * 4209 | 0) | 0;
 $sub75$4 = $mul71$4 + (Math_imul($140, -17828) | 0) | 0;
 HEAP8[$add$ptr53$4 >> 0] = HEAP8[$add$ptr + (($add73$4 + $add64$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$4 + 4 >> 0] = HEAP8[$add$ptr + (($add64$4 - $add73$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$4 + 1 >> 0] = HEAP8[$add$ptr + (($sub75$4 + $sub65$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$4 + 3 >> 0] = HEAP8[$add$ptr + (($sub65$4 - $sub75$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr53$4 + 2 >> 0] = HEAP8[$add$ptr + ($sub67$4 >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi244Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $18 = 0, $23 = 0, $28 = 0, $31 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $50 = 0, $8 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i111 = 0, $__cap_$i$i$i$i$i143 = 0, $__cap_$i$i$i$i$i171 = 0, $__cap_$i$i$i$i$i203 = 0, $__cap_$i$i$i$i$i229 = 0, $__cap_$i$i$i$i$i53 = 0, $__cap_$i$i$i$i$i85 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i116 = 0, $__i$0$i$i$i148 = 0, $__i$0$i$i$i176 = 0, $__i$0$i$i$i208 = 0, $__i$0$i$i$i234 = 0, $__i$0$i$i$i58 = 0, $__i$0$i$i$i90 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i102 = 0, $__size_$i1$i$i$i$i134 = 0, $__size_$i1$i$i$i$i162 = 0, $__size_$i1$i$i$i$i194 = 0, $__size_$i1$i$i$i$i220 = 0, $__size_$i1$i$i$i$i44 = 0, $__size_$i1$i$i$i$i76 = 0, $call$i = 0, $call$i126 = 0, $call$i185 = 0, $call$i188 = 0, $call$i67 = 0, $call$i70 = 0, $ref$tmp$i$i$i$i217 = 0, $ref$tmp4 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i217 = sp + 12 | 0;
 $ref$tmp4 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43272) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i217, $call$i);
   $1 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 255]($ref$tmp4, $call$i);
   $__size_$i1$i$i$i$i = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $4 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 255]($ref$tmp$i$i$i$i217, $call$i);
   $8 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $8;
   HEAP8[$__pat + 1 >> 0] = $8 >> 8;
   HEAP8[$__pat + 2 >> 0] = $8 >> 16;
   HEAP8[$__pat + 3 >> 0] = $8 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 255]($ref$tmp4, $call$i);
   $__size_$i1$i$i$i$i44 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i44 >> 0] | 0) < 0) {
    $11 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($11, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i44 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i53 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i53 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i53 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i44 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i58 = 0;
   while (1) {
    if (($__i$0$i$i$i58 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i58 << 2) >> 2] = 0;
    $__i$0$i$i$i58 = $__i$0$i$i$i58 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  }
  $call$i67 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP8[$__dp >> 0] = $call$i67;
  $call$i70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  HEAP8[$__ts >> 0] = $call$i70;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 255]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i76 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
   $18 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($18, $ref$tmp$i$i$i$i217);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i85 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i85 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i85 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i76 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i90 = 0;
  while (1) {
   if (($__i$0$i$i$i90 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i90 << 2) >> 2] = 0;
   $__i$0$i$i$i90 = $__i$0$i$i$i90 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 255]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i102 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i102 >> 0] | 0) < 0) {
   $23 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($23, $ref$tmp$i$i$i$i217);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i102 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i111 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i111 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i111 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i102 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i116 = 0;
  while (1) {
   if (($__i$0$i$i$i116 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i116 << 2) >> 2] = 0;
   $__i$0$i$i$i116 = $__i$0$i$i$i116 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i126 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43264) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i217, $call$i126);
   $28 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $28;
   HEAP8[$__pat + 1 >> 0] = $28 >> 8;
   HEAP8[$__pat + 2 >> 0] = $28 >> 16;
   HEAP8[$__pat + 3 >> 0] = $28 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 32 >> 2] & 255]($ref$tmp4, $call$i126);
   $__size_$i1$i$i$i$i134 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i134 >> 0] | 0) < 0) {
    $31 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($31, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i134 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i143 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i143 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i143 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i134 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i148 = 0;
   while (1) {
    if (($__i$0$i$i$i148 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i148 << 2) >> 2] = 0;
    $__i$0$i$i$i148 = $__i$0$i$i$i148 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phi244Z2D = $call$i126;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 40 >> 2] & 255]($ref$tmp$i$i$i$i217, $call$i126);
   $35 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $35;
   HEAP8[$__pat + 1 >> 0] = $35 >> 8;
   HEAP8[$__pat + 2 >> 0] = $35 >> 16;
   HEAP8[$__pat + 3 >> 0] = $35 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 28 >> 2] & 255]($ref$tmp4, $call$i126);
   $__size_$i1$i$i$i$i162 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i162 >> 0] | 0) < 0) {
    $38 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($38, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i162 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i171 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i171 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i171 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i162 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i176 = 0;
   while (1) {
    if (($__i$0$i$i$i176 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i176 << 2) >> 2] = 0;
    $__i$0$i$i$i176 = $__i$0$i$i$i176 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phi244Z2D = $call$i126;
  }
  $call$i185 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 12 >> 2] & 127]($call$i126) | 0;
  HEAP8[$__dp >> 0] = $call$i185;
  $call$i188 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 16 >> 2] & 127]($call$i126) | 0;
  HEAP8[$__ts >> 0] = $call$i188;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi244Z2D >> 2] | 0) + 20 >> 2] & 255]($ref$tmp4, $call$i126);
  $__size_$i1$i$i$i$i194 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i194 >> 0] | 0) < 0) {
   $45 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($45, $ref$tmp$i$i$i$i217);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i194 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i203 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i203 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i203 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i194 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i208 = 0;
  while (1) {
   if (($__i$0$i$i$i208 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i208 << 2) >> 2] = 0;
   $__i$0$i$i$i208 = $__i$0$i$i$i208 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi244Z2D >> 2] | 0) + 24 >> 2] & 255]($ref$tmp4, $call$i126);
  $__size_$i1$i$i$i$i220 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i220 >> 0] | 0) < 0) {
   $50 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($50, $ref$tmp$i$i$i$i217);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i220 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i229 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i229 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i229 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i220 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i234 = 0;
  while (1) {
   if (($__i$0$i$i$i234 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i234 << 2) >> 2] = 0;
   $__i$0$i$i$i234 = $__i$0$i$i$i234 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 36 >> 2] & 127]($call$i126) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[10871] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if ((HEAP32[10872] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[10869] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 43508 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[10867] = HEAP32[10867] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $5 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   } else $fd67$pre$phiZ2D = $5 + 8 | 0;
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$16) {
     $arrayidx113 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($0 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($0 >>> 0 > $11 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if ($9) {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 43772 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[10868] = HEAP32[10868] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ((HEAP32[10871] | 0) >>> 0 <= $9 >>> 0) {
    $arrayidx149 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } else _abort(); while (0);
   $23 = HEAP32[10871] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if ($25) if ((HEAP32[10871] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   } else {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   }
  } else {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  if ((HEAP32[10873] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[10870] | 0) + $psize$1 | 0;
   HEAP32[10870] = $add246;
   HEAP32[10873] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[10872] | 0)) return;
   HEAP32[10872] = 0;
   HEAP32[10869] = 0;
   return;
  }
  if ((HEAP32[10872] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[10869] | 0) + $psize$1 | 0;
   HEAP32[10869] = $add258;
   HEAP32[10872] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L111 : do if ($29 >>> 0 >= 256) {
   $42 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $43 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($43 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $48 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$48) {
     $49 = HEAP32[$child361 >> 2] | 0;
     if (!$49) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $49;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $48;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $50 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$50) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $51 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$51) break; else {
       $R332$1$be = $51;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $50;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    if ((HEAP32[10871] | 0) >>> 0 > $RP360$1 >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $44 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ((HEAP32[10871] | 0) >>> 0 > $44 >>> 0) _abort();
    $bk343 = $44 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $43 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $43;
     HEAP32[$fd347 >> 2] = $44;
     $R332$3 = $43;
     break;
    } else _abort();
   } while (0);
   if ($42 | 0) {
    $53 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 43772 + ($53 << 2) | 0;
    do if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[10868] = HEAP32[10868] & ~(1 << $53);
      break L111;
     }
    } else if ((HEAP32[10871] | 0) >>> 0 <= $42 >>> 0) {
     $arrayidx419 = $42 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $42 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break L111; else break;
    } else _abort(); while (0);
    $58 = HEAP32[10871] | 0;
    if ($58 >>> 0 > $R332$3 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $42;
    $child443 = $add$ptr6 + 16 | 0;
    $59 = HEAP32[$child443 >> 2] | 0;
    do if ($59 | 0) if ($58 >>> 0 > $59 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $60 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($60 | 0) if ((HEAP32[10871] | 0) >>> 0 > $60 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } else {
   $35 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 43508 + ($shr268 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[10871] | 0) >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[10867] = HEAP32[10867] & ~(1 << $shr268);
    break;
   }
   if (($36 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[10871] | 0) >>> 0 > $36 >>> 0) _abort();
    $fd311 = $36 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   } else $fd322$pre$phiZ2D = $36 + 8 | 0;
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $35;
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[10872] | 0)) {
   HEAP32[10869] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 43508 + ($shr501 << 1 << 2) | 0;
  $63 = HEAP32[10867] | 0;
  $shl511 = 1 << $shr501;
  if ($63 & $shl511) {
   $64 = $arrayidx509 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ((HEAP32[10871] | 0) >>> 0 > $65 >>> 0) _abort(); else {
    $$pre$phiZ2D = $64;
    $F510$0 = $65;
   }
  } else {
   HEAP32[10867] = $63 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if ($shr535) if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 } else $I534$0 = 0;
 $arrayidx567 = 43772 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $67 = HEAP32[10868] | 0;
 $shl573 = 1 << $I534$0;
 L197 : do if ($67 & $shl573) {
  $68 = HEAP32[$arrayidx567 >> 2] | 0;
  L200 : do if ((HEAP32[$68 + 4 >> 2] & -8 | 0) != ($psize$2 | 0)) {
   $K583$0312 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0311 = $68;
   while (1) {
    $arrayidx599 = $T$0311 + 16 + ($K583$0312 >>> 31 << 2) | 0;
    $70 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$70) break;
    if ((HEAP32[$70 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $70;
     break L200;
    } else {
     $K583$0312 = $K583$0312 << 1;
     $T$0311 = $70;
    }
   }
   if ((HEAP32[10871] | 0) >>> 0 > $arrayidx599 >>> 0) _abort(); else {
    HEAP32[$arrayidx599 >> 2] = $p$1;
    HEAP32[$p$1 + 24 >> 2] = $T$0311;
    HEAP32[$p$1 + 12 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $p$1;
    break L197;
   }
  } else $T$0$lcssa = $68; while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $73 = HEAP32[$fd620 >> 2] | 0;
  $74 = HEAP32[10871] | 0;
  if ($74 >>> 0 <= $73 >>> 0 & $74 >>> 0 <= $T$0$lcssa >>> 0) {
   HEAP32[$73 + 12 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $73;
   HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } else {
  HEAP32[10868] = $67 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } while (0);
 $dec = (HEAP32[10875] | 0) + -1 | 0;
 HEAP32[10875] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 43924;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[10875] = -1;
 return;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $11 = 0, $13 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $39 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i187 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i104 = 0, $__i$0$i$i$i134 = 0, $__i$0$i$i$i160 = 0, $__i$0$i$i$i192 = 0, $__i$0$i$i$i216 = 0, $__i$0$i$i$i56 = 0, $__i$0$i$i$i81 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i121 = 0, $__size_$i1$i$i$i$i147 = 0, $__size_$i1$i$i$i$i178 = 0, $__size_$i1$i$i$i$i203 = 0, $__size_$i1$i$i$i$i43 = 0, $__size_$i1$i$i$i$i73 = 0, $__size_$i1$i$i$i$i91 = 0, $call$i = 0, $call$i114 = 0, $call$i169 = 0, $call$i172 = 0, $call$i65 = 0, $call$i68 = 0, $ref$tmp$i$i$i$i201 = 0, $ref$tmp4 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i201 = sp + 12 | 0;
 $ref$tmp4 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43288) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i201, $call$i);
   $1 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 255]($ref$tmp4, $call$i);
   $3 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i = $3 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $5 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($5, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$3 >> 2] << 2);
     HEAP32[$3 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 255]($ref$tmp$i$i$i$i201, $call$i);
   $9 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $9;
   HEAP8[$__pat + 1 >> 0] = $9 >> 8;
   HEAP8[$__pat + 2 >> 0] = $9 >> 16;
   HEAP8[$__pat + 3 >> 0] = $9 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 255]($ref$tmp4, $call$i);
   $11 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i43 = $11 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i43 >> 0] | 0) < 0) {
    $13 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($13, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i43 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$11 >> 2] << 2);
     HEAP32[$11 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i43 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i56 = 0;
   while (1) {
    if (($__i$0$i$i$i56 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i56 << 2) >> 2] = 0;
    $__i$0$i$i$i56 = $__i$0$i$i$i56 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  }
  $call$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP32[$__dp >> 2] = $call$i65;
  $call$i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  HEAP32[$__ts >> 2] = $call$i68;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 255]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i73 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i73 >> 0] | 0) < 0) {
   $20 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($20, $ref$tmp$i$i$i$i201);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i73 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i73 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i81 = 0;
  while (1) {
   if (($__i$0$i$i$i81 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i81 << 2) >> 2] = 0;
   $__i$0$i$i$i81 = $__i$0$i$i$i81 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 255]($ref$tmp4, $call$i);
  $24 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i91 = $24 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
   $26 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26, $ref$tmp$i$i$i$i201);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$24 >> 2] << 2);
    HEAP32[$24 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i91 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i104 = 0;
  while (1) {
   if (($__i$0$i$i$i104 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i104 << 2) >> 2] = 0;
   $__i$0$i$i$i104 = $__i$0$i$i$i104 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i114 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43280) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i201, $call$i114);
   $31 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $31;
   HEAP8[$__pat + 1 >> 0] = $31 >> 8;
   HEAP8[$__pat + 2 >> 0] = $31 >> 16;
   HEAP8[$__pat + 3 >> 0] = $31 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 32 >> 2] & 255]($ref$tmp4, $call$i114);
   $33 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i121 = $33 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i121 >> 0] | 0) < 0) {
    $35 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($35, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i121 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$33 >> 2] << 2);
     HEAP32[$33 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i121 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i134 = 0;
   while (1) {
    if (($__i$0$i$i$i134 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i134 << 2) >> 2] = 0;
    $__i$0$i$i$i134 = $__i$0$i$i$i134 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 40 >> 2] & 255]($ref$tmp$i$i$i$i201, $call$i114);
   $39 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $39;
   HEAP8[$__pat + 1 >> 0] = $39 >> 8;
   HEAP8[$__pat + 2 >> 0] = $39 >> 16;
   HEAP8[$__pat + 3 >> 0] = $39 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 28 >> 2] & 255]($ref$tmp4, $call$i114);
   $41 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i147 = $41 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i147 >> 0] | 0) < 0) {
    $43 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($43, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i147 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$41 >> 2] << 2);
     HEAP32[$41 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i147 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i160 = 0;
   while (1) {
    if (($__i$0$i$i$i160 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i160 << 2) >> 2] = 0;
    $__i$0$i$i$i160 = $__i$0$i$i$i160 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  }
  $call$i169 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 12 >> 2] & 127]($call$i114) | 0;
  HEAP32[$__dp >> 2] = $call$i169;
  $call$i172 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 16 >> 2] & 127]($call$i114) | 0;
  HEAP32[$__ts >> 2] = $call$i172;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 20 >> 2] & 255]($ref$tmp4, $call$i114);
  $__size_$i1$i$i$i$i178 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i178 >> 0] | 0) < 0) {
   $50 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($50, $ref$tmp$i$i$i$i201);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i178 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i187 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i187 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i187 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i178 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i192 = 0;
  while (1) {
   if (($__i$0$i$i$i192 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i192 << 2) >> 2] = 0;
   $__i$0$i$i$i192 = $__i$0$i$i$i192 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 24 >> 2] & 255]($ref$tmp4, $call$i114);
  $54 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i203 = $54 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i203 >> 0] | 0) < 0) {
   $56 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($56, $ref$tmp$i$i$i$i201);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i203 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$54 >> 2] << 2);
    HEAP32[$54 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i203 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i216 = 0;
  while (1) {
   if (($__i$0$i$i$i216 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i216 << 2) >> 2] = 0;
   $__i$0$i$i$i216 = $__i$0$i$i$i216 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 36 >> 2] & 127]($call$i114) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _consume_markers($cinfo) {
 $cinfo = $cinfo | 0;
 var $$pre175$i = 0, $0 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $47 = 0, $48 = 0, $50 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $75 = 0, $81 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $Ah$i = 0, $Al$i = 0, $Se$i = 0, $Ss$i = 0, $block_size$i = 0, $call = 0, $call$i = 0, $call184$i = 0, $call189$i = 0, $call194$i = 0, $call203$i = 0, $ci$0166$i = 0, $ci$1163$i = 0, $comp_info$i = 0, $compptr$0167$i = 0, $compptr$1164$i = 0, $comps_in_scan = 0, $data_precision$i = 0, $eoi_reached = 0, $h_samp_factor$i = 0, $h_samp_factor174$i = 0, $has_multiple_scans = 0, $image_height$i = 0, $image_width$i = 0, $inc196$i = 0, $inheaders = 0, $inputctl1 = 0, $is_baseline$i = 0, $lim_Se$i = 0, $marker = 0, $max_h_samp_factor$i = 0, $max_v_samp_factor$i = 0, $min_DCT_h_scaled_size$i = 0, $min_DCT_v_scaled_size$i = 0, $mul$i = 0, $mul180$i = 0, $mul187$i = 0, $mul192$i = 0, $natural_order$i = 0, $num_components$i = 0, $output_scan_number = 0, $progressive_mode$i = 0, $retval$0 = 0, $total_iMCU_rows$i = 0, $v_samp_factor179$i = 0, label = 0;
 $inputctl1 = $cinfo + 460 | 0;
 $0 = HEAP32[$inputctl1 >> 2] | 0;
 $eoi_reached = $0 + 20 | 0;
 if (HEAP32[$eoi_reached >> 2] | 0) {
  $retval$0 = 2;
  return $retval$0 | 0;
 }
 $marker = $cinfo + 464 | 0;
 $inheaders = $0 + 24 | 0;
 $comps_in_scan = $cinfo + 340 | 0;
 $has_multiple_scans = $0 + 16 | 0;
 $image_height$i = $cinfo + 32 | 0;
 $data_precision$i = $cinfo + 212 | 0;
 $image_width$i = $cinfo + 28 | 0;
 $num_components$i = $cinfo + 36 | 0;
 $max_h_samp_factor$i = $cinfo + 316 | 0;
 $max_v_samp_factor$i = $cinfo + 320 | 0;
 $comp_info$i = $cinfo + 216 | 0;
 $is_baseline$i = $cinfo + 220 | 0;
 $progressive_mode$i = $cinfo + 224 | 0;
 $min_DCT_h_scaled_size$i = $cinfo + 324 | 0;
 $min_DCT_v_scaled_size$i = $cinfo + 328 | 0;
 $block_size$i = $cinfo + 428 | 0;
 $natural_order$i = $cinfo + 432 | 0;
 $lim_Se$i = $cinfo + 436 | 0;
 $Se$i = $cinfo + 416 | 0;
 $total_iMCU_rows$i = $cinfo + 332 | 0;
 $Ss$i = $cinfo + 412 | 0;
 $Ah$i = $cinfo + 420 | 0;
 $Al$i = $cinfo + 424 | 0;
 L4 : while (1) {
  $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$marker >> 2] | 0) + 4 >> 2] & 127]($cinfo) | 0;
  switch ($call | 0) {
  case 2:
   {
    label = 58;
    break L4;
    break;
   }
  case 1:
   break;
  default:
   {
    $retval$0 = $call;
    label = 63;
    break L4;
   }
  }
  L7 : do switch (HEAP32[$inheaders >> 2] | 0) {
  case 0:
   {
    if (!(HEAP32[$has_multiple_scans >> 2] | 0)) {
     $75 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$75 + 20 >> 2] = 36;
     FUNCTION_TABLE_vi[HEAP32[$75 >> 2] & 255]($cinfo);
    }
    if (HEAP32[$comps_in_scan >> 2] | 0) {
     label = 57;
     break L4;
    }
    break;
   }
  case 1:
   {
    if ((HEAP32[$image_height$i >> 2] | 0) <= 65500 ? (HEAP32[$image_width$i >> 2] | 0) <= 65500 : 0) {} else {
     $7 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$7 + 20 >> 2] = 42;
     HEAP32[$7 + 24 >> 2] = 65500;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    }
    $10 = HEAP32[$data_precision$i >> 2] | 0;
    if (($10 + -8 | 0) >>> 0 > 4) {
     $12 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$12 + 20 >> 2] = 16;
     HEAP32[$12 + 24 >> 2] = $10;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    }
    $15 = HEAP32[$num_components$i >> 2] | 0;
    if (($15 | 0) > 10) {
     $16 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$16 + 20 >> 2] = 27;
     HEAP32[$16 + 24 >> 2] = $15;
     HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = 10;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
     $20 = HEAP32[$num_components$i >> 2] | 0;
    } else $20 = $15;
    HEAP32[$max_h_samp_factor$i >> 2] = 1;
    HEAP32[$max_v_samp_factor$i >> 2] = 1;
    if (($20 | 0) > 0) {
     $86 = $20;
     $87 = 1;
     $88 = 1;
     $ci$0166$i = 0;
     $compptr$0167$i = HEAP32[$comp_info$i >> 2] | 0;
     while (1) {
      $h_samp_factor$i = $compptr$0167$i + 8 | 0;
      $22 = HEAP32[$h_samp_factor$i >> 2] | 0;
      $$pre175$i = $compptr$0167$i + 12 | 0;
      if (($22 + -1 | 0) >>> 0 <= 3 ? ($24 = HEAP32[$$pre175$i >> 2] | 0, ($24 + -1 | 0) >>> 0 <= 3) : 0) {
       $28 = $88;
       $29 = $22;
       $30 = $87;
       $31 = $24;
       $32 = $86;
      } else {
       $26 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$26 + 20 >> 2] = 19;
       FUNCTION_TABLE_vi[HEAP32[$26 >> 2] & 255]($cinfo);
       $28 = HEAP32[$max_h_samp_factor$i >> 2] | 0;
       $29 = HEAP32[$h_samp_factor$i >> 2] | 0;
       $30 = HEAP32[$max_v_samp_factor$i >> 2] | 0;
       $31 = HEAP32[$$pre175$i >> 2] | 0;
       $32 = HEAP32[$num_components$i >> 2] | 0;
      }
      $88 = ($28 | 0) > ($29 | 0) ? $28 : $29;
      HEAP32[$max_h_samp_factor$i >> 2] = $88;
      $87 = ($30 | 0) > ($31 | 0) ? $30 : $31;
      HEAP32[$max_v_samp_factor$i >> 2] = $87;
      $ci$0166$i = $ci$0166$i + 1 | 0;
      if (($ci$0166$i | 0) >= ($32 | 0)) {
       $85 = $32;
       break;
      } else {
       $86 = $32;
       $compptr$0167$i = $compptr$0167$i + 88 | 0;
      }
     }
    } else $85 = $20;
    L35 : do if (!(HEAP32[$is_baseline$i >> 2] | 0)) {
     if (HEAP32[$progressive_mode$i >> 2] | 0 ? HEAP32[$comps_in_scan >> 2] | 0 : 0) {
      label = 22;
      break;
     }
     do switch (HEAP32[$Se$i >> 2] | 0) {
     case 0:
      {
       HEAP32[$block_size$i >> 2] = 1;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 0;
       $47 = 1;
       $48 = $85;
       break L35;
       break;
      }
     case 3:
      {
       HEAP32[$block_size$i >> 2] = 2;
       HEAP32[$natural_order$i >> 2] = 1760;
       HEAP32[$lim_Se$i >> 2] = 3;
       $47 = 2;
       $48 = $85;
       break L35;
       break;
      }
     case 8:
      {
       HEAP32[$block_size$i >> 2] = 3;
       HEAP32[$natural_order$i >> 2] = 1648;
       HEAP32[$lim_Se$i >> 2] = 8;
       $47 = 3;
       $48 = $85;
       break L35;
       break;
      }
     case 15:
      {
       HEAP32[$block_size$i >> 2] = 4;
       HEAP32[$natural_order$i >> 2] = 1520;
       HEAP32[$lim_Se$i >> 2] = 15;
       $47 = 4;
       $48 = $85;
       break L35;
       break;
      }
     case 24:
      {
       HEAP32[$block_size$i >> 2] = 5;
       HEAP32[$natural_order$i >> 2] = 1344;
       HEAP32[$lim_Se$i >> 2] = 24;
       $47 = 5;
       $48 = $85;
       break L35;
       break;
      }
     case 35:
      {
       HEAP32[$block_size$i >> 2] = 6;
       HEAP32[$natural_order$i >> 2] = 1136;
       HEAP32[$lim_Se$i >> 2] = 35;
       $47 = 6;
       $48 = $85;
       break L35;
       break;
      }
     case 48:
      {
       HEAP32[$block_size$i >> 2] = 7;
       HEAP32[$natural_order$i >> 2] = 864;
       HEAP32[$lim_Se$i >> 2] = 48;
       $47 = 7;
       $48 = $85;
       break L35;
       break;
      }
     case 63:
      {
       HEAP32[$block_size$i >> 2] = 8;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 8;
       $48 = $85;
       break L35;
       break;
      }
     case 80:
      {
       HEAP32[$block_size$i >> 2] = 9;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 9;
       $48 = $85;
       break L35;
       break;
      }
     case 99:
      {
       HEAP32[$block_size$i >> 2] = 10;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 10;
       $48 = $85;
       break L35;
       break;
      }
     case 120:
      {
       HEAP32[$block_size$i >> 2] = 11;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 11;
       $48 = $85;
       break L35;
       break;
      }
     case 143:
      {
       HEAP32[$block_size$i >> 2] = 12;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 12;
       $48 = $85;
       break L35;
       break;
      }
     case 168:
      {
       HEAP32[$block_size$i >> 2] = 13;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 13;
       $48 = $85;
       break L35;
       break;
      }
     case 195:
      {
       HEAP32[$block_size$i >> 2] = 14;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 14;
       $48 = $85;
       break L35;
       break;
      }
     case 224:
      {
       HEAP32[$block_size$i >> 2] = 15;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 15;
       $48 = $85;
       break L35;
       break;
      }
     case 255:
      {
       HEAP32[$block_size$i >> 2] = 16;
       HEAP32[$natural_order$i >> 2] = 544;
       HEAP32[$lim_Se$i >> 2] = 63;
       $47 = 16;
       $48 = $85;
       break L35;
       break;
      }
     default:
      {
       $37 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$37 + 20 >> 2] = 17;
       HEAP32[$37 + 24 >> 2] = HEAP32[$Ss$i >> 2];
       HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAP32[$Se$i >> 2];
       HEAP32[(HEAP32[$cinfo >> 2] | 0) + 32 >> 2] = HEAP32[$Ah$i >> 2];
       HEAP32[(HEAP32[$cinfo >> 2] | 0) + 36 >> 2] = HEAP32[$Al$i >> 2];
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
       $47 = HEAP32[$block_size$i >> 2] | 0;
       $48 = HEAP32[$num_components$i >> 2] | 0;
       break L35;
      }
     } while (0);
    } else label = 22; while (0);
    if ((label | 0) == 22) {
     label = 0;
     HEAP32[$block_size$i >> 2] = 8;
     HEAP32[$natural_order$i >> 2] = 544;
     HEAP32[$lim_Se$i >> 2] = 63;
     $47 = 8;
     $48 = $85;
    }
    HEAP32[$min_DCT_h_scaled_size$i >> 2] = $47;
    HEAP32[$min_DCT_v_scaled_size$i >> 2] = $47;
    if (($48 | 0) > 0) {
     $50 = $47;
     $ci$1163$i = 0;
     $compptr$1164$i = HEAP32[$comp_info$i >> 2] | 0;
     while (1) {
      HEAP32[$compptr$1164$i + 36 >> 2] = $50;
      HEAP32[$compptr$1164$i + 40 >> 2] = $50;
      $h_samp_factor174$i = $compptr$1164$i + 8 | 0;
      $mul$i = Math_imul(HEAP32[$h_samp_factor174$i >> 2] | 0, HEAP32[$image_width$i >> 2] | 0) | 0;
      $call$i = _jdiv_round_up($mul$i, Math_imul(HEAP32[$max_h_samp_factor$i >> 2] | 0, $50) | 0) | 0;
      HEAP32[$compptr$1164$i + 28 >> 2] = $call$i;
      $v_samp_factor179$i = $compptr$1164$i + 12 | 0;
      $mul180$i = Math_imul(HEAP32[$v_samp_factor179$i >> 2] | 0, HEAP32[$image_height$i >> 2] | 0) | 0;
      $call184$i = _jdiv_round_up($mul180$i, Math_imul(HEAP32[$block_size$i >> 2] | 0, HEAP32[$max_v_samp_factor$i >> 2] | 0) | 0) | 0;
      HEAP32[$compptr$1164$i + 32 >> 2] = $call184$i;
      $mul187$i = Math_imul(HEAP32[$h_samp_factor174$i >> 2] | 0, HEAP32[$image_width$i >> 2] | 0) | 0;
      $call189$i = _jdiv_round_up($mul187$i, HEAP32[$max_h_samp_factor$i >> 2] | 0) | 0;
      HEAP32[$compptr$1164$i + 44 >> 2] = $call189$i;
      $mul192$i = Math_imul(HEAP32[$v_samp_factor179$i >> 2] | 0, HEAP32[$image_height$i >> 2] | 0) | 0;
      $call194$i = _jdiv_round_up($mul192$i, HEAP32[$max_v_samp_factor$i >> 2] | 0) | 0;
      HEAP32[$compptr$1164$i + 48 >> 2] = $call194$i;
      HEAP32[$compptr$1164$i + 52 >> 2] = 1;
      HEAP32[$compptr$1164$i + 80 >> 2] = 0;
      $inc196$i = $ci$1163$i + 1 | 0;
      if (($inc196$i | 0) >= (HEAP32[$num_components$i >> 2] | 0)) break;
      $50 = HEAP32[$block_size$i >> 2] | 0;
      $ci$1163$i = $inc196$i;
      $compptr$1164$i = $compptr$1164$i + 88 | 0;
     }
     $67 = HEAP32[$block_size$i >> 2] | 0;
    } else $67 = $47;
    $call203$i = _jdiv_round_up(HEAP32[$image_height$i >> 2] | 0, Math_imul($67, HEAP32[$max_v_samp_factor$i >> 2] | 0) | 0) | 0;
    HEAP32[$total_iMCU_rows$i >> 2] = $call203$i;
    $68 = HEAP32[$comps_in_scan >> 2] | 0;
    if (($68 | 0) >= (HEAP32[$num_components$i >> 2] | 0) ? (HEAP32[$progressive_mode$i >> 2] | 0) == 0 : 0) {
     HEAP32[(HEAP32[$inputctl1 >> 2] | 0) + 16 >> 2] = 0;
     $73 = $68;
     label = 50;
     break L7;
    }
    HEAP32[(HEAP32[$inputctl1 >> 2] | 0) + 16 >> 2] = 1;
    $73 = $68;
    label = 50;
    break;
   }
  default:
   {
    $73 = HEAP32[$comps_in_scan >> 2] | 0;
    label = 50;
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0;
   if ($73 | 0) {
    label = 52;
    break;
   }
   HEAP32[$inheaders >> 2] = 2;
  }
 }
 if ((label | 0) == 52) {
  HEAP32[$inheaders >> 2] = 0;
  $retval$0 = 1;
  return $retval$0 | 0;
 } else if ((label | 0) == 57) {
  _start_input_pass_79($cinfo);
  $retval$0 = 1;
  return $retval$0 | 0;
 } else if ((label | 0) == 58) {
  HEAP32[$eoi_reached >> 2] = 1;
  if (!(HEAP32[$inheaders >> 2] | 0)) {
   $output_scan_number = $cinfo + 152 | 0;
   $84 = HEAP32[$cinfo + 144 >> 2] | 0;
   if ((HEAP32[$output_scan_number >> 2] | 0) <= ($84 | 0)) {
    $retval$0 = 2;
    return $retval$0 | 0;
   }
   HEAP32[$output_scan_number >> 2] = $84;
   $retval$0 = 2;
   return $retval$0 | 0;
  } else {
   if (!(HEAP32[(HEAP32[$marker >> 2] | 0) + 16 >> 2] | 0)) {
    $retval$0 = 2;
    return $retval$0 | 0;
   }
   $81 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$81 + 20 >> 2] = 62;
   FUNCTION_TABLE_vi[HEAP32[$81 >> 2] & 255]($cinfo);
   $retval$0 = 2;
   return $retval$0 | 0;
  }
 } else if ((label | 0) == 63) return $retval$0 | 0;
 return 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[10871] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if ((HEAP32[10872] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[10869] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 43508 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[10867] = HEAP32[10867] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $5 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   } else $fd53$pre$phiZ2D = $5 + 8 | 0;
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$16) {
     $arrayidx100 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($2 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($2 >>> 0 > $11 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if ($9) {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 43772 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[10868] = HEAP32[10868] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ((HEAP32[10871] | 0) >>> 0 <= $9 >>> 0) {
    $arrayidx138 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } else _abort(); while (0);
   $23 = HEAP32[10871] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if ($25) if ((HEAP32[10871] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   } else {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   }
  } else {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[10871] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  if ((HEAP32[10873] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[10870] | 0) + $psize$addr$1 | 0;
   HEAP32[10870] = $add230;
   HEAP32[10873] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[10872] | 0)) return;
   HEAP32[10872] = 0;
   HEAP32[10869] = 0;
   return;
  }
  if ((HEAP32[10872] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[10869] | 0) + $psize$addr$1 | 0;
   HEAP32[10869] = $add248;
   HEAP32[10872] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L99 : do if ($29 >>> 0 >= 256) {
   $40 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $41 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($41 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $45 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$45) {
     $46 = HEAP32[$child358 >> 2] | 0;
     if (!$46) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $46;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $45;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $47 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$47) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $48 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$48) break; else {
       $R328$1$be = $48;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $47;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    if ($28 >>> 0 > $RP357$1 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $42 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($28 >>> 0 > $42 >>> 0) _abort();
    $bk340 = $42 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $41 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $41;
     HEAP32[$fd344 >> 2] = $42;
     $R328$3 = $41;
     break;
    } else _abort();
   } while (0);
   if ($40 | 0) {
    $49 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 43772 + ($49 << 2) | 0;
    do if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[10868] = HEAP32[10868] & ~(1 << $49);
      break L99;
     }
    } else if ((HEAP32[10871] | 0) >>> 0 <= $40 >>> 0) {
     $arrayidx420 = $40 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $40 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break L99; else break;
    } else _abort(); while (0);
    $54 = HEAP32[10871] | 0;
    if ($54 >>> 0 > $R328$3 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $40;
    $child445 = $add$ptr + 16 | 0;
    $55 = HEAP32[$child445 >> 2] | 0;
    do if ($55 | 0) if ($54 >>> 0 > $55 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $56 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($56 | 0) if ((HEAP32[10871] | 0) >>> 0 > $56 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $56;
     HEAP32[$56 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } else {
   $35 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 43508 + ($shr259 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[10867] = HEAP32[10867] & ~(1 << $shr259);
    break;
   }
   if (($36 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $36 >>> 0) _abort();
    $fd307 = $36 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   } else $fd318$pre$phiZ2D = $36 + 8 | 0;
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $35;
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[10872] | 0)) {
   HEAP32[10869] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 43508 + ($shr507 << 1 << 2) | 0;
  $59 = HEAP32[10867] | 0;
  $shl519 = 1 << $shr507;
  if ($59 & $shl519) {
   $60 = $arrayidx516 + 8 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ((HEAP32[10871] | 0) >>> 0 > $61 >>> 0) _abort(); else {
    $$pre$phiZ2D = $60;
    $F517$0 = $61;
   }
  } else {
   HEAP32[10867] = $59 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if ($shr546) if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 } else $I545$0 = 0;
 $arrayidx579 = 43772 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $63 = HEAP32[10868] | 0;
 $shl586 = 1 << $I545$0;
 if (!($63 & $shl586)) {
  HEAP32[10868] = $63 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579 >> 2] | 0;
 L189 : do if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $64; else {
  $K597$013 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$012 = $64;
  while (1) {
   $arrayidx613 = $T$012 + 16 + ($K597$013 >>> 31 << 2) | 0;
   $66 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$66) break;
   if ((HEAP32[$66 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $66;
    break L189;
   } else {
    $K597$013 = $K597$013 << 1;
    $T$012 = $66;
   }
  }
  if ((HEAP32[10871] | 0) >>> 0 > $arrayidx613 >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$012;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $69 = HEAP32[$fd635 >> 2] | 0;
 $70 = HEAP32[10871] | 0;
 if (!($70 >>> 0 <= $69 >>> 0 & $70 >>> 0 <= $T$0$lcssa >>> 0)) _abort();
 HEAP32[$69 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $69;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $16 = 0, $21 = 0, $26 = 0, $29 = 0, $34 = 0, $4 = 0, $41 = 0, $46 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i101 = 0, $__cap_$i$i$i$i$i133 = 0, $__cap_$i$i$i$i$i159 = 0, $__cap_$i$i$i$i$i191 = 0, $__cap_$i$i$i$i$i217 = 0, $__cap_$i$i$i$i$i43 = 0, $__cap_$i$i$i$i$i75 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i106 = 0, $__i$0$i$i$i138 = 0, $__i$0$i$i$i164 = 0, $__i$0$i$i$i196 = 0, $__i$0$i$i$i222 = 0, $__i$0$i$i$i48 = 0, $__i$0$i$i$i80 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i124 = 0, $__size_$i1$i$i$i$i150 = 0, $__size_$i1$i$i$i$i182 = 0, $__size_$i1$i$i$i$i208 = 0, $__size_$i1$i$i$i$i34 = 0, $__size_$i1$i$i$i$i66 = 0, $__size_$i1$i$i$i$i92 = 0, $call$i = 0, $call$i116 = 0, $call$i173 = 0, $call$i176 = 0, $call$i57 = 0, $call$i60 = 0, $ref$tmp$i$i$i$i205 = 0, $ref$tmp1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i205 = sp + 12 | 0;
 $ref$tmp1 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43272) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i205, $call$i);
  $1 = HEAP32[$ref$tmp$i$i$i$i205 >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 255]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i = $__nsn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $4 = HEAP32[$__nsn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i205);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__nsn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 255]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i34 = $__psn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i34 >> 0] | 0) < 0) {
   $9 = HEAP32[$__psn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($9, $ref$tmp$i$i$i$i205);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i34 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i43 = $__psn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i43 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i43 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i34 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i48 = 0;
  while (1) {
   if (($__i$0$i$i$i48 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i48 << 2) >> 2] = 0;
   $__i$0$i$i$i48 = $__i$0$i$i$i48 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $call$i57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP8[$__dp >> 0] = $call$i57;
  $call$i60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  HEAP8[$__ts >> 0] = $call$i60;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 255]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i66 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i66 >> 0] | 0) < 0) {
   $16 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($16, $ref$tmp$i$i$i$i205);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i66 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i75 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i75 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i75 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i66 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i80 = 0;
  while (1) {
   if (($__i$0$i$i$i80 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i80 << 2) >> 2] = 0;
   $__i$0$i$i$i80 = $__i$0$i$i$i80 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 255]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i92 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i92 >> 0] | 0) < 0) {
   $21 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($21, $ref$tmp$i$i$i$i205);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i92 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i101 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i101 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i101 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i92 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i106 = 0;
  while (1) {
   if (($__i$0$i$i$i106 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i106 << 2) >> 2] = 0;
   $__i$0$i$i$i106 = $__i$0$i$i$i106 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i116 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43264) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i205, $call$i116);
  $26 = HEAP32[$ref$tmp$i$i$i$i205 >> 2] | 0;
  HEAP8[$__pat >> 0] = $26;
  HEAP8[$__pat + 1 >> 0] = $26 >> 8;
  HEAP8[$__pat + 2 >> 0] = $26 >> 16;
  HEAP8[$__pat + 3 >> 0] = $26 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 32 >> 2] & 255]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i124 = $__nsn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i124 >> 0] | 0) < 0) {
   $29 = HEAP32[$__nsn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($29, $ref$tmp$i$i$i$i205);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i124 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i133 = $__nsn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i133 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i133 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i124 >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i138 = 0;
  while (1) {
   if (($__i$0$i$i$i138 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i138 << 2) >> 2] = 0;
   $__i$0$i$i$i138 = $__i$0$i$i$i138 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 28 >> 2] & 255]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i150 = $__psn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i150 >> 0] | 0) < 0) {
   $34 = HEAP32[$__psn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($34, $ref$tmp$i$i$i$i205);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i150 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i159 = $__psn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i159 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i159 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i150 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i164 = 0;
  while (1) {
   if (($__i$0$i$i$i164 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i164 << 2) >> 2] = 0;
   $__i$0$i$i$i164 = $__i$0$i$i$i164 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $call$i173 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 12 >> 2] & 127]($call$i116) | 0;
  HEAP8[$__dp >> 0] = $call$i173;
  $call$i176 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 16 >> 2] & 127]($call$i116) | 0;
  HEAP8[$__ts >> 0] = $call$i176;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 20 >> 2] & 255]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i182 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i182 >> 0] | 0) < 0) {
   $41 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($41, $ref$tmp$i$i$i$i205);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i182 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i191 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i191 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i191 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i182 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i196 = 0;
  while (1) {
   if (($__i$0$i$i$i196 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i196 << 2) >> 2] = 0;
   $__i$0$i$i$i196 = $__i$0$i$i$i196 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 24 >> 2] & 255]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i208 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i208 >> 0] | 0) < 0) {
   $46 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($46, $ref$tmp$i$i$i$i205);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i208 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i217 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i217 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i217 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i208 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i222 = 0;
  while (1) {
   if (($__i$0$i$i$i222 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i222 << 2) >> 2] = 0;
   $__i$0$i$i$i222 = $__i$0$i$i$i222 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 36 >> 2] & 127]($call$i116) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _decompress_smooth_data($cinfo, $output_buf) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 var $0 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $38 = 0, $40 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $8 = 0, $9 = 0, $DC1$0231 = 0, $DC1$0231$phi = 0, $DC2$0232 = 0, $DC3$1 = 0, $DC4$0233 = 0, $DC4$0233$phi = 0, $DC5$0234 = 0, $DC6$1 = 0, $DC7$0235 = 0, $DC7$0235$phi = 0, $DC8$0236 = 0, $DC9$1 = 0, $DCT_h_scaled_size = 0, $DCT_v_scaled_size = 0, $Ss = 0, $access_rows$0 = 0, $add$ptr45 = 0, $arrayidx115 = 0, $arrayidx119 = 0, $arrayidx162 = 0, $arrayidx166 = 0, $arrayidx211 = 0, $arrayidx215 = 0, $arrayidx262 = 0, $arrayidx266 = 0, $arrayidx313 = 0, $arrayidx317 = 0, $block_num$0230 = 0, $block_row$0239 = 0, $block_rows$1 = 0, $buffer$0 = 0, $buffer_ptr$0229 = 0, $call35 = 0, $ci$0242 = 0, $coef_bits_latch = 0, $compptr$0241 = 0, $conv = 0, $conv49 = 0, $conv52 = 0, $conv55 = 0, $conv58 = 0, $conv61 = 0, $conv90 = 0, $conv93 = 0, $conv96 = 0, $div = 0, $div146 = 0, $div180 = 0, $div195 = 0, $div231 = 0, $div246 = 0, $div282 = 0, $div297 = 0, $div333 = 0, $div348 = 0, $first_row$0 = 0, $idct = 0, $inc377 = 0, $input_iMCU_row = 0, $input_scan_number = 0, $inputctl = 0, $last_row$0 = 0, $mem38 = 0, $mul124 = 0, $mul126 = 0, $mul173 = 0, $mul220 = 0, $mul224 = 0, $mul271 = 0, $mul275 = 0, $mul326 = 0, $mul34 = 0, $next_block_row$0 = 0, $next_block_row$1227 = 0, $num_components = 0, $output_col$0226 = 0, $output_iMCU_row = 0, $output_iMCU_row17 = 0, $output_iMCU_row376$pre$phiZ2D = 0, $output_ptr$0238 = 0, $output_scan_number = 0, $pred$1 = 0, $pred$3 = 0, $pred$5 = 0, $pred$7 = 0, $pred$9 = 0, $prev_block_row$0 = 0, $prev_block_row$1228 = 0, $rem = 0, $retval$0 = 0, $shl = 0, $shl131 = 0, $shl135 = 0, $shl150 = 0, $shl177 = 0, $shl179 = 0, $shl184 = 0, $shl199 = 0, $shl228 = 0, $shl230 = 0, $shl235 = 0, $shl250 = 0, $shl279 = 0, $shl281 = 0, $shl286 = 0, $shl301 = 0, $shl330 = 0, $shl332 = 0, $shl337 = 0, $shl352 = 0, $spec$select = 0, $sub = 0, $sub80 = 0, $sub97 = 0, $tobool70 = 0, $tobool78 = 0, $total_iMCU_rows = 0, $width_in_blocks = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 452 >> 2] | 0;
 $total_iMCU_rows = $cinfo + 332 | 0;
 $sub = (HEAP32[$total_iMCU_rows >> 2] | 0) + -1 | 0;
 $input_scan_number = $cinfo + 144 | 0;
 $2 = HEAP32[$input_scan_number >> 2] | 0;
 $output_scan_number = $cinfo + 152 | 0;
 $3 = HEAP32[$output_scan_number >> 2] | 0;
 L1 : do if (($2 | 0) <= ($3 | 0)) {
  $inputctl = $cinfo + 460 | 0;
  $Ss = $cinfo + 412 | 0;
  $input_iMCU_row = $cinfo + 148 | 0;
  $output_iMCU_row = $cinfo + 156 | 0;
  $8 = $2;
  $9 = $3;
  while (1) {
   $6 = HEAP32[$inputctl >> 2] | 0;
   if (HEAP32[$6 + 20 >> 2] | 0) break L1;
   if (($8 | 0) == ($9 | 0) ? (HEAP32[$input_iMCU_row >> 2] | 0) >>> 0 > ((HEAP32[$output_iMCU_row >> 2] | 0) + ((HEAP32[$Ss >> 2] | 0) == 0 & 1) | 0) >>> 0 : 0) break L1;
   if (!(FUNCTION_TABLE_ii[HEAP32[$6 >> 2] & 127]($cinfo) | 0)) {
    $retval$0 = 0;
    break;
   }
   $8 = HEAP32[$input_scan_number >> 2] | 0;
   $9 = HEAP32[$output_scan_number >> 2] | 0;
   if (($8 | 0) > ($9 | 0)) break L1;
  }
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) > 0) {
  $output_iMCU_row17 = $cinfo + 156 | 0;
  $mem38 = $cinfo + 4 | 0;
  $coef_bits_latch = $0 + 112 | 0;
  $idct = $cinfo + 472 | 0;
  $arrayidx119 = $workspace + 2 | 0;
  $arrayidx166 = $workspace + 16 | 0;
  $arrayidx215 = $workspace + 32 | 0;
  $arrayidx266 = $workspace + 18 | 0;
  $arrayidx317 = $workspace + 4 | 0;
  $ci$0242 = 0;
  $compptr$0241 = HEAP32[$cinfo + 216 >> 2] | 0;
  while (1) {
   if (HEAP32[$compptr$0241 + 52 >> 2] | 0) {
    $17 = HEAP32[$output_iMCU_row17 >> 2] | 0;
    if ($17 >>> 0 < $sub >>> 0) {
     $18 = HEAP32[$compptr$0241 + 12 >> 2] | 0;
     $21 = $18;
     $access_rows$0 = $18 << 1;
     $block_rows$1 = $18;
     $last_row$0 = 0;
    } else {
     $20 = HEAP32[$compptr$0241 + 12 >> 2] | 0;
     $rem = ((HEAP32[$compptr$0241 + 32 >> 2] | 0) >>> 0) % ($20 >>> 0) | 0;
     $spec$select = ($rem | 0) == 0 ? $20 : $rem;
     $21 = $20;
     $access_rows$0 = $spec$select;
     $block_rows$1 = $spec$select;
     $last_row$0 = 1;
    }
    if (!$17) {
     $buffer$0 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$mem38 >> 2] | 0) + 32 >> 2] & 31]($cinfo, HEAP32[$0 + 72 + ($ci$0242 << 2) >> 2] | 0, 0, $access_rows$0, 0) | 0;
     $first_row$0 = 1;
    } else {
     $mul34 = Math_imul($21, $17 + -1 | 0) | 0;
     $call35 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$mem38 >> 2] | 0) + 32 >> 2] & 31]($cinfo, HEAP32[$0 + 72 + ($ci$0242 << 2) >> 2] | 0, $mul34, $21 + $access_rows$0 | 0, 0) | 0;
     $buffer$0 = $call35 + (HEAP32[$compptr$0241 + 12 >> 2] << 2) | 0;
     $first_row$0 = 0;
    }
    $add$ptr45 = (HEAP32[$coef_bits_latch >> 2] | 0) + ($ci$0242 * 6 << 2) | 0;
    $30 = HEAP32[$compptr$0241 + 80 >> 2] | 0;
    $conv = HEAPU16[$30 >> 1] | 0;
    $conv49 = HEAPU16[$30 + 2 >> 1] | 0;
    $conv52 = HEAPU16[$30 + 16 >> 1] | 0;
    $conv55 = HEAPU16[$30 + 32 >> 1] | 0;
    $conv58 = HEAPU16[$30 + 18 >> 1] | 0;
    $conv61 = HEAPU16[$30 + 4 >> 1] | 0;
    $38 = HEAP32[(HEAP32[$idct >> 2] | 0) + 4 + ($ci$0242 << 2) >> 2] | 0;
    if (($block_rows$1 | 0) > 0) {
     $tobool70 = ($first_row$0 | 0) != 0;
     $tobool78 = ($last_row$0 | 0) != 0;
     $sub80 = $block_rows$1 + -1 | 0;
     $width_in_blocks = $compptr$0241 + 28 | 0;
     $arrayidx115 = $add$ptr45 + 4 | 0;
     $arrayidx162 = $add$ptr45 + 8 | 0;
     $arrayidx211 = $add$ptr45 + 12 | 0;
     $mul124 = $conv * 36 | 0;
     $shl = $conv49 << 7;
     $arrayidx262 = $add$ptr45 + 16 | 0;
     $shl177 = $conv52 << 7;
     $shl131 = $conv49 << 8;
     $arrayidx313 = $add$ptr45 + 20 | 0;
     $mul220 = $conv * 9 | 0;
     $shl228 = $conv55 << 7;
     $shl179 = $conv52 << 8;
     $DCT_h_scaled_size = $compptr$0241 + 36 | 0;
     $mul271 = $conv * 5 | 0;
     $shl279 = $conv58 << 7;
     $shl230 = $conv55 << 8;
     $shl330 = $conv61 << 7;
     $shl281 = $conv58 << 8;
     $shl332 = $conv61 << 8;
     $DCT_v_scaled_size = $compptr$0241 + 40 | 0;
     $block_row$0239 = 0;
     $output_ptr$0238 = HEAP32[$output_buf + ($ci$0242 << 2) >> 2] | 0;
     while (1) {
      $40 = HEAP32[$buffer$0 + ($block_row$0239 << 2) >> 2] | 0;
      if ($tobool70 & ($block_row$0239 | 0) == 0) $prev_block_row$0 = $40; else $prev_block_row$0 = HEAP32[$buffer$0 + ($block_row$0239 + -1 << 2) >> 2] | 0;
      if ($tobool78 & ($block_row$0239 | 0) == ($sub80 | 0)) $next_block_row$0 = $40; else $next_block_row$0 = HEAP32[$buffer$0 + ($block_row$0239 + 1 << 2) >> 2] | 0;
      $conv90 = HEAP16[$prev_block_row$0 >> 1] | 0;
      $conv93 = HEAP16[$40 >> 1] | 0;
      $conv96 = HEAP16[$next_block_row$0 >> 1] | 0;
      $sub97 = (HEAP32[$width_in_blocks >> 2] | 0) + -1 | 0;
      $DC1$0231 = $conv90;
      $DC2$0232 = $conv90;
      $DC4$0233 = $conv93;
      $DC5$0234 = $conv93;
      $DC7$0235 = $conv96;
      $DC8$0236 = $conv96;
      $block_num$0230 = 0;
      $buffer_ptr$0229 = $40;
      $next_block_row$1227 = $next_block_row$0;
      $output_col$0226 = 0;
      $prev_block_row$1228 = $prev_block_row$0;
      while (1) {
       _jcopy_block_row($buffer_ptr$0229, $workspace, 1);
       if ($block_num$0230 >>> 0 < $sub97 >>> 0) {
        $DC3$1 = HEAP16[$prev_block_row$1228 + 128 >> 1] | 0;
        $DC6$1 = HEAP16[$buffer_ptr$0229 + 128 >> 1] | 0;
        $DC9$1 = HEAP16[$next_block_row$1227 + 128 >> 1] | 0;
       } else {
        $DC3$1 = $DC2$0232;
        $DC6$1 = $DC5$0234;
        $DC9$1 = $DC8$0236;
       }
       $50 = HEAP32[$arrayidx115 >> 2] | 0;
       if (($50 | 0) != 0 & (HEAP16[$arrayidx119 >> 1] | 0) == 0) {
        $mul126 = Math_imul($mul124, $DC4$0233 - $DC6$1 | 0) | 0;
        if (($mul126 | 0) > -1) {
         $div = ($mul126 + $shl | 0) / ($shl131 | 0) | 0;
         $shl135 = 1 << $50;
         $pred$1 = ($50 | 0) > 0 ? (($div | 0) < ($shl135 | 0) ? $div : $shl135 + -1 | 0) : $div;
        } else {
         $div146 = ($shl - $mul126 | 0) / ($shl131 | 0) | 0;
         $shl150 = 1 << $50;
         $pred$1 = 0 - (($50 | 0) > 0 ? (($div146 | 0) < ($shl150 | 0) ? $div146 : $shl150 + -1 | 0) : $div146) | 0;
        }
        HEAP16[$arrayidx119 >> 1] = $pred$1;
       }
       $52 = HEAP32[$arrayidx162 >> 2] | 0;
       if (($52 | 0) != 0 & (HEAP16[$arrayidx166 >> 1] | 0) == 0) {
        $mul173 = Math_imul($mul124, $DC2$0232 - $DC8$0236 | 0) | 0;
        if (($mul173 | 0) > -1) {
         $div180 = ($mul173 + $shl177 | 0) / ($shl179 | 0) | 0;
         $shl184 = 1 << $52;
         $pred$3 = ($52 | 0) > 0 ? (($div180 | 0) < ($shl184 | 0) ? $div180 : $shl184 + -1 | 0) : $div180;
        } else {
         $div195 = ($shl177 - $mul173 | 0) / ($shl179 | 0) | 0;
         $shl199 = 1 << $52;
         $pred$3 = 0 - (($52 | 0) > 0 ? (($div195 | 0) < ($shl199 | 0) ? $div195 : $shl199 + -1 | 0) : $div195) | 0;
        }
        HEAP16[$arrayidx166 >> 1] = $pred$3;
       }
       $54 = HEAP32[$arrayidx211 >> 2] | 0;
       if (($54 | 0) != 0 & (HEAP16[$arrayidx215 >> 1] | 0) == 0) {
        $mul224 = Math_imul($mul220, $DC2$0232 - ($DC5$0234 << 1) + $DC8$0236 | 0) | 0;
        if (($mul224 | 0) > -1) {
         $div231 = ($mul224 + $shl228 | 0) / ($shl230 | 0) | 0;
         $shl235 = 1 << $54;
         $pred$5 = ($54 | 0) > 0 ? (($div231 | 0) < ($shl235 | 0) ? $div231 : $shl235 + -1 | 0) : $div231;
        } else {
         $div246 = ($shl228 - $mul224 | 0) / ($shl230 | 0) | 0;
         $shl250 = 1 << $54;
         $pred$5 = 0 - (($54 | 0) > 0 ? (($div246 | 0) < ($shl250 | 0) ? $div246 : $shl250 + -1 | 0) : $div246) | 0;
        }
        HEAP16[$arrayidx215 >> 1] = $pred$5;
       }
       $56 = HEAP32[$arrayidx262 >> 2] | 0;
       if (($56 | 0) != 0 & (HEAP16[$arrayidx266 >> 1] | 0) == 0) {
        $mul275 = Math_imul($mul271, $DC1$0231 - $DC7$0235 - $DC3$1 + $DC9$1 | 0) | 0;
        if (($mul275 | 0) > -1) {
         $div282 = ($mul275 + $shl279 | 0) / ($shl281 | 0) | 0;
         $shl286 = 1 << $56;
         $pred$7 = ($56 | 0) > 0 ? (($div282 | 0) < ($shl286 | 0) ? $div282 : $shl286 + -1 | 0) : $div282;
        } else {
         $div297 = ($shl279 - $mul275 | 0) / ($shl281 | 0) | 0;
         $shl301 = 1 << $56;
         $pred$7 = 0 - (($56 | 0) > 0 ? (($div297 | 0) < ($shl301 | 0) ? $div297 : $shl301 + -1 | 0) : $div297) | 0;
        }
        HEAP16[$arrayidx266 >> 1] = $pred$7;
       }
       $58 = HEAP32[$arrayidx313 >> 2] | 0;
       if (($58 | 0) != 0 & (HEAP16[$arrayidx317 >> 1] | 0) == 0) {
        $mul326 = Math_imul($mul220, $DC4$0233 - ($DC5$0234 << 1) + $DC6$1 | 0) | 0;
        if (($mul326 | 0) > -1) {
         $div333 = ($mul326 + $shl330 | 0) / ($shl332 | 0) | 0;
         $shl337 = 1 << $58;
         $pred$9 = ($58 | 0) > 0 ? (($div333 | 0) < ($shl337 | 0) ? $div333 : $shl337 + -1 | 0) : $div333;
        } else {
         $div348 = ($shl330 - $mul326 | 0) / ($shl332 | 0) | 0;
         $shl352 = 1 << $58;
         $pred$9 = 0 - (($58 | 0) > 0 ? (($div348 | 0) < ($shl352 | 0) ? $div348 : $shl352 + -1 | 0) : $div348) | 0;
        }
        HEAP16[$arrayidx317 >> 1] = $pred$9;
       }
       FUNCTION_TABLE_viiiii[$38 & 63]($cinfo, $compptr$0241, $workspace, $output_ptr$0238, $output_col$0226);
       $block_num$0230 = $block_num$0230 + 1 | 0;
       if ($block_num$0230 >>> 0 > $sub97 >>> 0) break; else {
        $DC7$0235$phi = $DC8$0236;
        $DC4$0233$phi = $DC5$0234;
        $DC1$0231$phi = $DC2$0232;
        $DC2$0232 = $DC3$1;
        $DC5$0234 = $DC6$1;
        $DC8$0236 = $DC9$1;
        $buffer_ptr$0229 = $buffer_ptr$0229 + 128 | 0;
        $next_block_row$1227 = $next_block_row$1227 + 128 | 0;
        $output_col$0226 = (HEAP32[$DCT_h_scaled_size >> 2] | 0) + $output_col$0226 | 0;
        $prev_block_row$1228 = $prev_block_row$1228 + 128 | 0;
        $DC7$0235 = $DC7$0235$phi;
        $DC4$0233 = $DC4$0233$phi;
        $DC1$0231 = $DC1$0231$phi;
       }
      }
      $block_row$0239 = $block_row$0239 + 1 | 0;
      if (($block_row$0239 | 0) == ($block_rows$1 | 0)) break; else $output_ptr$0238 = $output_ptr$0238 + (HEAP32[$DCT_v_scaled_size >> 2] << 2) | 0;
     }
    }
   }
   $ci$0242 = $ci$0242 + 1 | 0;
   if (($ci$0242 | 0) >= (HEAP32[$num_components >> 2] | 0)) {
    $output_iMCU_row376$pre$phiZ2D = $output_iMCU_row17;
    break;
   } else $compptr$0241 = $compptr$0241 + 88 | 0;
  }
 } else $output_iMCU_row376$pre$phiZ2D = $cinfo + 156 | 0;
 $inc377 = (HEAP32[$output_iMCU_row376$pre$phiZ2D >> 2] | 0) + 1 | 0;
 HEAP32[$output_iMCU_row376$pre$phiZ2D >> 2] = $inc377;
 $retval$0 = $inc377 >>> 0 < (HEAP32[$total_iMCU_rows >> 2] | 0) >>> 0 ? 3 : 4;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $30 = 0, $37 = 0, $7 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp19 = 0, $agg$tmp24 = 0, $agg$tmp25 = 0, $agg$tmp29 = 0, $agg$tmp3 = 0, $agg$tmp32 = 0, $agg$tmp34 = 0, $agg$tmp37 = 0, $agg$tmp39 = 0, $agg$tmp41 = 0, $agg$tmp44 = 0, $agg$tmp47 = 0, $agg$tmp48 = 0, $agg$tmp53 = 0, $agg$tmp54 = 0, $agg$tmp58 = 0, $agg$tmp61 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp7 = 0, $agg$tmp71 = 0, $agg$tmp72 = 0, $agg$tmp8 = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp91 = 0, $agg$tmp94 = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call13 = 0, $call20 = 0, $call26 = 0, $call49 = 0, $call5 = 0, $call55 = 0, $call63 = 0, $call80 = 0, $call88 = 0, $cond$i$i103123 = 0, $cond$i$i87117 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $agg$tmp96$byval_copy = sp + 128 | 0;
 $agg$tmp82$byval_copy = sp + 112 | 0;
 $agg$tmp = sp + 124 | 0;
 $agg$tmp3 = sp + 120 | 0;
 $agg$tmp7 = sp + 116 | 0;
 $agg$tmp8 = sp + 108 | 0;
 $agg$tmp15 = sp + 104 | 0;
 $agg$tmp18 = sp + 100 | 0;
 $agg$tmp19 = sp + 96 | 0;
 $agg$tmp24 = sp + 92 | 0;
 $agg$tmp25 = sp + 88 | 0;
 $agg$tmp29 = sp + 84 | 0;
 $agg$tmp32 = sp + 80 | 0;
 $agg$tmp34 = sp + 76 | 0;
 $agg$tmp37 = sp + 72 | 0;
 $agg$tmp39 = sp + 68 | 0;
 $agg$tmp41 = sp + 64 | 0;
 $agg$tmp44 = sp + 60 | 0;
 $agg$tmp47 = sp + 56 | 0;
 $agg$tmp48 = sp + 52 | 0;
 $agg$tmp53 = sp + 48 | 0;
 $agg$tmp54 = sp + 44 | 0;
 $agg$tmp58 = sp + 40 | 0;
 $agg$tmp61 = sp + 36 | 0;
 $agg$tmp62 = sp + 32 | 0;
 $agg$tmp67 = sp + 28 | 0;
 $agg$tmp71 = sp + 24 | 0;
 $agg$tmp72 = sp + 20 | 0;
 $agg$tmp82 = sp + 16 | 0;
 $agg$tmp83 = sp + 12 | 0;
 $agg$tmp91 = sp + 8 | 0;
 $agg$tmp94 = sp + 4 | 0;
 $agg$tmp96 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp96$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp96$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp96$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$agg$tmp3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 127]($add$ptr) | 0;
   HEAP32[$agg$tmp7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp8 >> 2] = HEAP32[$__e >> 2];
   $7 = HEAP8[$call5 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   $cond$i$i87117 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   $add$ptr12 = $cond$i$i87117 + (($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $7 & 255) << 2) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
   $call13 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i87117, $add$ptr12) | 0;
   HEAP32[$__b >> 2] = $call13;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$agg$tmp15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
   $call20 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 10944, 10976) | 0;
   HEAP32[$__b >> 2] = $call20;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$agg$tmp24 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   $call26 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 10976, 11008) | 0;
   HEAP32[$__b >> 2] = $call26;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$agg$tmp29 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp29 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$agg$tmp32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$agg$tmp34 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp34 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$agg$tmp37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$agg$tmp39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$agg$tmp41 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp41 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$agg$tmp44 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp44 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$agg$tmp47 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp48 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
   $call49 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 11008, 11052) | 0;
   HEAP32[$__b >> 2] = $call49;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$agg$tmp53 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp54 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp53 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
   $call55 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 11056, 11076) | 0;
   HEAP32[$__b >> 2] = $call55;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$agg$tmp58 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp58 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$agg$tmp61 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp62 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp61 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
   $call63 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 11088, 11120) | 0;
   HEAP32[$__b >> 2] = $call63;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$agg$tmp67 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $30 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$30 & 63]($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 127]($add$ptr77) | 0;
   HEAP32[$agg$tmp82 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp83 >> 2] = HEAP32[$__e >> 2];
   $37 = HEAP8[$call80 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i90 = $37 << 24 >> 24 < 0;
   $cond$i$i103123 = $tobool$i$i$i90 ? HEAP32[$call80 >> 2] | 0 : $call80;
   $add$ptr87 = $cond$i$i103123 + (($tobool$i$i$i90 ? HEAP32[$call80 + 4 >> 2] | 0 : $37 & 255) << 2) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp83 >> 2];
   $call88 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i103123, $add$ptr87) | 0;
   HEAP32[$__b >> 2] = $call88;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$agg$tmp91 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp91 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$agg$tmp94 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp94 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$agg$tmp96 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp96 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $29 = 0, $35 = 0, $6 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp19 = 0, $agg$tmp24 = 0, $agg$tmp25 = 0, $agg$tmp29 = 0, $agg$tmp3 = 0, $agg$tmp32 = 0, $agg$tmp34 = 0, $agg$tmp37 = 0, $agg$tmp39 = 0, $agg$tmp41 = 0, $agg$tmp44 = 0, $agg$tmp47 = 0, $agg$tmp48 = 0, $agg$tmp53 = 0, $agg$tmp54 = 0, $agg$tmp58 = 0, $agg$tmp61 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp7 = 0, $agg$tmp71 = 0, $agg$tmp72 = 0, $agg$tmp8 = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp91 = 0, $agg$tmp94 = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call13 = 0, $call20 = 0, $call26 = 0, $call49 = 0, $call5 = 0, $call55 = 0, $call63 = 0, $call80 = 0, $call88 = 0, $cond$i$i106127 = 0, $cond$i$i88121 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $agg$tmp96$byval_copy = sp + 128 | 0;
 $agg$tmp82$byval_copy = sp + 112 | 0;
 $agg$tmp = sp + 124 | 0;
 $agg$tmp3 = sp + 120 | 0;
 $agg$tmp7 = sp + 116 | 0;
 $agg$tmp8 = sp + 108 | 0;
 $agg$tmp15 = sp + 104 | 0;
 $agg$tmp18 = sp + 100 | 0;
 $agg$tmp19 = sp + 96 | 0;
 $agg$tmp24 = sp + 92 | 0;
 $agg$tmp25 = sp + 88 | 0;
 $agg$tmp29 = sp + 84 | 0;
 $agg$tmp32 = sp + 80 | 0;
 $agg$tmp34 = sp + 76 | 0;
 $agg$tmp37 = sp + 72 | 0;
 $agg$tmp39 = sp + 68 | 0;
 $agg$tmp41 = sp + 64 | 0;
 $agg$tmp44 = sp + 60 | 0;
 $agg$tmp47 = sp + 56 | 0;
 $agg$tmp48 = sp + 52 | 0;
 $agg$tmp53 = sp + 48 | 0;
 $agg$tmp54 = sp + 44 | 0;
 $agg$tmp58 = sp + 40 | 0;
 $agg$tmp61 = sp + 36 | 0;
 $agg$tmp62 = sp + 32 | 0;
 $agg$tmp67 = sp + 28 | 0;
 $agg$tmp71 = sp + 24 | 0;
 $agg$tmp72 = sp + 20 | 0;
 $agg$tmp82 = sp + 16 | 0;
 $agg$tmp83 = sp + 12 | 0;
 $agg$tmp91 = sp + 8 | 0;
 $agg$tmp94 = sp + 4 | 0;
 $agg$tmp96 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp96$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp96$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp96$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$agg$tmp3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 127]($add$ptr) | 0;
   HEAP32[$agg$tmp7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp8 >> 2] = HEAP32[$__e >> 2];
   $6 = HEAP8[$call5 + 11 >> 0] | 0;
   $tobool$i$i$i = $6 << 24 >> 24 < 0;
   $cond$i$i88121 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   $add$ptr12 = $cond$i$i88121 + ($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $6 & 255) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
   $call13 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i88121, $add$ptr12) | 0;
   HEAP32[$__b >> 2] = $call13;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$agg$tmp15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
   $call20 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 36647, 36655) | 0;
   HEAP32[$__b >> 2] = $call20;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$agg$tmp24 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   $call26 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 36655, 36663) | 0;
   HEAP32[$__b >> 2] = $call26;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$agg$tmp29 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp29 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$agg$tmp32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$agg$tmp34 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp34 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$agg$tmp37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$agg$tmp39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$agg$tmp41 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp41 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$agg$tmp44 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp44 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$agg$tmp47 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp48 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
   $call49 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 36663, 36674) | 0;
   HEAP32[$__b >> 2] = $call49;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$agg$tmp53 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp54 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp53 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
   $call55 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 36674, 36679) | 0;
   HEAP32[$__b >> 2] = $call55;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$agg$tmp58 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp58 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$agg$tmp61 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp62 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp61 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
   $call63 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 36679, 36687) | 0;
   HEAP32[$__b >> 2] = $call63;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$agg$tmp67 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $29 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$29 & 63]($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 127]($add$ptr77) | 0;
   HEAP32[$agg$tmp82 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp83 >> 2] = HEAP32[$__e >> 2];
   $35 = HEAP8[$call80 + 11 >> 0] | 0;
   $tobool$i$i$i92 = $35 << 24 >> 24 < 0;
   $cond$i$i106127 = $tobool$i$i$i92 ? HEAP32[$call80 >> 2] | 0 : $call80;
   $add$ptr87 = $cond$i$i106127 + ($tobool$i$i$i92 ? HEAP32[$call80 + 4 >> 2] | 0 : $35 & 255) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp83 >> 2];
   $call88 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i106127, $add$ptr87) | 0;
   HEAP32[$__b >> 2] = $call88;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$agg$tmp91 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp91 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$agg$tmp94 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp94 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$agg$tmp96 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp96 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function _jpeg_idct_4x8($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $$sink = 0, $0 = 0, $101 = 0, $102 = 0, $103 = 0, $115 = 0, $116 = 0, $117 = 0, $129 = 0, $130 = 0, $131 = 0, $17 = 0, $2 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $45 = 0, $46 = 0, $47 = 0, $59 = 0, $60 = 0, $61 = 0, $73 = 0, $74 = 0, $75 = 0, $87 = 0, $88 = 0, $89 = 0, $add = 0, $add$ptr = 0, $add$ptr146 = 0, $add$ptr146$1 = 0, $add$ptr146$2 = 0, $add$ptr146$3 = 0, $add$ptr146$4 = 0, $add$ptr146$5 = 0, $add$ptr146$6 = 0, $add$ptr146$7 = 0, $add103 = 0, $add105 = 0, $add111 = 0, $add113 = 0, $add148 = 0, $add148$1 = 0, $add148$2 = 0, $add148$3 = 0, $add148$4 = 0, $add148$5 = 0, $add148$6 = 0, $add148$7 = 0, $add159 = 0, $add159$1 = 0, $add159$2 = 0, $add159$3 = 0, $add159$4 = 0, $add159$5 = 0, $add159$6 = 0, $add159$7 = 0, $add55 = 0, $add67 = 0, $add70 = 0, $add72 = 0, $add90 = 0, $add91 = 0, $add96 = 0, $add97 = 0, $ctr$0166 = 0, $inptr$0163 = 0, $mul107 = 0, $mul157 = 0, $mul157$1 = 0, $mul157$2 = 0, $mul157$3 = 0, $mul157$4 = 0, $mul157$5 = 0, $mul157$6 = 0, $mul157$7 = 0, $mul59 = 0, $mul63 = 0, $mul65 = 0, $mul77 = 0, $mul81 = 0, $mul85 = 0, $mul89 = 0, $mul93 = 0, $mul99 = 0, $quantptr$0164 = 0, $shl = 0, $shl151 = 0, $shl151$1 = 0, $shl151$2 = 0, $shl151$3 = 0, $shl151$4 = 0, $shl151$5 = 0, $shl151$6 = 0, $shl151$7 = 0, $shl153 = 0, $shl153$1 = 0, $shl153$2 = 0, $shl153$3 = 0, $shl153$4 = 0, $shl153$5 = 0, $shl153$6 = 0, $shl153$7 = 0, $shl54 = 0, $shr135$sink = 0, $sub = 0, $sub161 = 0, $sub161$1 = 0, $sub161$2 = 0, $sub161$3 = 0, $sub161$4 = 0, $sub161$5 = 0, $sub161$6 = 0, $sub161$7 = 0, $sub69 = 0, $sub71 = 0, $sub73 = 0, $workspace = 0, $wsptr$0165 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0166 = 4;
 $inptr$0163 = $coef_block;
 $quantptr$0164 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0165 = $workspace;
 while (1) {
  $2 = HEAP16[$inptr$0163 + 16 >> 1] | 0;
  $3 = HEAP16[$inptr$0163 + 32 >> 1] | 0;
  if (!(($2 | $3) << 16 >> 16)) if (((((HEAP16[$inptr$0163 + 48 >> 1] | 0) == 0 ? (HEAP16[$inptr$0163 + 64 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0163 + 80 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0163 + 96 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0163 + 112 >> 1] | 0) == 0 : 0) {
   $shl = Math_imul(HEAP16[$inptr$0163 >> 1] << 2, HEAP32[$quantptr$0164 >> 2] | 0) | 0;
   HEAP32[$wsptr$0165 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 16 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 32 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 48 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 64 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 80 >> 2] = $shl;
   HEAP32[$wsptr$0165 + 96 >> 2] = $shl;
   $$sink = 28;
   $shr135$sink = $shl;
  } else {
   $17 = 0;
   label = 9;
  } else {
   $17 = $3;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   $shl54 = Math_imul(HEAP16[$inptr$0163 + 64 >> 1] << 13, HEAP32[$quantptr$0164 + 128 >> 2] | 0) | 0;
   $add = Math_imul(HEAP16[$inptr$0163 >> 1] << 13, HEAP32[$quantptr$0164 >> 2] | 0) | 0 | 1024;
   $add55 = $shl54 + $add | 0;
   $sub = $add - $shl54 | 0;
   $mul59 = Math_imul(HEAP32[$quantptr$0164 + 64 >> 2] | 0, $17 << 16 >> 16) | 0;
   $mul63 = Math_imul(HEAP32[$quantptr$0164 + 192 >> 2] | 0, HEAP16[$inptr$0163 + 96 >> 1] | 0) | 0;
   $mul65 = ($mul63 + $mul59 | 0) * 4433 | 0;
   $add67 = $mul65 + ($mul59 * 6270 | 0) | 0;
   $sub69 = $mul65 + (Math_imul($mul63, -15137) | 0) | 0;
   $add70 = $add67 + $add55 | 0;
   $sub71 = $add55 - $add67 | 0;
   $add72 = $sub69 + $sub | 0;
   $sub73 = $sub - $sub69 | 0;
   $mul77 = Math_imul(HEAP32[$quantptr$0164 + 224 >> 2] | 0, HEAP16[$inptr$0163 + 112 >> 1] | 0) | 0;
   $mul81 = Math_imul(HEAP32[$quantptr$0164 + 160 >> 2] | 0, HEAP16[$inptr$0163 + 80 >> 1] | 0) | 0;
   $mul85 = Math_imul(HEAP32[$quantptr$0164 + 96 >> 2] | 0, HEAP16[$inptr$0163 + 48 >> 1] | 0) | 0;
   $mul89 = Math_imul(HEAP32[$quantptr$0164 + 32 >> 2] | 0, $2 << 16 >> 16) | 0;
   $add90 = $mul85 + $mul77 | 0;
   $add91 = $mul89 + $mul81 | 0;
   $mul93 = ($add91 + $add90 | 0) * 9633 | 0;
   $add96 = $mul93 + (Math_imul($add90, -16069) | 0) | 0;
   $add97 = $mul93 + (Math_imul($add91, -3196) | 0) | 0;
   $mul99 = Math_imul($mul89 + $mul77 | 0, -7373) | 0;
   $add103 = $mul99 + ($mul77 * 2446 | 0) + $add96 | 0;
   $add105 = $mul99 + ($mul89 * 12299 | 0) + $add97 | 0;
   $mul107 = Math_imul($mul85 + $mul81 | 0, -20995) | 0;
   $add111 = $mul107 + ($mul81 * 16819 | 0) + $add97 | 0;
   $add113 = $mul107 + ($mul85 * 25172 | 0) + $add96 | 0;
   HEAP32[$wsptr$0165 >> 2] = $add105 + $add70 >> 11;
   HEAP32[$wsptr$0165 + 112 >> 2] = $add70 - $add105 >> 11;
   HEAP32[$wsptr$0165 + 16 >> 2] = $add113 + $add72 >> 11;
   HEAP32[$wsptr$0165 + 96 >> 2] = $add72 - $add113 >> 11;
   HEAP32[$wsptr$0165 + 32 >> 2] = $add111 + $sub73 >> 11;
   HEAP32[$wsptr$0165 + 80 >> 2] = $sub73 - $add111 >> 11;
   HEAP32[$wsptr$0165 + 48 >> 2] = $add103 + $sub71 >> 11;
   $$sink = 16;
   $shr135$sink = $sub71 - $add103 >> 11;
  }
  HEAP32[$wsptr$0165 + ($$sink << 2) >> 2] = $shr135$sink;
  if ($ctr$0166 >>> 0 > 1) {
   $ctr$0166 = $ctr$0166 + -1 | 0;
   $inptr$0163 = $inptr$0163 + 2 | 0;
   $quantptr$0164 = $quantptr$0164 + 4 | 0;
   $wsptr$0165 = $wsptr$0165 + 4 | 0;
  } else break;
 }
 $add$ptr = $0 + -384 | 0;
 $add$ptr146 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $add148 = (HEAP32[$workspace >> 2] | 0) + 16400 | 0;
 $31 = HEAP32[$workspace + 8 >> 2] | 0;
 $shl151 = $add148 + $31 << 13;
 $shl153 = $add148 - $31 << 13;
 $32 = HEAP32[$workspace + 4 >> 2] | 0;
 $33 = HEAP32[$workspace + 12 >> 2] | 0;
 $mul157 = ($33 + $32 | 0) * 4433 | 0;
 $add159 = $mul157 + ($32 * 6270 | 0) | 0;
 $sub161 = $mul157 + (Math_imul($33, -15137) | 0) | 0;
 HEAP8[$add$ptr146 >> 0] = HEAP8[$add$ptr + (($add159 + $shl151 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146 + 3 >> 0] = HEAP8[$add$ptr + (($shl151 - $add159 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146 + 1 >> 0] = HEAP8[$add$ptr + (($sub161 + $shl153 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146 + 2 >> 0] = HEAP8[$add$ptr + (($shl153 - $sub161 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $add148$1 = (HEAP32[$workspace + 16 >> 2] | 0) + 16400 | 0;
 $45 = HEAP32[$workspace + 24 >> 2] | 0;
 $shl151$1 = $add148$1 + $45 << 13;
 $shl153$1 = $add148$1 - $45 << 13;
 $46 = HEAP32[$workspace + 20 >> 2] | 0;
 $47 = HEAP32[$workspace + 28 >> 2] | 0;
 $mul157$1 = ($47 + $46 | 0) * 4433 | 0;
 $add159$1 = $mul157$1 + ($46 * 6270 | 0) | 0;
 $sub161$1 = $mul157$1 + (Math_imul($47, -15137) | 0) | 0;
 HEAP8[$add$ptr146$1 >> 0] = HEAP8[$add$ptr + (($add159$1 + $shl151$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$1 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$1 - $add159$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$1 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$1 + $shl153$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$1 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$1 - $sub161$1 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $add148$2 = (HEAP32[$workspace + 32 >> 2] | 0) + 16400 | 0;
 $59 = HEAP32[$workspace + 40 >> 2] | 0;
 $shl151$2 = $add148$2 + $59 << 13;
 $shl153$2 = $add148$2 - $59 << 13;
 $60 = HEAP32[$workspace + 36 >> 2] | 0;
 $61 = HEAP32[$workspace + 44 >> 2] | 0;
 $mul157$2 = ($61 + $60 | 0) * 4433 | 0;
 $add159$2 = $mul157$2 + ($60 * 6270 | 0) | 0;
 $sub161$2 = $mul157$2 + (Math_imul($61, -15137) | 0) | 0;
 HEAP8[$add$ptr146$2 >> 0] = HEAP8[$add$ptr + (($add159$2 + $shl151$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$2 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$2 - $add159$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$2 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$2 + $shl153$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$2 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$2 - $sub161$2 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$3 = (HEAP32[$output_buf + 12 >> 2] | 0) + $output_col | 0;
 $add148$3 = (HEAP32[$workspace + 48 >> 2] | 0) + 16400 | 0;
 $73 = HEAP32[$workspace + 56 >> 2] | 0;
 $shl151$3 = $add148$3 + $73 << 13;
 $shl153$3 = $add148$3 - $73 << 13;
 $74 = HEAP32[$workspace + 52 >> 2] | 0;
 $75 = HEAP32[$workspace + 60 >> 2] | 0;
 $mul157$3 = ($75 + $74 | 0) * 4433 | 0;
 $add159$3 = $mul157$3 + ($74 * 6270 | 0) | 0;
 $sub161$3 = $mul157$3 + (Math_imul($75, -15137) | 0) | 0;
 HEAP8[$add$ptr146$3 >> 0] = HEAP8[$add$ptr + (($add159$3 + $shl151$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$3 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$3 - $add159$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$3 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$3 + $shl153$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$3 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$3 - $sub161$3 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$4 = (HEAP32[$output_buf + 16 >> 2] | 0) + $output_col | 0;
 $add148$4 = (HEAP32[$workspace + 64 >> 2] | 0) + 16400 | 0;
 $87 = HEAP32[$workspace + 72 >> 2] | 0;
 $shl151$4 = $add148$4 + $87 << 13;
 $shl153$4 = $add148$4 - $87 << 13;
 $88 = HEAP32[$workspace + 68 >> 2] | 0;
 $89 = HEAP32[$workspace + 76 >> 2] | 0;
 $mul157$4 = ($89 + $88 | 0) * 4433 | 0;
 $add159$4 = $mul157$4 + ($88 * 6270 | 0) | 0;
 $sub161$4 = $mul157$4 + (Math_imul($89, -15137) | 0) | 0;
 HEAP8[$add$ptr146$4 >> 0] = HEAP8[$add$ptr + (($add159$4 + $shl151$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$4 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$4 - $add159$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$4 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$4 + $shl153$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$4 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$4 - $sub161$4 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$5 = (HEAP32[$output_buf + 20 >> 2] | 0) + $output_col | 0;
 $add148$5 = (HEAP32[$workspace + 80 >> 2] | 0) + 16400 | 0;
 $101 = HEAP32[$workspace + 88 >> 2] | 0;
 $shl151$5 = $add148$5 + $101 << 13;
 $shl153$5 = $add148$5 - $101 << 13;
 $102 = HEAP32[$workspace + 84 >> 2] | 0;
 $103 = HEAP32[$workspace + 92 >> 2] | 0;
 $mul157$5 = ($103 + $102 | 0) * 4433 | 0;
 $add159$5 = $mul157$5 + ($102 * 6270 | 0) | 0;
 $sub161$5 = $mul157$5 + (Math_imul($103, -15137) | 0) | 0;
 HEAP8[$add$ptr146$5 >> 0] = HEAP8[$add$ptr + (($add159$5 + $shl151$5 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$5 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$5 - $add159$5 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$5 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$5 + $shl153$5 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$5 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$5 - $sub161$5 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$6 = (HEAP32[$output_buf + 24 >> 2] | 0) + $output_col | 0;
 $add148$6 = (HEAP32[$workspace + 96 >> 2] | 0) + 16400 | 0;
 $115 = HEAP32[$workspace + 104 >> 2] | 0;
 $shl151$6 = $add148$6 + $115 << 13;
 $shl153$6 = $add148$6 - $115 << 13;
 $116 = HEAP32[$workspace + 100 >> 2] | 0;
 $117 = HEAP32[$workspace + 108 >> 2] | 0;
 $mul157$6 = ($117 + $116 | 0) * 4433 | 0;
 $add159$6 = $mul157$6 + ($116 * 6270 | 0) | 0;
 $sub161$6 = $mul157$6 + (Math_imul($117, -15137) | 0) | 0;
 HEAP8[$add$ptr146$6 >> 0] = HEAP8[$add$ptr + (($add159$6 + $shl151$6 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$6 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$6 - $add159$6 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$6 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$6 + $shl153$6 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$6 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$6 - $sub161$6 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr146$7 = (HEAP32[$output_buf + 28 >> 2] | 0) + $output_col | 0;
 $add148$7 = (HEAP32[$workspace + 112 >> 2] | 0) + 16400 | 0;
 $129 = HEAP32[$workspace + 120 >> 2] | 0;
 $shl151$7 = $add148$7 + $129 << 13;
 $shl153$7 = $add148$7 - $129 << 13;
 $130 = HEAP32[$workspace + 116 >> 2] | 0;
 $131 = HEAP32[$workspace + 124 >> 2] | 0;
 $mul157$7 = ($131 + $130 | 0) * 4433 | 0;
 $add159$7 = $mul157$7 + ($130 * 6270 | 0) | 0;
 $sub161$7 = $mul157$7 + (Math_imul($131, -15137) | 0) | 0;
 HEAP8[$add$ptr146$7 >> 0] = HEAP8[$add$ptr + (($add159$7 + $shl151$7 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$7 + 3 >> 0] = HEAP8[$add$ptr + (($shl151$7 - $add159$7 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$7 + 1 >> 0] = HEAP8[$add$ptr + (($sub161$7 + $shl153$7 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr146$7 + 2 >> 0] = HEAP8[$add$ptr + (($shl153$7 - $sub161$7 | 0) >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $11 = 0, $18 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i175 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i124 = 0, $__i$0$i$i$i148 = 0, $__i$0$i$i$i180 = 0, $__i$0$i$i$i204 = 0, $__i$0$i$i$i46 = 0, $__i$0$i$i$i71 = 0, $__i$0$i$i$i94 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i111 = 0, $__size_$i1$i$i$i$i135 = 0, $__size_$i1$i$i$i$i166 = 0, $__size_$i1$i$i$i$i191 = 0, $__size_$i1$i$i$i$i33 = 0, $__size_$i1$i$i$i$i63 = 0, $__size_$i1$i$i$i$i81 = 0, $call$i = 0, $call$i104 = 0, $call$i157 = 0, $call$i160 = 0, $call$i55 = 0, $call$i58 = 0, $ref$tmp$i$i$i$i189 = 0, $ref$tmp1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i189 = sp + 12 | 0;
 $ref$tmp1 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43288) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i189, $call$i);
  $1 = HEAP32[$ref$tmp$i$i$i$i189 >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 255]($ref$tmp1, $call$i);
  $3 = $__nsn + 8 | 0;
  $__size_$i1$i$i$i$i = $3 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $5 = HEAP32[$__nsn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($5, $ref$tmp$i$i$i$i189);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$3 >> 2] << 2);
    HEAP32[$3 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 255]($ref$tmp1, $call$i);
  $9 = $__psn + 8 | 0;
  $__size_$i1$i$i$i$i33 = $9 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i33 >> 0] | 0) < 0) {
   $11 = HEAP32[$__psn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($11, $ref$tmp$i$i$i$i189);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i33 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$9 >> 2] << 2);
    HEAP32[$9 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i33 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i46 = 0;
  while (1) {
   if (($__i$0$i$i$i46 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i46 << 2) >> 2] = 0;
   $__i$0$i$i$i46 = $__i$0$i$i$i46 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $call$i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP32[$__dp >> 2] = $call$i55;
  $call$i58 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  HEAP32[$__ts >> 2] = $call$i58;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 255]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i63 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
   $18 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($18, $ref$tmp$i$i$i$i189);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i63 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i71 = 0;
  while (1) {
   if (($__i$0$i$i$i71 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i71 << 2) >> 2] = 0;
   $__i$0$i$i$i71 = $__i$0$i$i$i71 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 255]($ref$tmp1, $call$i);
  $22 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i81 = $22 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
   $24 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($24, $ref$tmp$i$i$i$i189);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$22 >> 2] << 2);
    HEAP32[$22 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i81 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i94 = 0;
  while (1) {
   if (($__i$0$i$i$i94 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i94 << 2) >> 2] = 0;
   $__i$0$i$i$i94 = $__i$0$i$i$i94 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i104 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43280) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 44 >> 2] & 255]($ref$tmp$i$i$i$i189, $call$i104);
  $29 = HEAP32[$ref$tmp$i$i$i$i189 >> 2] | 0;
  HEAP8[$__pat >> 0] = $29;
  HEAP8[$__pat + 1 >> 0] = $29 >> 8;
  HEAP8[$__pat + 2 >> 0] = $29 >> 16;
  HEAP8[$__pat + 3 >> 0] = $29 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 32 >> 2] & 255]($ref$tmp1, $call$i104);
  $31 = $__nsn + 8 | 0;
  $__size_$i1$i$i$i$i111 = $31 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i111 >> 0] | 0) < 0) {
   $33 = HEAP32[$__nsn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($33, $ref$tmp$i$i$i$i189);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i111 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$31 >> 2] << 2);
    HEAP32[$31 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i111 >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i124 = 0;
  while (1) {
   if (($__i$0$i$i$i124 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i124 << 2) >> 2] = 0;
   $__i$0$i$i$i124 = $__i$0$i$i$i124 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 28 >> 2] & 255]($ref$tmp1, $call$i104);
  $37 = $__psn + 8 | 0;
  $__size_$i1$i$i$i$i135 = $37 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
   $39 = HEAP32[$__psn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($39, $ref$tmp$i$i$i$i189);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$37 >> 2] << 2);
    HEAP32[$37 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i135 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i148 = 0;
  while (1) {
   if (($__i$0$i$i$i148 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i148 << 2) >> 2] = 0;
   $__i$0$i$i$i148 = $__i$0$i$i$i148 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $call$i157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 12 >> 2] & 127]($call$i104) | 0;
  HEAP32[$__dp >> 2] = $call$i157;
  $call$i160 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 16 >> 2] & 127]($call$i104) | 0;
  HEAP32[$__ts >> 2] = $call$i160;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 20 >> 2] & 255]($ref$tmp1, $call$i104);
  $__size_$i1$i$i$i$i166 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i166 >> 0] | 0) < 0) {
   $46 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($46, $ref$tmp$i$i$i$i189);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i166 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i175 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i175 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i175 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i166 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i180 = 0;
  while (1) {
   if (($__i$0$i$i$i180 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i180 << 2) >> 2] = 0;
   $__i$0$i$i$i180 = $__i$0$i$i$i180 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 24 >> 2] & 255]($ref$tmp1, $call$i104);
  $50 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i191 = $50 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i191 >> 0] | 0) < 0) {
   $52 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($52, $ref$tmp$i$i$i$i189);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i191 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$50 >> 2] << 2);
    HEAP32[$50 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i191 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i204 = 0;
  while (1) {
   if (($__i$0$i$i$i204 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i204 << 2) >> 2] = 0;
   $__i$0$i$i$i204 = $__i$0$i$i$i204 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 36 >> 2] & 127]($call$i104) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _decode_mcu_AC_refine_65($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $4 = 0, $45 = 0, $46 = 0, $54 = 0, $56 = 0, $EOBRUN$0136 = 0, $EOBRUN$1 = 0, $EOBRUN20 = 0, $add = 0, $add$ptr = 0, $add$ptr164 = 0, $and = 0, $bits_left$0 = 0, $bits_left$1 = 0, $bits_left$10 = 0, $bits_left$11 = 0, $bits_left$12138 = 0, $bits_left$13 = 0, $bits_left$14 = 0, $bits_left$15 = 0, $bits_left$16 = 0, $bits_left$2 = 0, $bits_left$4$ph = 0, $bits_left$5 = 0, $bits_left$6 = 0, $bits_left$7 = 0, $bits_left$8 = 0, $bits_left$9 = 0, $bits_left$i$i = 0, $bits_left19 = 0, $bits_left30 = 0, $br_state = 0, $bytes_in_buffer16 = 0, $call40 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $conv118 = 0, $conv182 = 0, $discarded_bytes$i$i = 0, $get_buffer$0 = 0, $get_buffer$1 = 0, $get_buffer$10 = 0, $get_buffer$11 = 0, $get_buffer$12137 = 0, $get_buffer$13 = 0, $get_buffer$14 = 0, $get_buffer$15 = 0, $get_buffer$16 = 0, $get_buffer$2 = 0, $get_buffer$4$ph = 0, $get_buffer$5 = 0, $get_buffer$6 = 0, $get_buffer$7 = 0, $get_buffer$8 = 0, $get_buffer$9 = 0, $get_buffer17 = 0, $get_buffer29 = 0, $inc = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3139 = 0, $k$4 = 0, $nb$0 = 0, $newnz_pos = 0, $num_newnz$0 = 0, $num_newnz$1 = 0, $num_newnz$2140 = 0, $num_newnz$3 = 0, $num_newnz$4157 = 0, $r$0 = 0, $r$1 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go222 = 0, $retval$0 = 0, $s$2$ph = 0, $s$3 = 0, $shl = 0, $shl11 = 0, $shl79 = 0, $shr49141 = 0, $src = 0, $sub113 = 0, $sub177 = 0, $sub68 = 0, $sub92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $br_state = sp + 256 | 0;
 $newnz_pos = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $4 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $4 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$4 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 do if (!(HEAP32[$0 + 40 >> 2] | 0)) {
  $12 = HEAP32[$cinfo + 416 >> 2] | 0;
  $13 = HEAP32[$cinfo + 424 >> 2] | 0;
  $shl = 1 << $13;
  $shl11 = -1 << $13;
  $14 = HEAP32[$cinfo + 432 >> 2] | 0;
  HEAP32[$br_state + 16 >> 2] = $cinfo;
  $src = $cinfo + 24 | 0;
  $15 = HEAP32[$src >> 2] | 0;
  HEAP32[$br_state >> 2] = HEAP32[$15 >> 2];
  $bytes_in_buffer16 = $br_state + 4 | 0;
  HEAP32[$bytes_in_buffer16 >> 2] = HEAP32[$15 + 4 >> 2];
  $get_buffer17 = $0 + 12 | 0;
  $19 = HEAP32[$get_buffer17 >> 2] | 0;
  $bits_left19 = $0 + 16 | 0;
  $20 = HEAP32[$bits_left19 >> 2] | 0;
  $EOBRUN20 = $0 + 20 | 0;
  $21 = HEAP32[$EOBRUN20 >> 2] | 0;
  $22 = HEAP32[$MCU_data >> 2] | 0;
  $23 = HEAP32[$0 + 64 >> 2] | 0;
  $24 = HEAP32[$cinfo + 412 >> 2] | 0;
  $get_buffer29 = $br_state + 8 | 0;
  $bits_left30 = $br_state + 12 | 0;
  L16 : do if (!$21) {
   $bits_left$0 = $20;
   $get_buffer$0 = $19;
   $k$0 = $24;
   $num_newnz$0 = 0;
   L18 : while (1) {
    if (($bits_left$0 | 0) < 8) {
     if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$0, $bits_left$0, 0) | 0)) {
      $num_newnz$3 = $num_newnz$0;
      break L16;
     }
     $25 = HEAP32[$get_buffer29 >> 2] | 0;
     $26 = HEAP32[$bits_left30 >> 2] | 0;
     if (($26 | 0) < 8) {
      $bits_left$2 = $26;
      $get_buffer$2 = $25;
      $nb$0 = 1;
      label = 17;
     } else {
      $bits_left$1 = $26;
      $get_buffer$1 = $25;
      label = 15;
     }
    } else {
     $bits_left$1 = $bits_left$0;
     $get_buffer$1 = $get_buffer$0;
     label = 15;
    }
    if ((label | 0) == 15) {
     label = 0;
     $and = $get_buffer$1 >> $bits_left$1 + -8 & 255;
     $27 = HEAP32[$23 + 144 + ($and << 2) >> 2] | 0;
     if (!$27) {
      $bits_left$2 = $bits_left$1;
      $get_buffer$2 = $get_buffer$1;
      $nb$0 = 9;
      label = 17;
     } else {
      $bits_left$4$ph = $bits_left$1 - $27 | 0;
      $get_buffer$4$ph = $get_buffer$1;
      $s$2$ph = HEAPU8[$23 + 1168 + $and >> 0] | 0;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     $call40 = _jpeg_huff_decode($br_state, $get_buffer$2, $bits_left$2, $23, $nb$0) | 0;
     if (($call40 | 0) < 0) {
      $num_newnz$3 = $num_newnz$0;
      break L16;
     }
     $bits_left$4$ph = HEAP32[$bits_left30 >> 2] | 0;
     $get_buffer$4$ph = HEAP32[$get_buffer29 >> 2] | 0;
     $s$2$ph = $call40;
    }
    $shr49141 = $s$2$ph >>> 4;
    switch ($s$2$ph & 15) {
    case 0:
     {
      if (($shr49141 | 0) == 15) {
       $bits_left$7 = $bits_left$4$ph;
       $get_buffer$7 = $get_buffer$4$ph;
       $s$3 = 0;
      } else break L18;
      break;
     }
    case 1:
     {
      label = 21;
      break;
     }
    default:
     {
      $31 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$31 + 20 >> 2] = 121;
      FUNCTION_TABLE_vii[HEAP32[$31 + 4 >> 2] & 255]($cinfo, -1);
      label = 21;
     }
    }
    if ((label | 0) == 21) {
     label = 0;
     if (($bits_left$4$ph | 0) < 1) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, 1) | 0)) {
       $num_newnz$3 = $num_newnz$0;
       break L16;
      }
      $bits_left$5 = HEAP32[$bits_left30 >> 2] | 0;
      $get_buffer$5 = HEAP32[$get_buffer29 >> 2] | 0;
     } else {
      $bits_left$5 = $bits_left$4$ph;
      $get_buffer$5 = $get_buffer$4$ph;
     }
     $sub68 = $bits_left$5 + -1 | 0;
     $bits_left$7 = $sub68;
     $get_buffer$7 = $get_buffer$5;
     $s$3 = (1 << $sub68 & $get_buffer$5 | 0) == 0 ? $shl11 : $shl;
    }
    $bits_left$8 = $bits_left$7;
    $get_buffer$8 = $get_buffer$7;
    $k$1 = $k$0;
    $r$0 = $shr49141;
    L40 : while (1) {
     $add$ptr = $22 + (HEAP32[$14 + ($k$1 << 2) >> 2] << 1) | 0;
     do if (!(HEAP16[$add$ptr >> 1] | 0)) if (($r$0 | 0) < 1) {
      $bits_left$11 = $bits_left$8;
      $get_buffer$11 = $get_buffer$8;
      $k$2 = $k$1;
      break L40;
     } else {
      $bits_left$10 = $bits_left$8;
      $get_buffer$10 = $get_buffer$8;
      $r$1 = $r$0 + -1 | 0;
     } else {
      if (($bits_left$8 | 0) < 1) {
       if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$8, $bits_left$8, 1) | 0)) {
        $num_newnz$3 = $num_newnz$0;
        break L16;
       }
       $bits_left$9 = HEAP32[$bits_left30 >> 2] | 0;
       $get_buffer$9 = HEAP32[$get_buffer29 >> 2] | 0;
      } else {
       $bits_left$9 = $bits_left$8;
       $get_buffer$9 = $get_buffer$8;
      }
      $sub113 = $bits_left$9 + -1 | 0;
      if ((1 << $sub113 & $get_buffer$9 | 0) != 0 ? ($45 = HEAP16[$add$ptr >> 1] | 0, $conv118 = $45 << 16 >> 16, ($shl & $conv118 | 0) == 0) : 0) if ($45 << 16 >> 16 > -1) {
       HEAP16[$add$ptr >> 1] = $shl + $conv118;
       $bits_left$10 = $sub113;
       $get_buffer$10 = $get_buffer$9;
       $r$1 = $r$0;
       break;
      } else {
       HEAP16[$add$ptr >> 1] = $shl11 + $conv118;
       $bits_left$10 = $sub113;
       $get_buffer$10 = $get_buffer$9;
       $r$1 = $r$0;
       break;
      } else {
       $bits_left$10 = $sub113;
       $get_buffer$10 = $get_buffer$9;
       $r$1 = $r$0;
      }
     } while (0);
     $inc = $k$1 + 1 | 0;
     if (($k$1 | 0) < ($12 | 0)) {
      $bits_left$8 = $bits_left$10;
      $get_buffer$8 = $get_buffer$10;
      $k$1 = $inc;
      $r$0 = $r$1;
     } else {
      $bits_left$11 = $bits_left$10;
      $get_buffer$11 = $get_buffer$10;
      $k$2 = $inc;
      break;
     }
    }
    if (!$s$3) $num_newnz$1 = $num_newnz$0; else {
     $46 = HEAP32[$14 + ($k$2 << 2) >> 2] | 0;
     HEAP16[$22 + ($46 << 1) >> 1] = $s$3;
     HEAP32[$newnz_pos + ($num_newnz$0 << 2) >> 2] = $46;
     $num_newnz$1 = $num_newnz$0 + 1 | 0;
    }
    if (($k$2 | 0) < ($12 | 0)) {
     $bits_left$0 = $bits_left$11;
     $get_buffer$0 = $get_buffer$11;
     $k$0 = $k$2 + 1 | 0;
     $num_newnz$0 = $num_newnz$1;
    } else {
     $EOBRUN$1 = 0;
     $bits_left$16 = $bits_left$11;
     $get_buffer$16 = $get_buffer$11;
     label = 58;
     break L16;
    }
   }
   $shl79 = 1 << $shr49141;
   if ($shr49141) {
    if (($bits_left$4$ph | 0) < ($shr49141 | 0)) {
     if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $shr49141) | 0)) {
      $num_newnz$3 = $num_newnz$0;
      break;
     }
     $bits_left$6 = HEAP32[$bits_left30 >> 2] | 0;
     $get_buffer$6 = HEAP32[$get_buffer29 >> 2] | 0;
    } else {
     $bits_left$6 = $bits_left$4$ph;
     $get_buffer$6 = $get_buffer$4$ph;
    }
    $sub92 = $bits_left$6 - $shr49141 | 0;
    $add = ($get_buffer$6 >> $sub92 & HEAP32[3152 + ($shr49141 << 2) >> 2]) + $shl79 | 0;
    if (!$add) {
     $EOBRUN$1 = 0;
     $bits_left$16 = $sub92;
     $get_buffer$16 = $get_buffer$6;
     label = 58;
    } else {
     $EOBRUN$0136 = $add;
     $bits_left$12138 = $sub92;
     $get_buffer$12137 = $get_buffer$6;
     $k$3139 = $k$0;
     $num_newnz$2140 = $num_newnz$0;
     label = 46;
    }
   } else {
    $EOBRUN$0136 = 1;
    $bits_left$12138 = $bits_left$4$ph;
    $get_buffer$12137 = $get_buffer$4$ph;
    $k$3139 = $k$0;
    $num_newnz$2140 = $num_newnz$0;
    label = 46;
   }
  } else {
   $EOBRUN$0136 = $21;
   $bits_left$12138 = $20;
   $get_buffer$12137 = $19;
   $k$3139 = $24;
   $num_newnz$2140 = 0;
   label = 46;
  } while (0);
  L65 : do if ((label | 0) == 46) {
   $bits_left$13 = $bits_left$12138;
   $get_buffer$13 = $get_buffer$12137;
   $k$4 = $k$3139;
   while (1) {
    $add$ptr164 = $22 + (HEAP32[$14 + ($k$4 << 2) >> 2] << 1) | 0;
    do if (HEAP16[$add$ptr164 >> 1] | 0) {
     if (($bits_left$13 | 0) < 1) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$13, $bits_left$13, 1) | 0)) {
       $num_newnz$3 = $num_newnz$2140;
       break L65;
      }
      $bits_left$14 = HEAP32[$bits_left30 >> 2] | 0;
      $get_buffer$14 = HEAP32[$get_buffer29 >> 2] | 0;
     } else {
      $bits_left$14 = $bits_left$13;
      $get_buffer$14 = $get_buffer$13;
     }
     $sub177 = $bits_left$14 + -1 | 0;
     if ((1 << $sub177 & $get_buffer$14 | 0) != 0 ? ($54 = HEAP16[$add$ptr164 >> 1] | 0, $conv182 = $54 << 16 >> 16, ($shl & $conv182 | 0) == 0) : 0) if ($54 << 16 >> 16 > -1) {
      HEAP16[$add$ptr164 >> 1] = $shl + $conv182;
      $bits_left$15 = $sub177;
      $get_buffer$15 = $get_buffer$14;
      break;
     } else {
      HEAP16[$add$ptr164 >> 1] = $shl11 + $conv182;
      $bits_left$15 = $sub177;
      $get_buffer$15 = $get_buffer$14;
      break;
     } else {
      $bits_left$15 = $sub177;
      $get_buffer$15 = $get_buffer$14;
     }
    } else {
     $bits_left$15 = $bits_left$13;
     $get_buffer$15 = $get_buffer$13;
    } while (0);
    if (($k$4 | 0) < ($12 | 0)) {
     $bits_left$13 = $bits_left$15;
     $get_buffer$13 = $get_buffer$15;
     $k$4 = $k$4 + 1 | 0;
    } else break;
   }
   $EOBRUN$1 = $EOBRUN$0136 + -1 | 0;
   $bits_left$16 = $bits_left$15;
   $get_buffer$16 = $get_buffer$15;
   label = 58;
  } while (0);
  if ((label | 0) == 58) {
   $56 = HEAP32[$src >> 2] | 0;
   HEAP32[$56 >> 2] = HEAP32[$br_state >> 2];
   HEAP32[$56 + 4 >> 2] = HEAP32[$bytes_in_buffer16 >> 2];
   HEAP32[$get_buffer17 >> 2] = $get_buffer$16;
   HEAP32[$bits_left19 >> 2] = $bits_left$16;
   HEAP32[$EOBRUN20 >> 2] = $EOBRUN$1;
   break;
  }
  if (!$num_newnz$3) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $num_newnz$4157 = $num_newnz$3;
  do {
   $num_newnz$4157 = $num_newnz$4157 + -1 | 0;
   HEAP16[$22 + (HEAP32[$newnz_pos + ($num_newnz$4157 << 2) >> 2] << 1) >> 1] = 0;
  } while (($num_newnz$4157 | 0) != 0);
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $restarts_to_go222 = $0 + 44 | 0;
 HEAP32[$restarts_to_go222 >> 2] = (HEAP32[$restarts_to_go222 >> 2] | 0) + -1;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _realize_virt_arrays($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $7 = 0, $add = 0, $add12$i = 0, $add12$i135 = 0, $add17 = 0, $arrayidx18$i = 0, $arrayidx18$i144 = 0, $blocksperrow89 = 0, $blocksperrow94$pre$phiZ2D = 0, $bptr$0157 = 0, $bptr$0161 = 0, $bptr$1149 = 0, $bptr$1151 = 0, $call = 0, $call$i = 0, $call$i102 = 0, $call$i136 = 0, $call$i90 = 0, $currow$039$i = 0, $currow$039$i106 = 0, $currow$1$lcssa$i = 0, $currow$1$lcssa$i125 = 0, $currow$134$i = 0, $currow$134$i117 = 0, $div = 0, $div$i = 0, $div$i93 = 0, $div$numrows$i = 0, $div$numrows$i99 = 0, $i$035$i = 0, $i$035$i116 = 0, $last_rowsperchunk = 0, $last_rowsperchunk98 = 0, $max_minheights$0 = 0, $maximum_space$0$lcssa = 0, $maximum_space$0165 = 0, $maximum_space$1 = 0, $maximum_space$2$lcssa = 0, $maximum_space$2159 = 0, $maximum_space$3 = 0, $mem1 = 0, $mul$i = 0, $mul11$i = 0, $mul12$i = 0, $mul52 = 0, $mul85 = 0, $rem$i = 0, $rows_in_mem53 = 0, $rows_in_mem86 = 0, $rowsperchunk$138$i = 0, $rowsperchunk$138$i107 = 0, $samplesperrow55 = 0, $samplesperrow59$pre$phiZ2D = 0, $sizeofobject$addr$0$i = 0, $space_per_minheight$0$lcssa = 0, $space_per_minheight$0166 = 0, $space_per_minheight$1 = 0, $space_per_minheight$2$lcssa = 0, $space_per_minheight$2160 = 0, $space_per_minheight$3 = 0, $sptr$0163 = 0, $sptr$0167 = 0, $sptr$1153 = 0, $sptr$1155 = 0, $sub$i = 0, $sub$i108 = 0, $total_space_allocated$i = 0, $total_space_allocated$i142 = 0, $virt_barray_list = 0, $virt_sarray_list = 0, $workspace$036$i = 0, $workspace$036$i115 = 0, $rowsperchunk$138$i$looptemp = 0, $rowsperchunk$138$i107$looptemp = 0;
 $mem1 = $cinfo + 4 | 0;
 $0 = HEAP32[$mem1 >> 2] | 0;
 $virt_sarray_list = $0 + 68 | 0;
 $sptr$0163 = HEAP32[$virt_sarray_list >> 2] | 0;
 if (!$sptr$0163) {
  $maximum_space$0$lcssa = 0;
  $space_per_minheight$0$lcssa = 0;
 } else {
  $maximum_space$0165 = 0;
  $space_per_minheight$0166 = 0;
  $sptr$0167 = $sptr$0163;
  while (1) {
   if (!(HEAP32[$sptr$0167 >> 2] | 0)) {
    $3 = HEAP32[$sptr$0167 + 8 >> 2] | 0;
    $add = (Math_imul($3, HEAP32[$sptr$0167 + 12 >> 2] | 0) | 0) + $space_per_minheight$0166 | 0;
    $maximum_space$1 = (Math_imul(HEAP32[$sptr$0167 + 4 >> 2] | 0, $3) | 0) + $maximum_space$0165 | 0;
    $space_per_minheight$1 = $add;
   } else {
    $maximum_space$1 = $maximum_space$0165;
    $space_per_minheight$1 = $space_per_minheight$0166;
   }
   $sptr$0167 = HEAP32[$sptr$0167 + 44 >> 2] | 0;
   if (!$sptr$0167) {
    $maximum_space$0$lcssa = $maximum_space$1;
    $space_per_minheight$0$lcssa = $space_per_minheight$1;
    break;
   } else {
    $maximum_space$0165 = $maximum_space$1;
    $space_per_minheight$0166 = $space_per_minheight$1;
   }
  }
 }
 $virt_barray_list = $0 + 72 | 0;
 $bptr$0157 = HEAP32[$virt_barray_list >> 2] | 0;
 if (!$bptr$0157) {
  $maximum_space$2$lcssa = $maximum_space$0$lcssa;
  $space_per_minheight$2$lcssa = $space_per_minheight$0$lcssa;
 } else {
  $bptr$0161 = $bptr$0157;
  $maximum_space$2159 = $maximum_space$0$lcssa;
  $space_per_minheight$2160 = $space_per_minheight$0$lcssa;
  while (1) {
   if (!(HEAP32[$bptr$0161 >> 2] | 0)) {
    $7 = HEAP32[$bptr$0161 + 8 >> 2] | 0;
    $add17 = (Math_imul(HEAP32[$bptr$0161 + 12 >> 2] << 7, $7) | 0) + $space_per_minheight$2160 | 0;
    $maximum_space$3 = (Math_imul($7 << 7, HEAP32[$bptr$0161 + 4 >> 2] | 0) | 0) + $maximum_space$2159 | 0;
    $space_per_minheight$3 = $add17;
   } else {
    $maximum_space$3 = $maximum_space$2159;
    $space_per_minheight$3 = $space_per_minheight$2160;
   }
   $bptr$0161 = HEAP32[$bptr$0161 + 44 >> 2] | 0;
   if (!$bptr$0161) {
    $maximum_space$2$lcssa = $maximum_space$3;
    $space_per_minheight$2$lcssa = $space_per_minheight$3;
    break;
   } else {
    $maximum_space$2159 = $maximum_space$3;
    $space_per_minheight$2160 = $space_per_minheight$3;
   }
  }
 }
 if (($space_per_minheight$2$lcssa | 0) < 1) return;
 $call = _jpeg_mem_available($cinfo, $space_per_minheight$2$lcssa, $maximum_space$2$lcssa, HEAP32[$0 + 76 >> 2] | 0) | 0;
 if (($call | 0) < ($maximum_space$2$lcssa | 0)) {
  $div = ($call | 0) / ($space_per_minheight$2$lcssa | 0) | 0;
  $max_minheights$0 = ($div | 0) > 1 ? $div : 1;
 } else $max_minheights$0 = 1e9;
 $sptr$1153 = HEAP32[$virt_sarray_list >> 2] | 0;
 if ($sptr$1153 | 0) {
  $last_rowsperchunk = $0 + 80 | 0;
  $sptr$1155 = $sptr$1153;
  do {
   if (!(HEAP32[$sptr$1155 >> 2] | 0)) {
    $12 = HEAP32[$sptr$1155 + 4 >> 2] | 0;
    $13 = HEAP32[$sptr$1155 + 12 >> 2] | 0;
    if ((((($12 + -1 | 0) >>> 0) / ($13 >>> 0) | 0) + 1 | 0) > ($max_minheights$0 | 0)) {
     $mul52 = Math_imul($13, $max_minheights$0) | 0;
     $rows_in_mem53 = $sptr$1155 + 16 | 0;
     HEAP32[$rows_in_mem53 >> 2] = $mul52;
     $samplesperrow55 = $sptr$1155 + 8 | 0;
     _jpeg_open_backing_store($cinfo, $sptr$1155 + 48 | 0, Math_imul(HEAP32[$samplesperrow55 >> 2] | 0, $12) | 0);
     HEAP32[$sptr$1155 + 40 >> 2] = 1;
     $19 = HEAP32[$rows_in_mem53 >> 2] | 0;
     $samplesperrow59$pre$phiZ2D = $samplesperrow55;
    } else {
     HEAP32[$sptr$1155 + 16 >> 2] = $12;
     $19 = $12;
     $samplesperrow59$pre$phiZ2D = $sptr$1155 + 8 | 0;
    }
    $15 = HEAP32[$samplesperrow59$pre$phiZ2D >> 2] | 0;
    $16 = HEAP32[$mem1 >> 2] | 0;
    $div$i = 999999984 / ($15 >>> 0) | 0;
    if ($15 >>> 0 > 999999984) {
     $17 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$17 + 20 >> 2] = 72;
     FUNCTION_TABLE_vi[HEAP32[$17 >> 2] & 255]($cinfo);
    }
    $div$numrows$i = ($div$i | 0) < ($19 | 0) ? $div$i : $19;
    HEAP32[$16 + 80 >> 2] = $div$numrows$i;
    $call$i = _alloc_small($cinfo, 1, $19 << 2) | 0;
    if ($19 | 0) {
     $20 = ~$19;
     $currow$039$i = 0;
     $rowsperchunk$138$i = $div$numrows$i;
     while (1) {
      $sub$i = $19 - $currow$039$i | 0;
      $rowsperchunk$138$i$looptemp = $rowsperchunk$138$i;
      $rowsperchunk$138$i = $rowsperchunk$138$i >>> 0 < $sub$i >>> 0 ? $rowsperchunk$138$i : $sub$i;
      $mul11$i = Math_imul($rowsperchunk$138$i, $15) | 0;
      $21 = HEAP32[$mem1 >> 2] | 0;
      if ($mul11$i >>> 0 > 999999984) {
       $22 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$22 + 20 >> 2] = 56;
       HEAP32[$22 + 24 >> 2] = 3;
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
      }
      $rem$i = $mul11$i & 7;
      $sizeofobject$addr$0$i = (($rem$i | 0) == 0 ? 0 : 8 - $rem$i | 0) + $mul11$i | 0;
      $add12$i = $sizeofobject$addr$0$i + 16 | 0;
      $call$i90 = _jpeg_get_large($cinfo, $add12$i) | 0;
      if (!$call$i90) {
       $25 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$25 + 20 >> 2] = 56;
       HEAP32[$25 + 24 >> 2] = 4;
       FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
      }
      $total_space_allocated$i = $21 + 76 | 0;
      HEAP32[$total_space_allocated$i >> 2] = (HEAP32[$total_space_allocated$i >> 2] | 0) + $add12$i;
      $arrayidx18$i = $21 + 64 | 0;
      HEAP32[$call$i90 >> 2] = HEAP32[$arrayidx18$i >> 2];
      HEAP32[$call$i90 + 4 >> 2] = $sizeofobject$addr$0$i;
      HEAP32[$call$i90 + 8 >> 2] = 0;
      HEAP32[$arrayidx18$i >> 2] = $call$i90;
      if (!$rowsperchunk$138$i) $currow$1$lcssa$i = $currow$039$i; else {
       $30 = $currow$039$i + $20 | 0;
       $31 = ~$rowsperchunk$138$i$looptemp;
       $32 = $30 >>> 0 > $31 >>> 0;
       $currow$134$i = $currow$039$i;
       $i$035$i = $rowsperchunk$138$i;
       $workspace$036$i = $call$i90 + 16 | 0;
       while (1) {
        HEAP32[$call$i + ($currow$134$i << 2) >> 2] = $workspace$036$i;
        $i$035$i = $i$035$i + -1 | 0;
        if (!$i$035$i) break; else {
         $currow$134$i = $currow$134$i + 1 | 0;
         $workspace$036$i = $workspace$036$i + $15 | 0;
        }
       }
       $currow$1$lcssa$i = $currow$039$i + -1 - ($32 ? $30 : $31) | 0;
      }
      if ($currow$1$lcssa$i >>> 0 >= $19 >>> 0) break; else $currow$039$i = $currow$1$lcssa$i;
     }
    }
    HEAP32[$sptr$1155 >> 2] = $call$i;
    HEAP32[$sptr$1155 + 20 >> 2] = HEAP32[$last_rowsperchunk >> 2];
    HEAP32[$sptr$1155 + 24 >> 2] = 0;
    HEAP32[$sptr$1155 + 28 >> 2] = 0;
    HEAP32[$sptr$1155 + 36 >> 2] = 0;
   }
   $sptr$1155 = HEAP32[$sptr$1155 + 44 >> 2] | 0;
  } while (($sptr$1155 | 0) != 0);
 }
 $bptr$1149 = HEAP32[$virt_barray_list >> 2] | 0;
 if (!$bptr$1149) return;
 $last_rowsperchunk98 = $0 + 80 | 0;
 $bptr$1151 = $bptr$1149;
 do {
  if (!(HEAP32[$bptr$1151 >> 2] | 0)) {
   $37 = HEAP32[$bptr$1151 + 4 >> 2] | 0;
   $38 = HEAP32[$bptr$1151 + 12 >> 2] | 0;
   if ((((($37 + -1 | 0) >>> 0) / ($38 >>> 0) | 0) + 1 | 0) > ($max_minheights$0 | 0)) {
    $mul85 = Math_imul($38, $max_minheights$0) | 0;
    $rows_in_mem86 = $bptr$1151 + 16 | 0;
    HEAP32[$rows_in_mem86 >> 2] = $mul85;
    $blocksperrow89 = $bptr$1151 + 8 | 0;
    _jpeg_open_backing_store($cinfo, $bptr$1151 + 48 | 0, Math_imul($37 << 7, HEAP32[$blocksperrow89 >> 2] | 0) | 0);
    HEAP32[$bptr$1151 + 40 >> 2] = 1;
    $44 = HEAP32[$rows_in_mem86 >> 2] | 0;
    $blocksperrow94$pre$phiZ2D = $blocksperrow89;
   } else {
    HEAP32[$bptr$1151 + 16 >> 2] = $37;
    $44 = $37;
    $blocksperrow94$pre$phiZ2D = $bptr$1151 + 8 | 0;
   }
   $40 = HEAP32[$blocksperrow94$pre$phiZ2D >> 2] | 0;
   $41 = HEAP32[$mem1 >> 2] | 0;
   $mul$i = $40 << 7;
   $div$i93 = 999999984 / ($mul$i >>> 0) | 0;
   if ($mul$i >>> 0 > 999999984) {
    $42 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$42 + 20 >> 2] = 72;
    FUNCTION_TABLE_vi[HEAP32[$42 >> 2] & 255]($cinfo);
   }
   $div$numrows$i99 = ($div$i93 | 0) < ($44 | 0) ? $div$i93 : $44;
   HEAP32[$41 + 80 >> 2] = $div$numrows$i99;
   $call$i102 = _alloc_small($cinfo, 1, $44 << 2) | 0;
   if ($44 | 0) {
    $45 = ~$44;
    $currow$039$i106 = 0;
    $rowsperchunk$138$i107 = $div$numrows$i99;
    while (1) {
     $sub$i108 = $44 - $currow$039$i106 | 0;
     $rowsperchunk$138$i107$looptemp = $rowsperchunk$138$i107;
     $rowsperchunk$138$i107 = $rowsperchunk$138$i107 >>> 0 < $sub$i108 >>> 0 ? $rowsperchunk$138$i107 : $sub$i108;
     $mul12$i = Math_imul($rowsperchunk$138$i107, $mul$i) | 0;
     $46 = HEAP32[$mem1 >> 2] | 0;
     if ($mul12$i >>> 0 > 999999984) {
      $47 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$47 + 20 >> 2] = 56;
      HEAP32[$47 + 24 >> 2] = 3;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
     }
     $add12$i135 = $mul12$i | 16;
     $call$i136 = _jpeg_get_large($cinfo, $add12$i135) | 0;
     if (!$call$i136) {
      $50 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$50 + 20 >> 2] = 56;
      HEAP32[$50 + 24 >> 2] = 4;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
     }
     $total_space_allocated$i142 = $46 + 76 | 0;
     HEAP32[$total_space_allocated$i142 >> 2] = (HEAP32[$total_space_allocated$i142 >> 2] | 0) + $add12$i135;
     $arrayidx18$i144 = $46 + 64 | 0;
     HEAP32[$call$i136 >> 2] = HEAP32[$arrayidx18$i144 >> 2];
     HEAP32[$call$i136 + 4 >> 2] = $mul12$i;
     HEAP32[$call$i136 + 8 >> 2] = 0;
     HEAP32[$arrayidx18$i144 >> 2] = $call$i136;
     if (!$rowsperchunk$138$i107) $currow$1$lcssa$i125 = $currow$039$i106; else {
      $55 = $currow$039$i106 + $45 | 0;
      $56 = ~$rowsperchunk$138$i107$looptemp;
      $57 = $55 >>> 0 > $56 >>> 0;
      $currow$134$i117 = $currow$039$i106;
      $i$035$i116 = $rowsperchunk$138$i107;
      $workspace$036$i115 = $call$i136 + 16 | 0;
      while (1) {
       HEAP32[$call$i102 + ($currow$134$i117 << 2) >> 2] = $workspace$036$i115;
       $i$035$i116 = $i$035$i116 + -1 | 0;
       if (!$i$035$i116) break; else {
        $currow$134$i117 = $currow$134$i117 + 1 | 0;
        $workspace$036$i115 = $workspace$036$i115 + ($40 << 7) | 0;
       }
      }
      $currow$1$lcssa$i125 = $currow$039$i106 + -1 - ($57 ? $55 : $56) | 0;
     }
     if ($currow$1$lcssa$i125 >>> 0 >= $44 >>> 0) break; else $currow$039$i106 = $currow$1$lcssa$i125;
    }
   }
   HEAP32[$bptr$1151 >> 2] = $call$i102;
   HEAP32[$bptr$1151 + 20 >> 2] = HEAP32[$last_rowsperchunk98 >> 2];
   HEAP32[$bptr$1151 + 24 >> 2] = 0;
   HEAP32[$bptr$1151 + 28 >> 2] = 0;
   HEAP32[$bptr$1151 + 36 >> 2] = 0;
  }
  $bptr$1151 = HEAP32[$bptr$1151 + 44 >> 2] | 0;
 } while (($bptr$1151 | 0) != 0);
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $125 = 0, $127 = 0, $13 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0, $call = 0, $call105 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $cmp25 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0, $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179159 = 0, $conv179162 = 0, $conv207152$pre$phiZ2D = 0, $conv238177 = 0, $conv238180 = 0, $conv267166$pre$phiZ2D = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $spec$select132 = 0, $sub = 0, $sub111191 = 0, $sub111194 = 0, $sub131187 = 0, $tobool65 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 28;
  $148 = 0;
  $149 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1137 = $cond44;
    label = 47;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[3905 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0, 0);
     $148 = 0;
     $149 = 0;
     break L1;
    }
    if ($tobool65) {
     $148 = 0;
     $149 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $148 = 0;
    $149 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1137 = $cond59;
    label = 47;
   }
  } else {
   $spec$select132 = $cmp25 ? 10 : $base;
   if ($spec$select132 >>> 0 > (HEAPU8[3905 + $c$0 >> 0] | 0) >>> 0) {
    $base$addr$1 = $spec$select132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0, 0);
    $call105 = ___errno_location() | 0;
    HEAP32[$call105 >> 2] = 28;
    $148 = 0;
    $149 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111191 = $c$1 + -48 | 0;
   if ($sub111191 >>> 0 < 10) {
    $sub111194 = $sub111191;
    $x$0193 = 0;
    do {
     $x$0193 = ($x$0193 * 10 | 0) + $sub111194 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $cond128 = HEAPU8[$23 >> 0] | 0;
     } else $cond128 = ___shgetc($f) | 0;
     $sub111194 = $cond128 + -48 | 0;
    } while ($sub111194 >>> 0 < 10 & $x$0193 >>> 0 < 429496729);
    if ($sub111194 >>> 0 < 10) {
     $27 = $x$0193;
     $28 = 0;
     $c$3185 = $cond128;
     $sub131187 = $sub111194;
     while (1) {
      $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
      $30 = getTempRet0() | 0;
      $32 = (($sub131187 | 0) < 0) << 31 >> 31;
      $34 = ~$32;
      if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131187 >>> 0) {
       $150 = $27;
       $151 = $28;
       $base$addr$1136 = 10;
       $c$8 = $c$3185;
       label = 76;
       break L43;
      }
      $27 = _i64Add($29 | 0, $30 | 0, $sub131187 | 0, $32 | 0) | 0;
      $28 = getTempRet0() | 0;
      $42 = HEAP32[$rpos >> 2] | 0;
      if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $42 + 1;
       $cond162 = HEAPU8[$42 >> 0] | 0;
      } else $cond162 = ___shgetc($f) | 0;
      $sub131187 = $cond162 + -48 | 0;
      if (!($sub131187 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3185 = $cond162;
     }
     if ($sub131187 >>> 0 > 9) {
      $125 = $28;
      $127 = $27;
      $neg$1 = $neg$0;
     } else {
      $150 = $27;
      $151 = $28;
      $base$addr$1136 = 10;
      $c$8 = $cond162;
      label = 76;
     }
    } else {
     $125 = 0;
     $127 = $x$0193;
     $neg$1 = $neg$0;
    }
   } else {
    $125 = 0;
    $127 = 0;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1137 = $c$1;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[27704 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $51 = HEAP8[3905 + $c$1137 >> 0] | 0;
    $conv179159 = $51 & 255;
    if ($base$addr$1135 >>> 0 > $conv179159 >>> 0) {
     $conv179162 = $conv179159;
     $x$1161 = 0;
     do {
      $x$1161 = $conv179162 | $x$1161 << $conv176;
      $52 = HEAP32[$rpos >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $52 + 1;
       $cond202 = HEAPU8[$52 >> 0] | 0;
      } else $cond202 = ___shgetc($f) | 0;
      $55 = HEAP8[3905 + $cond202 >> 0] | 0;
      $conv179162 = $55 & 255;
     } while ($x$1161 >>> 0 < 134217728 & $base$addr$1135 >>> 0 > $conv179162 >>> 0);
     $152 = $55;
     $60 = 0;
     $62 = $x$1161;
     $c$4$lcssa = $cond202;
     $conv207152$pre$phiZ2D = $conv179162;
    } else {
     $152 = $51;
     $60 = 0;
     $62 = 0;
     $c$4$lcssa = $c$1137;
     $conv207152$pre$phiZ2D = $conv179159;
    }
    $57 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $58 = getTempRet0() | 0;
    if ($base$addr$1135 >>> 0 <= $conv207152$pre$phiZ2D >>> 0 | ($58 >>> 0 < $60 >>> 0 | ($58 | 0) == ($60 | 0) & $57 >>> 0 < $62 >>> 0)) {
     $150 = $62;
     $151 = $60;
     $base$addr$1136 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 76;
     break;
    }
    $66 = $62;
    $67 = $60;
    $71 = $152;
    while (1) {
     $68 = _bitshift64Shl($66 | 0, $67 | 0, $conv176 | 0) | 0;
     $69 = getTempRet0() | 0;
     $72 = $68 | $71 & 255;
     $73 = HEAP32[$rpos >> 2] | 0;
     if ($73 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $73 + 1;
      $cond233 = HEAPU8[$73 >> 0] | 0;
     } else $cond233 = ___shgetc($f) | 0;
     $71 = HEAP8[3905 + $cond233 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($71 & 255) >>> 0 | ($69 >>> 0 > $58 >>> 0 | ($69 | 0) == ($58 | 0) & $72 >>> 0 > $57 >>> 0)) {
      $150 = $72;
      $151 = $69;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond233;
      label = 76;
      break L63;
     } else {
      $66 = $72;
      $67 = $69;
     }
    }
   }
   $82 = HEAP8[3905 + $c$1137 >> 0] | 0;
   $conv238177 = $82 & 255;
   if ($base$addr$1135 >>> 0 > $conv238177 >>> 0) {
    $conv238180 = $conv238177;
    $x$2179 = 0;
    do {
     $x$2179 = $conv238180 + (Math_imul($x$2179, $base$addr$1135) | 0) | 0;
     $83 = HEAP32[$rpos >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $83 + 1;
      $cond262 = HEAPU8[$83 >> 0] | 0;
     } else $cond262 = ___shgetc($f) | 0;
     $86 = HEAP8[3905 + $cond262 >> 0] | 0;
     $conv238180 = $86 & 255;
    } while ($x$2179 >>> 0 < 119304647 & $base$addr$1135 >>> 0 > $conv238180 >>> 0);
    $153 = $86;
    $154 = $x$2179;
    $155 = 0;
    $c$6$lcssa = $cond262;
    $conv267166$pre$phiZ2D = $conv238180;
   } else {
    $153 = $82;
    $154 = 0;
    $155 = 0;
    $c$6$lcssa = $c$1137;
    $conv267166$pre$phiZ2D = $conv238177;
   }
   if ($base$addr$1135 >>> 0 > $conv267166$pre$phiZ2D >>> 0) {
    $88 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $89 = getTempRet0() | 0;
    $100 = $153;
    $91 = $155;
    $93 = $154;
    $c$7168 = $c$6$lcssa;
    while (1) {
     if ($91 >>> 0 > $89 >>> 0 | ($91 | 0) == ($89 | 0) & $93 >>> 0 > $88 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $97 = ___muldi3($93 | 0, $91 | 0, $base$addr$1135 | 0, 0) | 0;
     $98 = getTempRet0() | 0;
     $99 = $100 & 255;
     if ($98 >>> 0 > 4294967295 | ($98 | 0) == -1 & $97 >>> 0 > ~$99 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $107 = _i64Add($97 | 0, $98 | 0, $99 | 0, 0) | 0;
     $108 = getTempRet0() | 0;
     $109 = HEAP32[$rpos >> 2] | 0;
     if ($109 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $109 + 1;
      $cond301 = HEAPU8[$109 >> 0] | 0;
     } else $cond301 = ___shgetc($f) | 0;
     $100 = HEAP8[3905 + $cond301 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($100 & 255) >>> 0) {
      $150 = $107;
      $151 = $108;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond301;
      label = 76;
      break;
     } else {
      $91 = $108;
      $93 = $107;
      $c$7168 = $cond301;
     }
    }
   } else {
    $150 = $154;
    $151 = $155;
    $base$addr$1136 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($base$addr$1136 >>> 0 > (HEAPU8[3905 + $c$8 >> 0] | 0) >>> 0) {
   do {
    $114 = HEAP32[$rpos >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $114 + 1;
     $cond328 = HEAPU8[$114 >> 0] | 0;
    } else $cond328 = ___shgetc($f) | 0;
   } while ($base$addr$1136 >>> 0 > (HEAPU8[3905 + $cond328 >> 0] | 0) >>> 0);
   $call330 = ___errno_location() | 0;
   HEAP32[$call330 >> 2] = 68;
   $125 = $1;
   $127 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $125 = $151;
   $127 = $150;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($125 >>> 0 < $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    $call351 = ___errno_location() | 0;
    HEAP32[$call351 >> 2] = 68;
    $135 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $148 = getTempRet0() | 0;
    $149 = $135;
    break;
   }
   if ($125 >>> 0 > $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 > $0 >>> 0) {
    $call357 = ___errno_location() | 0;
    HEAP32[$call357 >> 2] = 68;
    $148 = $1;
    $149 = $0;
    break;
   }
  }
  $143 = (($neg$1 | 0) < 0) << 31 >> 31;
  $146 = _i64Subtract($127 ^ $neg$1 | 0, $125 ^ $143 | 0, $neg$1 | 0, $143 | 0) | 0;
  $148 = getTempRet0() | 0;
  $149 = $146;
 } while (0);
 setTempRet0($148 | 0);
 return $149 | 0;
}

function _get_sof($cinfo, $is_baseline, $is_prog, $is_arith) {
 $cinfo = $cinfo | 0;
 $is_baseline = $is_baseline | 0;
 $is_prog = $is_prog | 0;
 $is_arith = $is_arith | 0;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0, $32 = 0, $37 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $64 = 0, $66 = 0, $67 = 0, $77 = 0, $add = 0, $bytes_in_buffer$0 = 0, $bytes_in_buffer$1 = 0, $bytes_in_buffer$10 = 0, $bytes_in_buffer$11 = 0, $bytes_in_buffer$2 = 0, $bytes_in_buffer$3 = 0, $bytes_in_buffer$4 = 0, $bytes_in_buffer$5 = 0, $bytes_in_buffer$6 = 0, $bytes_in_buffer$7 = 0, $bytes_in_buffer$8 = 0, $bytes_in_buffer$8$lcssa = 0, $bytes_in_buffer$8183 = 0, $bytes_in_buffer$8190 = 0, $bytes_in_buffer$9 = 0, $bytes_in_buffer2 = 0, $c$0$lcssa = 0, $c$0179 = 0, $c$2 = 0, $call172 = 0, $ci$0186 = 0, $comp_info = 0, $compptr$0175 = 0, $compptr$1$lcssa = 0, $compptr$1176 = 0, $compptr$1180 = 0, $compptr$2 = 0, $conv192 = 0, $conv238 = 0, $dec = 0, $dec100 = 0, $dec19 = 0, $dec190 = 0, $dec236 = 0, $dec34 = 0, $dec51 = 0, $dec66 = 0, $dec85 = 0, $fill_input_buffer182 = 0, $h_samp_factor = 0, $i$0174 = 0, $i$1178 = 0, $image_height = 0, $image_width = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr191 = 0, $incdec$ptr20 = 0, $incdec$ptr221 = 0, $incdec$ptr237 = 0, $incdec$ptr35 = 0, $incdec$ptr52 = 0, $incdec$ptr67 = 0, $incdec$ptr86 = 0, $marker = 0, $next_input_byte$0 = 0, $next_input_byte$1 = 0, $next_input_byte$10 = 0, $next_input_byte$11 = 0, $next_input_byte$2 = 0, $next_input_byte$3 = 0, $next_input_byte$4 = 0, $next_input_byte$5 = 0, $next_input_byte$6 = 0, $next_input_byte$7 = 0, $next_input_byte$8 = 0, $next_input_byte$8$lcssa = 0, $next_input_byte$8184 = 0, $next_input_byte$8191 = 0, $next_input_byte$9 = 0, $num_components = 0, $quant_tbl_no = 0, $retval$0 = 0, $shl = 0, $shl54 = 0, $shl88 = 0, $sub = 0, $v_samp_factor = 0, label = 0;
 $0 = HEAP32[$cinfo + 24 >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $bytes_in_buffer2 = $0 + 4 | 0;
 $2 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
 HEAP32[$cinfo + 220 >> 2] = $is_baseline;
 HEAP32[$cinfo + 224 >> 2] = $is_prog;
 HEAP32[$cinfo + 228 >> 2] = $is_arith;
 do if (!$2) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$0 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$0 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$0 = $2;
  $next_input_byte$0 = $1;
 } while (0);
 $dec = $bytes_in_buffer$0 + -1 | 0;
 $incdec$ptr = $next_input_byte$0 + 1 | 0;
 $shl = (HEAPU8[$next_input_byte$0 >> 0] | 0) << 8;
 do if (!$dec) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$1 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$1 = $dec;
  $next_input_byte$1 = $incdec$ptr;
 } while (0);
 $dec19 = $bytes_in_buffer$1 + -1 | 0;
 $incdec$ptr20 = $next_input_byte$1 + 1 | 0;
 $add = $shl | (HEAPU8[$next_input_byte$1 >> 0] | 0);
 do if (!$dec19) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$2 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$2 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$2 = $dec19;
  $next_input_byte$2 = $incdec$ptr20;
 } while (0);
 $dec34 = $bytes_in_buffer$2 + -1 | 0;
 $incdec$ptr35 = $next_input_byte$2 + 1 | 0;
 HEAP32[$cinfo + 212 >> 2] = HEAPU8[$next_input_byte$2 >> 0];
 do if (!$dec34) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$3 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$3 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$3 = $dec34;
  $next_input_byte$3 = $incdec$ptr35;
 } while (0);
 $dec51 = $bytes_in_buffer$3 + -1 | 0;
 $incdec$ptr52 = $next_input_byte$3 + 1 | 0;
 $shl54 = (HEAPU8[$next_input_byte$3 >> 0] | 0) << 8;
 $image_height = $cinfo + 32 | 0;
 HEAP32[$image_height >> 2] = $shl54;
 do if (!$dec51) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $23 = HEAP32[$image_height >> 2] | 0;
  $bytes_in_buffer$4 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$4 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $23 = $shl54;
  $bytes_in_buffer$4 = $dec51;
  $next_input_byte$4 = $incdec$ptr52;
 } while (0);
 $dec66 = $bytes_in_buffer$4 + -1 | 0;
 $incdec$ptr67 = $next_input_byte$4 + 1 | 0;
 HEAP32[$image_height >> 2] = $23 + (HEAPU8[$next_input_byte$4 >> 0] | 0);
 do if (!$dec66) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$5 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$5 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$5 = $dec66;
  $next_input_byte$5 = $incdec$ptr67;
 } while (0);
 $dec85 = $bytes_in_buffer$5 + -1 | 0;
 $incdec$ptr86 = $next_input_byte$5 + 1 | 0;
 $shl88 = (HEAPU8[$next_input_byte$5 >> 0] | 0) << 8;
 $image_width = $cinfo + 28 | 0;
 HEAP32[$image_width >> 2] = $shl88;
 do if (!$dec85) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $32 = HEAP32[$image_width >> 2] | 0;
  $bytes_in_buffer$6 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$6 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $32 = $shl88;
  $bytes_in_buffer$6 = $dec85;
  $next_input_byte$6 = $incdec$ptr86;
 } while (0);
 $dec100 = $bytes_in_buffer$6 + -1 | 0;
 $incdec$ptr101 = $next_input_byte$6 + 1 | 0;
 HEAP32[$image_width >> 2] = $32 + (HEAPU8[$next_input_byte$6 >> 0] | 0);
 do if (!$dec100) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$7 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$7 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$7 = $dec100;
  $next_input_byte$7 = $incdec$ptr101;
 } while (0);
 $num_components = $cinfo + 36 | 0;
 HEAP32[$num_components >> 2] = HEAPU8[$next_input_byte$7 >> 0];
 $sub = $add + -8 | 0;
 $37 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$37 + 24 >> 2] = HEAP32[$cinfo + 440 >> 2];
 HEAP32[$37 + 28 >> 2] = HEAP32[$image_width >> 2];
 HEAP32[$37 + 32 >> 2] = HEAP32[$image_height >> 2];
 HEAP32[$37 + 36 >> 2] = HEAP32[$num_components >> 2];
 HEAP32[$37 + 20 >> 2] = 102;
 FUNCTION_TABLE_vii[HEAP32[$37 + 4 >> 2] & 255]($cinfo, 1);
 $marker = $cinfo + 464 | 0;
 if (HEAP32[(HEAP32[$marker >> 2] | 0) + 16 >> 2] | 0) {
  $45 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$45 + 20 >> 2] = 61;
  FUNCTION_TABLE_vi[HEAP32[$45 >> 2] & 255]($cinfo);
 }
 if (((HEAP32[$image_height >> 2] | 0) != 0 ? (HEAP32[$image_width >> 2] | 0) != 0 : 0) ? ($49 = HEAP32[$num_components >> 2] | 0, ($49 | 0) >= 1) : 0) $52 = $49; else {
  $50 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$50 + 20 >> 2] = 33;
  FUNCTION_TABLE_vi[HEAP32[$50 >> 2] & 255]($cinfo);
  $52 = HEAP32[$num_components >> 2] | 0;
 }
 if (($sub | 0) != ($52 * 3 | 0)) {
  $53 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$53 + 20 >> 2] = 12;
  FUNCTION_TABLE_vi[HEAP32[$53 >> 2] & 255]($cinfo);
 }
 $comp_info = $cinfo + 216 | 0;
 if (!(HEAP32[$comp_info >> 2] | 0)) {
  $call172 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 1, (HEAP32[$num_components >> 2] | 0) * 88 | 0) | 0;
  HEAP32[$comp_info >> 2] = $call172;
 }
 $bytes_in_buffer$8183 = $bytes_in_buffer$7 + -1 | 0;
 $next_input_byte$8184 = $next_input_byte$7 + 1 | 0;
 L64 : do if ((HEAP32[$num_components >> 2] | 0) > 0) {
  $fill_input_buffer182 = $0 + 12 | 0;
  $bytes_in_buffer$8190 = $bytes_in_buffer$8183;
  $ci$0186 = 0;
  $next_input_byte$8191 = $next_input_byte$8184;
  while (1) {
   if (!$bytes_in_buffer$8190) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer182 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 57;
     break;
    }
    $bytes_in_buffer$9 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
    $next_input_byte$9 = HEAP32[$0 >> 2] | 0;
   } else {
    $bytes_in_buffer$9 = $bytes_in_buffer$8190;
    $next_input_byte$9 = $next_input_byte$8191;
   }
   $dec190 = $bytes_in_buffer$9 + -1 | 0;
   $incdec$ptr191 = $next_input_byte$9 + 1 | 0;
   $conv192 = HEAPU8[$next_input_byte$9 >> 0] | 0;
   $64 = HEAP32[$comp_info >> 2] | 0;
   L72 : do if (!$ci$0186) {
    $c$2 = $conv192;
    $compptr$2 = $64;
   } else {
    $compptr$0175 = $64;
    $i$0174 = 0;
    while (1) {
     if ((HEAP32[$compptr$0175 >> 2] | 0) == ($conv192 | 0)) break;
     $i$0174 = $i$0174 + 1 | 0;
     $incdec$ptr221 = $compptr$0175 + 88 | 0;
     if ($i$0174 >>> 0 >= $ci$0186 >>> 0) {
      $c$2 = $conv192;
      $compptr$2 = $incdec$ptr221;
      break L72;
     } else $compptr$0175 = $incdec$ptr221;
    }
    $66 = HEAP32[$64 >> 2] | 0;
    $compptr$1176 = $64 + 88 | 0;
    if ($ci$0186 >>> 0 > 1) {
     $c$0179 = $66;
     $compptr$1180 = $compptr$1176;
     $i$1178 = 1;
     while (1) {
      $67 = HEAP32[$compptr$1180 >> 2] | 0;
      $c$0179 = ($67 | 0) > ($c$0179 | 0) ? $67 : $c$0179;
      $i$1178 = $i$1178 + 1 | 0;
      if (($i$1178 | 0) == ($ci$0186 | 0)) break; else $compptr$1180 = $compptr$1180 + 88 | 0;
     }
     $c$0$lcssa = $c$0179;
     $compptr$1$lcssa = $64 + ($ci$0186 * 88 | 0) | 0;
    } else {
     $c$0$lcssa = $66;
     $compptr$1$lcssa = $compptr$1176;
    }
    $c$2 = $c$0$lcssa + 1 | 0;
    $compptr$2 = $compptr$1$lcssa;
   } while (0);
   HEAP32[$compptr$2 >> 2] = $c$2;
   HEAP32[$compptr$2 + 4 >> 2] = $ci$0186;
   if (!$dec190) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer182 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 57;
     break;
    }
    $bytes_in_buffer$10 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
    $next_input_byte$10 = HEAP32[$0 >> 2] | 0;
   } else {
    $bytes_in_buffer$10 = $dec190;
    $next_input_byte$10 = $incdec$ptr191;
   }
   $dec236 = $bytes_in_buffer$10 + -1 | 0;
   $incdec$ptr237 = $next_input_byte$10 + 1 | 0;
   $conv238 = HEAPU8[$next_input_byte$10 >> 0] | 0;
   $h_samp_factor = $compptr$2 + 8 | 0;
   HEAP32[$h_samp_factor >> 2] = $conv238 >>> 4;
   $v_samp_factor = $compptr$2 + 12 | 0;
   HEAP32[$v_samp_factor >> 2] = $conv238 & 15;
   if (!$dec236) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer182 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 57;
     break;
    }
    $bytes_in_buffer$11 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
    $next_input_byte$11 = HEAP32[$0 >> 2] | 0;
   } else {
    $bytes_in_buffer$11 = $dec236;
    $next_input_byte$11 = $incdec$ptr237;
   }
   $quant_tbl_no = $compptr$2 + 16 | 0;
   HEAP32[$quant_tbl_no >> 2] = HEAPU8[$next_input_byte$11 >> 0];
   $77 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$77 + 24 >> 2] = HEAP32[$compptr$2 >> 2];
   HEAP32[$77 + 28 >> 2] = HEAP32[$h_samp_factor >> 2];
   HEAP32[$77 + 32 >> 2] = HEAP32[$v_samp_factor >> 2];
   HEAP32[$77 + 36 >> 2] = HEAP32[$quant_tbl_no >> 2];
   HEAP32[$77 + 20 >> 2] = 103;
   FUNCTION_TABLE_vii[HEAP32[$77 + 4 >> 2] & 255]($cinfo, 1);
   $ci$0186 = $ci$0186 + 1 | 0;
   $bytes_in_buffer$8 = $bytes_in_buffer$11 + -1 | 0;
   $next_input_byte$8 = $next_input_byte$11 + 1 | 0;
   if (($ci$0186 | 0) >= (HEAP32[$num_components >> 2] | 0)) {
    $bytes_in_buffer$8$lcssa = $bytes_in_buffer$8;
    $next_input_byte$8$lcssa = $next_input_byte$8;
    break L64;
   } else {
    $bytes_in_buffer$8190 = $bytes_in_buffer$8;
    $next_input_byte$8191 = $next_input_byte$8;
   }
  }
  if ((label | 0) == 57) return $retval$0 | 0;
 } else {
  $bytes_in_buffer$8$lcssa = $bytes_in_buffer$8183;
  $next_input_byte$8$lcssa = $next_input_byte$8184;
 } while (0);
 HEAP32[(HEAP32[$marker >> 2] | 0) + 16 >> 2] = 1;
 HEAP32[$0 >> 2] = $next_input_byte$8$lcssa;
 HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$8$lcssa;
 $retval$0 = 1;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($this) {
 $this = $this | 0;
 var $Ty = 0, $call104 = 0, $call121 = 0, $call13 = 0, $call132 = 0, $call136 = 0, $call24 = 0, $call35 = 0, $call49 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call68 = 0, $call79 = 0, $call90 = 0, $cmp99 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Ty = sp + 8 | 0;
 $ref$tmp = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 84:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call6 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call6;
     if (!$call6) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$0;
     break L1;
     break;
    }
   case 84:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call13;
     if (!$call13) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$1;
     break L1;
     break;
    }
   case 73:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call24;
     if (!$call24) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$2;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call35;
     if (!$call35) $retval$3 = 0; else $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$3;
     break L1;
     break;
    }
   case 99:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call49;
     if (!$call49) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$4;
     break L1;
     break;
    }
   case 67:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call58 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
     $call59 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58) | 0;
     HEAP32[$Ty >> 2] = $call59;
     do if ($call59) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
      if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) {
       $retval$6 = 0;
       break;
      }
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call68 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58) | 0;
       HEAP32[$ref$tmp >> 2] = $call68;
       if (!$call68) $retval$5 = 0; else $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ref$tmp, $Ty) | 0;
       $retval$6 = $retval$5;
      } else $retval$6 = 0;
     } else $retval$6 = 0; while (0);
     $retval$14 = $retval$6;
     break L1;
     break;
    }
   case 87:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call79 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call79;
     if (!$call79) $retval$7 = 0; else $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, 33712, $Ty) | 0;
     $retval$14 = $retval$7;
     break L1;
     break;
    }
   case 72:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call90 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call90;
     if (!$call90) $retval$8 = 0; else $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$8;
     break L1;
     break;
    }
   default:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
     $cmp99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 118;
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     $call104 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call104;
     do if ($call104) if ($cmp99) {
      $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
      break;
     } else {
      $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
      break;
     } else $retval$9 = 0; while (0);
     $retval$14 = $retval$9;
     break L1;
    }
   }
   break;
  }
 case 71:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call121 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call121;
     if (!$call121) $retval$11 = 0; else $retval$11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$11;
     break L1;
     break;
    }
   case 82:
    break;
   default:
    {
     $retval$14 = 0;
     break L1;
    }
   }
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call132 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
   HEAP32[$Ty >> 2] = $call132;
   if (!$call132) $retval$13 = 0; else {
    $call136 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $ref$tmp) | 0;
    if ($call136 | (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) $retval$12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0; else $retval$12 = 0;
    $retval$13 = $retval$12;
   }
   $retval$14 = $retval$13;
   break;
  }
 default:
  $retval$14 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$14 | 0;
}

function _jinit_color_deconverter($cinfo) {
 $cinfo = $cinfo | 0;
 var $$sink = 0, $10 = 0, $13 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $63 = 0, $65 = 0, $68 = 0, $7 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $84 = 0, $88 = 0, $Cb_b_tab$i = 0, $Cb_b_tab$i107 = 0, $Cb_b_tab$i141 = 0, $Cr_g_tab$i = 0, $Cr_g_tab$i110 = 0, $Cr_g_tab$i144 = 0, $Cr_r_tab$i = 0, $Cr_r_tab$i104 = 0, $Cr_r_tab$i138 = 0, $add21$i = 0, $add21$i128 = 0, $add21$i162 = 0, $call = 0, $call$i = 0, $call$i103 = 0, $call$i137 = 0, $call$i94 = 0, $call10$i = 0, $call10$i112 = 0, $call10$i146 = 0, $call4$i = 0, $call4$i106 = 0, $call4$i140 = 0, $call7$i = 0, $call7$i109 = 0, $call7$i143 = 0, $cconvert1 = 0, $ci$0174 = 0, $color_transform = 0, $i$015$i = 0, $i$028$i = 0, $i$028$i116 = 0, $i$028$i150 = 0, $jpeg_color_space = 0, $mem = 0, $mul17$i = 0, $mul17$i125 = 0, $mul17$i159 = 0, $x$029$i = 0, $x$029$i115 = 0, $x$029$i149 = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 28) | 0;
 $cconvert1 = $cinfo + 480 | 0;
 HEAP32[$cconvert1 >> 2] = $call;
 HEAP32[$call >> 2] = 173;
 $jpeg_color_space = $cinfo + 40 | 0;
 switch (HEAP32[$jpeg_color_space >> 2] | 0) {
 case 1:
  {
   if ((HEAP32[$cinfo + 36 >> 2] | 0) != 1) {
    $4 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$4 + 20 >> 2] = 11;
    FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($cinfo);
   }
   break;
  }
 case 7:
 case 6:
 case 3:
 case 2:
  {
   if ((HEAP32[$cinfo + 36 >> 2] | 0) != 3) {
    $7 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$7 + 20 >> 2] = 11;
    FUNCTION_TABLE_vi[HEAP32[$7 >> 2] & 255]($cinfo);
   }
   break;
  }
 case 5:
 case 4:
  {
   if ((HEAP32[$cinfo + 36 >> 2] | 0) != 4) {
    $10 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$10 + 20 >> 2] = 11;
    FUNCTION_TABLE_vi[HEAP32[$10 >> 2] & 255]($cinfo);
   }
   break;
  }
 default:
  if ((HEAP32[$cinfo + 36 >> 2] | 0) < 1) {
   $13 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$13 + 20 >> 2] = 11;
   FUNCTION_TABLE_vi[HEAP32[$13 >> 2] & 255]($cinfo);
  }
 }
 $color_transform = $cinfo + 304 | 0;
 L11 : do if (HEAP32[$color_transform >> 2] | 0) {
  switch (HEAP32[$jpeg_color_space >> 2] | 0) {
  case 6:
  case 2:
   {
    break L11;
    break;
   }
  default:
   {}
  }
  $17 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$17 + 20 >> 2] = 28;
  FUNCTION_TABLE_vi[HEAP32[$17 >> 2] & 255]($cinfo);
 } while (0);
 $19 = HEAP32[$cinfo + 44 >> 2] | 0;
 L15 : do switch ($19 | 0) {
 case 1:
  {
   HEAP32[$cinfo + 120 >> 2] = 1;
   switch (HEAP32[$jpeg_color_space >> 2] | 0) {
   case 7:
   case 3:
   case 1:
    {
     HEAP32[$call + 4 >> 2] = 4;
     $21 = HEAP32[$cinfo + 36 >> 2] | 0;
     if (($21 | 0) <= 1) break L15;
     $22 = HEAP32[$cinfo + 216 >> 2] | 0;
     $ci$0174 = 1;
     do {
      HEAP32[$22 + ($ci$0174 * 88 | 0) + 52 >> 2] = 0;
      $ci$0174 = $ci$0174 + 1 | 0;
     } while (($ci$0174 | 0) < ($21 | 0));
     break;
    }
   case 2:
    {
     switch (HEAP32[$color_transform >> 2] | 0) {
     case 0:
      {
       HEAP32[$call + 4 >> 2] = 5;
       break;
      }
     case 1:
      {
       HEAP32[$call + 4 >> 2] = 6;
       break;
      }
     default:
      {
       $24 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$24 + 20 >> 2] = 28;
       FUNCTION_TABLE_vi[HEAP32[$24 >> 2] & 255]($cinfo);
      }
     }
     $26 = HEAP32[$cconvert1 >> 2] | 0;
     $call$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 3072) | 0;
     HEAP32[$26 + 24 >> 2] = $call$i;
     $i$015$i = 0;
     do {
      HEAP32[$call$i + ($i$015$i << 2) >> 2] = $i$015$i * 19595;
      HEAP32[$call$i + ($i$015$i + 256 << 2) >> 2] = $i$015$i * 38470;
      HEAP32[$call$i + ($i$015$i + 512 << 2) >> 2] = ($i$015$i * 7471 | 0) + 32768;
      $i$015$i = $i$015$i + 1 | 0;
     } while (($i$015$i | 0) != 256);
     break;
    }
   default:
    {
     $29 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$29 + 20 >> 2] = 28;
     FUNCTION_TABLE_vi[HEAP32[$29 >> 2] & 255]($cinfo);
     break L15;
    }
   }
   break;
  }
 case 2:
  {
   HEAP32[$cinfo + 120 >> 2] = 3;
   switch (HEAP32[$jpeg_color_space >> 2] | 0) {
   case 1:
    {
     HEAP32[$call + 4 >> 2] = 7;
     break L15;
     break;
    }
   case 3:
    {
     HEAP32[$call + 4 >> 2] = 8;
     $32 = HEAP32[$cconvert1 >> 2] | 0;
     $call$i94 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_r_tab$i = $32 + 8 | 0;
     HEAP32[$Cr_r_tab$i >> 2] = $call$i94;
     $call4$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cb_b_tab$i = $32 + 12 | 0;
     HEAP32[$Cb_b_tab$i >> 2] = $call4$i;
     $call7$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_g_tab$i = $32 + 16 | 0;
     HEAP32[$Cr_g_tab$i >> 2] = $call7$i;
     $call10$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     HEAP32[$32 + 20 >> 2] = $call10$i;
     $41 = HEAP32[$Cr_r_tab$i >> 2] | 0;
     $42 = HEAP32[$Cb_b_tab$i >> 2] | 0;
     $43 = HEAP32[$Cr_g_tab$i >> 2] | 0;
     $i$028$i = 0;
     $x$029$i = -128;
     while (1) {
      HEAP32[$41 + ($i$028$i << 2) >> 2] = ($x$029$i * 91881 | 0) + 32768 >> 16;
      HEAP32[$42 + ($i$028$i << 2) >> 2] = ($x$029$i * 116130 | 0) + 32768 >> 16;
      $mul17$i = Math_imul($x$029$i, -46802) | 0;
      HEAP32[$43 + ($i$028$i << 2) >> 2] = $mul17$i;
      $add21$i = (Math_imul($x$029$i, -22553) | 0) + 32768 | 0;
      HEAP32[$call10$i + ($i$028$i << 2) >> 2] = $add21$i;
      $i$028$i = $i$028$i + 1 | 0;
      if (($i$028$i | 0) == 256) break; else $x$029$i = $x$029$i + 1 | 0;
     }
     break;
    }
   case 7:
    {
     HEAP32[$call + 4 >> 2] = 8;
     $44 = HEAP32[$cconvert1 >> 2] | 0;
     $call$i103 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_r_tab$i104 = $44 + 8 | 0;
     HEAP32[$Cr_r_tab$i104 >> 2] = $call$i103;
     $call4$i106 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cb_b_tab$i107 = $44 + 12 | 0;
     HEAP32[$Cb_b_tab$i107 >> 2] = $call4$i106;
     $call7$i109 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_g_tab$i110 = $44 + 16 | 0;
     HEAP32[$Cr_g_tab$i110 >> 2] = $call7$i109;
     $call10$i112 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     HEAP32[$44 + 20 >> 2] = $call10$i112;
     $53 = HEAP32[$Cr_r_tab$i104 >> 2] | 0;
     $54 = HEAP32[$Cb_b_tab$i107 >> 2] | 0;
     $55 = HEAP32[$Cr_g_tab$i110 >> 2] | 0;
     $i$028$i116 = 0;
     $x$029$i115 = -128;
     while (1) {
      HEAP32[$53 + ($i$028$i116 << 2) >> 2] = ($x$029$i115 * 183763 | 0) + 32768 >> 16;
      HEAP32[$54 + ($i$028$i116 << 2) >> 2] = ($x$029$i115 * 232260 | 0) + 32768 >> 16;
      $mul17$i125 = Math_imul($x$029$i115, -93603) | 0;
      HEAP32[$55 + ($i$028$i116 << 2) >> 2] = $mul17$i125;
      $add21$i128 = (Math_imul($x$029$i115, -45107) | 0) + 32768 | 0;
      HEAP32[$call10$i112 + ($i$028$i116 << 2) >> 2] = $add21$i128;
      $i$028$i116 = $i$028$i116 + 1 | 0;
      if (($i$028$i116 | 0) == 256) break; else $x$029$i115 = $x$029$i115 + 1 | 0;
     }
     break;
    }
   case 2:
    {
     switch (HEAP32[$color_transform >> 2] | 0) {
     case 0:
      {
       HEAP32[$call + 4 >> 2] = 9;
       break L15;
       break;
      }
     case 1:
      {
       HEAP32[$call + 4 >> 2] = 10;
       break L15;
       break;
      }
     default:
      {
       $57 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$57 + 20 >> 2] = 28;
       FUNCTION_TABLE_vi[HEAP32[$57 >> 2] & 255]($cinfo);
       break L15;
      }
     }
     break;
    }
   default:
    {
     $59 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$59 + 20 >> 2] = 28;
     FUNCTION_TABLE_vi[HEAP32[$59 >> 2] & 255]($cinfo);
     break L15;
    }
   }
   break;
  }
 case 6:
  {
   HEAP32[$cinfo + 120 >> 2] = 3;
   if ((HEAP32[$jpeg_color_space >> 2] | 0) != 6) {
    $65 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$65 + 20 >> 2] = 28;
    FUNCTION_TABLE_vi[HEAP32[$65 >> 2] & 255]($cinfo);
    break L15;
   }
   switch (HEAP32[$color_transform >> 2] | 0) {
   case 0:
    {
     HEAP32[$call + 4 >> 2] = 9;
     break L15;
     break;
    }
   case 1:
    {
     HEAP32[$call + 4 >> 2] = 10;
     break L15;
     break;
    }
   default:
    {
     $63 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$63 + 20 >> 2] = 28;
     FUNCTION_TABLE_vi[HEAP32[$63 >> 2] & 255]($cinfo);
     break L15;
    }
   }
   break;
  }
 case 4:
  {
   HEAP32[$cinfo + 120 >> 2] = 4;
   switch (HEAP32[$jpeg_color_space >> 2] | 0) {
   case 5:
    {
     HEAP32[$call + 4 >> 2] = 11;
     $68 = HEAP32[$cconvert1 >> 2] | 0;
     $call$i137 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_r_tab$i138 = $68 + 8 | 0;
     HEAP32[$Cr_r_tab$i138 >> 2] = $call$i137;
     $call4$i140 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cb_b_tab$i141 = $68 + 12 | 0;
     HEAP32[$Cb_b_tab$i141 >> 2] = $call4$i140;
     $call7$i143 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $Cr_g_tab$i144 = $68 + 16 | 0;
     HEAP32[$Cr_g_tab$i144 >> 2] = $call7$i143;
     $call10$i146 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     HEAP32[$68 + 20 >> 2] = $call10$i146;
     $77 = HEAP32[$Cr_r_tab$i138 >> 2] | 0;
     $78 = HEAP32[$Cb_b_tab$i141 >> 2] | 0;
     $79 = HEAP32[$Cr_g_tab$i144 >> 2] | 0;
     $i$028$i150 = 0;
     $x$029$i149 = -128;
     while (1) {
      HEAP32[$77 + ($i$028$i150 << 2) >> 2] = ($x$029$i149 * 91881 | 0) + 32768 >> 16;
      HEAP32[$78 + ($i$028$i150 << 2) >> 2] = ($x$029$i149 * 116130 | 0) + 32768 >> 16;
      $mul17$i159 = Math_imul($x$029$i149, -46802) | 0;
      HEAP32[$79 + ($i$028$i150 << 2) >> 2] = $mul17$i159;
      $add21$i162 = (Math_imul($x$029$i149, -22553) | 0) + 32768 | 0;
      HEAP32[$call10$i146 + ($i$028$i150 << 2) >> 2] = $add21$i162;
      $i$028$i150 = $i$028$i150 + 1 | 0;
      if (($i$028$i150 | 0) == 256) break; else $x$029$i149 = $x$029$i149 + 1 | 0;
     }
     break;
    }
   case 4:
    {
     HEAP32[$call + 4 >> 2] = 12;
     break L15;
     break;
    }
   default:
    {
     $80 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$80 + 20 >> 2] = 28;
     FUNCTION_TABLE_vi[HEAP32[$80 >> 2] & 255]($cinfo);
     break L15;
    }
   }
   break;
  }
 default:
  if (($19 | 0) == (HEAP32[$jpeg_color_space >> 2] | 0)) {
   HEAP32[$cinfo + 120 >> 2] = HEAP32[$cinfo + 36 >> 2];
   HEAP32[$call + 4 >> 2] = 12;
   break L15;
  } else {
   $84 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$84 + 20 >> 2] = 28;
   FUNCTION_TABLE_vi[HEAP32[$84 >> 2] & 255]($cinfo);
   break L15;
  }
 } while (0);
 if (HEAP32[$cinfo + 84 >> 2] | 0) {
  $$sink = 1;
  $88 = $cinfo + 124 | 0;
  HEAP32[$88 >> 2] = $$sink;
  return;
 }
 $$sink = HEAP32[$cinfo + 120 >> 2] | 0;
 $88 = $cinfo + 124 | 0;
 HEAP32[$88 >> 2] = $$sink;
 return;
}

function _jpgread($fp, $w, $h, $nc, $dpi) {
 $fp = $fp | 0;
 $w = $w | 0;
 $h = $h | 0;
 $nc = $nc | 0;
 $dpi = $dpi | 0;
 var $$reg2mem70$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buffer = 0, $call = 0, $call17 = 0, $call3 = 0, $call8 = 0, $cinfo = 0, $i$0$reg2mem66$0 = 0, $image_height = 0, $image_width = 0, $jerr = 0, $mul = 0, $mul7 = 0, $num_components = 0, $output_height = 0, $output_scanline = 0, $retval$0$reg2mem$0 = 0, $row$0$reg2mem68$0 = 0, $vararg_buffer = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(832);
 $vararg_buffer74 = sp + 528 | 0;
 $vararg_buffer72 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $cinfo = sp + 24 | 0;
 $jerr = sp + 536 | 0;
 $buffer = sp;
 _memset($cinfo | 0, 0, 488) | 0;
 __THREW__ = 0;
 $call = invoke_ii(62, $jerr | 0) | 0;
 $0 = __THREW__;
 __THREW__ = 0;
 if (($0 | 0) != 0 & (threwValue | 0) != 0) {
  $1 = _testSetjmp(HEAP32[$0 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  if (!$1) _longjmp($0 | 0, threwValue | 0);
  setTempRet0(threwValue | 0);
 } else $1 = -1;
 $2 = getTempRet0() | 0;
 if (($1 | 0) != 1) {
  HEAP32[$cinfo >> 2] = $call;
  HEAP32[$jerr >> 2] = 165;
  _setjmpTable = _saveSetjmp($jerr + 132 | 0, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  _setjmpTableSize = getTempRet0() | 0;
  __THREW__ = 0;
  $3 = __THREW__;
  __THREW__ = 0;
  if (($3 | 0) != 0 & (threwValue | 0) != 0) {
   $4 = _testSetjmp(HEAP32[$3 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$4) _longjmp($3 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $4 = -1;
  $5 = getTempRet0() | 0;
  if (($4 | 0) == 1) $$reg2mem70$0 = $5; else $$reg2mem70$0 = 0;
 } else $$reg2mem70$0 = $2;
 L4 : while (1) {
  if ($$reg2mem70$0 | 0) {
   __THREW__ = 0;
   invoke_vi(166, $cinfo | 0);
   $6 = __THREW__;
   __THREW__ = 0;
   if (($6 | 0) != 0 & (threwValue | 0) != 0) {
    $7 = _testSetjmp(HEAP32[$6 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$7) _longjmp($6 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $7 = -1;
   $8 = getTempRet0() | 0;
   if (($7 | 0) == 1) {
    $$reg2mem70$0 = $8;
    continue;
   }
   __THREW__ = 0;
   invoke_viiii(8, 0, 3, 21762, $vararg_buffer | 0);
   $9 = __THREW__;
   __THREW__ = 0;
   if (($9 | 0) != 0 & (threwValue | 0) != 0) {
    $10 = _testSetjmp(HEAP32[$9 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$10) _longjmp($9 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $10 = -1;
   $11 = getTempRet0() | 0;
   if (($10 | 0) == 1) {
    $$reg2mem70$0 = $11;
    continue;
   } else {
    label = 7;
    break;
   }
  }
  __THREW__ = 0;
  invoke_viii(1, $cinfo | 0, 90, 488);
  $12 = __THREW__;
  __THREW__ = 0;
  if (($12 | 0) != 0 & (threwValue | 0) != 0) {
   $13 = _testSetjmp(HEAP32[$12 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$13) _longjmp($12 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $13 = -1;
  $14 = getTempRet0() | 0;
  if (($13 | 0) == 1) {
   $$reg2mem70$0 = $14;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(125, $cinfo | 0, $fp | 0);
  $15 = __THREW__;
  __THREW__ = 0;
  if (($15 | 0) != 0 & (threwValue | 0) != 0) {
   $16 = _testSetjmp(HEAP32[$15 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$16) _longjmp($15 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $16 = -1;
  $17 = getTempRet0() | 0;
  if (($16 | 0) == 1) {
   $$reg2mem70$0 = $17;
   continue;
  }
  __THREW__ = 0;
  $call3 = invoke_iii(39, $cinfo | 0, 1) | 0;
  $18 = __THREW__;
  __THREW__ = 0;
  if (($18 | 0) != 0 & (threwValue | 0) != 0) {
   $19 = _testSetjmp(HEAP32[$18 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$19) _longjmp($18 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $19 = -1;
  $20 = getTempRet0() | 0;
  if (($19 | 0) == 1) {
   $$reg2mem70$0 = $20;
   continue;
  }
  if (($call3 | 0) != 1) {
   __THREW__ = 0;
   invoke_viiii(8, 0, 3, 21788, $vararg_buffer72 | 0);
   $21 = __THREW__;
   __THREW__ = 0;
   if (($21 | 0) != 0 & (threwValue | 0) != 0) {
    $22 = _testSetjmp(HEAP32[$21 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$22) _longjmp($21 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $22 = -1;
   $23 = getTempRet0() | 0;
   if (($22 | 0) == 1) {
    $$reg2mem70$0 = $23;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(166, $cinfo | 0);
   $24 = __THREW__;
   __THREW__ = 0;
   if (($24 | 0) != 0 & (threwValue | 0) != 0) {
    $25 = _testSetjmp(HEAP32[$24 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$25) _longjmp($24 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $25 = -1;
   $26 = getTempRet0() | 0;
   if (($25 | 0) == 1) {
    $$reg2mem70$0 = $26;
    continue;
   } else {
    label = 14;
    break;
   }
  }
  __THREW__ = 0;
  invoke_ii(63, $cinfo | 0) | 0;
  $27 = __THREW__;
  __THREW__ = 0;
  if (($27 | 0) != 0 & (threwValue | 0) != 0) {
   $28 = _testSetjmp(HEAP32[$27 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$28) _longjmp($27 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $28 = -1;
  $29 = getTempRet0() | 0;
  if (($28 | 0) == 1) {
   $$reg2mem70$0 = $29;
   continue;
  }
  $num_components = $cinfo + 36 | 0;
  $image_width = $cinfo + 28 | 0;
  $mul = Math_imul(HEAP32[$image_width >> 2] | 0, HEAP32[$num_components >> 2] | 0) | 0;
  $image_height = $cinfo + 32 | 0;
  $mul7 = Math_imul($mul, HEAP32[$image_height >> 2] | 0) | 0;
  __THREW__ = 0;
  $call8 = invoke_ii(64, $mul7 | 0) | 0;
  $33 = __THREW__;
  __THREW__ = 0;
  if (($33 | 0) != 0 & (threwValue | 0) != 0) {
   $34 = _testSetjmp(HEAP32[$33 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$34) _longjmp($33 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $34 = -1;
  $35 = getTempRet0() | 0;
  if (($34 | 0) == 1) {
   $$reg2mem70$0 = $35;
   continue;
  }
  if (!$call8) {
   __THREW__ = 0;
   invoke_viiii(8, 0, 3, 21902, $vararg_buffer74 | 0);
   $36 = __THREW__;
   __THREW__ = 0;
   if (($36 | 0) != 0 & (threwValue | 0) != 0) {
    $37 = _testSetjmp(HEAP32[$36 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$37) _longjmp($36 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $37 = -1;
   $38 = getTempRet0() | 0;
   if (($37 | 0) == 1) {
    $$reg2mem70$0 = $38;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(166, $cinfo | 0);
   $39 = __THREW__;
   __THREW__ = 0;
   if (($39 | 0) != 0 & (threwValue | 0) != 0) {
    $40 = _testSetjmp(HEAP32[$39 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$40) _longjmp($39 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $40 = -1;
   $41 = getTempRet0() | 0;
   if (($40 | 0) == 1) {
    $$reg2mem70$0 = $41;
    continue;
   } else {
    label = 20;
    break;
   }
  }
  $output_scanline = $cinfo + 140 | 0;
  $output_height = $cinfo + 116 | 0;
  $row$0$reg2mem68$0 = 0;
  while (1) {
   if ((HEAP32[$output_scanline >> 2] | 0) >>> 0 >= (HEAP32[$output_height >> 2] | 0) >>> 0) break;
   $i$0$reg2mem66$0 = 0;
   while (1) {
    if (($i$0$reg2mem66$0 | 0) == 5) break;
    $arrayidx = $call8 + (Math_imul($i$0$reg2mem66$0 + $row$0$reg2mem68$0 | 0, $mul) | 0) | 0;
    HEAP32[$buffer + ($i$0$reg2mem66$0 << 2) >> 2] = $arrayidx;
    $i$0$reg2mem66$0 = $i$0$reg2mem66$0 + 1 | 0;
   }
   __THREW__ = 0;
   $call17 = invoke_iiii(25, $cinfo | 0, $buffer | 0, 5) | 0;
   $44 = __THREW__;
   __THREW__ = 0;
   if (($44 | 0) != 0 & (threwValue | 0) != 0) {
    $45 = _testSetjmp(HEAP32[$44 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$45) _longjmp($44 | 0, threwValue | 0);
    setTempRet0(threwValue | 0);
   } else $45 = -1;
   $46 = getTempRet0() | 0;
   if (($45 | 0) == 1) {
    $$reg2mem70$0 = $46;
    continue L4;
   }
   $row$0$reg2mem68$0 = $call17 + $row$0$reg2mem68$0 | 0;
  }
  __THREW__ = 0;
  invoke_ii(65, $cinfo | 0) | 0;
  $47 = __THREW__;
  __THREW__ = 0;
  if (($47 | 0) != 0 & (threwValue | 0) != 0) {
   $48 = _testSetjmp(HEAP32[$47 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$48) _longjmp($47 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $48 = -1;
  $49 = getTempRet0() | 0;
  if (($48 | 0) == 1) {
   $$reg2mem70$0 = $49;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(166, $cinfo | 0);
  $50 = __THREW__;
  __THREW__ = 0;
  if (($50 | 0) != 0 & (threwValue | 0) != 0) {
   $51 = _testSetjmp(HEAP32[$50 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$51) _longjmp($50 | 0, threwValue | 0);
   setTempRet0(threwValue | 0);
  } else $51 = -1;
  $$reg2mem70$0 = getTempRet0() | 0;
  if (($51 | 0) != 1) {
   label = 30;
   break;
  }
 }
 L33 : do if ((label | 0) == 7) $retval$0$reg2mem$0 = 0; else if ((label | 0) == 14) $retval$0$reg2mem$0 = 0; else if ((label | 0) == 20) $retval$0$reg2mem$0 = 0; else if ((label | 0) == 30) {
  if ($w | 0) HEAP32[$w >> 2] = HEAP32[$image_width >> 2];
  if ($h | 0) HEAP32[$h >> 2] = HEAP32[$image_height >> 2];
  if ($nc | 0) HEAP32[$nc >> 2] = HEAP32[$num_components >> 2];
  if (!$dpi) $retval$0$reg2mem$0 = $call8; else {
   $56 = HEAP8[$cinfo + 290 >> 0] | 0;
   switch ($56 << 24 >> 24) {
   case 1:
    {
     $57 = HEAP16[$cinfo + 292 >> 1] | 0;
     if ($57 << 16 >> 16 == (HEAP16[$cinfo + 294 >> 1] | 0)) {
      HEAPF32[$dpi >> 2] = +($57 & 65535);
      $retval$0$reg2mem$0 = $call8;
      break L33;
     }
     break;
    }
   case 2:
    {
     $59 = HEAP16[$cinfo + 292 >> 1] | 0;
     if ($59 << 16 >> 16 == (HEAP16[$cinfo + 294 >> 1] | 0)) {
      HEAPF32[$dpi >> 2] = +($59 & 65535) * 2.5399999618530273;
      $retval$0$reg2mem$0 = $call8;
      break L33;
     }
     break;
    }
   default:
    if ((($56 & 255) > 2 ? (HEAP16[$cinfo + 292 >> 1] | 0) == 0 : 0) ? (HEAP16[$cinfo + 294 >> 1] | 0) == 0 : 0) {
     HEAPF32[$dpi >> 2] = +($56 & 255);
     $retval$0$reg2mem$0 = $call8;
     break L33;
    }
   }
   HEAPF32[$dpi >> 2] = 0.0;
   $retval$0$reg2mem$0 = $call8;
  }
 } while (0);
 _free(_setjmpTable | 0);
 STACKTOP = sp;
 return $retval$0$reg2mem$0 | 0;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$pre = 0, $$pre135 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $21 = 0, $28 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call214 = 0, $call21492 = 0, $conv132$pre$phi138Z2D = 0, $conv132$pre$phiZ2D = 0, $conv152 = 0, $conv38 = 0, $conv99 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr126 = 0, $incdec$ptr128 = 0, $incdec$ptr137 = 0, $incdec$ptr163 = 0, $incdec$ptr165 = 0, $incdec$ptr180 = 0, $incdec$ptr67 = 0, $incdec$ptr78 = 0, $locale = 0, $or168 = 0, $or183 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$0102 = 0, $s$1 = 0, $s$1$ph = 0, $s$10 = 0, $s$11147 = 0, $s$11148 = 0, $s$119194 = 0, $s$2123 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6$lcssa = 0, $s$6$ph = 0, $s$6116 = 0, $s$7106 = 0, $s$8 = 0, $s$8$ph = 0, $s$8141 = 0, $s$9 = 0, $s$9$sink = 0, $sub100 = 0, $sub129 = 0, $sub133$pre$phiZ2D = 0, $sub143 = 0, $sub173 = 0, $sub188 = 0, $sub47 = 0, $tobool7 = 0, $wn$addr$0100 = 0, $wn$addr$1 = 0, $wn$addr$1$ph = 0, $wn$addr$2122 = 0, $wn$addr$3 = 0, $wn$addr$4 = 0, $wn$addr$5$ph = 0, $wn$addr$5114 = 0, $wn$addr$6104 = 0, $wn$addr$7 = 0, $wn$addr$7$ph = 0, $wn$addr$7139 = 0, $wn$addr$8 = 0, $wn$addr$9 = 0, $wn$addr$9144 = 0, $ws$addr$0101 = 0, $ws$addr$1$ph = 0, $ws$addr$1115 = 0, $ws$addr$2105 = 0, $ws$addr$3 = 0, $ws$addr$3$ph = 0, $ws$addr$3140 = 0, $ws$addr$4 = 0, $ws$addr$5 = 0, $ws$addr$5145 = 0, $ws$addr$5146 = 0, label = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (($st | 0) != 0 ? ($1 = HEAP32[$st >> 2] | 0, ($1 | 0) != 0) : 0) if (!$ws) {
  $c$2 = $1;
  $s$4 = $0;
  $wn$addr$4 = $wn;
  label = 26;
 } else {
  HEAP32[$st >> 2] = 0;
  $c$4 = $1;
  $s$9 = $0;
  $wn$addr$8 = $wn;
  $ws$addr$4 = $ws;
  label = 48;
 } else label = 5;
 L5 : do if ((label | 0) == 5) {
  $locale = (___pthread_self_7() | 0) + 188 | 0;
  $tobool7 = ($ws | 0) != 0;
  if (HEAP32[HEAP32[$locale >> 2] >> 2] | 0) if ($tobool7) {
   $s$6$ph = $0;
   $wn$addr$5$ph = $wn;
   $ws$addr$1$ph = $ws;
   label = 33;
   break;
  } else {
   $s$1$ph = $0;
   $wn$addr$1$ph = $wn;
   label = 15;
   break;
  }
  if (!$tobool7) {
   $retval$0 = _strlen($0) | 0;
   label = 63;
   break;
  }
  L13 : do if (!$wn) $s$0$lcssa = $0; else {
   $s$0102 = $0;
   $wn$addr$0100 = $wn;
   $ws$addr$0101 = $ws;
   while (1) {
    $4 = HEAP8[$s$0102 >> 0] | 0;
    if (!($4 << 24 >> 24)) break;
    $incdec$ptr = $s$0102 + 1 | 0;
    HEAP32[$ws$addr$0101 >> 2] = $4 << 24 >> 24 & 57343;
    $dec = $wn$addr$0100 + -1 | 0;
    if (!$dec) {
     $s$0$lcssa = $incdec$ptr;
     break L13;
    } else {
     $s$0102 = $incdec$ptr;
     $wn$addr$0100 = $dec;
     $ws$addr$0101 = $ws$addr$0101 + 4 | 0;
    }
   }
   HEAP32[$ws$addr$0101 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
   $retval$0 = $wn - $wn$addr$0100 | 0;
   label = 63;
   break L5;
  } while (0);
  HEAP32[$src >> 2] = $s$0$lcssa;
  $retval$0 = $wn;
  label = 63;
 } while (0);
 L20 : while (1) {
  L21 : do if ((label | 0) == 15) {
   label = 0;
   $s$1 = $s$1$ph;
   $wn$addr$1 = $wn$addr$1$ph;
   while (1) {
    $5 = HEAP8[$s$1 >> 0] | 0;
    if ((($5 & 255) + -1 | 0) >>> 0 < 127 ? ($s$1 & 3 | 0) == 0 : 0) {
     $7 = HEAP32[$s$1 >> 2] | 0;
     $8 = $7 & 255;
     if (!(($7 + -16843009 | $7) & -2139062144)) {
      $s$2123 = $s$1;
      $wn$addr$2122 = $wn$addr$1;
      do {
       $s$2123 = $s$2123 + 4 | 0;
       $wn$addr$2122 = $wn$addr$2122 + -4 | 0;
       $9 = HEAP32[$s$2123 >> 2] | 0;
      } while (!(($9 + -16843009 | $9) & -2139062144 | 0));
      $11 = $9 & 255;
      $s$3 = $s$2123;
      $wn$addr$3 = $wn$addr$2122;
     } else {
      $11 = $8;
      $s$3 = $s$1;
      $wn$addr$3 = $wn$addr$1;
     }
    } else {
     $11 = $5;
     $s$3 = $s$1;
     $wn$addr$3 = $wn$addr$1;
    }
    $conv38 = $11 & 255;
    if (($conv38 + -1 | 0) >>> 0 >= 127) break;
    $s$1 = $s$3 + 1 | 0;
    $wn$addr$1 = $wn$addr$3 + -1 | 0;
   }
   $sub47 = $conv38 + -194 | 0;
   if ($sub47 >>> 0 > 50) {
    $s$11147 = $s$3;
    $wn$addr$9144 = $wn$addr$3;
    $ws$addr$5145 = $ws;
    label = 57;
   } else {
    $c$2 = HEAP32[3664 + ($sub47 << 2) >> 2] | 0;
    $s$4 = $s$3 + 1 | 0;
    $wn$addr$4 = $wn$addr$3;
    label = 26;
    continue L20;
   }
  } else if ((label | 0) == 26) {
   label = 0;
   $14 = (HEAPU8[$s$4 >> 0] | 0) >>> 3;
   if (($14 + -16 | $14 + ($c$2 >> 26)) >>> 0 > 7) {
    $c$6 = $c$2;
    $s$9$sink = $s$4;
    $wn$addr$9 = $wn$addr$4;
    $ws$addr$5 = $ws;
    label = 56;
   } else {
    $incdec$ptr67 = $s$4 + 1 | 0;
    if ($c$2 & 33554432) {
     if ((HEAP8[$incdec$ptr67 >> 0] & -64) << 24 >> 24 != -128) {
      $c$6 = $c$2;
      $s$9$sink = $s$4;
      $wn$addr$9 = $wn$addr$4;
      $ws$addr$5 = $ws;
      label = 56;
      break;
     }
     $incdec$ptr78 = $s$4 + 2 | 0;
     if (!($c$2 & 524288)) $s$5 = $incdec$ptr78; else {
      if ((HEAP8[$incdec$ptr78 >> 0] & -64) << 24 >> 24 != -128) {
       $c$6 = $c$2;
       $s$9$sink = $s$4;
       $wn$addr$9 = $wn$addr$4;
       $ws$addr$5 = $ws;
       label = 56;
       break;
      }
      $s$5 = $s$4 + 3 | 0;
     }
    } else $s$5 = $incdec$ptr67;
    $s$1$ph = $s$5;
    $wn$addr$1$ph = $wn$addr$4 + -1 | 0;
    label = 15;
    continue L20;
   }
  } else if ((label | 0) == 33) {
   label = 0;
   L23 : do if (!$wn$addr$5$ph) $s$6$lcssa = $s$6$ph; else {
    $s$6116 = $s$6$ph;
    $wn$addr$5114 = $wn$addr$5$ph;
    $ws$addr$1115 = $ws$addr$1$ph;
    while (1) {
     $conv99 = HEAPU8[$s$6116 >> 0] | 0;
     $sub100 = $conv99 + -1 | 0;
     if ($sub100 >>> 0 < 127) if (($s$6116 & 3 | 0) == 0 & $wn$addr$5114 >>> 0 > 4) {
      $s$7106 = $s$6116;
      $wn$addr$6104 = $wn$addr$5114;
      $ws$addr$2105 = $ws$addr$1115;
      while (1) {
       $21 = HEAP32[$s$7106 >> 2] | 0;
       if (($21 + -16843009 | $21) & -2139062144 | 0) {
        label = 42;
        break;
       }
       HEAP32[$ws$addr$2105 >> 2] = $21 & 255;
       HEAP32[$ws$addr$2105 + 4 >> 2] = HEAPU8[$s$7106 + 1 >> 0];
       HEAP32[$ws$addr$2105 + 8 >> 2] = HEAPU8[$s$7106 + 2 >> 0];
       $incdec$ptr126 = $s$7106 + 4 | 0;
       $incdec$ptr128 = $ws$addr$2105 + 16 | 0;
       HEAP32[$ws$addr$2105 + 12 >> 2] = HEAPU8[$s$7106 + 3 >> 0];
       $sub129 = $wn$addr$6104 + -4 | 0;
       if ($sub129 >>> 0 > 4) {
        $s$7106 = $incdec$ptr126;
        $wn$addr$6104 = $sub129;
        $ws$addr$2105 = $incdec$ptr128;
       } else {
        label = 41;
        break;
       }
      }
      if ((label | 0) == 41) {
       label = 0;
       $$pre = HEAP8[$incdec$ptr126 >> 0] | 0;
       $s$8$ph = $incdec$ptr126;
       $wn$addr$7$ph = $sub129;
       $ws$addr$3$ph = $incdec$ptr128;
      } else if ((label | 0) == 42) {
       label = 0;
       $$pre = $21 & 255;
       $s$8$ph = $s$7106;
       $wn$addr$7$ph = $wn$addr$6104;
       $ws$addr$3$ph = $ws$addr$2105;
      }
      $$pre135 = $$pre & 255;
      $conv132$pre$phiZ2D = $$pre135;
      $s$8 = $s$8$ph;
      $sub133$pre$phiZ2D = $$pre135 + -1 | 0;
      $wn$addr$7 = $wn$addr$7$ph;
      $ws$addr$3 = $ws$addr$3$ph;
      label = 44;
     } else {
      $conv132$pre$phi138Z2D = $conv99;
      $s$8141 = $s$6116;
      $wn$addr$7139 = $wn$addr$5114;
      $ws$addr$3140 = $ws$addr$1115;
     } else {
      $conv132$pre$phiZ2D = $conv99;
      $s$8 = $s$6116;
      $sub133$pre$phiZ2D = $sub100;
      $wn$addr$7 = $wn$addr$5114;
      $ws$addr$3 = $ws$addr$1115;
      label = 44;
     }
     if ((label | 0) == 44) {
      label = 0;
      if ($sub133$pre$phiZ2D >>> 0 < 127) {
       $conv132$pre$phi138Z2D = $conv132$pre$phiZ2D;
       $s$8141 = $s$8;
       $wn$addr$7139 = $wn$addr$7;
       $ws$addr$3140 = $ws$addr$3;
      } else break;
     }
     $incdec$ptr137 = $s$8141 + 1 | 0;
     HEAP32[$ws$addr$3140 >> 2] = $conv132$pre$phi138Z2D;
     $wn$addr$5114 = $wn$addr$7139 + -1 | 0;
     if (!$wn$addr$5114) {
      $s$6$lcssa = $incdec$ptr137;
      break L23;
     } else {
      $s$6116 = $incdec$ptr137;
      $ws$addr$1115 = $ws$addr$3140 + 4 | 0;
     }
    }
    $sub143 = $conv132$pre$phiZ2D + -194 | 0;
    if ($sub143 >>> 0 > 50) {
     $s$11147 = $s$8;
     $wn$addr$9144 = $wn$addr$7;
     $ws$addr$5145 = $ws$addr$3;
     label = 57;
     break L21;
    }
    $c$4 = HEAP32[3664 + ($sub143 << 2) >> 2] | 0;
    $s$9 = $s$8 + 1 | 0;
    $wn$addr$8 = $wn$addr$7;
    $ws$addr$4 = $ws$addr$3;
    label = 48;
    continue L20;
   } while (0);
   HEAP32[$src >> 2] = $s$6$lcssa;
   $retval$0 = $wn;
   label = 63;
   continue L20;
  } else if ((label | 0) == 48) {
   label = 0;
   $conv152 = HEAPU8[$s$9 >> 0] | 0;
   $28 = $conv152 >>> 3;
   if (($28 + -16 | $28 + ($c$4 >> 26)) >>> 0 > 7) {
    $c$6 = $c$4;
    $s$9$sink = $s$9;
    $wn$addr$9 = $wn$addr$8;
    $ws$addr$5 = $ws$addr$4;
    label = 56;
   } else {
    $incdec$ptr165 = $s$9 + 1 | 0;
    $or168 = $conv152 + -128 | $c$4 << 6;
    do if (($or168 | 0) < 0) {
     $sub173 = (HEAPU8[$incdec$ptr165 >> 0] | 0) + -128 | 0;
     if ($sub173 >>> 0 <= 63) {
      $incdec$ptr180 = $s$9 + 2 | 0;
      $or183 = $sub173 | $or168 << 6;
      if (($or183 | 0) >= 0) {
       $c$5 = $or183;
       $s$10 = $incdec$ptr180;
       break;
      }
      $sub188 = (HEAPU8[$incdec$ptr180 >> 0] | 0) + -128 | 0;
      if ($sub188 >>> 0 <= 63) {
       $c$5 = $sub188 | $or183 << 6;
       $s$10 = $s$9 + 3 | 0;
       break;
      }
     }
     $call21492 = ___errno_location() | 0;
     HEAP32[$call21492 >> 2] = 25;
     $s$119194 = $s$9 + -1 | 0;
     break L21;
    } else {
     $c$5 = $or168;
     $s$10 = $incdec$ptr165;
    } while (0);
    HEAP32[$ws$addr$4 >> 2] = $c$5;
    $s$6$ph = $s$10;
    $wn$addr$5$ph = $wn$addr$8 + -1 | 0;
    $ws$addr$1$ph = $ws$addr$4 + 4 | 0;
    label = 33;
    continue L20;
   }
  } else if ((label | 0) == 63) {
   label = 0;
   return $retval$0 | 0;
  } while (0);
  if ((label | 0) == 56) {
   label = 0;
   $incdec$ptr163 = $s$9$sink + -1 | 0;
   if (!$c$6) {
    $s$11147 = $incdec$ptr163;
    $wn$addr$9144 = $wn$addr$9;
    $ws$addr$5145 = $ws$addr$5;
    label = 57;
   } else {
    $s$11148 = $incdec$ptr163;
    $ws$addr$5146 = $ws$addr$5;
    label = 61;
   }
  }
  if ((label | 0) == 57) {
   label = 0;
   if (!(HEAP8[$s$11147 >> 0] | 0)) {
    if ($ws$addr$5145 | 0) {
     HEAP32[$ws$addr$5145 >> 2] = 0;
     HEAP32[$src >> 2] = 0;
    }
    $retval$0 = $wn - $wn$addr$9144 | 0;
    label = 63;
    continue;
   } else {
    $s$11148 = $s$11147;
    $ws$addr$5146 = $ws$addr$5145;
    label = 61;
   }
  }
  if ((label | 0) == 61) {
   label = 0;
   $call214 = ___errno_location() | 0;
   HEAP32[$call214 >> 2] = 25;
   if (!$ws$addr$5146) {
    $retval$0 = -1;
    label = 63;
    continue;
   } else $s$119194 = $s$11148;
  }
  HEAP32[$src >> 2] = $s$119194;
  $retval$0 = -1;
  label = 63;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $45 = 0, $49 = 0, $50 = 0, $57 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i117 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i116 = 0, $__opt$0 = 0, $__tab_$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i130 = 0, $call$i40 = 0, $call24 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i158 = 0, $retval$0$i$i$i$i65 = 0, $retval$0$i$i125 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i179 = 0, $retval$0$i$i13$i$i86 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp23$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $__tab_$i = $call$i + 8 | 0;
 $0 = 0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $61 = $1;
   break;
  }
  $2 = $1;
  if ($1) {
   $3 = HEAP32[$1 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$1 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 127]($1) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $20 = 0;
    $49 = 0;
    $72 = 1;
   } else {
    $20 = $2;
    $49 = $1;
    $72 = 0;
   }
  } else {
   $20 = $2;
   $49 = 0;
   $72 = 1;
  }
  $7 = HEAP32[$__e >> 2] | 0;
  $8 = $7;
  do if ($7) {
   $9 = HEAP32[$7 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($72) {
    $21 = $8;
    $73 = $7;
    break;
   } else {
    label = 63;
    break L1;
   } else {
    HEAP32[$__e >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   }
  } else {
   $$ph = $8;
   label = 15;
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($72) {
    label = 63;
    break;
   } else {
    $21 = $$ph;
    $73 = 0;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 1 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    label = 63;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$incdec$ptr >> 0] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 2 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      label = 63;
      break L1;
     }
     $22 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$incdec$ptr16 >> 0] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $22 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $19 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $20;
   HEAP32[$agg$tmp23 >> 2] = $21;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   $call24 = FUNCTION_TABLE_iiiiiiiii[$19 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   HEAP32[$__b >> 2] = $call24;
   $__fmtb$addr$4 = $22 + 2 | 0;
  } else {
   $23 = HEAP8[$__fmtb$addr$0 >> 0] | 0;
   if ($23 << 24 >> 24 > -1 ? ($24 = HEAP32[$__tab_$i >> 2] | 0, HEAP16[$24 + ($23 << 24 >> 24 << 1) >> 1] & 8192) : 0) {
    $__fmtb$addr$0$pn = $__fmtb$addr$0;
    while (1) {
     $__fmtb$addr$3 = $__fmtb$addr$0$pn + 1 | 0;
     if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
      $__fmtb$addr$3$lcssa = $__fmte;
      break;
     }
     $26 = HEAP8[$__fmtb$addr$3 >> 0] | 0;
     if ($26 << 24 >> 24 <= -1) {
      $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
      break;
     }
     if (!(HEAP16[$24 + ($26 << 24 >> 24 << 1) >> 1] & 8192)) {
      $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
      break;
     } else $__fmtb$addr$0$pn = $__fmtb$addr$3;
    }
    $28 = $49;
    $33 = $73;
    while (1) {
     if ($28) {
      $29 = HEAP32[$28 + 12 >> 2] | 0;
      if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i$i$i65 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$29 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i65, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $38 = 0;
       $74 = 1;
      } else {
       $38 = $28;
       $74 = 0;
      }
     } else {
      $38 = 0;
      $74 = 1;
     }
     do if ($33) {
      $34 = HEAP32[$33 + 12 >> 2] | 0;
      if (($34 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) $retval$0$i$i13$i$i86 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; else $retval$0$i$i13$i$i86 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
      if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i86, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($74) {
       $75 = $33;
       break;
      } else {
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L24;
      } else {
       HEAP32[$__e >> 2] = 0;
       label = 42;
       break;
      }
     } else label = 42; while (0);
     if ((label | 0) == 42) {
      label = 0;
      if ($74) {
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L24;
      } else $75 = 0;
     }
     $__ninp_$i$i = $38 + 12 | 0;
     $39 = HEAP32[$__ninp_$i$i >> 2] | 0;
     $__einp_$i$i = $38 + 16 | 0;
     if (($39 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
     if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     }
     $45 = HEAP32[$__ninp_$i$i >> 2] | 0;
     if (($45 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] & 127]($38) | 0; else {
      HEAP32[$__ninp_$i$i >> 2] = $45 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
     }
     $28 = $38;
     $33 = $75;
    }
   }
   $__ninp_$i$i116 = $49 + 12 | 0;
   $50 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   $__einp_$i$i117 = $49 + 16 | 0;
   if (($50 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) $retval$0$i$i125 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] & 127]($49) | 0; else $retval$0$i$i125 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$50 >> 0] | 0) | 0;
   $call$i130 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i, $retval$0$i$i125 & 255) | 0;
   if ($call$i130 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[$__err >> 2] = 4;
    $__fmtb$addr$4 = $__fmtb$addr$0;
    break;
   }
   $57 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   if (($57 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 40 >> 2] & 127]($49) | 0; else {
    HEAP32[$__ninp_$i$i116 >> 2] = $57 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$57 >> 0] | 0) | 0;
   }
   $__fmtb$addr$4 = $__fmtb$addr$0 + 1 | 0;
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 63) {
  HEAP32[$__err >> 2] = 4;
  $61 = $49;
 }
 if ($61) {
  $62 = HEAP32[$61 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) $retval$0$i$i$i$i158 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 36 >> 2] & 127]($61) | 0; else $retval$0$i$i$i$i158 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$62 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i158, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $76 = 1;
   $retval$sroa$0$0$copyload = 0;
  } else {
   $76 = 0;
   $retval$sroa$0$0$copyload = $61;
  }
 } else {
  $76 = 1;
  $retval$sroa$0$0$copyload = 0;
 }
 $66 = HEAP32[$__e >> 2] | 0;
 do if ($66) {
  $67 = HEAP32[$66 + 12 >> 2] | 0;
  if (($67 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $retval$0$i$i13$i$i179 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $retval$0$i$i13$i$i179 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i179, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($76) break; else {
   label = 78;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 76;
   break;
  }
 } else label = 76; while (0);
 if ((label | 0) == 76 ? $76 : 0) label = 78;
 if ((label | 0) == 78) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _jpeg_idct_8x4($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $add$ptr = 0, $add$ptr39 = 0, $add17 = 0, $add17$1 = 0, $add17$2 = 0, $add17$3 = 0, $add17$4 = 0, $add17$5 = 0, $add17$6 = 0, $add17$7 = 0, $add41 = 0, $add52 = 0, $add55 = 0, $add57 = 0, $add63 = 0, $add64 = 0, $add69 = 0, $add70 = 0, $add76 = 0, $add78 = 0, $add84 = 0, $add86 = 0, $ctr$1132 = 0, $mul = 0, $mul$1 = 0, $mul$2 = 0, $mul$3 = 0, $mul$4 = 0, $mul$5 = 0, $mul$6 = 0, $mul$7 = 0, $mul10 = 0, $mul10$1 = 0, $mul10$2 = 0, $mul10$3 = 0, $mul10$4 = 0, $mul10$5 = 0, $mul10$6 = 0, $mul10$7 = 0, $mul14 = 0, $mul14$1 = 0, $mul14$2 = 0, $mul14$3 = 0, $mul14$4 = 0, $mul14$5 = 0, $mul14$6 = 0, $mul14$7 = 0, $mul5 = 0, $mul5$1 = 0, $mul5$2 = 0, $mul5$3 = 0, $mul5$4 = 0, $mul5$5 = 0, $mul5$6 = 0, $mul5$7 = 0, $mul50 = 0, $mul66 = 0, $mul72 = 0, $mul80 = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shl$6 = 0, $shl$7 = 0, $shl44 = 0, $shl46 = 0, $shl6 = 0, $shl6$1 = 0, $shl6$2 = 0, $shl6$3 = 0, $shl6$4 = 0, $shl6$5 = 0, $shl6$6 = 0, $shl6$7 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr$5 = 0, $shr$6 = 0, $shr$7 = 0, $shr22 = 0, $shr22$1 = 0, $shr22$2 = 0, $shr22$3 = 0, $shr22$4 = 0, $shr22$5 = 0, $shr22$6 = 0, $shr22$7 = 0, $sub54 = 0, $sub56 = 0, $sub58 = 0, $workspace = 0, $wsptr$1131 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $mul = Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0;
 $mul5 = Math_imul(HEAP32[$1 + 64 >> 2] | 0, HEAP16[$coef_block + 32 >> 1] | 0) | 0;
 $shl = $mul5 + $mul << 2;
 $shl6 = $mul - $mul5 << 2;
 $mul10 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $mul14 = Math_imul(HEAP32[$1 + 96 >> 2] | 0, HEAP16[$coef_block + 48 >> 1] | 0) | 0;
 $add17 = (($mul14 + $mul10 | 0) * 4433 | 0) + 1024 | 0;
 $shr = $add17 + ($mul10 * 6270 | 0) >> 11;
 $shr22 = $add17 + (Math_imul($mul14, -15137) | 0) >> 11;
 HEAP32[$workspace >> 2] = $shr + $shl;
 HEAP32[$workspace + 96 >> 2] = $shl - $shr;
 HEAP32[$workspace + 32 >> 2] = $shr22 + $shl6;
 HEAP32[$workspace + 64 >> 2] = $shl6 - $shr22;
 $mul$1 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 $mul5$1 = Math_imul(HEAP32[$1 + 68 >> 2] | 0, HEAP16[$coef_block + 34 >> 1] | 0) | 0;
 $shl$1 = $mul5$1 + $mul$1 << 2;
 $shl6$1 = $mul$1 - $mul5$1 << 2;
 $mul10$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $mul14$1 = Math_imul(HEAP32[$1 + 100 >> 2] | 0, HEAP16[$coef_block + 50 >> 1] | 0) | 0;
 $add17$1 = (($mul14$1 + $mul10$1 | 0) * 4433 | 0) + 1024 | 0;
 $shr$1 = $add17$1 + ($mul10$1 * 6270 | 0) >> 11;
 $shr22$1 = $add17$1 + (Math_imul($mul14$1, -15137) | 0) >> 11;
 HEAP32[$workspace + 4 >> 2] = $shr$1 + $shl$1;
 HEAP32[$workspace + 100 >> 2] = $shl$1 - $shr$1;
 HEAP32[$workspace + 36 >> 2] = $shr22$1 + $shl6$1;
 HEAP32[$workspace + 68 >> 2] = $shl6$1 - $shr22$1;
 $mul$2 = Math_imul(HEAP32[$1 + 8 >> 2] | 0, HEAP16[$coef_block + 4 >> 1] | 0) | 0;
 $mul5$2 = Math_imul(HEAP32[$1 + 72 >> 2] | 0, HEAP16[$coef_block + 36 >> 1] | 0) | 0;
 $shl$2 = $mul5$2 + $mul$2 << 2;
 $shl6$2 = $mul$2 - $mul5$2 << 2;
 $mul10$2 = Math_imul(HEAP32[$1 + 40 >> 2] | 0, HEAP16[$coef_block + 20 >> 1] | 0) | 0;
 $mul14$2 = Math_imul(HEAP32[$1 + 104 >> 2] | 0, HEAP16[$coef_block + 52 >> 1] | 0) | 0;
 $add17$2 = (($mul14$2 + $mul10$2 | 0) * 4433 | 0) + 1024 | 0;
 $shr$2 = $add17$2 + ($mul10$2 * 6270 | 0) >> 11;
 $shr22$2 = $add17$2 + (Math_imul($mul14$2, -15137) | 0) >> 11;
 HEAP32[$workspace + 8 >> 2] = $shr$2 + $shl$2;
 HEAP32[$workspace + 104 >> 2] = $shl$2 - $shr$2;
 HEAP32[$workspace + 40 >> 2] = $shr22$2 + $shl6$2;
 HEAP32[$workspace + 72 >> 2] = $shl6$2 - $shr22$2;
 $mul$3 = Math_imul(HEAP32[$1 + 12 >> 2] | 0, HEAP16[$coef_block + 6 >> 1] | 0) | 0;
 $mul5$3 = Math_imul(HEAP32[$1 + 76 >> 2] | 0, HEAP16[$coef_block + 38 >> 1] | 0) | 0;
 $shl$3 = $mul5$3 + $mul$3 << 2;
 $shl6$3 = $mul$3 - $mul5$3 << 2;
 $mul10$3 = Math_imul(HEAP32[$1 + 44 >> 2] | 0, HEAP16[$coef_block + 22 >> 1] | 0) | 0;
 $mul14$3 = Math_imul(HEAP32[$1 + 108 >> 2] | 0, HEAP16[$coef_block + 54 >> 1] | 0) | 0;
 $add17$3 = (($mul14$3 + $mul10$3 | 0) * 4433 | 0) + 1024 | 0;
 $shr$3 = $add17$3 + ($mul10$3 * 6270 | 0) >> 11;
 $shr22$3 = $add17$3 + (Math_imul($mul14$3, -15137) | 0) >> 11;
 HEAP32[$workspace + 12 >> 2] = $shr$3 + $shl$3;
 HEAP32[$workspace + 108 >> 2] = $shl$3 - $shr$3;
 HEAP32[$workspace + 44 >> 2] = $shr22$3 + $shl6$3;
 HEAP32[$workspace + 76 >> 2] = $shl6$3 - $shr22$3;
 $mul$4 = Math_imul(HEAP32[$1 + 16 >> 2] | 0, HEAP16[$coef_block + 8 >> 1] | 0) | 0;
 $mul5$4 = Math_imul(HEAP32[$1 + 80 >> 2] | 0, HEAP16[$coef_block + 40 >> 1] | 0) | 0;
 $shl$4 = $mul5$4 + $mul$4 << 2;
 $shl6$4 = $mul$4 - $mul5$4 << 2;
 $mul10$4 = Math_imul(HEAP32[$1 + 48 >> 2] | 0, HEAP16[$coef_block + 24 >> 1] | 0) | 0;
 $mul14$4 = Math_imul(HEAP32[$1 + 112 >> 2] | 0, HEAP16[$coef_block + 56 >> 1] | 0) | 0;
 $add17$4 = (($mul14$4 + $mul10$4 | 0) * 4433 | 0) + 1024 | 0;
 $shr$4 = $add17$4 + ($mul10$4 * 6270 | 0) >> 11;
 $shr22$4 = $add17$4 + (Math_imul($mul14$4, -15137) | 0) >> 11;
 HEAP32[$workspace + 16 >> 2] = $shr$4 + $shl$4;
 HEAP32[$workspace + 112 >> 2] = $shl$4 - $shr$4;
 HEAP32[$workspace + 48 >> 2] = $shr22$4 + $shl6$4;
 HEAP32[$workspace + 80 >> 2] = $shl6$4 - $shr22$4;
 $mul$5 = Math_imul(HEAP32[$1 + 20 >> 2] | 0, HEAP16[$coef_block + 10 >> 1] | 0) | 0;
 $mul5$5 = Math_imul(HEAP32[$1 + 84 >> 2] | 0, HEAP16[$coef_block + 42 >> 1] | 0) | 0;
 $shl$5 = $mul5$5 + $mul$5 << 2;
 $shl6$5 = $mul$5 - $mul5$5 << 2;
 $mul10$5 = Math_imul(HEAP32[$1 + 52 >> 2] | 0, HEAP16[$coef_block + 26 >> 1] | 0) | 0;
 $mul14$5 = Math_imul(HEAP32[$1 + 116 >> 2] | 0, HEAP16[$coef_block + 58 >> 1] | 0) | 0;
 $add17$5 = (($mul14$5 + $mul10$5 | 0) * 4433 | 0) + 1024 | 0;
 $shr$5 = $add17$5 + ($mul10$5 * 6270 | 0) >> 11;
 $shr22$5 = $add17$5 + (Math_imul($mul14$5, -15137) | 0) >> 11;
 HEAP32[$workspace + 20 >> 2] = $shr$5 + $shl$5;
 HEAP32[$workspace + 116 >> 2] = $shl$5 - $shr$5;
 HEAP32[$workspace + 52 >> 2] = $shr22$5 + $shl6$5;
 HEAP32[$workspace + 84 >> 2] = $shl6$5 - $shr22$5;
 $mul$6 = Math_imul(HEAP32[$1 + 24 >> 2] | 0, HEAP16[$coef_block + 12 >> 1] | 0) | 0;
 $mul5$6 = Math_imul(HEAP32[$1 + 88 >> 2] | 0, HEAP16[$coef_block + 44 >> 1] | 0) | 0;
 $shl$6 = $mul5$6 + $mul$6 << 2;
 $shl6$6 = $mul$6 - $mul5$6 << 2;
 $mul10$6 = Math_imul(HEAP32[$1 + 56 >> 2] | 0, HEAP16[$coef_block + 28 >> 1] | 0) | 0;
 $mul14$6 = Math_imul(HEAP32[$1 + 120 >> 2] | 0, HEAP16[$coef_block + 60 >> 1] | 0) | 0;
 $add17$6 = (($mul14$6 + $mul10$6 | 0) * 4433 | 0) + 1024 | 0;
 $shr$6 = $add17$6 + ($mul10$6 * 6270 | 0) >> 11;
 $shr22$6 = $add17$6 + (Math_imul($mul14$6, -15137) | 0) >> 11;
 HEAP32[$workspace + 24 >> 2] = $shr$6 + $shl$6;
 HEAP32[$workspace + 120 >> 2] = $shl$6 - $shr$6;
 HEAP32[$workspace + 56 >> 2] = $shr22$6 + $shl6$6;
 HEAP32[$workspace + 88 >> 2] = $shl6$6 - $shr22$6;
 $mul$7 = Math_imul(HEAP32[$1 + 28 >> 2] | 0, HEAP16[$coef_block + 14 >> 1] | 0) | 0;
 $mul5$7 = Math_imul(HEAP32[$1 + 92 >> 2] | 0, HEAP16[$coef_block + 46 >> 1] | 0) | 0;
 $shl$7 = $mul5$7 + $mul$7 << 2;
 $shl6$7 = $mul$7 - $mul5$7 << 2;
 $mul10$7 = Math_imul(HEAP32[$1 + 60 >> 2] | 0, HEAP16[$coef_block + 30 >> 1] | 0) | 0;
 $mul14$7 = Math_imul(HEAP32[$1 + 124 >> 2] | 0, HEAP16[$coef_block + 62 >> 1] | 0) | 0;
 $add17$7 = (($mul14$7 + $mul10$7 | 0) * 4433 | 0) + 1024 | 0;
 $shr$7 = $add17$7 + ($mul10$7 * 6270 | 0) >> 11;
 $shr22$7 = $add17$7 + (Math_imul($mul14$7, -15137) | 0) >> 11;
 HEAP32[$workspace + 28 >> 2] = $shr$7 + $shl$7;
 HEAP32[$workspace + 124 >> 2] = $shl$7 - $shr$7;
 HEAP32[$workspace + 60 >> 2] = $shr22$7 + $shl6$7;
 HEAP32[$workspace + 92 >> 2] = $shl6$7 - $shr22$7;
 $add$ptr = $0 + -384 | 0;
 $ctr$1132 = 0;
 $wsptr$1131 = $workspace;
 while (1) {
  $add$ptr39 = (HEAP32[$output_buf + ($ctr$1132 << 2) >> 2] | 0) + $output_col | 0;
  $add41 = (HEAP32[$wsptr$1131 >> 2] | 0) + 16400 | 0;
  $76 = HEAP32[$wsptr$1131 + 16 >> 2] | 0;
  $shl44 = $add41 + $76 << 13;
  $shl46 = $add41 - $76 << 13;
  $77 = HEAP32[$wsptr$1131 + 8 >> 2] | 0;
  $78 = HEAP32[$wsptr$1131 + 24 >> 2] | 0;
  $mul50 = ($78 + $77 | 0) * 4433 | 0;
  $add52 = $mul50 + ($77 * 6270 | 0) | 0;
  $sub54 = $mul50 + (Math_imul($78, -15137) | 0) | 0;
  $add55 = $add52 + $shl44 | 0;
  $sub56 = $shl44 - $add52 | 0;
  $add57 = $sub54 + $shl46 | 0;
  $sub58 = $shl46 - $sub54 | 0;
  $80 = HEAP32[$wsptr$1131 + 28 >> 2] | 0;
  $81 = HEAP32[$wsptr$1131 + 20 >> 2] | 0;
  $82 = HEAP32[$wsptr$1131 + 12 >> 2] | 0;
  $83 = HEAP32[$wsptr$1131 + 4 >> 2] | 0;
  $add63 = $82 + $80 | 0;
  $add64 = $83 + $81 | 0;
  $mul66 = ($add64 + $add63 | 0) * 9633 | 0;
  $add69 = $mul66 + (Math_imul($add63, -16069) | 0) | 0;
  $add70 = $mul66 + (Math_imul($add64, -3196) | 0) | 0;
  $mul72 = Math_imul($83 + $80 | 0, -7373) | 0;
  $add76 = $mul72 + ($80 * 2446 | 0) + $add69 | 0;
  $add78 = $mul72 + ($83 * 12299 | 0) + $add70 | 0;
  $mul80 = Math_imul($82 + $81 | 0, -20995) | 0;
  $add84 = $mul80 + ($81 * 16819 | 0) + $add70 | 0;
  $add86 = $mul80 + ($82 * 25172 | 0) + $add69 | 0;
  HEAP8[$add$ptr39 >> 0] = HEAP8[$add$ptr + (($add78 + $add55 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 7 >> 0] = HEAP8[$add$ptr + (($add55 - $add78 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 1 >> 0] = HEAP8[$add$ptr + (($add86 + $add57 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 6 >> 0] = HEAP8[$add$ptr + (($add57 - $add86 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 2 >> 0] = HEAP8[$add$ptr + (($add84 + $sub58 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 5 >> 0] = HEAP8[$add$ptr + (($sub58 - $add84 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 3 >> 0] = HEAP8[$add$ptr + (($add76 + $sub56 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr39 + 4 >> 0] = HEAP8[$add$ptr + (($sub56 - $add76 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1132 = $ctr$1132 + 1 | 0;
  if (($ctr$1132 | 0) == 4) break; else $wsptr$1131 = $wsptr$1131 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $43 = 0, $47 = 0, $48 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i107 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i106 = 0, $__opt$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i119 = 0, $call$i40 = 0, $call24 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i147 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i115 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i168 = 0, $retval$0$i$i13$i$i83 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp23$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $0 = 0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $59 = $1;
   break;
  }
  $2 = $1;
  if ($1) {
   $3 = HEAP32[$1 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$1 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 127]($1) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $20 = 0;
    $47 = 0;
    $70 = 1;
   } else {
    $20 = $2;
    $47 = $1;
    $70 = 0;
   }
  } else {
   $20 = $2;
   $47 = 0;
   $70 = 1;
  }
  $7 = HEAP32[$__e >> 2] | 0;
  $8 = $7;
  do if ($7) {
   $9 = HEAP32[$7 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($70) {
    $21 = $8;
    $71 = $7;
    break;
   } else {
    label = 60;
    break L1;
   } else {
    HEAP32[$__e >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   }
  } else {
   $$ph = $8;
   label = 15;
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($70) {
    label = 60;
    break;
   } else {
    $21 = $$ph;
    $71 = 0;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 4 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    label = 60;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$incdec$ptr >> 2] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 8 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      label = 60;
      break L1;
     }
     $22 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$incdec$ptr16 >> 2] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $22 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $19 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $20;
   HEAP32[$agg$tmp23 >> 2] = $21;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   $call24 = FUNCTION_TABLE_iiiiiiiii[$19 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   HEAP32[$__b >> 2] = $call24;
   $__fmtb$addr$4 = $22 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
    $__ninp_$i$i106 = $47 + 12 | 0;
    $48 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    $__einp_$i$i107 = $47 + 16 | 0;
    if (($48 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) $retval$0$i$i115 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 127]($47) | 0; else $retval$0$i$i115 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
    $call$i119 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, $retval$0$i$i115) | 0;
    if (($call$i119 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
     HEAP32[$__err >> 2] = 4;
     $__fmtb$addr$4 = $__fmtb$addr$0;
     break;
    }
    $55 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    if (($55 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 40 >> 2] & 127]($47) | 0; else {
     HEAP32[$__ninp_$i$i106 >> 2] = $55 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
    }
    $__fmtb$addr$4 = $__fmtb$addr$0 + 4 | 0;
    break;
   }
   $__fmtb$addr$0$pn = $__fmtb$addr$0;
   while (1) {
    $__fmtb$addr$3 = $__fmtb$addr$0$pn + 4 | 0;
    if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
     $__fmtb$addr$3$lcssa = $__fmte;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, HEAP32[$__fmtb$addr$3 >> 2] | 0) | 0) $__fmtb$addr$0$pn = $__fmtb$addr$3; else {
     $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
     break;
    }
   }
   $27 = $47;
   $32 = $71;
   while (1) {
    if ($27) {
     $28 = HEAP32[$27 + 12 >> 2] | 0;
     if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i$i$i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i$i$i62 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i62, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $37 = 0;
      $72 = 1;
     } else {
      $37 = $27;
      $72 = 0;
     }
    } else {
     $37 = 0;
     $72 = 1;
    }
    do if ($32) {
     $33 = HEAP32[$32 + 12 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $retval$0$i$i13$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $retval$0$i$i13$i$i83 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i83, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($72) {
      $73 = $32;
      break;
     } else {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     } else {
      HEAP32[$__e >> 2] = 0;
      label = 40;
      break;
     }
    } else label = 40; while (0);
    if ((label | 0) == 40) {
     label = 0;
     if ($72) {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     } else $73 = 0;
    }
    $__ninp_$i$i = $37 + 12 | 0;
    $38 = HEAP32[$__ninp_$i$i >> 2] | 0;
    $__einp_$i$i = $37 + 16 | 0;
    if (($38 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$38 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, $retval$0$i$i) | 0)) {
     $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
     break L24;
    }
    $43 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($43 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 40 >> 2] & 127]($37) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $43 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
    }
    $27 = $37;
    $32 = $73;
   }
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 60) {
  HEAP32[$__err >> 2] = 4;
  $59 = $47;
 }
 if ($59) {
  $60 = HEAP32[$59 + 12 >> 2] | 0;
  if (($60 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) $retval$0$i$i$i$i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; else $retval$0$i$i$i$i147 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$60 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i147, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $74 = 1;
   $retval$sroa$0$0$copyload = 0;
  } else {
   $74 = 0;
   $retval$sroa$0$0$copyload = $59;
  }
 } else {
  $74 = 1;
  $retval$sroa$0$0$copyload = 0;
 }
 $64 = HEAP32[$__e >> 2] | 0;
 do if ($64) {
  $65 = HEAP32[$64 + 12 >> 2] | 0;
  if (($65 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $retval$0$i$i13$i$i168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $retval$0$i$i13$i$i168 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$65 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i168, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($74) break; else {
   label = 75;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 73;
   break;
  }
 } else label = 73; while (0);
 if ((label | 0) == 73 ? $74 : 0) label = 75;
 if ((label | 0) == 75) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _finish_pass1($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $37 = 0, $5 = 0, $7 = 0, $add19$i$i = 0, $add22$i$i = 0, $arrayidx$i$i = 0, $b1$0$i$i = 0, $boxp$011$i$i$i = 0, $boxp$012$i$i$i = 0, $c0$070$i$i = 0, $c0max$i$i = 0, $c0total$0$lcssa$i$i = 0, $c0total$072$i$i = 0, $c0total$162$i$i = 0, $c0total$253$i$i = 0, $c0total$3$i$i = 0, $c1$060$i$i = 0, $c1max$i$i = 0, $c1min$i$i = 0, $c1min10$i$i = 0, $c1total$0$lcssa$i$i = 0, $c1total$073$i$i = 0, $c1total$163$i$i = 0, $c1total$254$i$i = 0, $c1total$3$i$i = 0, $c2$050$i$i = 0, $c2max$i$i = 0, $c2min$i$i = 0, $c2min11$i$i = 0, $c2min11$i$i$sink = 0, $c2total$0$lcssa$i$i = 0, $c2total$074$i$i = 0, $c2total$164$i$i = 0, $c2total$255$i$i = 0, $c2total$3$i$i = 0, $call$i = 0, $cmp1$i3$i$i = 0, $cmp2$i$i$i = 0, $cmp25$i$i = 0, $colormap = 0, $conv$i$i = 0, $cquantize1 = 0, $div$i$i = 0, $div40$i$i = 0, $div48$i$i = 0, $div48$i$i$sink = 0, $histp$051$i$i = 0, $i$012$i$i$i = 0, $i$013$i$i$i = 0, $i$040$i = 0, $inc$i$i = 0, $maxc$014$i$i$i = 0, $maxc$1$i$i$i = 0, $maxv$013$i$i$i = 0, $mul14$i$i = 0, $mul19$i$i = 0, $numboxes$addr$0$lcssa$i$i = 0, $numboxes$addr$011$i$i = 0, $shr$i$i = 0, $spec$select9$i$i$i = 0, $total$0$lcssa$i$i = 0, $total$071$i$i = 0, $total$161$i$i = 0, $total$252$i$i = 0, $total$3$i$i = 0, $which$014$i$i$i = 0, $which$015$i$i$i = 0, $which$1$i$i$i = 0, label = 0;
 $cquantize1 = $cinfo + 484 | 0;
 $0 = HEAP32[$cquantize1 >> 2] | 0;
 $colormap = $cinfo + 136 | 0;
 HEAP32[$colormap >> 2] = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$0 + 20 >> 2] | 0;
 $call$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 1, $2 << 5) | 0;
 HEAP32[$call$i >> 2] = 0;
 HEAP32[$call$i + 4 >> 2] = 31;
 HEAP32[$call$i + 8 >> 2] = 0;
 HEAP32[$call$i + 12 >> 2] = 63;
 HEAP32[$call$i + 16 >> 2] = 0;
 HEAP32[$call$i + 20 >> 2] = 31;
 _update_box($cinfo, $call$i);
 L1 : do if (($2 | 0) > 1) {
  $numboxes$addr$011$i$i = 1;
  while (1) {
   if (($numboxes$addr$011$i$i << 1 | 0) > ($2 | 0)) {
    $boxp$011$i$i$i = $call$i;
    $i$012$i$i$i = 0;
    $maxv$013$i$i$i = 0;
    $which$014$i$i$i = 0;
    while (1) {
     $7 = HEAP32[$boxp$011$i$i$i + 24 >> 2] | 0;
     $cmp1$i3$i$i = ($7 | 0) > ($maxv$013$i$i$i | 0);
     $spec$select9$i$i$i = $cmp1$i3$i$i ? $boxp$011$i$i$i : $which$014$i$i$i;
     $i$012$i$i$i = $i$012$i$i$i + 1 | 0;
     if (($i$012$i$i$i | 0) == ($numboxes$addr$011$i$i | 0)) {
      $b1$0$i$i = $spec$select9$i$i$i;
      break;
     } else {
      $boxp$011$i$i$i = $boxp$011$i$i$i + 32 | 0;
      $maxv$013$i$i$i = $cmp1$i3$i$i ? $7 : $maxv$013$i$i$i;
      $which$014$i$i$i = $spec$select9$i$i$i;
     }
    }
   } else {
    $boxp$012$i$i$i = $call$i;
    $i$013$i$i$i = 0;
    $maxc$014$i$i$i = 0;
    $which$015$i$i$i = 0;
    while (1) {
     $5 = HEAP32[$boxp$012$i$i$i + 28 >> 2] | 0;
     if (($5 | 0) > ($maxc$014$i$i$i | 0)) {
      $cmp2$i$i$i = (HEAP32[$boxp$012$i$i$i + 24 >> 2] | 0) > 0;
      $maxc$1$i$i$i = $cmp2$i$i$i ? $5 : $maxc$014$i$i$i;
      $which$1$i$i$i = $cmp2$i$i$i ? $boxp$012$i$i$i : $which$015$i$i$i;
     } else {
      $maxc$1$i$i$i = $maxc$014$i$i$i;
      $which$1$i$i$i = $which$015$i$i$i;
     }
     $i$013$i$i$i = $i$013$i$i$i + 1 | 0;
     if (($i$013$i$i$i | 0) == ($numboxes$addr$011$i$i | 0)) {
      $b1$0$i$i = $which$1$i$i$i;
      break;
     } else {
      $boxp$012$i$i$i = $boxp$012$i$i$i + 32 | 0;
      $maxc$014$i$i$i = $maxc$1$i$i$i;
      $which$015$i$i$i = $which$1$i$i$i;
     }
    }
   }
   if (!$b1$0$i$i) {
    $numboxes$addr$0$lcssa$i$i = $numboxes$addr$011$i$i;
    break L1;
   }
   $arrayidx$i$i = $call$i + ($numboxes$addr$011$i$i << 5) | 0;
   $c0max$i$i = $b1$0$i$i + 4 | 0;
   HEAP32[$call$i + ($numboxes$addr$011$i$i << 5) + 4 >> 2] = HEAP32[$c0max$i$i >> 2];
   $c1max$i$i = $b1$0$i$i + 12 | 0;
   HEAP32[$call$i + ($numboxes$addr$011$i$i << 5) + 12 >> 2] = HEAP32[$c1max$i$i >> 2];
   $c2max$i$i = $b1$0$i$i + 20 | 0;
   HEAP32[$call$i + ($numboxes$addr$011$i$i << 5) + 20 >> 2] = HEAP32[$c2max$i$i >> 2];
   HEAP32[$arrayidx$i$i >> 2] = HEAP32[$b1$0$i$i >> 2];
   $c1min$i$i = $b1$0$i$i + 8 | 0;
   $c1min10$i$i = $call$i + ($numboxes$addr$011$i$i << 5) + 8 | 0;
   HEAP32[$c1min10$i$i >> 2] = HEAP32[$c1min$i$i >> 2];
   $c2min$i$i = $b1$0$i$i + 16 | 0;
   $c2min11$i$i = $call$i + ($numboxes$addr$011$i$i << 5) + 16 | 0;
   HEAP32[$c2min11$i$i >> 2] = HEAP32[$c2min$i$i >> 2];
   $14 = HEAP32[$c0max$i$i >> 2] | 0;
   $15 = HEAP32[$b1$0$i$i >> 2] | 0;
   $mul14$i$i = $14 - $15 << 4;
   $16 = HEAP32[$c1max$i$i >> 2] | 0;
   $17 = HEAP32[$c1min$i$i >> 2] | 0;
   $mul19$i$i = ($16 - $17 | 0) * 12 | 0;
   $18 = HEAP32[$c2max$i$i >> 2] | 0;
   $19 = HEAP32[$c2min$i$i >> 2] | 0;
   $cmp25$i$i = ($mul14$i$i | 0) > ($mul19$i$i | 0);
   switch ((($18 - $19 << 3 | 0) > (($cmp25$i$i ? $mul14$i$i : $mul19$i$i) | 0) ? 2 : ($cmp25$i$i ^ 1) & 1) & 3) {
   case 0:
    {
     $div$i$i = ($15 + $14 | 0) / 2 | 0;
     HEAP32[$c0max$i$i >> 2] = $div$i$i;
     $c2min11$i$i$sink = $arrayidx$i$i;
     $div48$i$i$sink = $div$i$i;
     label = 15;
     break;
    }
   case 1:
    {
     $div40$i$i = ($17 + $16 | 0) / 2 | 0;
     HEAP32[$c1max$i$i >> 2] = $div40$i$i;
     $c2min11$i$i$sink = $c1min10$i$i;
     $div48$i$i$sink = $div40$i$i;
     label = 15;
     break;
    }
   case 2:
    {
     $div48$i$i = ($19 + $18 | 0) / 2 | 0;
     HEAP32[$c2max$i$i >> 2] = $div48$i$i;
     $c2min11$i$i$sink = $c2min11$i$i;
     $div48$i$i$sink = $div48$i$i;
     label = 15;
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 15) {
    label = 0;
    HEAP32[$c2min11$i$i$sink >> 2] = $div48$i$i$sink + 1;
   }
   _update_box($cinfo, $b1$0$i$i);
   _update_box($cinfo, $arrayidx$i$i);
   $inc$i$i = $numboxes$addr$011$i$i + 1 | 0;
   if (($inc$i$i | 0) < ($2 | 0)) $numboxes$addr$011$i$i = $inc$i$i; else {
    $numboxes$addr$0$lcssa$i$i = $inc$i$i;
    break L1;
   }
  }
 } else $numboxes$addr$0$lcssa$i$i = 1; while (0);
 $i$040$i = 0;
 do {
  $22 = HEAP32[(HEAP32[$cquantize1 >> 2] | 0) + 24 >> 2] | 0;
  $23 = HEAP32[$call$i + ($i$040$i << 5) >> 2] | 0;
  $24 = HEAP32[$call$i + ($i$040$i << 5) + 4 >> 2] | 0;
  $25 = HEAP32[$call$i + ($i$040$i << 5) + 8 >> 2] | 0;
  $26 = HEAP32[$call$i + ($i$040$i << 5) + 12 >> 2] | 0;
  $27 = HEAP32[$call$i + ($i$040$i << 5) + 16 >> 2] | 0;
  $28 = HEAP32[$call$i + ($i$040$i << 5) + 20 >> 2] | 0;
  if (($23 | 0) > ($24 | 0) | ($25 | 0) > ($26 | 0) | ($27 | 0) > ($28 | 0)) {
   $c0total$0$lcssa$i$i = 0;
   $c1total$0$lcssa$i$i = 0;
   $c2total$0$lcssa$i$i = 0;
   $total$0$lcssa$i$i = 0;
  } else {
   $c0$070$i$i = $23;
   $c0total$072$i$i = 0;
   $c1total$073$i$i = 0;
   $c2total$074$i$i = 0;
   $total$071$i$i = 0;
   while (1) {
    $29 = HEAP32[$22 + ($c0$070$i$i << 2) >> 2] | 0;
    $add19$i$i = $c0$070$i$i << 3 | 4;
    $c0total$162$i$i = $c0total$072$i$i;
    $c1$060$i$i = $25;
    $c1total$163$i$i = $c1total$073$i$i;
    $c2total$164$i$i = $c2total$074$i$i;
    $total$161$i$i = $total$071$i$i;
    while (1) {
     $add22$i$i = $c1$060$i$i << 2 | 2;
     $c0total$253$i$i = $c0total$162$i$i;
     $c1total$254$i$i = $c1total$163$i$i;
     $c2$050$i$i = $27;
     $c2total$255$i$i = $c2total$164$i$i;
     $histp$051$i$i = $29 + ($c1$060$i$i << 6) + ($27 << 1) | 0;
     $total$252$i$i = $total$161$i$i;
     while (1) {
      $30 = HEAP16[$histp$051$i$i >> 1] | 0;
      $conv$i$i = $30 & 65535;
      if (!($30 << 16 >> 16)) {
       $c0total$3$i$i = $c0total$253$i$i;
       $c1total$3$i$i = $c1total$254$i$i;
       $c2total$3$i$i = $c2total$255$i$i;
       $total$3$i$i = $total$252$i$i;
      } else {
       $c0total$3$i$i = (Math_imul($add19$i$i, $conv$i$i) | 0) + $c0total$253$i$i | 0;
       $c1total$3$i$i = (Math_imul($add22$i$i, $conv$i$i) | 0) + $c1total$254$i$i | 0;
       $c2total$3$i$i = (Math_imul($c2$050$i$i << 3 | 4, $conv$i$i) | 0) + $c2total$255$i$i | 0;
       $total$3$i$i = $total$252$i$i + $conv$i$i | 0;
      }
      if (($c2$050$i$i | 0) < ($28 | 0)) {
       $c0total$253$i$i = $c0total$3$i$i;
       $c1total$254$i$i = $c1total$3$i$i;
       $c2$050$i$i = $c2$050$i$i + 1 | 0;
       $c2total$255$i$i = $c2total$3$i$i;
       $histp$051$i$i = $histp$051$i$i + 2 | 0;
       $total$252$i$i = $total$3$i$i;
      } else break;
     }
     if (($c1$060$i$i | 0) < ($26 | 0)) {
      $c0total$162$i$i = $c0total$3$i$i;
      $c1$060$i$i = $c1$060$i$i + 1 | 0;
      $c1total$163$i$i = $c1total$3$i$i;
      $c2total$164$i$i = $c2total$3$i$i;
      $total$161$i$i = $total$3$i$i;
     } else break;
    }
    if (($c0$070$i$i | 0) < ($24 | 0)) {
     $c0$070$i$i = $c0$070$i$i + 1 | 0;
     $c0total$072$i$i = $c0total$3$i$i;
     $c1total$073$i$i = $c1total$3$i$i;
     $c2total$074$i$i = $c2total$3$i$i;
     $total$071$i$i = $total$3$i$i;
    } else {
     $c0total$0$lcssa$i$i = $c0total$3$i$i;
     $c1total$0$lcssa$i$i = $c1total$3$i$i;
     $c2total$0$lcssa$i$i = $c2total$3$i$i;
     $total$0$lcssa$i$i = $total$3$i$i;
     break;
    }
   }
  }
  $shr$i$i = $total$0$lcssa$i$i >> 1;
  HEAP8[(HEAP32[HEAP32[$colormap >> 2] >> 2] | 0) + $i$040$i >> 0] = ($c0total$0$lcssa$i$i + $shr$i$i | 0) / ($total$0$lcssa$i$i | 0) | 0;
  HEAP8[(HEAP32[(HEAP32[$colormap >> 2] | 0) + 4 >> 2] | 0) + $i$040$i >> 0] = ($c1total$0$lcssa$i$i + $shr$i$i | 0) / ($total$0$lcssa$i$i | 0) | 0;
  HEAP8[(HEAP32[(HEAP32[$colormap >> 2] | 0) + 8 >> 2] | 0) + $i$040$i >> 0] = ($c2total$0$lcssa$i$i + $shr$i$i | 0) / ($total$0$lcssa$i$i | 0) | 0;
  $i$040$i = $i$040$i + 1 | 0;
 } while (($i$040$i | 0) < ($numboxes$addr$0$lcssa$i$i | 0));
 HEAP32[$cinfo + 132 >> 2] = $numboxes$addr$0$lcssa$i$i;
 $37 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$37 + 20 >> 2] = 98;
 HEAP32[$37 + 24 >> 2] = $numboxes$addr$0$lcssa$i$i;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
 HEAP32[$0 + 28 >> 2] = 1;
 return;
}

function _jinit_1pass_quantizer($cinfo) {
 $cinfo = $cinfo | 0;
 var $10 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $43 = 0, $6 = 0, $7 = 0, $add$us$us$i$us$i = 0, $add$us60$i$i = 0, $arraydecay$i = 0, $arrayidx21$us$us$i$us$i = 0, $arrayidx21$us58$i$i = 0, $arrayidx39$i = 0, $blkdist$086$i = 0, $call = 0, $call$i = 0, $call24$i = 0, $changed$0$lcssa$us$i$ph$us$i = 0, $changed$0$lcssa$us$i$ph61$i = 0, $changed$046$us$us$i$us$i = 0, $changed$046$us$us$i$us$i$be = 0, $changed$046$us51$i$i = 0, $changed$046$us51$i$i$be = 0, $conv$us$i = 0, $cquantize1 = 0, $desired_number_of_colors = 0, $div$i$i = 0, $i$011$i = 0, $i$077$us$i$i = 0, $i$087$i = 0, $i$173$i$i = 0, $i$244$us$us$i$us$i = 0, $i$244$us$us$i$us$i$be = 0, $i$244$us53$i$i = 0, $i$244$us53$i$i$be = 0, $inc$us$i$i = 0, $inc30$us$us$i$us$i = 0, $inc30$us64$i$i = 0, $iroot$0$lcssa$i$i = 0, $iroot$0$us$i$i = 0, $j$068$us$i = 0, $k$063$us$us$i = 0, $mem = 0, $mul$i = 0, $mul$us$i = 0, $mul23$us$us$i$us$i = 0, $mul23$us61$i$i = 0, $out_color_components = 0, $ptr$065$us$us$i = 0, $smax$i$i = 0, $sub$i = 0, $temp$0$lcssa$lcssa$i$i = 0, $temp$078$us$i$i = 0, $total_colors$074$i$i = 0, $total_colors$2$lcssa$lcssa$i$i = 0, $total_colors$2$lcssa$us$i$ph$us$i = 0, $total_colors$2$lcssa$us$i$ph60$i = 0, $total_colors$245$us$us$i$us$i = 0, $total_colors$245$us$us$i$us$i$be = 0, $total_colors$245$us52$i$i = 0, $total_colors$245$us52$i$i$be = 0, label = 0, $blkdist$086$i$looptemp = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 88) | 0;
 $cquantize1 = $cinfo + 484 | 0;
 HEAP32[$cquantize1 >> 2] = $call;
 HEAP32[$call >> 2] = 126;
 HEAP32[$call + 8 >> 2] = 169;
 HEAP32[$call + 12 >> 2] = 170;
 HEAP32[$call + 68 >> 2] = 0;
 HEAP32[$call + 52 >> 2] = 0;
 $out_color_components = $cinfo + 120 | 0;
 if ((HEAP32[$out_color_components >> 2] | 0) > 4) {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 57;
  HEAP32[$3 + 24 >> 2] = 4;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $desired_number_of_colors = $cinfo + 96 | 0;
 $6 = HEAP32[$desired_number_of_colors >> 2] | 0;
 if (($6 | 0) > 256) {
  $7 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$7 + 20 >> 2] = 59;
  HEAP32[$7 + 24 >> 2] = 256;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  $12 = HEAP32[$desired_number_of_colors >> 2] | 0;
 } else $12 = $6;
 $10 = HEAP32[$cquantize1 >> 2] | 0;
 $arraydecay$i = $10 + 32 | 0;
 $11 = HEAP32[$out_color_components >> 2] | 0;
 if (($11 | 0) > 1) {
  $iroot$0$us$i$i = 1;
  while (1) {
   $inc$us$i$i = $iroot$0$us$i$i + 1 | 0;
   $i$077$us$i$i = 1;
   $temp$078$us$i$i = $inc$us$i$i;
   do {
    $temp$078$us$i$i = Math_imul($temp$078$us$i$i, $inc$us$i$i) | 0;
    $i$077$us$i$i = $i$077$us$i$i + 1 | 0;
   } while (($i$077$us$i$i | 0) != ($11 | 0));
   if (($temp$078$us$i$i | 0) > ($12 | 0)) {
    $iroot$0$lcssa$i$i = $iroot$0$us$i$i;
    $temp$0$lcssa$lcssa$i$i = $temp$078$us$i$i;
    break;
   } else $iroot$0$us$i$i = $inc$us$i$i;
  }
 } else {
  $smax$i$i = ($12 | 0) > 1 ? $12 : 1;
  $iroot$0$lcssa$i$i = $smax$i$i;
  $temp$0$lcssa$lcssa$i$i = $smax$i$i + 1 | 0;
 }
 if ($iroot$0$lcssa$i$i >>> 0 < 2) {
  $15 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$15 + 20 >> 2] = 58;
  HEAP32[$15 + 24 >> 2] = $temp$0$lcssa$lcssa$i$i;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 L19 : do if (($11 | 0) > 0) {
  $i$173$i$i = 0;
  $total_colors$074$i$i = 1;
  do {
   HEAP32[$10 + 32 + ($i$173$i$i << 2) >> 2] = $iroot$0$lcssa$i$i;
   $total_colors$074$i$i = Math_imul($total_colors$074$i$i, $iroot$0$lcssa$i$i) | 0;
   $i$173$i$i = $i$173$i$i + 1 | 0;
  } while (($i$173$i$i | 0) != ($11 | 0));
  if ((HEAP32[$cinfo + 44 >> 2] | 0) == 2) {
   $changed$046$us$us$i$us$i = 0;
   $i$244$us$us$i$us$i = 0;
   $total_colors$245$us$us$i$us$i = $total_colors$074$i$i;
   while (1) {
    $arrayidx21$us$us$i$us$i = $10 + 32 + (HEAP32[14624 + ($i$244$us$us$i$us$i << 2) >> 2] << 2) | 0;
    $19 = HEAP32[$arrayidx21$us$us$i$us$i >> 2] | 0;
    $add$us$us$i$us$i = $19 + 1 | 0;
    $mul23$us$us$i$us$i = Math_imul(($total_colors$245$us$us$i$us$i | 0) / ($19 | 0) | 0, $add$us$us$i$us$i) | 0;
    if (($mul23$us$us$i$us$i | 0) <= ($12 | 0)) {
     HEAP32[$arrayidx21$us$us$i$us$i >> 2] = $add$us$us$i$us$i;
     $inc30$us$us$i$us$i = $i$244$us$us$i$us$i + 1 | 0;
     if (($inc30$us$us$i$us$i | 0) < ($11 | 0)) {
      $changed$046$us$us$i$us$i$be = 1;
      $i$244$us$us$i$us$i$be = $inc30$us$us$i$us$i;
      $total_colors$245$us$us$i$us$i$be = $mul23$us$us$i$us$i;
     } else {
      $changed$0$lcssa$us$i$ph$us$i = 1;
      $total_colors$2$lcssa$us$i$ph$us$i = $mul23$us$us$i$us$i;
      label = 22;
     }
    } else {
     $changed$0$lcssa$us$i$ph$us$i = $changed$046$us$us$i$us$i;
     $total_colors$2$lcssa$us$i$ph$us$i = $total_colors$245$us$us$i$us$i;
     label = 22;
    }
    if ((label | 0) == 22) {
     label = 0;
     if (!$changed$0$lcssa$us$i$ph$us$i) {
      $total_colors$2$lcssa$lcssa$i$i = $total_colors$2$lcssa$us$i$ph$us$i;
      break L19;
     } else {
      $changed$046$us$us$i$us$i$be = 0;
      $i$244$us$us$i$us$i$be = 0;
      $total_colors$245$us$us$i$us$i$be = $total_colors$2$lcssa$us$i$ph$us$i;
     }
    }
    $changed$046$us$us$i$us$i = $changed$046$us$us$i$us$i$be;
    $i$244$us$us$i$us$i = $i$244$us$us$i$us$i$be;
    $total_colors$245$us$us$i$us$i = $total_colors$245$us$us$i$us$i$be;
   }
  } else {
   $changed$046$us51$i$i = 0;
   $i$244$us53$i$i = 0;
   $total_colors$245$us52$i$i = $total_colors$074$i$i;
   while (1) {
    $arrayidx21$us58$i$i = $10 + 32 + ($i$244$us53$i$i << 2) | 0;
    $20 = HEAP32[$arrayidx21$us58$i$i >> 2] | 0;
    $add$us60$i$i = $20 + 1 | 0;
    $mul23$us61$i$i = Math_imul(($total_colors$245$us52$i$i | 0) / ($20 | 0) | 0, $add$us60$i$i) | 0;
    if (($mul23$us61$i$i | 0) <= ($12 | 0)) {
     HEAP32[$arrayidx21$us58$i$i >> 2] = $add$us60$i$i;
     $inc30$us64$i$i = $i$244$us53$i$i + 1 | 0;
     if (($inc30$us64$i$i | 0) < ($11 | 0)) {
      $changed$046$us51$i$i$be = 1;
      $i$244$us53$i$i$be = $inc30$us64$i$i;
      $total_colors$245$us52$i$i$be = $mul23$us61$i$i;
     } else {
      $changed$0$lcssa$us$i$ph61$i = 1;
      $total_colors$2$lcssa$us$i$ph60$i = $mul23$us61$i$i;
      label = 26;
     }
    } else {
     $changed$0$lcssa$us$i$ph61$i = $changed$046$us51$i$i;
     $total_colors$2$lcssa$us$i$ph60$i = $total_colors$245$us52$i$i;
     label = 26;
    }
    if ((label | 0) == 26) {
     label = 0;
     if (!$changed$0$lcssa$us$i$ph61$i) {
      $total_colors$2$lcssa$lcssa$i$i = $total_colors$2$lcssa$us$i$ph60$i;
      break L19;
     } else {
      $changed$046$us51$i$i$be = 0;
      $i$244$us53$i$i$be = 0;
      $total_colors$245$us52$i$i$be = $total_colors$2$lcssa$us$i$ph60$i;
     }
    }
    $changed$046$us51$i$i = $changed$046$us51$i$i$be;
    $i$244$us53$i$i = $i$244$us53$i$i$be;
    $total_colors$245$us52$i$i = $total_colors$245$us52$i$i$be;
   }
  }
 } else $total_colors$2$lcssa$lcssa$i$i = 1; while (0);
 $22 = HEAP32[$cinfo >> 2] | 0;
 if ((HEAP32[$out_color_components >> 2] | 0) == 3) {
  HEAP32[$22 + 24 >> 2] = $total_colors$2$lcssa$lcssa$i$i;
  HEAP32[$22 + 28 >> 2] = HEAP32[$arraydecay$i >> 2];
  HEAP32[$22 + 32 >> 2] = HEAP32[$10 + 36 >> 2];
  HEAP32[$22 + 36 >> 2] = HEAP32[$10 + 40 >> 2];
  HEAP32[$22 + 20 >> 2] = 96;
  FUNCTION_TABLE_vii[HEAP32[$22 + 4 >> 2] & 255]($cinfo, 1);
 } else {
  HEAP32[$22 + 20 >> 2] = 97;
  HEAP32[$22 + 24 >> 2] = $total_colors$2$lcssa$lcssa$i$i;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
 }
 $call24$i = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 8 >> 2] & 15]($cinfo, 1, $total_colors$2$lcssa$lcssa$i$i, HEAP32[$out_color_components >> 2] | 0) | 0;
 $32 = HEAP32[$out_color_components >> 2] | 0;
 if (($32 | 0) > 0) {
  $43 = $32;
  $blkdist$086$i = $total_colors$2$lcssa$lcssa$i$i;
  $i$087$i = 0;
  while (1) {
   $33 = HEAP32[$10 + 32 + ($i$087$i << 2) >> 2] | 0;
   $blkdist$086$i$looptemp = $blkdist$086$i;
   $blkdist$086$i = ($blkdist$086$i | 0) / ($33 | 0) | 0;
   if (($33 | 0) > 0 ? ($sub$i = $33 + -1 | 0, $div$i$i = ($sub$i | 0) / 2 | 0, $arrayidx39$i = $call24$i + ($i$087$i << 2) | 0, ($blkdist$086$i | 0) > 0) : 0) {
    $j$068$us$i = 0;
    do {
     $mul$us$i = Math_imul($j$068$us$i, $blkdist$086$i) | 0;
     if (($mul$us$i | 0) < ($total_colors$2$lcssa$lcssa$i$i | 0)) {
      $conv$us$i = ((($j$068$us$i * 255 | 0) + $div$i$i | 0) / ($sub$i | 0) | 0) & 255;
      $ptr$065$us$us$i = $mul$us$i;
      do {
       $k$063$us$us$i = 0;
       do {
        HEAP8[(HEAP32[$arrayidx39$i >> 2] | 0) + ($k$063$us$us$i + $ptr$065$us$us$i) >> 0] = $conv$us$i;
        $k$063$us$us$i = $k$063$us$us$i + 1 | 0;
       } while (($k$063$us$us$i | 0) != ($blkdist$086$i | 0));
       $ptr$065$us$us$i = $ptr$065$us$us$i + $blkdist$086$i$looptemp | 0;
      } while (($ptr$065$us$us$i | 0) < ($total_colors$2$lcssa$lcssa$i$i | 0));
     }
     $j$068$us$i = $j$068$us$i + 1 | 0;
    } while (($j$068$us$i | 0) != ($33 | 0));
    $35 = HEAP32[$out_color_components >> 2] | 0;
   } else $35 = $43;
   $i$087$i = $i$087$i + 1 | 0;
   if (($i$087$i | 0) >= ($35 | 0)) break; else $43 = $35;
  }
 }
 HEAP32[$10 + 16 >> 2] = $call24$i;
 HEAP32[$10 + 20 >> 2] = $total_colors$2$lcssa$lcssa$i$i;
 _create_colorindex($cinfo);
 if ((HEAP32[$cinfo + 88 >> 2] | 0) != 2) return;
 $37 = HEAP32[$cquantize1 >> 2] | 0;
 $mul$i = (HEAP32[$cinfo + 112 >> 2] << 1) + 4 | 0;
 if ((HEAP32[$out_color_components >> 2] | 0) <= 0) return;
 $i$011$i = 0;
 do {
  $call$i = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, $mul$i) | 0;
  HEAP32[$37 + 68 + ($i$011$i << 2) >> 2] = $call$i;
  $i$011$i = $i$011$i + 1 | 0;
 } while (($i$011$i | 0) < (HEAP32[$out_color_components >> 2] | 0));
 return;
}

function _jpeg_idct_16x16($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $add = 0, $add$ptr = 0, $add$ptr163 = 0, $add102 = 0, $add103 = 0, $add106 = 0, $add107 = 0, $add170 = 0, $add172 = 0, $add180 = 0, $add182 = 0, $add187 = 0, $add189 = 0, $add191 = 0, $add193 = 0, $add199 = 0, $add23 = 0, $add234 = 0, $add236 = 0, $add244 = 0, $add247 = 0, $add248 = 0, $add25 = 0, $add251 = 0, $add252 = 0, $add30 = 0, $add32 = 0, $add34 = 0, $add36 = 0, $add54 = 0, $add8 = 0, $add89 = 0, $add9 = 0, $add91 = 0, $add99 = 0, $ctr$0354 = 0, $ctr$1350 = 0, $inptr$0351 = 0, $mul101 = 0, $mul105 = 0, $mul14 = 0, $mul168 = 0, $mul169 = 0, $mul177 = 0, $mul178 = 0, $mul18 = 0, $mul20 = 0, $mul201 = 0, $mul202 = 0, $mul204 = 0, $mul206 = 0, $mul207 = 0, $mul209 = 0, $mul21 = 0, $mul219 = 0, $mul227 = 0, $mul235 = 0, $mul240 = 0, $mul246 = 0, $mul250 = 0, $mul41 = 0, $mul45 = 0, $mul49 = 0, $mul5 = 0, $mul53 = 0, $mul56 = 0, $mul57 = 0, $mul59 = 0, $mul6 = 0, $mul61 = 0, $mul62 = 0, $mul64 = 0, $mul7 = 0, $mul74 = 0, $mul82 = 0, $mul90 = 0, $mul95 = 0, $quantptr$0352 = 0, $shl166 = 0, $sub = 0, $sub10 = 0, $sub171 = 0, $sub173 = 0, $sub176 = 0, $sub184 = 0, $sub186 = 0, $sub188 = 0, $sub19 = 0, $sub190 = 0, $sub192 = 0, $sub194 = 0, $sub213 = 0, $sub217 = 0, $sub27 = 0, $sub29 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub37 = 0, $sub68 = 0, $sub72 = 0, $workspace = 0, $wsptr$0353 = 0, $wsptr$1349 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0354 = 0;
 $inptr$0351 = $coef_block;
 $quantptr$0352 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0353 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0351 >> 1] << 13, HEAP32[$quantptr$0352 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0352 + 128 >> 2] | 0, HEAP16[$inptr$0351 + 64 >> 1] | 0) | 0;
  $mul6 = $mul5 * 10703 | 0;
  $mul7 = $mul5 * 4433 | 0;
  $add8 = $mul6 + $add | 0;
  $sub = $add - $mul6 | 0;
  $add9 = $mul7 + $add | 0;
  $sub10 = $add - $mul7 | 0;
  $mul14 = Math_imul(HEAP32[$quantptr$0352 + 64 >> 2] | 0, HEAP16[$inptr$0351 + 32 >> 1] | 0) | 0;
  $mul18 = Math_imul(HEAP32[$quantptr$0352 + 192 >> 2] | 0, HEAP16[$inptr$0351 + 96 >> 1] | 0) | 0;
  $sub19 = $mul14 - $mul18 | 0;
  $mul20 = $sub19 * 2260 | 0;
  $mul21 = $sub19 * 11363 | 0;
  $add23 = $mul21 + ($mul18 * 20995 | 0) | 0;
  $add25 = $mul20 + ($mul14 * 7373 | 0) | 0;
  $sub27 = $mul21 + (Math_imul($mul14, -4926) | 0) | 0;
  $sub29 = $mul20 + (Math_imul($mul18, -4176) | 0) | 0;
  $add30 = $add23 + $add8 | 0;
  $sub31 = $add8 - $add23 | 0;
  $add32 = $add25 + $add9 | 0;
  $sub33 = $add9 - $add25 | 0;
  $add34 = $sub27 + $sub10 | 0;
  $sub35 = $sub10 - $sub27 | 0;
  $add36 = $sub29 + $sub | 0;
  $sub37 = $sub - $sub29 | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0352 + 32 >> 2] | 0, HEAP16[$inptr$0351 + 16 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0352 + 96 >> 2] | 0, HEAP16[$inptr$0351 + 48 >> 1] | 0) | 0;
  $mul49 = Math_imul(HEAP32[$quantptr$0352 + 160 >> 2] | 0, HEAP16[$inptr$0351 + 80 >> 1] | 0) | 0;
  $mul53 = Math_imul(HEAP32[$quantptr$0352 + 224 >> 2] | 0, HEAP16[$inptr$0351 + 112 >> 1] | 0) | 0;
  $add54 = $mul49 + $mul41 | 0;
  $mul56 = ($mul45 + $mul41 | 0) * 11086 | 0;
  $mul57 = $add54 * 10217 | 0;
  $mul59 = ($mul53 + $mul41 | 0) * 8956 | 0;
  $mul61 = ($mul41 - $mul53 | 0) * 7350 | 0;
  $mul62 = $add54 * 5461 | 0;
  $mul64 = ($mul41 - $mul45 | 0) * 3363 | 0;
  $sub68 = $mul56 + (Math_imul($mul41, -18730) | 0) + $mul57 + $mul59 | 0;
  $sub72 = $mul64 + (Math_imul($mul41, -15038) | 0) + $mul62 + $mul61 | 0;
  $mul74 = ($mul49 + $mul45 | 0) * 1136 | 0;
  $mul82 = ($mul49 - $mul45 | 0) * 11529 | 0;
  $add89 = $mul53 + $mul45 | 0;
  $mul90 = Math_imul($add89, -5461) | 0;
  $add91 = $mul56 + ($mul45 * 589 | 0) + $mul74 + $mul90 | 0;
  $mul95 = Math_imul($add89, -10217) | 0;
  $add99 = $mul64 + ($mul45 * 16154 | 0) + $mul82 + $mul95 | 0;
  $mul101 = Math_imul($mul53 + $mul49 | 0, -11086) | 0;
  $add102 = $mul74 + (Math_imul($mul49, -9222) | 0) + $mul57 + $mul101 | 0;
  $add103 = $mul90 + ($mul53 * 8728 | 0) + $mul59 + $mul101 | 0;
  $mul105 = ($mul53 - $mul49 | 0) * 3363 | 0;
  $add106 = $mul95 + ($mul53 * 25733 | 0) + $mul61 + $mul105 | 0;
  $add107 = $mul82 + (Math_imul($mul49, -6278) | 0) + $mul62 + $mul105 | 0;
  HEAP32[$wsptr$0353 >> 2] = $sub68 + $add30 >> 11;
  HEAP32[$wsptr$0353 + 480 >> 2] = $add30 - $sub68 >> 11;
  HEAP32[$wsptr$0353 + 32 >> 2] = $add91 + $add32 >> 11;
  HEAP32[$wsptr$0353 + 448 >> 2] = $add32 - $add91 >> 11;
  HEAP32[$wsptr$0353 + 64 >> 2] = $add102 + $add34 >> 11;
  HEAP32[$wsptr$0353 + 416 >> 2] = $add34 - $add102 >> 11;
  HEAP32[$wsptr$0353 + 96 >> 2] = $add103 + $add36 >> 11;
  HEAP32[$wsptr$0353 + 384 >> 2] = $add36 - $add103 >> 11;
  HEAP32[$wsptr$0353 + 128 >> 2] = $add106 + $sub37 >> 11;
  HEAP32[$wsptr$0353 + 352 >> 2] = $sub37 - $add106 >> 11;
  HEAP32[$wsptr$0353 + 160 >> 2] = $add107 + $sub35 >> 11;
  HEAP32[$wsptr$0353 + 320 >> 2] = $sub35 - $add107 >> 11;
  HEAP32[$wsptr$0353 + 192 >> 2] = $add99 + $sub33 >> 11;
  HEAP32[$wsptr$0353 + 288 >> 2] = $sub33 - $add99 >> 11;
  HEAP32[$wsptr$0353 + 224 >> 2] = $sub72 + $sub31 >> 11;
  HEAP32[$wsptr$0353 + 256 >> 2] = $sub31 - $sub72 >> 11;
  $ctr$0354 = $ctr$0354 + 1 | 0;
  if (($ctr$0354 | 0) == 8) break; else {
   $inptr$0351 = $inptr$0351 + 2 | 0;
   $quantptr$0352 = $quantptr$0352 + 4 | 0;
   $wsptr$0353 = $wsptr$0353 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1350 = 0;
 $wsptr$1349 = $workspace;
 while (1) {
  $add$ptr163 = (HEAP32[$output_buf + ($ctr$1350 << 2) >> 2] | 0) + $output_col | 0;
  $shl166 = (HEAP32[$wsptr$1349 >> 2] << 13) + 134348800 | 0;
  $26 = HEAP32[$wsptr$1349 + 16 >> 2] | 0;
  $mul168 = $26 * 10703 | 0;
  $mul169 = $26 * 4433 | 0;
  $add170 = $shl166 + $mul168 | 0;
  $sub171 = $shl166 - $mul168 | 0;
  $add172 = $shl166 + $mul169 | 0;
  $sub173 = $shl166 - $mul169 | 0;
  $27 = HEAP32[$wsptr$1349 + 8 >> 2] | 0;
  $28 = HEAP32[$wsptr$1349 + 24 >> 2] | 0;
  $sub176 = $27 - $28 | 0;
  $mul177 = $sub176 * 2260 | 0;
  $mul178 = $sub176 * 11363 | 0;
  $add180 = $mul178 + ($28 * 20995 | 0) | 0;
  $add182 = $mul177 + ($27 * 7373 | 0) | 0;
  $sub184 = $mul178 + (Math_imul($27, -4926) | 0) | 0;
  $sub186 = $mul177 + (Math_imul($28, -4176) | 0) | 0;
  $add187 = $add180 + $add170 | 0;
  $sub188 = $add170 - $add180 | 0;
  $add189 = $add182 + $add172 | 0;
  $sub190 = $add172 - $add182 | 0;
  $add191 = $sub184 + $sub173 | 0;
  $sub192 = $sub173 - $sub184 | 0;
  $add193 = $sub186 + $sub171 | 0;
  $sub194 = $sub171 - $sub186 | 0;
  $31 = HEAP32[$wsptr$1349 + 4 >> 2] | 0;
  $32 = HEAP32[$wsptr$1349 + 12 >> 2] | 0;
  $33 = HEAP32[$wsptr$1349 + 20 >> 2] | 0;
  $34 = HEAP32[$wsptr$1349 + 28 >> 2] | 0;
  $add199 = $33 + $31 | 0;
  $mul201 = ($32 + $31 | 0) * 11086 | 0;
  $mul202 = $add199 * 10217 | 0;
  $mul204 = ($34 + $31 | 0) * 8956 | 0;
  $mul206 = ($31 - $34 | 0) * 7350 | 0;
  $mul207 = $add199 * 5461 | 0;
  $mul209 = ($31 - $32 | 0) * 3363 | 0;
  $sub213 = $mul201 + (Math_imul($31, -18730) | 0) + $mul202 + $mul204 | 0;
  $sub217 = $mul209 + (Math_imul($31, -15038) | 0) + $mul207 + $mul206 | 0;
  $mul219 = ($33 + $32 | 0) * 1136 | 0;
  $mul227 = ($33 - $32 | 0) * 11529 | 0;
  $add234 = $34 + $32 | 0;
  $mul235 = Math_imul($add234, -5461) | 0;
  $add236 = $mul201 + ($32 * 589 | 0) + $mul219 + $mul235 | 0;
  $mul240 = Math_imul($add234, -10217) | 0;
  $add244 = $mul209 + ($32 * 16154 | 0) + $mul227 + $mul240 | 0;
  $mul246 = Math_imul($34 + $33 | 0, -11086) | 0;
  $add247 = $mul219 + (Math_imul($33, -9222) | 0) + $mul202 + $mul246 | 0;
  $add248 = $mul235 + ($34 * 8728 | 0) + $mul204 + $mul246 | 0;
  $mul250 = ($34 - $33 | 0) * 3363 | 0;
  $add251 = $mul240 + ($34 * 25733 | 0) + $mul206 + $mul250 | 0;
  $add252 = $mul227 + (Math_imul($33, -6278) | 0) + $mul207 + $mul250 | 0;
  HEAP8[$add$ptr163 >> 0] = HEAP8[$add$ptr + (($sub213 + $add187 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 15 >> 0] = HEAP8[$add$ptr + (($add187 - $sub213 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 1 >> 0] = HEAP8[$add$ptr + (($add236 + $add189 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 14 >> 0] = HEAP8[$add$ptr + (($add189 - $add236 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 2 >> 0] = HEAP8[$add$ptr + (($add247 + $add191 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 13 >> 0] = HEAP8[$add$ptr + (($add191 - $add247 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 3 >> 0] = HEAP8[$add$ptr + (($add248 + $add193 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 12 >> 0] = HEAP8[$add$ptr + (($add193 - $add248 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 4 >> 0] = HEAP8[$add$ptr + (($add251 + $sub194 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 11 >> 0] = HEAP8[$add$ptr + (($sub194 - $add251 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 5 >> 0] = HEAP8[$add$ptr + (($add252 + $sub192 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 10 >> 0] = HEAP8[$add$ptr + (($sub192 - $add252 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 6 >> 0] = HEAP8[$add$ptr + (($add244 + $sub190 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 9 >> 0] = HEAP8[$add$ptr + (($sub190 - $add244 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 7 >> 0] = HEAP8[$add$ptr + (($sub217 + $sub188 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 8 >> 0] = HEAP8[$add$ptr + (($sub188 - $sub217 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1350 = $ctr$1350 + 1 | 0;
  if (($ctr$1350 | 0) == 16) break; else $wsptr$1349 = $wsptr$1349 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _hexfloat($f, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $55 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $80 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call187 = 0, $call197 = 0, $call263 = 0, $cmp206 = 0, $cmp54 = 0, $cond29 = 0, $cond46 = 0, $conv241112 = 0.0, $conv253$pre$phiZ2D = 0.0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $mul143 = 0, $or$cond = 0, $or$cond103 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub239111 = 0, $sub260 = 0.0, $tobool108 = 0, $tobool138 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, label = 0, $46$looptemp = 0, $47$looptemp = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $c$0$ph = HEAPU8[$0 >> 0] | 0;
 } else $c$0$ph = ___shgetc($f) | 0;
 $c$0 = $c$0$ph;
 $gotdig$0 = 0;
 L5 : while (1) {
  switch ($c$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$3$ph = $c$0;
    $gotdig$3$ph = $gotdig$0;
    $gotrad$1$ph = 0;
    break L5;
   }
  }
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$0$be = HEAPU8[$3 >> 0] | 0;
  } else $c$0$be = ___shgetc($f) | 0;
  $c$0 = $c$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 10) {
  $6 = HEAP32[$rpos >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $6 + 1;
   $cond29 = HEAPU8[$6 >> 0] | 0;
  } else $cond29 = ___shgetc($f) | 0;
  if (($cond29 | 0) == 48) {
   $12 = 0;
   $13 = 0;
   while (1) {
    $9 = HEAP32[$rpos >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $9 + 1;
     $cond46 = HEAPU8[$9 >> 0] | 0;
    } else $cond46 = ___shgetc($f) | 0;
    $14 = _i64Add($12 | 0, $13 | 0, -1, -1) | 0;
    $15 = getTempRet0() | 0;
    if (($cond46 | 0) == 48) {
     $12 = $14;
     $13 = $15;
    } else {
     $106 = $14;
     $107 = $15;
     $c$3$ph = $cond46;
     $gotdig$3$ph = 1;
     $gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$3$ph = $cond29;
   $gotdig$3$ph = $gotdig$0;
   $gotrad$1$ph = 1;
  }
 }
 $17 = 0;
 $19 = 0;
 $38 = $106;
 $40 = $107;
 $c$3 = $c$3$ph;
 $gotdig$3 = $gotdig$3$ph;
 $gotrad$1 = $gotrad$1$ph;
 $gottail$0 = 0;
 $scale$0 = 1.0;
 $x$0 = 0;
 $y$0 = 0.0;
 while (1) {
  $sub = $c$3 + -48 | 0;
  $$pre = $c$3 | 32;
  if ($sub >>> 0 >= 10) {
   $cmp54 = ($c$3 | 0) == 46;
   if (!($cmp54 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) if (!$gotrad$1) {
    $108 = $19;
    $109 = $17;
    $110 = $19;
    $111 = $17;
    $gotdig$4 = $gotdig$3;
    $gotrad$2 = 1;
    $gottail$2 = $gottail$0;
    $scale$2 = $scale$0;
    $x$2 = $x$0;
    $y$2 = $y$0;
   } else {
    $c$3$lcssa = 46;
    break;
   } else label = 24;
  } else label = 24;
  if ((label | 0) == 24) {
   label = 0;
   $d$0 = ($c$3 | 0) > 57 ? $$pre + -87 | 0 : $sub;
   do if (!(($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8)) if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 14) {
    $div = $scale$0 * .0625;
    $gottail$1 = $gottail$0;
    $scale$1 = $div;
    $x$1 = $x$0;
    $y$1 = $y$0 + $div * +($d$0 | 0);
    break;
   } else {
    $or$cond = ($gottail$0 | 0) != 0 | ($d$0 | 0) == 0;
    $gottail$1 = $or$cond ? $gottail$0 : 1;
    $scale$1 = $scale$0;
    $x$1 = $x$0;
    $y$1 = $or$cond ? $y$0 : $y$0 + $scale$0 * .5;
    break;
   } else {
    $gottail$1 = $gottail$0;
    $scale$1 = $scale$0;
    $x$1 = $d$0 + ($x$0 << 4) | 0;
    $y$1 = $y$0;
   } while (0);
   $28 = _i64Add($19 | 0, $17 | 0, 1, 0) | 0;
   $108 = $38;
   $109 = $40;
   $110 = $28;
   $111 = getTempRet0() | 0;
   $gotdig$4 = 1;
   $gotrad$2 = $gotrad$1;
   $gottail$2 = $gottail$1;
   $scale$2 = $scale$1;
   $x$2 = $x$1;
   $y$2 = $y$1;
  }
  $30 = HEAP32[$rpos >> 2] | 0;
  if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $30 + 1;
   $c$3$be = HEAPU8[$30 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
  $17 = $111;
  $19 = $110;
  $38 = $108;
  $40 = $109;
  $c$3 = $c$3$be;
  $gotdig$3 = $gotdig$4;
  $gotrad$1 = $gotrad$2;
  $gottail$0 = $gottail$2;
  $scale$0 = $scale$2;
  $x$0 = $x$2;
  $y$0 = $y$2;
 }
 do if (!$gotdig$3) {
  $tobool108 = (HEAP32[$shend >> 2] | 0) == 0;
  if (!$tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($pok) {
   if (!$tobool108 ? (HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1, !(($gotrad$1 | 0) == 0 | $tobool108)) : 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  } else ___shlim($f, 0, 0);
  $retval$0 = +($sign | 0) * 0.0;
 } else {
  $tobool138 = ($gotrad$1 | 0) == 0;
  $37 = $tobool138 ? $19 : $38;
  $39 = $tobool138 ? $17 : $40;
  if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
   $46 = $19;
   $47 = $17;
   $x$3125 = $x$0;
   while (1) {
    $mul143 = $x$3125 << 4;
    $46$looptemp = $46;
    $46 = _i64Add($46 | 0, $47 | 0, 1, 0) | 0;
    $47$looptemp = $47;
    $47 = getTempRet0() | 0;
    if (!(($47$looptemp | 0) < 0 | ($47$looptemp | 0) == 0 & $46$looptemp >>> 0 < 7)) {
     $x$3$lcssa = $mul143;
     break;
    } else $x$3125 = $mul143;
   }
  } else $x$3$lcssa = $x$0;
  if (($c$3$lcssa | 32 | 0) == 112) {
   $55 = _scanexp($f, $pok) | 0;
   $56 = getTempRet0() | 0;
   if (($55 | 0) == 0 & ($56 | 0) == -2147483648) {
    if (!$pok) {
     ___shlim($f, 0, 0);
     $retval$0 = 0.0;
     break;
    }
    if (!(HEAP32[$shend >> 2] | 0)) {
     $68 = 0;
     $69 = 0;
    } else {
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $68 = 0;
     $69 = 0;
    }
   } else {
    $68 = $55;
    $69 = $56;
   }
  } else if (!(HEAP32[$shend >> 2] | 0)) {
   $68 = 0;
   $69 = 0;
  } else {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   $68 = 0;
   $69 = 0;
  }
  $64 = _bitshift64Shl($37 | 0, $39 | 0, 2) | 0;
  $66 = _i64Add($64 | 0, getTempRet0() | 0, -32, -1) | 0;
  $70 = _i64Add($66 | 0, getTempRet0() | 0, $68 | 0, $69 | 0) | 0;
  $71 = getTempRet0() | 0;
  if (!$x$3$lcssa) {
   $retval$0 = +($sign | 0) * 0.0;
   break;
  }
  $sub182 = 0 - $emin | 0;
  $73 = (($sub182 | 0) < 0) << 31 >> 31;
  if (($71 | 0) > ($73 | 0) | ($71 | 0) == ($73 | 0) & $70 >>> 0 > $sub182 >>> 0) {
   $call187 = ___errno_location() | 0;
   HEAP32[$call187 >> 2] = 68;
   $retval$0 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub192 = $emin + -106 | 0;
  $80 = (($sub192 | 0) < 0) << 31 >> 31;
  if (($71 | 0) < ($80 | 0) | ($71 | 0) == ($80 | 0) & $70 >>> 0 < $sub192 >>> 0) {
   $call197 = ___errno_location() | 0;
   HEAP32[$call197 >> 2] = 68;
   $retval$0 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($x$3$lcssa | 0) > -1) {
   $86 = $70;
   $87 = $71;
   $x$4119 = $x$3$lcssa;
   $y$3120 = $y$0;
   while (1) {
    $cmp206 = !($y$3120 >= .5);
    $x$5 = $x$4119 << 1 | ($cmp206 ^ 1) & 1;
    $y$4 = $y$3120 + ($cmp206 ? $y$3120 : $y$3120 + -1.0);
    $88 = _i64Add($86 | 0, $87 | 0, -1, -1) | 0;
    $89 = getTempRet0() | 0;
    if (($x$5 | 0) > -1) {
     $86 = $88;
     $87 = $89;
     $x$4119 = $x$5;
     $y$3120 = $y$4;
    } else {
     $96 = $88;
     $97 = $89;
     $x$4$lcssa = $x$5;
     $y$3$lcssa = $y$4;
     break;
    }
   }
  } else {
   $96 = $70;
   $97 = $71;
   $x$4$lcssa = $x$3$lcssa;
   $y$3$lcssa = $y$0;
  }
  $91 = (($bits | 0) < 0) << 31 >> 31;
  $94 = _i64Subtract(32, 0, $emin | 0, (($emin | 0) < 0) << 31 >> 31 | 0) | 0;
  $98 = _i64Add($94 | 0, getTempRet0() | 0, $96 | 0, $97 | 0) | 0;
  $99 = getTempRet0() | 0;
  if (($99 | 0) < ($91 | 0) | ($99 | 0) == ($91 | 0) & $98 >>> 0 < $bits >>> 0) if (($98 | 0) > 0) {
   $bits$addr$0 = $98;
   label = 65;
  } else {
   $bits$addr$0110 = 0;
   $sub239111 = 84;
   label = 67;
  } else {
   $bits$addr$0 = $bits;
   label = 65;
  }
  if ((label | 0) == 65) if (($bits$addr$0 | 0) < 53) {
   $bits$addr$0110 = $bits$addr$0;
   $sub239111 = 84 - $bits$addr$0 | 0;
   label = 67;
  } else {
   $bias$0 = 0.0;
   $bits$addr$0109 = $bits$addr$0;
   $conv253$pre$phiZ2D = +($sign | 0);
  }
  if ((label | 0) == 67) {
   $conv241112 = +($sign | 0);
   $bias$0 = +_copysignl(+_scalbn(1.0, $sub239111), $conv241112);
   $bits$addr$0109 = $bits$addr$0110;
   $conv253$pre$phiZ2D = $conv241112;
  }
  $or$cond103 = ($x$4$lcssa & 1 | 0) == 0 & ($y$3$lcssa != 0.0 & ($bits$addr$0109 | 0) < 32);
  $sub260 = ($or$cond103 ? 0.0 : $y$3$lcssa) * $conv253$pre$phiZ2D + ($bias$0 + $conv253$pre$phiZ2D * +(($x$4$lcssa + ($or$cond103 & 1) | 0) >>> 0)) - $bias$0;
  if (!($sub260 != 0.0)) {
   $call263 = ___errno_location() | 0;
   HEAP32[$call263 >> 2] = 68;
  }
  $retval$0 = +_scalbnl($sub260, $96);
 } while (0);
 return +$retval$0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $5 = 0, $PushComponent = 0, $SoFar = 0, $State$addr = 0, $Subs136 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call119 = 0, $call125 = 0, $call131 = 0, $call2 = 0, $call25 = 0, $call52 = 0, $call57 = 0, $call93 = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0, $tobool12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp$byval_copy = sp + 32 | 0;
 $State$addr = sp + 20 | 0;
 $SoFar = sp + 24 | 0;
 $PushComponent = sp + 8 | 0;
 $agg$tmp = sp;
 HEAP32[$State$addr >> 2] = $State;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 78) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  $tobool = ($State | 0) == 0;
  if (!$tobool) HEAP32[$State + 4 >> 2] = $call2;
  do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 79) | 0) {
   if (!$tobool) HEAP8[$State + 8 >> 0] = 2;
  } else {
   $tobool12 = ($State | 0) != 0;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 82) | 0) {
    if (!$tobool12) break;
    HEAP8[$State + 8 >> 0] = 1;
    break;
   } else {
    if (!$tobool12) break;
    HEAP8[$State + 8 >> 0] = 0;
    break;
   }
  } while (0);
  HEAP32[$SoFar >> 2] = 0;
  HEAP32[$PushComponent >> 2] = $this;
  HEAP32[$PushComponent + 4 >> 2] = $SoFar;
  HEAP32[$PushComponent + 8 >> 2] = $State$addr;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32091);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
   $call25 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 32409) | 0;
   HEAP32[$SoFar >> 2] = $call25;
  }
  $Subs136 = $this + 148 | 0;
  L19 : while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 41;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0;
   L22 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 77) | 0) {
    if (!(HEAP32[$SoFar >> 2] | 0)) {
     $retval$3 = 0;
     break L19;
    }
   } else {
    L25 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
    case 84:
     {
      if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0) | 0)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 73:
     {
      $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, (HEAP32[$State$addr >> 2] | 0) != 0) | 0;
      HEAP32[$agg$tmp$byval_copy >> 2] = $call52;
      if (($call52 | 0) == 0 | (HEAP32[$SoFar >> 2] | 0) == 0) {
       label = 26;
       break L19;
      }
      $call57 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp$byval_copy) | 0;
      HEAP32[$SoFar >> 2] = $call57;
      $5 = HEAP32[$State$addr >> 2] | 0;
      if ($5 | 0) HEAP8[$5 + 1 >> 0] = 1;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 68:
     {
      switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
      case 67:
       {
        label = 39;
        break L25;
        break;
       }
      case 84:
      case 116:
       break;
      default:
       break L25;
      }
      if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0) | 0)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 83:
     {
      if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 116) label = 39; else {
       $call93 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
       HEAP32[$agg$tmp$byval_copy >> 2] = $call93;
       if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, $call93) | 0)) {
        label = 44;
        break L19;
       }
       if ((HEAP32[$SoFar >> 2] | 0) != ($call93 | 0)) __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $agg$tmp$byval_copy);
       break L22;
      }
      break;
     }
    case 67:
     break;
    default:
     label = 39;
    } while (0);
    if ((label | 0) == 39) {
     label = 0;
     $call131 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
     if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call131, HEAP32[$State$addr >> 2] | 0) | 0) | 0)) {
      $retval$3 = 0;
      break L19;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
     break;
    }
    if (!(HEAP32[$SoFar >> 2] | 0)) {
     $retval$3 = 0;
     break L19;
    }
    $call119 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($call119, $SoFar, HEAP32[$State$addr >> 2] | 0) | 0) | 0)) {
     $retval$3 = 0;
     break L19;
    }
    $call125 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call119, HEAP32[$SoFar >> 2] | 0) | 0;
    HEAP32[$SoFar >> 2] = $call125;
    if (!$call125) {
     $retval$3 = 0;
     break L19;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
   } while (0);
  }
  if ((label | 0) == 26) $retval$3 = 0; else if ((label | 0) == 41) if ((HEAP32[$SoFar >> 2] | 0) != 0 ? !(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs136) | 0) : 0) {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($Subs136);
   $retval$3 = HEAP32[$SoFar >> 2] | 0;
  } else $retval$3 = 0; else if ((label | 0) == 44) $retval$3 = 0;
  $retval$4 = $retval$3;
 } else $retval$4 = 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _decode_mcu($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $35 = 0, $37 = 0, $40 = 0, $44 = 0, $5 = 0, $8 = 0, $Ah$i = 0, $Ss$i = 0, $add$ptr = 0, $add$ptr111 = 0, $add$ptr126 = 0, $add$ptr141 = 0, $add$ptr145 = 0, $add$ptr21 = 0, $add$ptr27 = 0, $add$ptr35 = 0, $add$ptr61 = 0, $add$ptr88 = 0, $add$ptr99 = 0, $add$sink = 0, $add76 = 0, $arraydecay = 0, $arrayidx12 = 0, $arrayidx122 = 0, $arrayidx13 = 0, $arrayidx75 = 0, $arrayidx86 = 0, $blkn$0165 = 0, $blocks_in_MCU = 0, $call110 = 0, $call112 = 0, $call19 = 0, $call22 = 0, $ci$032$i = 0, $comps_in_scan$i = 0, $ct = 0, $inc = 0, $inc$lcssa = 0, $inc144 = 0, $inc149 = 0, $k$0 = 0, $k$1$lcssa = 0, $lim_Se = 0, $lim_Se$i = 0, $m$0137 = 0, $m$1 = 0, $m$3156 = 0, $m$4 = 0, $mul = 0, $progressive_mode$i = 0, $restart_interval = 0, $restarts_to_go = 0, $shl = 0, $shl119 = 0, $shl131 = 0, $shr147159 = 0, $shr147162 = 0, $shr63139 = 0, $shr63142 = 0, $spec$select = 0, $spec$select125 = 0, $st$0136 = 0, $st$1 = 0, $st$2$lcssa = 0, $st$2148 = 0, $st$3155 = 0, $st$4 = 0, $tobool151 = 0, $tobool67 = 0, $v$0$lcssa = 0, $v$0141 = 0, $v$3$lcssa = 0, $v$3161 = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0) {
  $restarts_to_go = $0 + 56 | 0;
  $2 = HEAP32[$restarts_to_go >> 2] | 0;
  if (!$2) {
   if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$cinfo + 464 >> 2] | 0) + 8 >> 2] & 127]($cinfo) | 0)) {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 25;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
   }
   $comps_in_scan$i = $cinfo + 340 | 0;
   if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
    $progressive_mode$i = $cinfo + 224 | 0;
    $Ss$i = $cinfo + 412 | 0;
    $lim_Se$i = $cinfo + 436 | 0;
    $Ah$i = $cinfo + 420 | 0;
    $ci$032$i = 0;
    do {
     $8 = HEAP32[$cinfo + 344 + ($ci$032$i << 2) >> 2] | 0;
     if (HEAP32[$progressive_mode$i >> 2] | 0) if (!(HEAP32[$Ss$i >> 2] | 0)) {
      if (!(HEAP32[$Ah$i >> 2] | 0)) label = 10;
     } else label = 13; else label = 10;
     do if ((label | 0) == 10) {
      label = 0;
      dest = HEAP32[$0 + 60 + (HEAP32[$8 + 20 >> 2] << 2) >> 2] | 0;
      stop = dest + 64 | 0;
      do {
       HEAP8[dest >> 0] = 0;
       dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$0 + 24 + ($ci$032$i << 2) >> 2] = 0;
      HEAP32[$0 + 40 + ($ci$032$i << 2) >> 2] = 0;
      if (!(HEAP32[$progressive_mode$i >> 2] | 0)) if (!(HEAP32[$lim_Se$i >> 2] | 0)) break; else {
       label = 13;
       break;
      } else if (!(HEAP32[$Ss$i >> 2] | 0)) break; else {
       label = 13;
       break;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      _memset(HEAP32[$0 + 124 + (HEAP32[$8 + 24 >> 2] << 2) >> 2] | 0, 0, 256) | 0;
     }
     $ci$032$i = $ci$032$i + 1 | 0;
    } while (($ci$032$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = -16;
   $18 = HEAP32[$restart_interval >> 2] | 0;
   HEAP32[$restarts_to_go >> 2] = $18;
   $19 = $18;
  } else $19 = $2;
  HEAP32[$restarts_to_go >> 2] = $19 + -1;
 }
 $ct = $0 + 20 | 0;
 if ((HEAP32[$ct >> 2] | 0) == -1) return 1;
 $21 = HEAP32[$cinfo + 432 >> 2] | 0;
 $blocks_in_MCU = $cinfo + 368 | 0;
 if ((HEAP32[$blocks_in_MCU >> 2] | 0) <= 0) return 1;
 $lim_Se = $cinfo + 436 | 0;
 $arraydecay = $0 + 188 | 0;
 $blkn$0165 = 0;
 L32 : while (1) {
  $23 = HEAP32[$MCU_data + ($blkn$0165 << 2) >> 2] | 0;
  $24 = HEAP32[$cinfo + 372 + ($blkn$0165 << 2) >> 2] | 0;
  $25 = HEAP32[$cinfo + 344 + ($24 << 2) >> 2] | 0;
  $26 = HEAP32[$25 + 20 >> 2] | 0;
  $arrayidx12 = $0 + 60 + ($26 << 2) | 0;
  $arrayidx13 = $0 + 40 + ($24 << 2) | 0;
  $add$ptr = (HEAP32[$arrayidx12 >> 2] | 0) + (HEAP32[$arrayidx13 >> 2] | 0) | 0;
  if (!(_arith_decode($cinfo, $add$ptr) | 0)) {
   HEAP32[$arrayidx13 >> 2] = 0;
   $35 = HEAP32[$0 + 24 + ($24 << 2) >> 2] | 0;
  } else {
   $call19 = _arith_decode($cinfo, $add$ptr + 1 | 0) | 0;
   $add$ptr21 = $add$ptr + 2 + $call19 | 0;
   $call22 = _arith_decode($cinfo, $add$ptr21) | 0;
   if ($call22) {
    $add$ptr27 = (HEAP32[$arrayidx12 >> 2] | 0) + 20 | 0;
    if (!(_arith_decode($cinfo, $add$ptr27) | 0)) {
     $m$1 = $call22;
     $st$1 = $add$ptr27;
    } else {
     $m$0137 = $call22;
     $st$0136 = $add$ptr27;
     while (1) {
      $shl = $m$0137 << 1;
      if (($shl | 0) == 32768) {
       label = 26;
       break L32;
      }
      $add$ptr35 = $st$0136 + 1 | 0;
      if (!(_arith_decode($cinfo, $add$ptr35) | 0)) {
       $m$1 = $shl;
       $st$1 = $add$ptr35;
       break;
      } else {
       $m$0137 = $shl;
       $st$0136 = $add$ptr35;
      }
     }
    }
   } else {
    $m$1 = 0;
    $st$1 = $add$ptr21;
   }
   do if (($m$1 | 0) >= (1 << (HEAPU8[$cinfo + 232 + $26 >> 0] | 0) >> 1 | 0)) {
    $mul = $call19 << 2;
    if (($m$1 | 0) > (1 << (HEAPU8[$cinfo + 248 + $26 >> 0] | 0) >> 1 | 0)) {
     $add$sink = $mul + 12 | 0;
     break;
    } else {
     $add$sink = $mul + 4 | 0;
     break;
    }
   } else $add$sink = 0; while (0);
   HEAP32[$arrayidx13 >> 2] = $add$sink;
   $add$ptr61 = $st$1 + 14 | 0;
   $shr63139 = $m$1 >> 1;
   if (!$shr63139) $v$0$lcssa = $m$1; else {
    $shr63142 = $shr63139;
    $v$0141 = $m$1;
    while (1) {
     $tobool67 = (_arith_decode($cinfo, $add$ptr61) | 0) == 0;
     $spec$select = ($tobool67 ? 0 : $shr63142) | $v$0141;
     $shr63142 = $shr63142 >> 1;
     if (!$shr63142) {
      $v$0$lcssa = $spec$select;
      break;
     } else $v$0141 = $spec$select;
    }
   }
   $arrayidx75 = $0 + 24 + ($24 << 2) | 0;
   $add76 = (HEAP32[$arrayidx75 >> 2] | 0) + (($call19 | 0) == 0 ? $v$0$lcssa + 1 | 0 : ~$v$0$lcssa) | 0;
   HEAP32[$arrayidx75 >> 2] = $add76;
   $35 = $add76;
  }
  HEAP16[$23 >> 1] = $35;
  L56 : do if (HEAP32[$lim_Se >> 2] | 0) {
   $37 = HEAP32[$25 + 24 >> 2] | 0;
   $arrayidx86 = $0 + 124 + ($37 << 2) | 0;
   $arrayidx122 = $cinfo + 264 + $37 | 0;
   $k$0 = 0;
   while (1) {
    $add$ptr88 = (HEAP32[$arrayidx86 >> 2] | 0) + ($k$0 * 3 | 0) | 0;
    if (_arith_decode($cinfo, $add$ptr88) | 0) break L56;
    $inc144 = $k$0 + 1 | 0;
    if (!(_arith_decode($cinfo, $add$ptr88 + 1 | 0) | 0)) {
     $inc149 = $inc144;
     $st$2148 = $add$ptr88;
     while (1) {
      if (($inc149 | 0) >= (HEAP32[$lim_Se >> 2] | 0)) {
       label = 42;
       break L32;
      }
      $add$ptr99 = $st$2148 + 3 | 0;
      $inc = $inc149 + 1 | 0;
      if (!(_arith_decode($cinfo, $st$2148 + 4 | 0) | 0)) {
       $inc149 = $inc;
       $st$2148 = $add$ptr99;
      } else {
       $inc$lcssa = $inc;
       $k$1$lcssa = $inc149;
       $st$2$lcssa = $add$ptr99;
       break;
      }
     }
    } else {
     $inc$lcssa = $inc144;
     $k$1$lcssa = $k$0;
     $st$2$lcssa = $add$ptr88;
    }
    $call110 = _arith_decode($cinfo, $arraydecay) | 0;
    $add$ptr111 = $st$2$lcssa + 2 | 0;
    $call112 = _arith_decode($cinfo, $add$ptr111) | 0;
    if ($call112) {
     if (_arith_decode($cinfo, $add$ptr111) | 0) {
      $shl119 = $call112 << 1;
      $add$ptr126 = (HEAP32[$arrayidx86 >> 2] | 0) + (($k$1$lcssa | 0) < (HEAPU8[$arrayidx122 >> 0] | 0 | 0) ? 189 : 217) | 0;
      if (!(_arith_decode($cinfo, $add$ptr126) | 0)) {
       $m$4 = $shl119;
       $st$4 = $add$ptr126;
      } else {
       $m$3156 = $shl119;
       $st$3155 = $add$ptr126;
       while (1) {
        $shl131 = $m$3156 << 1;
        if (($shl131 | 0) == 32768) {
         label = 49;
         break L32;
        }
        $add$ptr141 = $st$3155 + 1 | 0;
        if (!(_arith_decode($cinfo, $add$ptr141) | 0)) {
         $m$4 = $shl131;
         $st$4 = $add$ptr141;
         break;
        } else {
         $m$3156 = $shl131;
         $st$3155 = $add$ptr141;
        }
       }
      }
     } else {
      $m$4 = $call112;
      $st$4 = $add$ptr111;
     }
     $add$ptr145 = $st$4 + 14 | 0;
     $shr147159 = $m$4 >> 1;
     if (!$shr147159) $v$3$lcssa = $m$4; else {
      $shr147162 = $shr147159;
      $v$3161 = $m$4;
      while (1) {
       $tobool151 = (_arith_decode($cinfo, $add$ptr145) | 0) == 0;
       $spec$select125 = ($tobool151 ? 0 : $shr147162) | $v$3161;
       $shr147162 = $shr147162 >> 1;
       if (!$shr147162) {
        $v$3$lcssa = $spec$select125;
        break;
       } else $v$3161 = $spec$select125;
      }
     }
    } else $v$3$lcssa = 0;
    HEAP16[$23 + (HEAP32[$21 + ($inc$lcssa << 2) >> 2] << 1) >> 1] = ($call110 | 0) == 0 ? $v$3$lcssa + 1 | 0 : $v$3$lcssa ^ 65535;
    if (($inc$lcssa | 0) < (HEAP32[$lim_Se >> 2] | 0)) $k$0 = $inc$lcssa; else break;
   }
  } while (0);
  $blkn$0165 = $blkn$0165 + 1 | 0;
  if (($blkn$0165 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
   label = 56;
   break;
  }
 }
 if ((label | 0) == 26) {
  $30 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$30 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$30 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 42) {
  $40 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$40 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$40 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 49) {
  $44 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$44 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$44 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 56) return 1;
 return 0;
}

function _start_pass_huff_decoder($cinfo) {
 $cinfo = $cinfo | 0;
 var $$off = 0, $$off210 = 0, $$off211 = 0, $$off212 = 0, $$off213 = 0, $$off214 = 0, $$off215 = 0, $$off216 = 0, $$off217 = 0, $$off218 = 0, $$off221 = 0, $$off222 = 0, $$sink = 0, $0 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $97 = 0, $Ah76 = 0, $Ah97$pre$phiZ2D = 0, $Al92 = 0, $Se = 0, $Ss = 0, $ac_derived_tbl = 0, $arrayidx134 = 0, $arrayidx73 = 0, $bits_left = 0, $blkn$0244 = 0, $blocks_in_MCU = 0, $ci$0252 = 0, $ci$1248 = 0, $ci$2246 = 0, $cmp101 = 0, $cmp145 = 0, $coef_bits = 0, $coefi$0250 = 0, $comps_in_scan177 = 0, $comps_in_scan46 = 0, $get_buffer = 0, $inc140 = 0, $insufficient_data = 0, $lim_Se167 = 0, $restart_interval = 0, $restarts_to_go = 0, $sub = 0, label = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $Ss = $cinfo + 412 | 0;
 $2 = HEAP32[$Ss >> 2] | 0;
 $cmp145 = ($2 | 0) == 0;
 if (!(HEAP32[$cinfo + 224 >> 2] | 0)) {
  if (($cmp145 ? (HEAP32[$cinfo + 420 >> 2] | 0) == 0 : 0) ? (HEAP32[$cinfo + 424 >> 2] | 0) == 0 : 0) {
   $53 = HEAP32[$cinfo + 416 >> 2] | 0;
   if ((HEAP32[$cinfo + 220 >> 2] | 0) != 0 | ($53 | 0) < 64 ? ($53 | 0) != (HEAP32[$cinfo + 436 >> 2] | 0) : 0) label = 38;
  } else label = 38;
  if ((label | 0) == 38) {
   $55 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$55 + 20 >> 2] = 125;
   FUNCTION_TABLE_vii[HEAP32[$55 + 4 >> 2] & 255]($cinfo, -1);
  }
  $lim_Se167 = $cinfo + 436 | 0;
  HEAP32[$0 + 4 >> 2] = (HEAP32[$lim_Se167 >> 2] | 0) == 63 ? 50 : 51;
  $comps_in_scan177 = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan177 >> 2] | 0) > 0) {
   $ci$2246 = 0;
   do {
    $59 = HEAP32[$cinfo + 344 + ($ci$2246 << 2) >> 2] | 0;
    $60 = HEAP32[$59 + 20 >> 2] | 0;
    _jpeg_make_d_derived_tbl($cinfo, 1, $60, $0 + 68 + ($60 << 2) | 0);
    if (HEAP32[$lim_Se167 >> 2] | 0) {
     $62 = HEAP32[$59 + 24 >> 2] | 0;
     _jpeg_make_d_derived_tbl($cinfo, 0, $62, $0 + 84 + ($62 << 2) | 0);
    }
    HEAP32[$0 + 24 + ($ci$2246 << 2) >> 2] = 0;
    $ci$2246 = $ci$2246 + 1 | 0;
   } while (($ci$2246 | 0) < (HEAP32[$comps_in_scan177 >> 2] | 0));
  }
  $blocks_in_MCU = $cinfo + 368 | 0;
  if ((HEAP32[$blocks_in_MCU >> 2] | 0) <= 0) {
   $bits_left = $0 + 16 | 0;
   HEAP32[$bits_left >> 2] = 0;
   $get_buffer = $0 + 12 | 0;
   HEAP32[$get_buffer >> 2] = 0;
   $insufficient_data = $0 + 40 | 0;
   HEAP32[$insufficient_data >> 2] = 0;
   $restart_interval = $cinfo + 280 | 0;
   $97 = HEAP32[$restart_interval >> 2] | 0;
   $restarts_to_go = $0 + 44 | 0;
   HEAP32[$restarts_to_go >> 2] = $97;
   return;
  }
  $blkn$0244 = 0;
  do {
   $66 = HEAP32[$cinfo + 344 + (HEAP32[$cinfo + 372 + ($blkn$0244 << 2) >> 2] << 2) >> 2] | 0;
   HEAP32[$0 + 100 + ($blkn$0244 << 2) >> 2] = HEAP32[$0 + 68 + (HEAP32[$66 + 20 >> 2] << 2) >> 2];
   HEAP32[$0 + 140 + ($blkn$0244 << 2) >> 2] = HEAP32[$0 + 84 + (HEAP32[$66 + 24 >> 2] << 2) >> 2];
   L24 : do if (!(HEAP32[$66 + 52 >> 2] | 0)) $$sink = 0; else {
    $72 = HEAP32[$66 + 40 >> 2] | 0;
    $73 = HEAP32[$66 + 36 >> 2] | 0;
    switch (HEAP32[$lim_Se167 >> 2] | 0) {
    case 0:
     {
      $$sink = 1;
      break L24;
      break;
     }
    case 3:
     {
      $$sink = (HEAP32[2304 + ((($72 | 0) != 1 & 1) << 3) + ((($73 | 0) != 1 & 1) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    case 8:
     {
      $$off217 = $72 + -1 | 0;
      $$off218 = $73 + -1 | 0;
      $$sink = (HEAP32[2320 + (($$off217 >>> 0 < 2 ? $$off217 : 2) * 12 | 0) + (($$off218 >>> 0 < 2 ? $$off218 : 2) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    case 15:
     {
      $$off215 = $72 + -1 | 0;
      $$off216 = $73 + -1 | 0;
      $$sink = (HEAP32[2368 + (($$off215 >>> 0 < 3 ? $$off215 : 3) << 4) + (($$off216 >>> 0 < 3 ? $$off216 : 3) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    case 24:
     {
      $$off213 = $72 + -1 | 0;
      $$off214 = $73 + -1 | 0;
      $$sink = (HEAP32[2432 + (($$off213 >>> 0 < 4 ? $$off213 : 4) * 20 | 0) + (($$off214 >>> 0 < 4 ? $$off214 : 4) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    case 35:
     {
      $$off211 = $72 + -1 | 0;
      $$off212 = $73 + -1 | 0;
      $$sink = (HEAP32[2544 + (($$off211 >>> 0 < 5 ? $$off211 : 5) * 24 | 0) + (($$off212 >>> 0 < 5 ? $$off212 : 5) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    case 48:
     {
      $$off = $72 + -1 | 0;
      $$off210 = $73 + -1 | 0;
      $$sink = (HEAP32[2688 + (($$off >>> 0 < 6 ? $$off : 6) * 28 | 0) + (($$off210 >>> 0 < 6 ? $$off210 : 6) << 2) >> 2] | 0) + 1 | 0;
      break L24;
      break;
     }
    default:
     {
      $$off221 = $72 + -1 | 0;
      $$off222 = $73 + -1 | 0;
      $$sink = (HEAP32[2896 + (($$off221 >>> 0 < 7 ? $$off221 : 7) << 5) + (($$off222 >>> 0 < 7 ? $$off222 : 7) << 2) >> 2] | 0) + 1 | 0;
      break L24;
     }
    }
   } while (0);
   HEAP32[$0 + 180 + ($blkn$0244 << 2) >> 2] = $$sink;
   $blkn$0244 = $blkn$0244 + 1 | 0;
  } while (($blkn$0244 | 0) < (HEAP32[$blocks_in_MCU >> 2] | 0));
  $bits_left = $0 + 16 | 0;
  HEAP32[$bits_left >> 2] = 0;
  $get_buffer = $0 + 12 | 0;
  HEAP32[$get_buffer >> 2] = 0;
  $insufficient_data = $0 + 40 | 0;
  HEAP32[$insufficient_data >> 2] = 0;
  $restart_interval = $cinfo + 280 | 0;
  $97 = HEAP32[$restart_interval >> 2] | 0;
  $restarts_to_go = $0 + 44 | 0;
  HEAP32[$restarts_to_go >> 2] = $97;
  return;
 }
 $Se = $cinfo + 416 | 0;
 $3 = HEAP32[$Se >> 2] | 0;
 if ($cmp145) if (!$3) label = 7; else label = 11; else if ((($3 | 0) >= ($2 | 0) ? ($3 | 0) <= (HEAP32[$cinfo + 436 >> 2] | 0) : 0) ? (HEAP32[$cinfo + 340 >> 2] | 0) == 1 : 0) label = 7; else label = 11;
 do if ((label | 0) == 7) {
  $6 = HEAP32[$cinfo + 420 >> 2] | 0;
  if ($6) {
   $sub = $6 + -1 | 0;
   if (($sub | 0) == (HEAP32[$cinfo + 424 >> 2] | 0)) $8 = $sub; else {
    label = 11;
    break;
   }
  } else $8 = HEAP32[$cinfo + 424 >> 2] | 0;
  if (($8 | 0) > 13) label = 11;
 } while (0);
 if ((label | 0) == 11) {
  $9 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$9 + 20 >> 2] = 17;
  HEAP32[$9 + 24 >> 2] = $2;
  HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAP32[$Se >> 2];
  HEAP32[(HEAP32[$cinfo >> 2] | 0) + 32 >> 2] = HEAP32[$cinfo + 420 >> 2];
  HEAP32[(HEAP32[$cinfo >> 2] | 0) + 36 >> 2] = HEAP32[$cinfo + 424 >> 2];
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $comps_in_scan46 = $cinfo + 340 | 0;
 $18 = HEAP32[$comps_in_scan46 >> 2] | 0;
 if (($18 | 0) > 0) {
  $coef_bits = $cinfo + 160 | 0;
  $Ah76 = $cinfo + 420 | 0;
  $Al92 = $cinfo + 424 | 0;
  $ci$0252 = 0;
  do {
   $20 = HEAP32[(HEAP32[$cinfo + 344 + ($ci$0252 << 2) >> 2] | 0) + 4 >> 2] | 0;
   $21 = HEAP32[$coef_bits >> 2] | 0;
   $22 = HEAP32[$Ss >> 2] | 0;
   if ($22) if ((HEAP32[$21 + ($20 << 8) >> 2] | 0) < 0) {
    $24 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$24 + 20 >> 2] = 118;
    HEAP32[$24 + 24 >> 2] = $20;
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
    $29 = HEAP32[$Ss >> 2] | 0;
   } else $29 = $22; else $29 = 0;
   if (($29 | 0) <= (HEAP32[$Se >> 2] | 0)) {
    $coefi$0250 = $29;
    while (1) {
     $arrayidx73 = $21 + ($20 << 8) + ($coefi$0250 << 2) | 0;
     $30 = HEAP32[$arrayidx73 >> 2] | 0;
     if ((HEAP32[$Ah76 >> 2] | 0) != ((($30 | 0) > 0 ? $30 : 0) | 0)) {
      $33 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$33 + 20 >> 2] = 118;
      HEAP32[$33 + 24 >> 2] = $20;
      HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $coefi$0250;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
     }
     HEAP32[$arrayidx73 >> 2] = HEAP32[$Al92 >> 2];
     if (($coefi$0250 | 0) < (HEAP32[$Se >> 2] | 0)) $coefi$0250 = $coefi$0250 + 1 | 0; else break;
    }
   }
   $ci$0252 = $ci$0252 + 1 | 0;
   $39 = HEAP32[$comps_in_scan46 >> 2] | 0;
  } while (($ci$0252 | 0) < ($39 | 0));
  $42 = $39;
  $Ah97$pre$phiZ2D = $Ah76;
 } else {
  $42 = $18;
  $Ah97$pre$phiZ2D = $cinfo + 420 | 0;
 }
 $41 = HEAP32[$Ss >> 2] | 0;
 $cmp101 = ($41 | 0) == 0;
 HEAP32[$0 + 4 >> 2] = (HEAP32[$Ah97$pre$phiZ2D >> 2] | 0) == 0 ? ($cmp101 ? 46 : 47) : $cmp101 ? 48 : 49;
 L69 : do if (($42 | 0) > 0) {
  $ac_derived_tbl = $0 + 64 | 0;
  $44 = $41;
  $ci$1248 = 0;
  while (1) {
   $43 = HEAP32[$cinfo + 344 + ($ci$1248 << 2) >> 2] | 0;
   if (!$44) {
    if (!(HEAP32[$Ah97$pre$phiZ2D >> 2] | 0)) {
     $46 = HEAP32[$43 + 20 >> 2] | 0;
     _jpeg_make_d_derived_tbl($cinfo, 1, $46, $0 + 48 + ($46 << 2) | 0);
    }
   } else {
    $47 = HEAP32[$43 + 24 >> 2] | 0;
    $arrayidx134 = $0 + 48 + ($47 << 2) | 0;
    _jpeg_make_d_derived_tbl($cinfo, 0, $47, $arrayidx134);
    HEAP32[$ac_derived_tbl >> 2] = HEAP32[$arrayidx134 >> 2];
   }
   HEAP32[$0 + 24 + ($ci$1248 << 2) >> 2] = 0;
   $inc140 = $ci$1248 + 1 | 0;
   if (($inc140 | 0) >= (HEAP32[$comps_in_scan46 >> 2] | 0)) break L69;
   $44 = HEAP32[$Ss >> 2] | 0;
   $ci$1248 = $inc140;
  }
 } while (0);
 HEAP32[$0 + 20 >> 2] = 0;
 $bits_left = $0 + 16 | 0;
 HEAP32[$bits_left >> 2] = 0;
 $get_buffer = $0 + 12 | 0;
 HEAP32[$get_buffer >> 2] = 0;
 $insufficient_data = $0 + 40 | 0;
 HEAP32[$insufficient_data >> 2] = 0;
 $restart_interval = $cinfo + 280 | 0;
 $97 = HEAP32[$restart_interval >> 2] | 0;
 $restarts_to_go = $0 + 44 | 0;
 HEAP32[$restarts_to_go >> 2] = $97;
 return;
}

function _ar2ReadSurfaceSet($filename, $ext, $pattHandle) {
 $filename = $filename | 0;
 $ext = $ext | 0;
 $pattHandle = $pattHandle | 0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $buf = 0, $call10 = 0, $call116 = 0, $call14 = 0, $call15 = 0, $call17 = 0, $call275 = 0, $call47 = 0, $call74 = 0, $call91 = 0, $fp$0 = 0, $i = 0, $j$0 = 0, $k$0 = 0, $name = 0, $namebuf = 0, $readMode$1 = 0, $retval$1 = 0, $storemerge = 0, $tobool = 0, $tobool111 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1248);
 $vararg_buffer67 = sp + 1232 | 0;
 $vararg_buffer65 = sp + 1224 | 0;
 $vararg_buffer59 = sp + 1208 | 0;
 $vararg_buffer57 = sp + 1200 | 0;
 $vararg_buffer51 = sp + 1184 | 0;
 $vararg_buffer49 = sp + 1176 | 0;
 $vararg_buffer43 = sp + 1160 | 0;
 $vararg_buffer41 = sp + 1152 | 0;
 $vararg_buffer38 = sp + 1144 | 0;
 $vararg_buffer36 = sp + 1136 | 0;
 $vararg_buffer34 = sp + 1128 | 0;
 $vararg_buffer31 = sp + 1120 | 0;
 $vararg_buffer29 = sp + 1112 | 0;
 $vararg_buffer27 = sp + 1104 | 0;
 $vararg_buffer24 = sp + 1096 | 0;
 $vararg_buffer22 = sp + 1088 | 0;
 $vararg_buffer19 = sp + 1080 | 0;
 $vararg_buffer16 = sp + 1072 | 0;
 $vararg_buffer14 = sp + 1064 | 0;
 $vararg_buffer11 = sp + 1056 | 0;
 $vararg_buffer9 = sp + 1048 | 0;
 $vararg_buffer5 = sp + 1040 | 0;
 $vararg_buffer2 = sp + 1032 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $buf = sp + 768 | 0;
 $name = sp + 512 | 0;
 $i = sp + 1236 | 0;
 $namebuf = sp;
 do if ((($ext | 0) != 0 ? (HEAP8[$ext >> 0] | 0) != 0 : 0) ? (_strcmp($ext, 22216) | 0) != 0 : 0) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $ext;
  _sprintf($namebuf, 21862, $vararg_buffer) | 0;
  $call10 = _fopen($namebuf, 21868) | 0;
  if (!$call10) {
   HEAP32[$vararg_buffer2 >> 2] = $filename;
   _arLog(0, 3, 21870, $vararg_buffer2);
   $call14 = ___errno_location() | 0;
   $call15 = _strerror(HEAP32[$call14 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer5 >> 2] = 43974;
   HEAP32[$vararg_buffer5 + 4 >> 2] = $call15;
   _arLog(0, 3, 21896, $vararg_buffer5);
   $retval$1 = 0;
   break;
  } else {
   $fp$0 = $call10;
   $readMode$1 = 1;
   label = 8;
   break;
  }
 } else label = 4; while (0);
 if ((label | 0) == 4) {
  _strncpy($name, $filename, 255) | 0;
  HEAP8[$name + 255 >> 0] = 0;
  $fp$0 = 0;
  $readMode$1 = 0;
  label = 8;
 }
 do if ((label | 0) == 8) {
  $call17 = _malloc(1140) | 0;
  if (!$call17) {
   _arLog(0, 3, 21902, $vararg_buffer9);
   _exit(1);
  }
  $tobool = ($readMode$1 | 0) != 0;
  if ($tobool) {
   if (!(_get_buff_272($buf, $fp$0) | 0)) {
    _fclose($fp$0) | 0;
    _free($call17);
    $retval$1 = 0;
    break;
   }
   HEAP32[$vararg_buffer11 >> 2] = $i;
   if ((_sscanf($buf, 21919, $vararg_buffer11) | 0) != 1) {
    _fclose($fp$0) | 0;
    _free($call17);
    $retval$1 = 0;
    break;
   }
   $2 = HEAP32[$i >> 2] | 0;
   if (($2 | 0) < 1) {
    _fclose($fp$0) | 0;
    _free($call17);
    $retval$1 = 0;
    break;
   } else $$sink = $2;
  } else $$sink = 1;
  HEAP32[$call17 + 4 >> 2] = $$sink;
  HEAP32[$call17 + 152 >> 2] = 0;
  $call47 = _malloc($$sink * 112 | 0) | 0;
  HEAP32[$call17 >> 2] = $call47;
  if (!$call47) {
   _arLog(0, 3, 21902, $vararg_buffer14);
   _exit(1);
  }
  $tobool111 = ($pattHandle | 0) == 0;
  $storemerge = 0;
  L28 : while (1) {
   HEAP32[$i >> 2] = $storemerge;
   if (($storemerge | 0) >= ($$sink | 0)) {
    label = 57;
    break;
   }
   HEAP32[$vararg_buffer16 >> 2] = $storemerge + 1;
   _arLog(0, 1, 21922, $vararg_buffer16);
   if ($tobool) {
    if (!(_get_buff_272($buf, $fp$0) | 0)) {
     label = 57;
     break;
    }
    HEAP32[$vararg_buffer19 >> 2] = $name;
    if ((_sscanf($buf, 21946, $vararg_buffer19) | 0) != 1) {
     label = 57;
     break;
    }
    _ar2UtilRemoveExt($name) | 0;
   }
   _arLog(0, 1, 21949, $vararg_buffer22);
   $call74 = _ar2ReadImageSet($name) | 0;
   HEAP32[$call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) >> 2] = $call74;
   if (!$call74) {
    label = 26;
    break;
   }
   _arLog(0, 1, 21998, $vararg_buffer27);
   _arLog(0, 1, 22008, $vararg_buffer29);
   $call91 = _ar2ReadFeatureSet($name, 22216) | 0;
   HEAP32[$call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) + 4 >> 2] = $call91;
   if (!$call91) {
    label = 29;
    break;
   }
   _arLog(0, 1, 21998, $vararg_buffer34);
   if ($tobool111) HEAP32[$call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) + 8 >> 2] = 0; else {
    _arLog(0, 1, 22059, $vararg_buffer36);
    _ar2UtilRemoveExt($name) | 0;
    $call116 = _ar2ReadMarkerSet($name, 22078, $pattHandle) | 0;
    HEAP32[$call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) + 8 >> 2] = $call116;
    if (!$call116) {
     label = 33;
     break;
    }
    _arLog(0, 1, 21998, $vararg_buffer41);
   }
   L43 : do if ($tobool) {
    if (!(_get_buff_272($buf, $fp$0) | 0)) {
     label = 57;
     break L28;
    }
    $10 = HEAP32[$i >> 2] | 0;
    HEAP32[$vararg_buffer43 >> 2] = $call47 + ($10 * 112 | 0) + 12;
    HEAP32[$vararg_buffer43 + 4 >> 2] = $call47 + ($10 * 112 | 0) + 16;
    HEAP32[$vararg_buffer43 + 8 >> 2] = $call47 + ($10 * 112 | 0) + 20;
    HEAP32[$vararg_buffer43 + 12 >> 2] = $call47 + ($10 * 112 | 0) + 24;
    if ((_sscanf($buf, 22112, $vararg_buffer43) | 0) != 4) {
     label = 40;
     break L28;
    }
    if (!(_get_buff_272($buf, $fp$0) | 0)) {
     label = 57;
     break L28;
    }
    $11 = HEAP32[$i >> 2] | 0;
    HEAP32[$vararg_buffer51 >> 2] = $call47 + ($11 * 112 | 0) + 28;
    HEAP32[$vararg_buffer51 + 4 >> 2] = $call47 + ($11 * 112 | 0) + 32;
    HEAP32[$vararg_buffer51 + 8 >> 2] = $call47 + ($11 * 112 | 0) + 36;
    HEAP32[$vararg_buffer51 + 12 >> 2] = $call47 + ($11 * 112 | 0) + 40;
    if ((_sscanf($buf, 22112, $vararg_buffer51) | 0) != 4) {
     label = 43;
     break L28;
    }
    if (!(_get_buff_272($buf, $fp$0) | 0)) {
     label = 57;
     break L28;
    }
    $12 = HEAP32[$i >> 2] | 0;
    HEAP32[$vararg_buffer59 >> 2] = $call47 + ($12 * 112 | 0) + 44;
    HEAP32[$vararg_buffer59 + 4 >> 2] = $call47 + ($12 * 112 | 0) + 48;
    HEAP32[$vararg_buffer59 + 8 >> 2] = $call47 + ($12 * 112 | 0) + 52;
    HEAP32[$vararg_buffer59 + 12 >> 2] = $call47 + ($12 * 112 | 0) + 56;
    if ((_sscanf($buf, 22112, $vararg_buffer59) | 0) != 4) {
     label = 47;
     break L28;
    }
    $14 = HEAP32[$i >> 2] | 0;
   } else {
    $13 = HEAP32[$i >> 2] | 0;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) == 3) {
      $14 = $13;
      break L43;
     }
     $k$0 = 0;
     while (1) {
      if (($k$0 | 0) == 4) break;
      HEAPF32[$call47 + ($13 * 112 | 0) + 12 + ($j$0 << 4) + ($k$0 << 2) >> 2] = ($j$0 | 0) == ($k$0 | 0) ? 1.0 : 0.0;
      $k$0 = $k$0 + 1 | 0;
     }
     $j$0 = $j$0 + 1 | 0;
    }
   } while (0);
   _arUtilMatInvf($call47 + ($14 * 112 | 0) + 12 | 0, $call47 + ($14 * 112 | 0) + 60 | 0) | 0;
   _ar2UtilReplaceExt($name, 256, 22160) | 0;
   $call275 = _malloc(256) | 0;
   HEAP32[$call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) + 108 >> 2] = $call275;
   if (!$call275) {
    label = 55;
    break;
   }
   _strncpy($call275, $name, 256) | 0;
   $storemerge = (HEAP32[$i >> 2] | 0) + 1 | 0;
  }
  if ((label | 0) == 26) {
   HEAP32[$vararg_buffer24 >> 2] = $name;
   _arLog(0, 3, 21967, $vararg_buffer24);
   _free($call47);
   _free($call17);
   if (!$fp$0) {
    $retval$1 = 0;
    break;
   }
   _fclose($fp$0) | 0;
   $retval$1 = 0;
   break;
  } else if ((label | 0) == 29) {
   HEAP32[$vararg_buffer31 >> 2] = $name;
   _arLog(0, 3, 22028, $vararg_buffer31);
   _ar2FreeImageSet($call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) | 0) | 0;
   _free($call47);
   _free($call17);
   if (!$fp$0) {
    $retval$1 = 0;
    break;
   }
   _fclose($fp$0) | 0;
   $retval$1 = 0;
   break;
  } else if ((label | 0) == 33) {
   HEAP32[$vararg_buffer38 >> 2] = $name;
   _arLog(0, 3, 22082, $vararg_buffer38);
   _ar2FreeFeatureSet($call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) + 4 | 0) | 0;
   _ar2FreeImageSet($call47 + ((HEAP32[$i >> 2] | 0) * 112 | 0) | 0) | 0;
   _free($call47);
   _free($call17);
   if (!$fp$0) {
    $retval$1 = 0;
    break;
   }
   _fclose($fp$0) | 0;
   $retval$1 = 0;
   break;
  } else if ((label | 0) == 40) {
   _arLog(0, 3, 22124, $vararg_buffer49);
   _fclose($fp$0) | 0;
   _exit(0);
  } else if ((label | 0) == 43) {
   _arLog(0, 3, 22124, $vararg_buffer57);
   _fclose($fp$0) | 0;
   _exit(0);
  } else if ((label | 0) == 47) {
   _arLog(0, 3, 22124, $vararg_buffer65);
   _fclose($fp$0) | 0;
   _exit(0);
  } else if ((label | 0) == 55) {
   _arLog(0, 3, 21902, $vararg_buffer67);
   _exit(1);
  } else if ((label | 0) == 57) {
   if ($fp$0 | 0) _fclose($fp$0) | 0;
   if ((HEAP32[$i >> 2] | 0) >= ($$sink | 0)) {
    $retval$1 = $call17;
    break;
   }
   _exit(0);
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $0 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $49 = 0, $7 = 0, $8 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0143 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky55$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i132 = 0, $conv$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i82 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i103 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $0 = HEAP8[$__ky$0 + 11 >> 0] | 0;
  if ($0 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $0 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $2 = HEAP32[$__b >> 2] | 0;
  do if ($2) {
   $3 = HEAP32[$2 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $13 = 1;
    break;
   } else {
    $13 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $13 = 1; while (0);
  $7 = HEAP32[$__e >> 2] | 0;
  if ($7) {
   $8 = HEAP32[$7 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $14 = 1;
    $21 = 0;
   } else {
    $14 = 0;
    $21 = $7;
   }
  } else {
   $14 = 1;
   $21 = 0;
  }
  $16 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($13 ^ $14))) break;
  $26 = HEAP32[$16 + 12 >> 2] | 0;
  if (($26 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$26 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($__case_sensitive) $__c$0 = $conv$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, $conv$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 11 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $34 = HEAP8[$cond$i$i$i + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $34; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, $34) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $36 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($36 << 24 >> 24 < 0) $cond$i132 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i132 = $36 & 255;
    if (($cond$i132 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L67 : do if ($__consume$0$off0) {
   $38 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $38 + 12 | 0;
   $39 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] & 127]($38) | 0; else {
    HEAP32[$__ninp_$i$i >> 2] = $39 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
   }
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky55$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky55$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L67;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $44 = HEAP8[$__ky55$0 + 11 >> 0] | 0;
      if ($44 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky55$0 + 4 >> 2] | 0; else $cond$i = $44 & 255;
      if (($cond$i | 0) != ($add | 0)) {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      } else $__n_does_match$7 = $__n_does_match$6;
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky55$0 = $__ky55$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if ($16) {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i82 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i82, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $49 = 1;
   break;
  } else {
   $49 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $49 = 1; while (0);
 do if ($21) {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i103 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i103, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($49) break; else {
   label = 79;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
 } else label = 41; while (0);
 if ((label | 0) == 41 ? $49 : 0) label = 79;
 if ((label | 0) == 79) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0143 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0143 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0143 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $47 = 0, $52 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0144 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky53$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i133 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i84 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i105 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $1 = HEAP8[$__ky$0 + 8 + 3 >> 0] | 0;
  if ($1 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $1 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $3 = HEAP32[$__b >> 2] | 0;
  do if ($3) {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 127]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$4 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $14 = 1;
    break;
   } else {
    $14 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $14 = 1; while (0);
  $8 = HEAP32[$__e >> 2] | 0;
  if ($8) {
   $9 = HEAP32[$8 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $15 = 1;
    $22 = 0;
   } else {
    $15 = 0;
    $22 = $8;
   }
  } else {
   $15 = 1;
   $22 = 0;
  }
  $17 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($14 ^ $15))) break;
  $27 = HEAP32[$17 + 12 >> 2] | 0;
  if (($27 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($17) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  if ($__case_sensitive) $__c$0 = $retval$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, $retval$0$i$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 8 + 3 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $36 = HEAP32[$cond$i$i$i + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $36; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, $36) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $38 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($38 << 24 >> 24 < 0) $cond$i133 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i133 = $38 & 255;
    if (($cond$i133 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L67 : do if ($__consume$0$off0) {
   $40 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $40 + 12 | 0;
   $41 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 40 >> 2] & 127]($40) | 0; else {
    HEAP32[$__ninp_$i$i >> 2] = $41 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
   }
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky53$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky53$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L67;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $47 = HEAP8[$__ky53$0 + 8 + 3 >> 0] | 0;
      if ($47 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky53$0 + 4 >> 2] | 0; else $cond$i = $47 & 255;
      if (($cond$i | 0) != ($add | 0)) {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      } else $__n_does_match$7 = $__n_does_match$6;
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky53$0 = $__ky53$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if ($17) {
  $18 = HEAP32[$17 + 12 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $retval$0$i$i$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($17) | 0; else $retval$0$i$i$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$18 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i84, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $52 = 1;
   break;
  } else {
   $52 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $52 = 1; while (0);
 do if ($22) {
  $23 = HEAP32[$22 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i13$i$i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i13$i$i105 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i105, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($52) break; else {
   label = 79;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
 } else label = 41; while (0);
 if ((label | 0) == 41 ? $52 : 0) label = 79;
 if ((label | 0) == 79) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0144 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0144 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0144 | 0;
}

function _jpeg_idct_16x8($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $$sink = 0, $0 = 0, $17 = 0, $2 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $add = 0, $add$ptr = 0, $add$ptr146 = 0, $add103 = 0, $add105 = 0, $add111 = 0, $add113 = 0, $add153 = 0, $add155 = 0, $add163 = 0, $add165 = 0, $add170 = 0, $add172 = 0, $add174 = 0, $add176 = 0, $add182 = 0, $add217 = 0, $add219 = 0, $add227 = 0, $add230 = 0, $add231 = 0, $add234 = 0, $add235 = 0, $add55 = 0, $add67 = 0, $add70 = 0, $add72 = 0, $add90 = 0, $add91 = 0, $add96 = 0, $add97 = 0, $ctr$0309 = 0, $ctr$1305 = 0, $inptr$0306 = 0, $mul107 = 0, $mul151 = 0, $mul152 = 0, $mul160 = 0, $mul161 = 0, $mul184 = 0, $mul185 = 0, $mul187 = 0, $mul189 = 0, $mul190 = 0, $mul192 = 0, $mul202 = 0, $mul210 = 0, $mul218 = 0, $mul223 = 0, $mul229 = 0, $mul233 = 0, $mul59 = 0, $mul63 = 0, $mul65 = 0, $mul77 = 0, $mul81 = 0, $mul85 = 0, $mul89 = 0, $mul93 = 0, $mul99 = 0, $quantptr$0307 = 0, $shl = 0, $shl149 = 0, $shl54 = 0, $shr135$sink = 0, $sub = 0, $sub154 = 0, $sub156 = 0, $sub159 = 0, $sub167 = 0, $sub169 = 0, $sub171 = 0, $sub173 = 0, $sub175 = 0, $sub177 = 0, $sub196 = 0, $sub200 = 0, $sub69 = 0, $sub71 = 0, $sub73 = 0, $workspace = 0, $wsptr$0308 = 0, $wsptr$2304 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0309 = 8;
 $inptr$0306 = $coef_block;
 $quantptr$0307 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0308 = $workspace;
 while (1) {
  $2 = HEAP16[$inptr$0306 + 16 >> 1] | 0;
  $3 = HEAP16[$inptr$0306 + 32 >> 1] | 0;
  if (!(($2 | $3) << 16 >> 16)) if (((((HEAP16[$inptr$0306 + 48 >> 1] | 0) == 0 ? (HEAP16[$inptr$0306 + 64 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0306 + 80 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0306 + 96 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0306 + 112 >> 1] | 0) == 0 : 0) {
   $shl = Math_imul(HEAP16[$inptr$0306 >> 1] << 2, HEAP32[$quantptr$0307 >> 2] | 0) | 0;
   HEAP32[$wsptr$0308 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 32 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 64 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 96 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 128 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 160 >> 2] = $shl;
   HEAP32[$wsptr$0308 + 192 >> 2] = $shl;
   $$sink = 56;
   $shr135$sink = $shl;
  } else {
   $17 = 0;
   label = 9;
  } else {
   $17 = $3;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   $shl54 = Math_imul(HEAP16[$inptr$0306 + 64 >> 1] << 13, HEAP32[$quantptr$0307 + 128 >> 2] | 0) | 0;
   $add = Math_imul(HEAP16[$inptr$0306 >> 1] << 13, HEAP32[$quantptr$0307 >> 2] | 0) | 0 | 1024;
   $add55 = $shl54 + $add | 0;
   $sub = $add - $shl54 | 0;
   $mul59 = Math_imul(HEAP32[$quantptr$0307 + 64 >> 2] | 0, $17 << 16 >> 16) | 0;
   $mul63 = Math_imul(HEAP32[$quantptr$0307 + 192 >> 2] | 0, HEAP16[$inptr$0306 + 96 >> 1] | 0) | 0;
   $mul65 = ($mul63 + $mul59 | 0) * 4433 | 0;
   $add67 = $mul65 + ($mul59 * 6270 | 0) | 0;
   $sub69 = $mul65 + (Math_imul($mul63, -15137) | 0) | 0;
   $add70 = $add67 + $add55 | 0;
   $sub71 = $add55 - $add67 | 0;
   $add72 = $sub69 + $sub | 0;
   $sub73 = $sub - $sub69 | 0;
   $mul77 = Math_imul(HEAP32[$quantptr$0307 + 224 >> 2] | 0, HEAP16[$inptr$0306 + 112 >> 1] | 0) | 0;
   $mul81 = Math_imul(HEAP32[$quantptr$0307 + 160 >> 2] | 0, HEAP16[$inptr$0306 + 80 >> 1] | 0) | 0;
   $mul85 = Math_imul(HEAP32[$quantptr$0307 + 96 >> 2] | 0, HEAP16[$inptr$0306 + 48 >> 1] | 0) | 0;
   $mul89 = Math_imul(HEAP32[$quantptr$0307 + 32 >> 2] | 0, $2 << 16 >> 16) | 0;
   $add90 = $mul85 + $mul77 | 0;
   $add91 = $mul89 + $mul81 | 0;
   $mul93 = ($add91 + $add90 | 0) * 9633 | 0;
   $add96 = $mul93 + (Math_imul($add90, -16069) | 0) | 0;
   $add97 = $mul93 + (Math_imul($add91, -3196) | 0) | 0;
   $mul99 = Math_imul($mul89 + $mul77 | 0, -7373) | 0;
   $add103 = $mul99 + ($mul77 * 2446 | 0) + $add96 | 0;
   $add105 = $mul99 + ($mul89 * 12299 | 0) + $add97 | 0;
   $mul107 = Math_imul($mul85 + $mul81 | 0, -20995) | 0;
   $add111 = $mul107 + ($mul81 * 16819 | 0) + $add97 | 0;
   $add113 = $mul107 + ($mul85 * 25172 | 0) + $add96 | 0;
   HEAP32[$wsptr$0308 >> 2] = $add105 + $add70 >> 11;
   HEAP32[$wsptr$0308 + 224 >> 2] = $add70 - $add105 >> 11;
   HEAP32[$wsptr$0308 + 32 >> 2] = $add113 + $add72 >> 11;
   HEAP32[$wsptr$0308 + 192 >> 2] = $add72 - $add113 >> 11;
   HEAP32[$wsptr$0308 + 64 >> 2] = $add111 + $sub73 >> 11;
   HEAP32[$wsptr$0308 + 160 >> 2] = $sub73 - $add111 >> 11;
   HEAP32[$wsptr$0308 + 96 >> 2] = $add103 + $sub71 >> 11;
   $$sink = 32;
   $shr135$sink = $sub71 - $add103 >> 11;
  }
  HEAP32[$wsptr$0308 + ($$sink << 2) >> 2] = $shr135$sink;
  if ($ctr$0309 >>> 0 > 1) {
   $ctr$0309 = $ctr$0309 + -1 | 0;
   $inptr$0306 = $inptr$0306 + 2 | 0;
   $quantptr$0307 = $quantptr$0307 + 4 | 0;
   $wsptr$0308 = $wsptr$0308 + 4 | 0;
  } else break;
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1305 = 0;
 $wsptr$2304 = $workspace;
 while (1) {
  $add$ptr146 = (HEAP32[$output_buf + ($ctr$1305 << 2) >> 2] | 0) + $output_col | 0;
  $shl149 = (HEAP32[$wsptr$2304 >> 2] << 13) + 134348800 | 0;
  $31 = HEAP32[$wsptr$2304 + 16 >> 2] | 0;
  $mul151 = $31 * 10703 | 0;
  $mul152 = $31 * 4433 | 0;
  $add153 = $shl149 + $mul151 | 0;
  $sub154 = $shl149 - $mul151 | 0;
  $add155 = $shl149 + $mul152 | 0;
  $sub156 = $shl149 - $mul152 | 0;
  $32 = HEAP32[$wsptr$2304 + 8 >> 2] | 0;
  $33 = HEAP32[$wsptr$2304 + 24 >> 2] | 0;
  $sub159 = $32 - $33 | 0;
  $mul160 = $sub159 * 2260 | 0;
  $mul161 = $sub159 * 11363 | 0;
  $add163 = $mul161 + ($33 * 20995 | 0) | 0;
  $add165 = $mul160 + ($32 * 7373 | 0) | 0;
  $sub167 = $mul161 + (Math_imul($32, -4926) | 0) | 0;
  $sub169 = $mul160 + (Math_imul($33, -4176) | 0) | 0;
  $add170 = $add163 + $add153 | 0;
  $sub171 = $add153 - $add163 | 0;
  $add172 = $add165 + $add155 | 0;
  $sub173 = $add155 - $add165 | 0;
  $add174 = $sub167 + $sub156 | 0;
  $sub175 = $sub156 - $sub167 | 0;
  $add176 = $sub169 + $sub154 | 0;
  $sub177 = $sub154 - $sub169 | 0;
  $36 = HEAP32[$wsptr$2304 + 4 >> 2] | 0;
  $37 = HEAP32[$wsptr$2304 + 12 >> 2] | 0;
  $38 = HEAP32[$wsptr$2304 + 20 >> 2] | 0;
  $39 = HEAP32[$wsptr$2304 + 28 >> 2] | 0;
  $add182 = $38 + $36 | 0;
  $mul184 = ($37 + $36 | 0) * 11086 | 0;
  $mul185 = $add182 * 10217 | 0;
  $mul187 = ($39 + $36 | 0) * 8956 | 0;
  $mul189 = ($36 - $39 | 0) * 7350 | 0;
  $mul190 = $add182 * 5461 | 0;
  $mul192 = ($36 - $37 | 0) * 3363 | 0;
  $sub196 = $mul184 + (Math_imul($36, -18730) | 0) + $mul185 + $mul187 | 0;
  $sub200 = $mul192 + (Math_imul($36, -15038) | 0) + $mul190 + $mul189 | 0;
  $mul202 = ($38 + $37 | 0) * 1136 | 0;
  $mul210 = ($38 - $37 | 0) * 11529 | 0;
  $add217 = $39 + $37 | 0;
  $mul218 = Math_imul($add217, -5461) | 0;
  $add219 = $mul184 + ($37 * 589 | 0) + $mul202 + $mul218 | 0;
  $mul223 = Math_imul($add217, -10217) | 0;
  $add227 = $mul192 + ($37 * 16154 | 0) + $mul210 + $mul223 | 0;
  $mul229 = Math_imul($39 + $38 | 0, -11086) | 0;
  $add230 = $mul202 + (Math_imul($38, -9222) | 0) + $mul185 + $mul229 | 0;
  $add231 = $mul218 + ($39 * 8728 | 0) + $mul187 + $mul229 | 0;
  $mul233 = ($39 - $38 | 0) * 3363 | 0;
  $add234 = $mul223 + ($39 * 25733 | 0) + $mul189 + $mul233 | 0;
  $add235 = $mul210 + (Math_imul($38, -6278) | 0) + $mul190 + $mul233 | 0;
  HEAP8[$add$ptr146 >> 0] = HEAP8[$add$ptr + (($sub196 + $add170 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 15 >> 0] = HEAP8[$add$ptr + (($add170 - $sub196 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 1 >> 0] = HEAP8[$add$ptr + (($add219 + $add172 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 14 >> 0] = HEAP8[$add$ptr + (($add172 - $add219 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 2 >> 0] = HEAP8[$add$ptr + (($add230 + $add174 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 13 >> 0] = HEAP8[$add$ptr + (($add174 - $add230 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 3 >> 0] = HEAP8[$add$ptr + (($add231 + $add176 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 12 >> 0] = HEAP8[$add$ptr + (($add176 - $add231 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 4 >> 0] = HEAP8[$add$ptr + (($add234 + $sub177 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 11 >> 0] = HEAP8[$add$ptr + (($sub177 - $add234 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 5 >> 0] = HEAP8[$add$ptr + (($add235 + $sub175 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 10 >> 0] = HEAP8[$add$ptr + (($sub175 - $add235 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 6 >> 0] = HEAP8[$add$ptr + (($add227 + $sub173 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 9 >> 0] = HEAP8[$add$ptr + (($sub173 - $add227 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 7 >> 0] = HEAP8[$add$ptr + (($sub200 + $sub171 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr146 + 8 >> 0] = HEAP8[$add$ptr + (($sub171 - $sub200 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1305 = $ctr$1305 + 1 | 0;
  if (($ctr$1305 | 0) == 8) break; else $wsptr$2304 = $wsptr$2304 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jpeg_idct_3x6($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $67 = 0, $77 = 0, $87 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$ptr = 0, $add$ptr63 = 0, $add$ptr63$1 = 0, $add$ptr63$2 = 0, $add$ptr63$3 = 0, $add$ptr63$4 = 0, $add$ptr63$5 = 0, $add14 = 0, $add14$1 = 0, $add14$2 = 0, $add32 = 0, $add32$1 = 0, $add32$2 = 0, $add35 = 0, $add35$1 = 0, $add35$2 = 0, $add45$2 = 0, $add69 = 0, $add69$1 = 0, $add69$2 = 0, $add69$3 = 0, $add69$4 = 0, $add69$5 = 0, $add7 = 0, $add7$1 = 0, $add7$2 = 0, $arrayidx46 = 0, $incdec$ptr56 = 0, $mul13 = 0, $mul13$1 = 0, $mul13$2 = 0, $mul19 = 0, $mul19$1 = 0, $mul19$2 = 0, $mul23 = 0, $mul23$1 = 0, $mul23$2 = 0, $mul27 = 0, $mul27$1 = 0, $mul27$2 = 0, $mul29 = 0, $mul29$1 = 0, $mul29$2 = 0, $mul6 = 0, $mul6$1 = 0, $mul6$2 = 0, $mul73 = 0, $mul73$1 = 0, $mul73$2 = 0, $mul73$3 = 0, $mul73$4 = 0, $mul73$5 = 0, $shl38 = 0, $shl38$1 = 0, $shl38$2 = 0, $shl66 = 0, $shl66$1 = 0, $shl66$2 = 0, $shl66$3 = 0, $shl66$4 = 0, $shl66$5 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr40$2 = 0, $shr50$2 = 0, $sub15 = 0, $sub15$1 = 0, $sub15$2 = 0, $sub71 = 0, $sub71$1 = 0, $sub71$2 = 0, $sub71$3 = 0, $sub71$4 = 0, $sub71$5 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add = Math_imul(HEAP16[$coef_block >> 1] << 13, HEAP32[$1 >> 2] | 0) | 0 | 1024;
 $mul6 = Math_imul((HEAP16[$coef_block + 64 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 128 >> 2] | 0) | 0;
 $add7 = $mul6 + $add | 0;
 $shr = (Math_imul($mul6, -2) | 0) + $add >> 11;
 $mul13 = Math_imul((HEAP16[$coef_block + 32 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 64 >> 2] | 0) | 0;
 $add14 = $mul13 + $add7 | 0;
 $sub15 = $add7 - $mul13 | 0;
 $mul19 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $mul23 = Math_imul(HEAP32[$1 + 96 >> 2] | 0, HEAP16[$coef_block + 48 >> 1] | 0) | 0;
 $mul27 = Math_imul(HEAP32[$1 + 160 >> 2] | 0, HEAP16[$coef_block + 80 >> 1] | 0) | 0;
 $mul29 = ($mul27 + $mul19 | 0) * 2998 | 0;
 $add32 = $mul29 + ($mul23 + $mul19 << 13) | 0;
 $add35 = $mul29 + ($mul27 - $mul23 << 13) | 0;
 $shl38 = $mul19 - $mul23 - $mul27 << 2;
 HEAP32[$workspace >> 2] = $add32 + $add14 >> 11;
 HEAP32[$workspace + 60 >> 2] = $add14 - $add32 >> 11;
 $arrayidx46 = $workspace + 12 | 0;
 HEAP32[$arrayidx46 >> 2] = $shl38 + $shr;
 HEAP32[$workspace + 48 >> 2] = $shr - $shl38;
 HEAP32[$workspace + 24 >> 2] = $add35 + $sub15 >> 11;
 HEAP32[$workspace + 36 >> 2] = $sub15 - $add35 >> 11;
 $incdec$ptr56 = $workspace + 4 | 0;
 $add$1 = Math_imul(HEAP16[$coef_block + 2 >> 1] << 13, HEAP32[$1 + 4 >> 2] | 0) | 0 | 1024;
 $mul6$1 = Math_imul((HEAP16[$coef_block + 66 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 132 >> 2] | 0) | 0;
 $add7$1 = $mul6$1 + $add$1 | 0;
 $shr$1 = (Math_imul($mul6$1, -2) | 0) + $add$1 >> 11;
 $mul13$1 = Math_imul((HEAP16[$coef_block + 34 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 68 >> 2] | 0) | 0;
 $add14$1 = $mul13$1 + $add7$1 | 0;
 $sub15$1 = $add7$1 - $mul13$1 | 0;
 $mul19$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $mul23$1 = Math_imul(HEAP32[$1 + 100 >> 2] | 0, HEAP16[$coef_block + 50 >> 1] | 0) | 0;
 $mul27$1 = Math_imul(HEAP32[$1 + 164 >> 2] | 0, HEAP16[$coef_block + 82 >> 1] | 0) | 0;
 $mul29$1 = ($mul27$1 + $mul19$1 | 0) * 2998 | 0;
 $add32$1 = $mul29$1 + ($mul23$1 + $mul19$1 << 13) | 0;
 $add35$1 = $mul29$1 + ($mul27$1 - $mul23$1 << 13) | 0;
 $shl38$1 = $mul19$1 - $mul23$1 - $mul27$1 << 2;
 HEAP32[$incdec$ptr56 >> 2] = $add32$1 + $add14$1 >> 11;
 HEAP32[$workspace + 64 >> 2] = $add14$1 - $add32$1 >> 11;
 HEAP32[$workspace + 16 >> 2] = $shl38$1 + $shr$1;
 HEAP32[$workspace + 52 >> 2] = $shr$1 - $shl38$1;
 HEAP32[$workspace + 28 >> 2] = $add35$1 + $sub15$1 >> 11;
 HEAP32[$workspace + 40 >> 2] = $sub15$1 - $add35$1 >> 11;
 $add$2 = Math_imul(HEAP16[$coef_block + 4 >> 1] << 13, HEAP32[$1 + 8 >> 2] | 0) | 0 | 1024;
 $mul6$2 = Math_imul((HEAP16[$coef_block + 68 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 136 >> 2] | 0) | 0;
 $add7$2 = $mul6$2 + $add$2 | 0;
 $shr$2 = (Math_imul($mul6$2, -2) | 0) + $add$2 >> 11;
 $mul13$2 = Math_imul((HEAP16[$coef_block + 36 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 72 >> 2] | 0) | 0;
 $add14$2 = $mul13$2 + $add7$2 | 0;
 $sub15$2 = $add7$2 - $mul13$2 | 0;
 $mul19$2 = Math_imul(HEAP32[$1 + 40 >> 2] | 0, HEAP16[$coef_block + 20 >> 1] | 0) | 0;
 $mul23$2 = Math_imul(HEAP32[$1 + 104 >> 2] | 0, HEAP16[$coef_block + 52 >> 1] | 0) | 0;
 $mul27$2 = Math_imul(HEAP32[$1 + 168 >> 2] | 0, HEAP16[$coef_block + 84 >> 1] | 0) | 0;
 $mul29$2 = ($mul27$2 + $mul19$2 | 0) * 2998 | 0;
 $add32$2 = $mul29$2 + ($mul23$2 + $mul19$2 << 13) | 0;
 $add35$2 = $mul29$2 + ($mul27$2 - $mul23$2 << 13) | 0;
 $shl38$2 = $mul19$2 - $mul23$2 - $mul27$2 << 2;
 $shr40$2 = $add32$2 + $add14$2 >> 11;
 HEAP32[$workspace + 8 >> 2] = $shr40$2;
 HEAP32[$workspace + 68 >> 2] = $add14$2 - $add32$2 >> 11;
 $add45$2 = $shl38$2 + $shr$2 | 0;
 HEAP32[$workspace + 20 >> 2] = $add45$2;
 HEAP32[$workspace + 56 >> 2] = $shr$2 - $shl38$2;
 $shr50$2 = $add35$2 + $sub15$2 >> 11;
 HEAP32[$workspace + 32 >> 2] = $shr50$2;
 HEAP32[$workspace + 44 >> 2] = $sub15$2 - $add35$2 >> 11;
 $add$ptr = $0 + -384 | 0;
 $add$ptr63 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $shl66 = (HEAP32[$workspace >> 2] << 13) + 134348800 | 0;
 $add69 = $shl66 + ($shr40$2 * 5793 | 0) | 0;
 $sub71 = (Math_imul($shr40$2, -11586) | 0) + $shl66 | 0;
 $mul73 = (HEAP32[$incdec$ptr56 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63 >> 0] = HEAP8[$add$ptr + (($add69 + $mul73 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63 + 2 >> 0] = HEAP8[$add$ptr + (($add69 - $mul73 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63 + 1 >> 0] = HEAP8[$add$ptr + ($sub71 >>> 18 & 1023) >> 0] | 0;
 $add$ptr63$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $shl66$1 = (HEAP32[$arrayidx46 >> 2] << 13) + 134348800 | 0;
 $add69$1 = $shl66$1 + ($add45$2 * 5793 | 0) | 0;
 $sub71$1 = (Math_imul($add45$2, -11586) | 0) + $shl66$1 | 0;
 $mul73$1 = (HEAP32[$workspace + 16 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63$1 >> 0] = HEAP8[$add$ptr + (($add69$1 + $mul73$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$1 + 2 >> 0] = HEAP8[$add$ptr + (($add69$1 - $mul73$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$1 + 1 >> 0] = HEAP8[$add$ptr + ($sub71$1 >>> 18 & 1023) >> 0] | 0;
 $add$ptr63$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $shl66$2 = (HEAP32[$workspace + 24 >> 2] << 13) + 134348800 | 0;
 $add69$2 = $shl66$2 + ($shr50$2 * 5793 | 0) | 0;
 $sub71$2 = (Math_imul($shr50$2, -11586) | 0) + $shl66$2 | 0;
 $mul73$2 = (HEAP32[$workspace + 28 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63$2 >> 0] = HEAP8[$add$ptr + (($add69$2 + $mul73$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$2 + 2 >> 0] = HEAP8[$add$ptr + (($add69$2 - $mul73$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$2 + 1 >> 0] = HEAP8[$add$ptr + ($sub71$2 >>> 18 & 1023) >> 0] | 0;
 $add$ptr63$3 = (HEAP32[$output_buf + 12 >> 2] | 0) + $output_col | 0;
 $shl66$3 = (HEAP32[$workspace + 36 >> 2] << 13) + 134348800 | 0;
 $67 = HEAP32[$workspace + 44 >> 2] | 0;
 $add69$3 = $shl66$3 + ($67 * 5793 | 0) | 0;
 $sub71$3 = (Math_imul($67, -11586) | 0) + $shl66$3 | 0;
 $mul73$3 = (HEAP32[$workspace + 40 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63$3 >> 0] = HEAP8[$add$ptr + (($add69$3 + $mul73$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$3 + 2 >> 0] = HEAP8[$add$ptr + (($add69$3 - $mul73$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$3 + 1 >> 0] = HEAP8[$add$ptr + ($sub71$3 >>> 18 & 1023) >> 0] | 0;
 $add$ptr63$4 = (HEAP32[$output_buf + 16 >> 2] | 0) + $output_col | 0;
 $shl66$4 = (HEAP32[$workspace + 48 >> 2] << 13) + 134348800 | 0;
 $77 = HEAP32[$workspace + 56 >> 2] | 0;
 $add69$4 = $shl66$4 + ($77 * 5793 | 0) | 0;
 $sub71$4 = (Math_imul($77, -11586) | 0) + $shl66$4 | 0;
 $mul73$4 = (HEAP32[$workspace + 52 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63$4 >> 0] = HEAP8[$add$ptr + (($add69$4 + $mul73$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$4 + 2 >> 0] = HEAP8[$add$ptr + (($add69$4 - $mul73$4 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$4 + 1 >> 0] = HEAP8[$add$ptr + ($sub71$4 >>> 18 & 1023) >> 0] | 0;
 $add$ptr63$5 = (HEAP32[$output_buf + 20 >> 2] | 0) + $output_col | 0;
 $shl66$5 = (HEAP32[$workspace + 60 >> 2] << 13) + 134348800 | 0;
 $87 = HEAP32[$workspace + 68 >> 2] | 0;
 $add69$5 = $shl66$5 + ($87 * 5793 | 0) | 0;
 $sub71$5 = (Math_imul($87, -11586) | 0) + $shl66$5 | 0;
 $mul73$5 = (HEAP32[$workspace + 64 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr63$5 >> 0] = HEAP8[$add$ptr + (($add69$5 + $mul73$5 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$5 + 2 >> 0] = HEAP8[$add$ptr + (($add69$5 - $mul73$5 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr63$5 + 1 >> 0] = HEAP8[$add$ptr + ($sub71$5 >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i102 = 0, $__size_$i$i$i111 = 0, $__size_$i$i$i132 = 0, $__size_$i2$i$i113 = 0, $__size_$i2$i$i134 = 0, $__size_$i3$i$i = 0, $add$ptr$i = 0, $add$ptr$i$i178 = 0, $add$ptr$i161 = 0, $call$i = 0, $call$i110 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i138 = 0, $cond$i$i169175 = 0, $inc = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr33 = 0, $incdec$ptr42 = 0, $incdec$ptr42180 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $spec$select = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i103 = 0, $tobool$i$i$i112 = 0, $tobool$i$i$i133 = 0, $tobool$i$i88 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i111 = $__sn + 8 + 3 | 0;
 $__size_$i2$i$i113 = $__sn + 4 | 0;
 $__size_$i$i$i132 = $__sym + 8 + 3 | 0;
 $__size_$i2$i$i134 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i102 = $__grp + 11 | 0;
 $__size_$i3$i$i = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i110 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 32) | 0;
    $8 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $call$i110;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $9 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
    $tobool$i$i$i112 = $9 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i112 ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $9 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $12 = HEAP32[($tobool$i$i$i112 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 2] | 0;
     $13 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $12;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $14 = HEAP8[$__size_$i$i$i132 >> 0] | 0;
    $tobool$i$i$i133 = $14 << 24 >> 24 < 0;
    $cond$i$i138 = $tobool$i$i$i133 ? HEAP32[$__size_$i2$i$i134 >> 2] | 0 : $14 & 255;
    if ($tobool | ($cond$i$i138 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $cond$i$i169175 = $tobool$i$i$i133 ? HEAP32[$__sym >> 2] | 0 : $__sym;
     $add$ptr$i161 = $cond$i$i169175 + ($cond$i$i138 << 2) | 0;
     $17 = HEAP32[$__me >> 2] | 0;
     $18 = $cond$i$i169175;
     $__result$addr$0$i$i143 = $17;
     while (1) {
      if (($18 | 0) == ($add$ptr$i161 | 0)) break;
      HEAP32[$__result$addr$0$i$i143 >> 2] = HEAP32[$18 >> 2];
      $18 = $18 + 4 | 0;
      $__result$addr$0$i$i143 = $__result$addr$0$i$i143 + 4 | 0;
     }
     HEAP32[$__me >> 2] = $17 + ($cond$i$i138 << 2);
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $20 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 4 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$0 >> 2] | 0) | 0)) break;
     $__d$0 = $__d$0 + 4 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -4 | 0;
      $24 = HEAP32[$incdec$ptr33 >> 2] | 0;
      $25 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $25 + 4;
      HEAP32[$25 >> 2] = $24;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     $incdec$ptr42180 = HEAP32[$__me >> 2] | 0;
     while (1) {
      $incdec$ptr42 = $incdec$ptr42180 + 4 | 0;
      if (($__f$1 | 0) <= 0) break;
      HEAP32[$incdec$ptr42180 >> 2] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
      $incdec$ptr42180 = $incdec$ptr42;
     }
     HEAP32[$__me >> 2] = $incdec$ptr42;
     HEAP32[$incdec$ptr42180 >> 2] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 48) | 0;
     $28 = HEAP32[$__me >> 2] | 0;
     $incdec$ptr51 = $28 + 4 | 0;
     HEAP32[$__me >> 2] = $incdec$ptr51;
     HEAP32[$28 >> 2] = $call$i;
     $40 = $incdec$ptr51;
    } else {
     $29 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
     $tobool$i$i$i103 = $29 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i103 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $29 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i103 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break;
      $33 = HEAP32[$__me >> 2] | 0;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $incdec$ptr63 = $33 + 4 | 0;
       HEAP32[$__me >> 2] = $incdec$ptr63;
       HEAP32[$33 >> 2] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $34 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
       $tobool$i$i88 = $34 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i88 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $34 & 255) >>> 0) {
        $37 = HEAP8[($tobool$i$i88 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        $39 = $incdec$ptr63;
        $__gl$1 = $37 << 24 >> 24 == 127 ? -1 : $37 << 24 >> 24;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $39 = $incdec$ptr63;
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $39 = $33;
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -4 | 0;
      $38 = HEAP32[$incdec$ptr81 >> 2] | 0;
      HEAP32[$__me >> 2] = $39 + 4;
      HEAP32[$39 >> 2] = $38;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
     $40 = HEAP32[$__me >> 2] | 0;
    }
    if (($20 | 0) == ($40 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $20;
     $__last$addr$0$i$i = $40;
     while (1) {
      $incdec$ptr$i$i73 = $__last$addr$0$i$i + -4 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i73 >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $41 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
      HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i73 >> 2];
      HEAP32[$incdec$ptr$i$i73 >> 2] = $41;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $2 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
 $tobool$i$i = $2 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $2 & 255;
 if ($cond$i >>> 0 > 1) {
  $43 = HEAP32[$__sn >> 2] | 0;
  $add$ptr$i$i178 = $tobool$i$i ? $43 + 4 | 0 : $__size_$i2$i$i113;
  $add$ptr$i = ($tobool$i$i ? $43 : $__sn) + ($cond$i << 2) | 0;
  $44 = HEAP32[$__me >> 2] | 0;
  $47 = $add$ptr$i - $add$ptr$i$i178 | 0;
  $48 = $add$ptr$i$i178;
  $__result$addr$0$i$i = $44;
  while (1) {
   if (($48 | 0) == ($add$ptr$i | 0)) break;
   HEAP32[$__result$addr$0$i$i >> 2] = HEAP32[$48 >> 2];
   $48 = $48 + 4 | 0;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 4 | 0;
  }
  HEAP32[$__me >> 2] = $44 + ($47 >>> 2 << 2);
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function _jpeg_idct_15x15($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $add = 0, $add$ptr = 0, $add$ptr145 = 0, $add155 = 0, $add16 = 0, $add160 = 0, $add165 = 0, $add168 = 0, $add179 = 0, $add181 = 0, $add183 = 0, $add195 = 0, $add202 = 0, $add208 = 0, $add21 = 0, $add216 = 0, $add220 = 0, $add26 = 0, $add29 = 0, $add40 = 0, $add42 = 0, $add44 = 0, $add68 = 0, $add75 = 0, $add81 = 0, $add89 = 0, $add93 = 0, $ctr$0306 = 0, $ctr$1302 = 0, $inptr$0303 = 0, $mul13 = 0, $mul161 = 0, $mul162 = 0, $mul163 = 0, $mul169 = 0, $mul170$neg = 0, $mul176 = 0, $mul177 = 0, $mul189 = 0, $mul193 = 0, $mul198 = 0, $mul199 = 0, $mul212 = 0, $mul22 = 0, $mul23 = 0, $mul24 = 0, $mul30 = 0, $mul31$neg = 0, $mul37 = 0, $mul38 = 0, $mul5 = 0, $mul50 = 0, $mul54 = 0, $mul59 = 0, $mul63 = 0, $mul66 = 0, $mul71 = 0, $mul72 = 0, $mul85 = 0, $mul9 = 0, $quantptr$0304 = 0, $shl148 = 0, $sub = 0, $sub154 = 0, $sub158 = 0, $sub159 = 0, $sub172 = 0, $sub175 = 0, $sub185 = 0, $sub19 = 0, $sub191 = 0, $sub197 = 0, $sub20 = 0, $sub200 = 0, $sub205 = 0, $sub210 = 0, $sub33 = 0, $sub36 = 0, $sub46 = 0, $sub64 = 0, $sub70 = 0, $sub73 = 0, $sub78 = 0, $sub83 = 0, $workspace = 0, $wsptr$0305 = 0, $wsptr$1301 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0306 = 0;
 $inptr$0303 = $coef_block;
 $quantptr$0304 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0305 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0303 >> 1] << 13, HEAP32[$quantptr$0304 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0304 + 64 >> 2] | 0, HEAP16[$inptr$0303 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0304 + 128 >> 2] | 0, HEAP16[$inptr$0303 + 64 >> 1] | 0) | 0;
  $mul13 = Math_imul(HEAP32[$quantptr$0304 + 192 >> 2] | 0, HEAP16[$inptr$0303 + 96 >> 1] | 0) | 0;
  $sub = (Math_imul($mul13, -3580) | 0) + $add | 0;
  $add16 = ($mul13 * 9373 | 0) + $add | 0;
  $sub19 = (Math_imul($mul13, -11586) | 0) + $add | 0;
  $sub20 = $mul5 - $mul9 | 0;
  $add21 = $mul9 + $mul5 | 0;
  $mul22 = $add21 * 10958 | 0;
  $mul23 = $sub20 * 374 | 0;
  $mul24 = $mul5 * 11795 | 0;
  $add26 = $mul23 + $mul22 + $add16 | 0;
  $add29 = $mul24 - $mul22 + $mul23 + $sub | 0;
  $mul30 = $add21 * 4482 | 0;
  $mul31$neg = Math_imul($sub20, -3271) | 0;
  $sub33 = $add16 - $mul30 + $mul31$neg | 0;
  $sub36 = $mul30 - $mul24 + $mul31$neg + $sub | 0;
  $mul37 = $add21 * 6476 | 0;
  $mul38 = $sub20 * 2896 | 0;
  $add40 = $mul38 + $mul37 + $sub | 0;
  $add42 = $add16 - $mul37 + $mul38 | 0;
  $add44 = $sub19 + ($sub20 * 5792 | 0) | 0;
  $sub46 = (Math_imul($sub20, -11584) | 0) + $sub19 | 0;
  $mul50 = Math_imul(HEAP32[$quantptr$0304 + 32 >> 2] | 0, HEAP16[$inptr$0303 + 16 >> 1] | 0) | 0;
  $mul54 = Math_imul(HEAP32[$quantptr$0304 + 96 >> 2] | 0, HEAP16[$inptr$0303 + 48 >> 1] | 0) | 0;
  $mul59 = Math_imul((HEAP16[$inptr$0303 + 80 >> 1] | 0) * 10033 | 0, HEAP32[$quantptr$0304 + 160 >> 2] | 0) | 0;
  $mul63 = Math_imul(HEAP32[$quantptr$0304 + 224 >> 2] | 0, HEAP16[$inptr$0303 + 112 >> 1] | 0) | 0;
  $sub64 = $mul54 - $mul63 | 0;
  $mul66 = ($sub64 + $mul50 | 0) * 6810 | 0;
  $add68 = $mul66 + ($mul50 * 4209 | 0) | 0;
  $sub70 = $mul66 + (Math_imul($sub64, -17828) | 0) | 0;
  $mul71 = Math_imul($mul54, -6810) | 0;
  $mul72 = Math_imul($mul54, -11018) | 0;
  $sub73 = $mul50 - $mul63 | 0;
  $add75 = ($sub73 * 11522 | 0) + $mul59 | 0;
  $sub78 = ($mul63 * 20131 | 0) - $mul72 + $add75 | 0;
  $add81 = $mul71 + (Math_imul($mul50, -9113) | 0) + $add75 | 0;
  $sub83 = ($sub73 * 10033 | 0) - $mul59 | 0;
  $mul85 = ($mul63 + $mul50 | 0) * 4712 | 0;
  $add89 = $mul71 + ($mul50 * 3897 | 0) - $mul59 + $mul85 | 0;
  $add93 = $mul59 + $mul72 + (Math_imul($mul63, -7121) | 0) + $mul85 | 0;
  HEAP32[$wsptr$0305 >> 2] = $sub78 + $add26 >> 11;
  HEAP32[$wsptr$0305 + 448 >> 2] = $add26 - $sub78 >> 11;
  HEAP32[$wsptr$0305 + 32 >> 2] = $add68 + $add40 >> 11;
  HEAP32[$wsptr$0305 + 416 >> 2] = $add40 - $add68 >> 11;
  HEAP32[$wsptr$0305 + 64 >> 2] = $sub83 + $add44 >> 11;
  HEAP32[$wsptr$0305 + 384 >> 2] = $add44 - $sub83 >> 11;
  HEAP32[$wsptr$0305 + 96 >> 2] = $add89 + $add29 >> 11;
  HEAP32[$wsptr$0305 + 352 >> 2] = $add29 - $add89 >> 11;
  HEAP32[$wsptr$0305 + 128 >> 2] = $sub70 + $add42 >> 11;
  HEAP32[$wsptr$0305 + 320 >> 2] = $add42 - $sub70 >> 11;
  HEAP32[$wsptr$0305 + 160 >> 2] = $add93 + $sub33 >> 11;
  HEAP32[$wsptr$0305 + 288 >> 2] = $sub33 - $add93 >> 11;
  HEAP32[$wsptr$0305 + 192 >> 2] = $add81 + $sub36 >> 11;
  HEAP32[$wsptr$0305 + 256 >> 2] = $sub36 - $add81 >> 11;
  HEAP32[$wsptr$0305 + 224 >> 2] = $sub46 >> 11;
  $ctr$0306 = $ctr$0306 + 1 | 0;
  if (($ctr$0306 | 0) == 8) break; else {
   $inptr$0303 = $inptr$0303 + 2 | 0;
   $quantptr$0304 = $quantptr$0304 + 4 | 0;
   $wsptr$0305 = $wsptr$0305 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1302 = 0;
 $wsptr$1301 = $workspace;
 while (1) {
  $add$ptr145 = (HEAP32[$output_buf + ($ctr$1302 << 2) >> 2] | 0) + $output_col | 0;
  $shl148 = (HEAP32[$wsptr$1301 >> 2] << 13) + 134348800 | 0;
  $25 = HEAP32[$wsptr$1301 + 8 >> 2] | 0;
  $26 = HEAP32[$wsptr$1301 + 16 >> 2] | 0;
  $27 = HEAP32[$wsptr$1301 + 24 >> 2] | 0;
  $sub154 = (Math_imul($27, -3580) | 0) + $shl148 | 0;
  $add155 = ($27 * 9373 | 0) + $shl148 | 0;
  $sub158 = (Math_imul($27, -11586) | 0) + $shl148 | 0;
  $sub159 = $25 - $26 | 0;
  $add160 = $26 + $25 | 0;
  $mul161 = $add160 * 10958 | 0;
  $mul162 = $sub159 * 374 | 0;
  $mul163 = $25 * 11795 | 0;
  $add165 = $mul162 + $mul161 + $add155 | 0;
  $add168 = $mul163 - $mul161 + $mul162 + $sub154 | 0;
  $mul169 = $add160 * 4482 | 0;
  $mul170$neg = Math_imul($sub159, -3271) | 0;
  $sub172 = $add155 - $mul169 + $mul170$neg | 0;
  $sub175 = $mul169 - $mul163 + $mul170$neg + $sub154 | 0;
  $mul176 = $add160 * 6476 | 0;
  $mul177 = $sub159 * 2896 | 0;
  $add179 = $mul177 + $mul176 + $sub154 | 0;
  $add181 = $add155 - $mul176 + $mul177 | 0;
  $add183 = $sub158 + ($sub159 * 5792 | 0) | 0;
  $sub185 = (Math_imul($sub159, -11584) | 0) + $sub158 | 0;
  $30 = HEAP32[$wsptr$1301 + 4 >> 2] | 0;
  $31 = HEAP32[$wsptr$1301 + 12 >> 2] | 0;
  $mul189 = (HEAP32[$wsptr$1301 + 20 >> 2] | 0) * 10033 | 0;
  $33 = HEAP32[$wsptr$1301 + 28 >> 2] | 0;
  $sub191 = $31 - $33 | 0;
  $mul193 = ($sub191 + $30 | 0) * 6810 | 0;
  $add195 = $mul193 + ($30 * 4209 | 0) | 0;
  $sub197 = $mul193 + (Math_imul($sub191, -17828) | 0) | 0;
  $mul198 = Math_imul($31, -6810) | 0;
  $mul199 = Math_imul($31, -11018) | 0;
  $sub200 = $30 - $33 | 0;
  $add202 = ($sub200 * 11522 | 0) + $mul189 | 0;
  $sub205 = ($33 * 20131 | 0) - $mul199 + $add202 | 0;
  $add208 = $mul198 + (Math_imul($30, -9113) | 0) + $add202 | 0;
  $sub210 = ($sub200 * 10033 | 0) - $mul189 | 0;
  $mul212 = ($33 + $30 | 0) * 4712 | 0;
  $add216 = $mul198 + ($30 * 3897 | 0) - $mul189 + $mul212 | 0;
  $add220 = $mul189 + $mul199 + (Math_imul($33, -7121) | 0) + $mul212 | 0;
  HEAP8[$add$ptr145 >> 0] = HEAP8[$add$ptr + (($sub205 + $add165 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 14 >> 0] = HEAP8[$add$ptr + (($add165 - $sub205 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 1 >> 0] = HEAP8[$add$ptr + (($add195 + $add179 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 13 >> 0] = HEAP8[$add$ptr + (($add179 - $add195 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 2 >> 0] = HEAP8[$add$ptr + (($sub210 + $add183 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 12 >> 0] = HEAP8[$add$ptr + (($add183 - $sub210 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 3 >> 0] = HEAP8[$add$ptr + (($add216 + $add168 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 11 >> 0] = HEAP8[$add$ptr + (($add168 - $add216 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 4 >> 0] = HEAP8[$add$ptr + (($sub197 + $add181 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 10 >> 0] = HEAP8[$add$ptr + (($add181 - $sub197 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 5 >> 0] = HEAP8[$add$ptr + (($add220 + $sub172 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 9 >> 0] = HEAP8[$add$ptr + (($sub172 - $add220 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 6 >> 0] = HEAP8[$add$ptr + (($add208 + $sub175 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 8 >> 0] = HEAP8[$add$ptr + (($sub175 - $add208 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr145 + 7 >> 0] = HEAP8[$add$ptr + ($sub185 >>> 18 & 1023) >> 0] | 0;
  $ctr$1302 = $ctr$1302 + 1 | 0;
  if (($ctr$1302 | 0) == 15) break; else $wsptr$1301 = $wsptr$1301 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($this) {
 $this = $this | 0;
 var $CVQuals = 0, $ExceptionSpec = 0, $Names = 0, $Names53 = 0, $ReferenceQualifier = 0, $ReturnType = 0, $agg$tmp = 0, $agg$tmp18 = 0, $agg$tmp42 = 0, $agg$tmp5 = 0, $agg$tmp63 = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $call = 0, $call13 = 0, $call21 = 0, $call24 = 0, $call3 = 0, $call32 = 0, $call48 = 0, $call49 = 0, $call54 = 0, $call73 = 0, $call9 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $agg$tmp67$byval_copy = sp + 64 | 0;
 $CVQuals = sp + 28 | 0;
 $ExceptionSpec = sp + 24 | 0;
 $agg$tmp = sp + 56 | 0;
 $agg$tmp5 = sp + 48 | 0;
 $agg$tmp18 = sp + 40 | 0;
 $agg$tmp42 = sp + 32 | 0;
 $ReturnType = sp;
 $ReferenceQualifier = sp + 72 | 0;
 $agg$tmp63 = sp + 16 | 0;
 $agg$tmp67 = sp + 8 | 0;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
 HEAP32[$CVQuals >> 2] = $call;
 HEAP32[$ExceptionSpec >> 2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33284);
 HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 33296);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
   $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp67$byval_copy >> 2] = $call9;
   if (!$call9) {
    $retval$9 = 0;
    break;
   }
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp67$byval_copy) | 0;
    HEAP32[$ExceptionSpec >> 2] = $call13;
    label = 14;
    break;
   } else {
    $retval$9 = 0;
    break;
   }
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 33299);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
   $Names = $this + 8 | 0;
   $call21 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 12;
     break;
    }
    $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$agg$tmp67$byval_copy >> 2] = $call24;
    if (!$call24) {
     label = 13;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp67$byval_copy);
   }
   if ((label | 0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp67$byval_copy, $this, $call21);
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp67$byval_copy) | 0;
    HEAP32[$ExceptionSpec >> 2] = $call32;
    label = 14;
    break;
   } else if ((label | 0) == 13) {
    $retval$9 = 0;
    break;
   }
  } else label = 14;
 } else {
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 33287) | 0;
  HEAP32[$ExceptionSpec >> 2] = $call3;
  label = 14;
 } while (0);
 if ((label | 0) == 14) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 33302);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0;
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 70) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 89) | 0;
   $call48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48) | 0;
   HEAP32[$ReturnType >> 2] = $call49;
   if (!$call49) $retval$8 = 0; else {
    HEAP8[$ReferenceQualifier >> 0] = 0;
    $Names53 = $this + 8 | 0;
    $call54 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names53) | 0;
    while (1) {
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 27;
      break;
     }
     if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0)) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 33305);
      HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2];
      HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp63 + 4 >> 2];
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
       label = 21;
       break;
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 33308);
      HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
      HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp67 + 4 >> 2];
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
       label = 23;
       break;
      }
      $call73 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48) | 0;
      HEAP32[$agg$tmp67$byval_copy >> 2] = $call73;
      if (!$call73) {
       label = 26;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names53, $agg$tmp67$byval_copy);
     }
    }
    if ((label | 0) == 21) {
     HEAP8[$ReferenceQualifier >> 0] = 1;
     label = 27;
    } else if ((label | 0) == 23) {
     HEAP8[$ReferenceQualifier >> 0] = 2;
     label = 27;
    } else if ((label | 0) == 26) $retval$7 = 0;
    if ((label | 0) == 27) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp67$byval_copy, $this, $call54);
     $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this, $ReturnType, $agg$tmp67$byval_copy, $CVQuals, $ReferenceQualifier, $ExceptionSpec) | 0;
    }
    $retval$8 = $retval$7;
   }
   $retval$9 = $retval$8;
  } else $retval$9 = 0;
 }
 STACKTOP = sp;
 return $retval$9 | 0;
}

function _jpeg_idct_6x3($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $42 = 0, $43 = 0, $44 = 0, $61 = 0, $62 = 0, $79 = 0, $80 = 0, $81 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$ptr = 0, $add$ptr29 = 0, $add$ptr29$1 = 0, $add$ptr29$2 = 0, $add35 = 0, $add35$1 = 0, $add35$2 = 0, $add40 = 0, $add40$1 = 0, $add40$2 = 0, $add49 = 0, $add49$1 = 0, $add49$2 = 0, $add52 = 0, $add52$1 = 0, $add52$2 = 0, $add7 = 0, $add7$1 = 0, $add7$2 = 0, $add7$3 = 0, $add7$4 = 0, $add7$5 = 0, $arrayidx20 = 0, $incdec$ptr22 = 0, $mul13 = 0, $mul13$1 = 0, $mul13$2 = 0, $mul13$3 = 0, $mul13$4 = 0, $mul13$5 = 0, $mul34 = 0, $mul34$1 = 0, $mul34$2 = 0, $mul39 = 0, $mul39$1 = 0, $mul39$2 = 0, $mul46 = 0, $mul46$1 = 0, $mul46$2 = 0, $mul6 = 0, $mul6$1 = 0, $mul6$2 = 0, $mul6$3 = 0, $mul6$4 = 0, $mul6$5 = 0, $shl32 = 0, $shl32$1 = 0, $shl32$2 = 0, $shl55 = 0, $shl55$1 = 0, $shl55$2 = 0, $shr19$5 = 0, $sub37 = 0, $sub37$1 = 0, $sub37$2 = 0, $sub41 = 0, $sub41$1 = 0, $sub41$2 = 0, $sub8 = 0, $sub8$1 = 0, $sub8$2 = 0, $sub8$3 = 0, $sub8$4 = 0, $sub8$5 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add = Math_imul(HEAP16[$coef_block >> 1] << 13, HEAP32[$1 >> 2] | 0) | 0 | 1024;
 $mul6 = Math_imul((HEAP16[$coef_block + 32 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 64 >> 2] | 0) | 0;
 $add7 = $mul6 + $add | 0;
 $sub8 = (Math_imul($mul6, -2) | 0) + $add | 0;
 $mul13 = Math_imul((HEAP16[$coef_block + 16 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 32 >> 2] | 0) | 0;
 HEAP32[$workspace >> 2] = $mul13 + $add7 >> 11;
 HEAP32[$workspace + 48 >> 2] = $add7 - $mul13 >> 11;
 $arrayidx20 = $workspace + 24 | 0;
 HEAP32[$arrayidx20 >> 2] = $sub8 >> 11;
 $incdec$ptr22 = $workspace + 4 | 0;
 $add$1 = Math_imul(HEAP16[$coef_block + 2 >> 1] << 13, HEAP32[$1 + 4 >> 2] | 0) | 0 | 1024;
 $mul6$1 = Math_imul((HEAP16[$coef_block + 34 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 68 >> 2] | 0) | 0;
 $add7$1 = $mul6$1 + $add$1 | 0;
 $sub8$1 = (Math_imul($mul6$1, -2) | 0) + $add$1 | 0;
 $mul13$1 = Math_imul((HEAP16[$coef_block + 18 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 36 >> 2] | 0) | 0;
 HEAP32[$incdec$ptr22 >> 2] = $mul13$1 + $add7$1 >> 11;
 HEAP32[$workspace + 52 >> 2] = $add7$1 - $mul13$1 >> 11;
 HEAP32[$workspace + 28 >> 2] = $sub8$1 >> 11;
 $add$2 = Math_imul(HEAP16[$coef_block + 4 >> 1] << 13, HEAP32[$1 + 8 >> 2] | 0) | 0 | 1024;
 $mul6$2 = Math_imul((HEAP16[$coef_block + 36 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 72 >> 2] | 0) | 0;
 $add7$2 = $mul6$2 + $add$2 | 0;
 $sub8$2 = (Math_imul($mul6$2, -2) | 0) + $add$2 | 0;
 $mul13$2 = Math_imul((HEAP16[$coef_block + 20 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 40 >> 2] | 0) | 0;
 HEAP32[$workspace + 8 >> 2] = $mul13$2 + $add7$2 >> 11;
 HEAP32[$workspace + 56 >> 2] = $add7$2 - $mul13$2 >> 11;
 HEAP32[$workspace + 32 >> 2] = $sub8$2 >> 11;
 $add$3 = Math_imul(HEAP16[$coef_block + 6 >> 1] << 13, HEAP32[$1 + 12 >> 2] | 0) | 0 | 1024;
 $mul6$3 = Math_imul((HEAP16[$coef_block + 38 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 76 >> 2] | 0) | 0;
 $add7$3 = $mul6$3 + $add$3 | 0;
 $sub8$3 = (Math_imul($mul6$3, -2) | 0) + $add$3 | 0;
 $mul13$3 = Math_imul((HEAP16[$coef_block + 22 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 44 >> 2] | 0) | 0;
 HEAP32[$workspace + 12 >> 2] = $mul13$3 + $add7$3 >> 11;
 HEAP32[$workspace + 60 >> 2] = $add7$3 - $mul13$3 >> 11;
 HEAP32[$workspace + 36 >> 2] = $sub8$3 >> 11;
 $add$4 = Math_imul(HEAP16[$coef_block + 8 >> 1] << 13, HEAP32[$1 + 16 >> 2] | 0) | 0 | 1024;
 $mul6$4 = Math_imul((HEAP16[$coef_block + 40 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 80 >> 2] | 0) | 0;
 $add7$4 = $mul6$4 + $add$4 | 0;
 $sub8$4 = (Math_imul($mul6$4, -2) | 0) + $add$4 | 0;
 $mul13$4 = Math_imul((HEAP16[$coef_block + 24 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 48 >> 2] | 0) | 0;
 HEAP32[$workspace + 16 >> 2] = $mul13$4 + $add7$4 >> 11;
 HEAP32[$workspace + 64 >> 2] = $add7$4 - $mul13$4 >> 11;
 HEAP32[$workspace + 40 >> 2] = $sub8$4 >> 11;
 $add$5 = Math_imul(HEAP16[$coef_block + 10 >> 1] << 13, HEAP32[$1 + 20 >> 2] | 0) | 0 | 1024;
 $mul6$5 = Math_imul((HEAP16[$coef_block + 42 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 84 >> 2] | 0) | 0;
 $add7$5 = $mul6$5 + $add$5 | 0;
 $sub8$5 = (Math_imul($mul6$5, -2) | 0) + $add$5 | 0;
 $mul13$5 = Math_imul((HEAP16[$coef_block + 26 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 52 >> 2] | 0) | 0;
 HEAP32[$workspace + 20 >> 2] = $mul13$5 + $add7$5 >> 11;
 HEAP32[$workspace + 68 >> 2] = $add7$5 - $mul13$5 >> 11;
 $shr19$5 = $sub8$5 >> 11;
 HEAP32[$workspace + 44 >> 2] = $shr19$5;
 $add$ptr = $0 + -384 | 0;
 $add$ptr29 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $shl32 = (HEAP32[$workspace >> 2] << 13) + 134348800 | 0;
 $mul34 = (HEAP32[$workspace + 16 >> 2] | 0) * 5793 | 0;
 $add35 = $shl32 + $mul34 | 0;
 $sub37 = $shl32 - $mul34 - $mul34 | 0;
 $mul39 = (HEAP32[$workspace + 8 >> 2] | 0) * 10033 | 0;
 $add40 = $add35 + $mul39 | 0;
 $sub41 = $add35 - $mul39 | 0;
 $42 = HEAP32[$incdec$ptr22 >> 2] | 0;
 $43 = HEAP32[$workspace + 12 >> 2] | 0;
 $44 = HEAP32[$workspace + 20 >> 2] | 0;
 $mul46 = ($44 + $42 | 0) * 2998 | 0;
 $add49 = $mul46 + ($43 + $42 << 13) | 0;
 $add52 = $mul46 + ($44 - $43 << 13) | 0;
 $shl55 = $42 - $43 - $44 << 13;
 HEAP8[$add$ptr29 >> 0] = HEAP8[$add$ptr + (($add49 + $add40 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 5 >> 0] = HEAP8[$add$ptr + (($add40 - $add49 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 1 >> 0] = HEAP8[$add$ptr + (($shl55 + $sub37 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 4 >> 0] = HEAP8[$add$ptr + (($sub37 - $shl55 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 2 >> 0] = HEAP8[$add$ptr + (($add52 + $sub41 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 3 >> 0] = HEAP8[$add$ptr + (($sub41 - $add52 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr29$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $shl32$1 = (HEAP32[$arrayidx20 >> 2] << 13) + 134348800 | 0;
 $mul34$1 = (HEAP32[$workspace + 40 >> 2] | 0) * 5793 | 0;
 $add35$1 = $shl32$1 + $mul34$1 | 0;
 $sub37$1 = $shl32$1 - $mul34$1 - $mul34$1 | 0;
 $mul39$1 = (HEAP32[$workspace + 32 >> 2] | 0) * 10033 | 0;
 $add40$1 = $add35$1 + $mul39$1 | 0;
 $sub41$1 = $add35$1 - $mul39$1 | 0;
 $61 = HEAP32[$workspace + 28 >> 2] | 0;
 $62 = HEAP32[$workspace + 36 >> 2] | 0;
 $mul46$1 = ($shr19$5 + $61 | 0) * 2998 | 0;
 $add49$1 = $mul46$1 + ($62 + $61 << 13) | 0;
 $add52$1 = $mul46$1 + ($shr19$5 - $62 << 13) | 0;
 $shl55$1 = $61 - $62 - $shr19$5 << 13;
 HEAP8[$add$ptr29$1 >> 0] = HEAP8[$add$ptr + (($add49$1 + $add40$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 5 >> 0] = HEAP8[$add$ptr + (($add40$1 - $add49$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 1 >> 0] = HEAP8[$add$ptr + (($shl55$1 + $sub37$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 4 >> 0] = HEAP8[$add$ptr + (($sub37$1 - $shl55$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 2 >> 0] = HEAP8[$add$ptr + (($add52$1 + $sub41$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 3 >> 0] = HEAP8[$add$ptr + (($sub41$1 - $add52$1 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr29$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $shl32$2 = (HEAP32[$workspace + 48 >> 2] << 13) + 134348800 | 0;
 $mul34$2 = (HEAP32[$workspace + 64 >> 2] | 0) * 5793 | 0;
 $add35$2 = $shl32$2 + $mul34$2 | 0;
 $sub37$2 = $shl32$2 - $mul34$2 - $mul34$2 | 0;
 $mul39$2 = (HEAP32[$workspace + 56 >> 2] | 0) * 10033 | 0;
 $add40$2 = $add35$2 + $mul39$2 | 0;
 $sub41$2 = $add35$2 - $mul39$2 | 0;
 $79 = HEAP32[$workspace + 52 >> 2] | 0;
 $80 = HEAP32[$workspace + 60 >> 2] | 0;
 $81 = HEAP32[$workspace + 68 >> 2] | 0;
 $mul46$2 = ($81 + $79 | 0) * 2998 | 0;
 $add49$2 = $mul46$2 + ($80 + $79 << 13) | 0;
 $add52$2 = $mul46$2 + ($81 - $80 << 13) | 0;
 $shl55$2 = $79 - $80 - $81 << 13;
 HEAP8[$add$ptr29$2 >> 0] = HEAP8[$add$ptr + (($add49$2 + $add40$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 5 >> 0] = HEAP8[$add$ptr + (($add40$2 - $add49$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 1 >> 0] = HEAP8[$add$ptr + (($shl55$2 + $sub37$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 4 >> 0] = HEAP8[$add$ptr + (($sub37$2 - $shl55$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 2 >> 0] = HEAP8[$add$ptr + (($add52$2 + $sub41$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 3 >> 0] = HEAP8[$add$ptr + (($sub41$2 - $add52$2 | 0) >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pn = 0, $$pn$pn = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i106 = 0, $__size_$i$i$i117 = 0, $__size_$i$i$i173 = 0, $__size_$i3$i$i108 = 0, $__size_$i3$i$i119 = 0, $__size_$i3$i$i175 = 0, $__tab_$i = 0, $add$ptr$i = 0, $add$ptr$i161 = 0, $agg$tmp4$sroa$0$0$i = 0, $agg$tmp4$sroa$0$0$i142 = 0, $call$i = 0, $call$i115 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i170186 = 0, $cond$i$i179 = 0, $inc = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr33 = 0, $incdec$ptr81 = 0, $spec$select = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i107 = 0, $tobool$i$i$i118 = 0, $tobool$i$i$i174 = 0, $tobool$i$i89 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i117 = $__sn + 11 | 0;
 $__size_$i3$i$i119 = $__sn + 4 | 0;
 $__size_$i$i$i173 = $__sym + 11 | 0;
 $__size_$i3$i$i175 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $__tab_$i = $__ct + 8 | 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i106 = $__grp + 11 | 0;
 $__size_$i3$i$i108 = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i115 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 32) | 0;
    $6 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i115;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $7 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
    $tobool$i$i$i118 = $7 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i118 ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $7 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $10 = HEAP8[($tobool$i$i$i118 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 0] | 0;
     $11 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $10;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $12 = HEAP8[$__size_$i$i$i173 >> 0] | 0;
    $tobool$i$i$i174 = $12 << 24 >> 24 < 0;
    $cond$i$i179 = $tobool$i$i$i174 ? HEAP32[$__size_$i3$i$i175 >> 2] | 0 : $12 & 255;
    if ($tobool | ($cond$i$i179 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $cond$i$i170186 = $tobool$i$i$i174 ? HEAP32[$__sym >> 2] | 0 : $__sym;
     $add$ptr$i161 = $cond$i$i170186 + $cond$i$i179 | 0;
     $__result$addr$0$i$i143 = HEAP32[$__me >> 2] | 0;
     $agg$tmp4$sroa$0$0$i142 = $cond$i$i170186;
     while (1) {
      if (($agg$tmp4$sroa$0$0$i142 | 0) == ($add$ptr$i161 | 0)) break;
      HEAP8[$__result$addr$0$i$i143 >> 0] = HEAP8[$agg$tmp4$sroa$0$0$i142 >> 0] | 0;
      $__result$addr$0$i$i143 = $__result$addr$0$i$i143 + 1 | 0;
      $agg$tmp4$sroa$0$0$i142 = $agg$tmp4$sroa$0$0$i142 + 1 | 0;
     }
     HEAP32[$__me >> 2] = $__result$addr$0$i$i143;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $17 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 1 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     $18 = HEAP8[$__d$0 >> 0] | 0;
     if ($18 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($18 << 24 >> 24 << 1) >> 1] & 2048)) break;
     $__d$0 = $__d$0 + 1 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -1 | 0;
      $22 = HEAP8[$incdec$ptr33 >> 0] | 0;
      $23 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $23 + 1;
      HEAP8[$23 >> 0] = $22;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     while (1) {
      $25 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $25 + 1;
      if (($__f$1 | 0) <= 0) break;
      HEAP8[$25 >> 0] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP8[$25 >> 0] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    L36 : do if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 48) | 0;
     $27 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $call$i;
    } else {
     $28 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
     $tobool$i$i$i107 = $28 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i107 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $28 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i107 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break L36;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $32 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $32 + 1;
       HEAP8[$32 >> 0] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $33 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
       $tobool$i$i89 = $33 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i89 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $33 & 255) >>> 0) {
        $36 = HEAP8[($tobool$i$i89 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        $__gl$1 = $36 << 24 >> 24 == 127 ? -1 : $36 << 24 >> 24;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -1 | 0;
      $37 = HEAP8[$incdec$ptr81 >> 0] | 0;
      $38 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $38 + 1;
      HEAP8[$38 >> 0] = $37;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
    } while (0);
    $39 = HEAP32[$__me >> 2] | 0;
    if (($17 | 0) == ($39 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $17;
     $__last$addr$0$i$i = $39;
     while (1) {
      $incdec$ptr$i$i73 = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i73 >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $40 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i73 >> 0] | 0;
      HEAP8[$incdec$ptr$i$i73 >> 0] = $40;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $0 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $0 & 255;
 if ($cond$i >>> 0 > 1) {
  $$pn = $tobool$i$i ? HEAP32[$__sn >> 2] | 0 : $__sn;
  $add$ptr$i = $$pn + $cond$i | 0;
  $$pn$pn = $$pn;
  $__result$addr$0$i$i = HEAP32[$__me >> 2] | 0;
  while (1) {
   $agg$tmp4$sroa$0$0$i = $$pn$pn + 1 | 0;
   if (($agg$tmp4$sroa$0$0$i | 0) == ($add$ptr$i | 0)) break;
   HEAP8[$__result$addr$0$i$i >> 0] = HEAP8[$agg$tmp4$sroa$0$0$i >> 0] | 0;
   $$pn$pn = $agg$tmp4$sroa$0$0$i;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 1 | 0;
  }
  HEAP32[$__me >> 2] = $__result$addr$0$i$i;
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if ($d_sroa_0_0_extract_trunc) {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } else {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($this) {
 $this = $this | 0;
 var $$pre$phiZ2D = 0, $SoFar = 0, $agg$tmp = 0, $agg$tmp38 = 0, $agg$tmp40 = 0, $agg$tmp40$byval_copy = 0, $call109 = 0, $call13 = 0, $call19 = 0, $call2 = 0, $call23 = 0, $call3 = 0, $call31 = 0, $call39 = 0, $call45 = 0, $call51 = 0, $call60 = 0, $call61 = 0, $call67 = 0, $call70 = 0, $call83 = 0, $call84 = 0, $call9 = 0, $call94 = 0, $call98 = 0, $retval$10 = 0, $retval$4 = 0, $retval$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp40$byval_copy = sp + 32 | 0;
 $SoFar = sp + 8 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp38 = sp + 16 | 0;
 $agg$tmp40 = sp;
 HEAP32[$SoFar >> 2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30664);
 HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call2) | 0;
  HEAP32[$SoFar >> 2] = $call3;
  if (!$call3) $retval$10 = 0; else {
   do if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call2, 0) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call9;
    if (!$call9) {
     $retval$10 = 0;
     break L1;
    } else {
     $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
     HEAP32[$SoFar >> 2] = $call13;
     break;
    }
   } while (0);
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) break;
    $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call2) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call19;
    if (!$call19) {
     label = 35;
     break;
    }
    $call23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
    HEAP32[$SoFar >> 2] = $call23;
   }
   if ((label | 0) == 35) {
    $retval$10 = 0;
    break;
   }
   $call31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call2) | 0;
   HEAP32[$agg$tmp40$byval_copy >> 2] = $call31;
   if (!$call31) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
   $retval$10 = $retval$4;
  }
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp38, 29638);
  HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp38 >> 2];
  HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp38 + 4 >> 2];
  $call39 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp40, 30668);
  HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp40 >> 2];
  HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp40 + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0)) {
   $call45 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$SoFar >> 2] = $call45;
   if (($call45 | 0) == 0 | $call39 ^ 1) {
    $retval$10 = $call45;
    break;
   }
   $call51 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $SoFar) | 0;
   HEAP32[$SoFar >> 2] = $call51;
   $retval$10 = $call51;
   break;
  }
  L25 : do if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
   $call83 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call84 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call83) | 0;
   HEAP32[$SoFar >> 2] = $call84;
   if (!$call84) {
    $retval$10 = 0;
    break L1;
   }
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call94 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call83, 0) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call94;
    if (!$call94) {
     $retval$10 = 0;
     break L1;
    } else {
     $call98 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
     HEAP32[$SoFar >> 2] = $call98;
     $$pre$phiZ2D = $call83;
     break;
    }
   } else $$pre$phiZ2D = $call83;
  } else {
   while (1) {
    $call60 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call61 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call60) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call61;
    if (!$call61) break;
    do if (!(HEAP32[$SoFar >> 2] | 0)) if ($call39) {
     $call70 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp40$byval_copy) | 0;
     HEAP32[$SoFar >> 2] = $call70;
     break;
    } else {
     HEAP32[$SoFar >> 2] = $call61;
     break;
    } else {
     $call67 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
     HEAP32[$SoFar >> 2] = $call67;
    } while (0);
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     $$pre$phiZ2D = $call60;
     break L25;
    }
   }
   $retval$10 = 0;
   break L1;
  } while (0);
  $call109 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($$pre$phiZ2D) | 0;
  HEAP32[$agg$tmp40$byval_copy >> 2] = $call109;
  if (!$call109) $retval$8 = 0; else $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
  $retval$10 = $retval$8;
 } while (0);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _jpeg_idct_13x13($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $add = 0, $add$ptr = 0, $add$ptr147 = 0, $add101 = 0, $add14 = 0, $add154 = 0, $add158 = 0, $add161 = 0, $add164 = 0, $add167 = 0, $add17 = 0, $add170 = 0, $add173 = 0, $add194 = 0, $add20 = 0, $add210 = 0, $add216 = 0, $add217 = 0, $add220 = 0, $add225 = 0, $add23 = 0, $add230 = 0, $add26 = 0, $add29 = 0, $add32 = 0, $add65 = 0, $add81 = 0, $add87 = 0, $add88 = 0, $add91 = 0, $add96 = 0, $ctr$0287 = 0, $ctr$1283 = 0, $inptr$0284 = 0, $mul13 = 0, $mul15 = 0, $mul156 = 0, $mul165 = 0, $mul174 = 0, $mul191 = 0, $mul193 = 0, $mul195 = 0, $mul201 = 0, $mul209 = 0, $mul215 = 0, $mul24 = 0, $mul33 = 0, $mul48 = 0, $mul5 = 0, $mul52 = 0, $mul56 = 0, $mul60 = 0, $mul62 = 0, $mul64 = 0, $mul66 = 0, $mul72 = 0, $mul80 = 0, $mul86 = 0, $mul9 = 0, $quantptr$0285 = 0, $shl150 = 0, $sub = 0, $sub155 = 0, $sub176289 = 0, $sub179 = 0, $sub182 = 0, $sub199 = 0, $sub35288 = 0, $sub38 = 0, $sub41 = 0, $sub70 = 0, $workspace = 0, $wsptr$0286 = 0, $wsptr$1282 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0287 = 0;
 $inptr$0284 = $coef_block;
 $quantptr$0285 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0286 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0284 >> 1] << 13, HEAP32[$quantptr$0285 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0285 + 64 >> 2] | 0, HEAP16[$inptr$0284 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0285 + 128 >> 2] | 0, HEAP16[$inptr$0284 + 64 >> 1] | 0) | 0;
  $mul13 = Math_imul(HEAP32[$quantptr$0285 + 192 >> 2] | 0, HEAP16[$inptr$0284 + 96 >> 1] | 0) | 0;
  $add14 = $mul13 + $mul9 | 0;
  $sub = $mul9 - $mul13 | 0;
  $mul15 = $add14 * 9465 | 0;
  $add17 = ($sub * 793 | 0) + $add | 0;
  $add20 = $mul15 + ($mul5 * 11249 | 0) + $add17 | 0;
  $add23 = ($mul5 * 4108 | 0) - $mul15 + $add17 | 0;
  $mul24 = $add14 * 2592 | 0;
  $add26 = ($sub * 3989 | 0) + $add | 0;
  $add29 = ($mul5 * 8672 | 0) - $mul24 + $add26 | 0;
  $add32 = $mul24 + (Math_imul($mul5, -10258) | 0) + $add26 | 0;
  $mul33 = $add14 * 3570 | 0;
  $sub35288 = $add + (Math_imul($sub, -7678) | 0) | 0;
  $sub38 = (Math_imul($mul5, -1396) | 0) - $mul33 + $sub35288 | 0;
  $sub41 = $mul33 + (Math_imul($mul5, -6581) | 0) + $sub35288 | 0;
  $mul48 = Math_imul(HEAP32[$quantptr$0285 + 32 >> 2] | 0, HEAP16[$inptr$0284 + 16 >> 1] | 0) | 0;
  $mul52 = Math_imul(HEAP32[$quantptr$0285 + 96 >> 2] | 0, HEAP16[$inptr$0284 + 48 >> 1] | 0) | 0;
  $mul56 = Math_imul(HEAP32[$quantptr$0285 + 160 >> 2] | 0, HEAP16[$inptr$0284 + 80 >> 1] | 0) | 0;
  $mul60 = Math_imul(HEAP32[$quantptr$0285 + 224 >> 2] | 0, HEAP16[$inptr$0284 + 112 >> 1] | 0) | 0;
  $mul62 = ($mul52 + $mul48 | 0) * 10832 | 0;
  $mul64 = ($mul56 + $mul48 | 0) * 9534 | 0;
  $add65 = $mul60 + $mul48 | 0;
  $mul66 = $add65 * 7682 | 0;
  $sub70 = $mul62 + (Math_imul($mul48, -16549) | 0) + $mul64 + $mul66 | 0;
  $mul72 = Math_imul($mul56 + $mul52 | 0, -2773) | 0;
  $mul80 = Math_imul($mul60 + $mul52 | 0, -9534) | 0;
  $add81 = $mul62 + ($mul52 * 6859 | 0) + $mul72 + $mul80 | 0;
  $mul86 = Math_imul($mul60 + $mul56 | 0, -5384) | 0;
  $add87 = $mul72 + (Math_imul($mul56, -12879) | 0) + $mul64 + $mul86 | 0;
  $add88 = $mul80 + ($mul60 * 18068 | 0) + $mul66 + $mul86 | 0;
  $add91 = ($add65 * 2773 | 0) + (($mul56 - $mul52 | 0) * 7682 | 0) | 0;
  $add96 = $add91 + ($mul48 * 2611 | 0) + (Math_imul($mul52, -3818) | 0) | 0;
  $add101 = $add91 + ($mul56 * 3150 | 0) + (Math_imul($mul60, -14273) | 0) | 0;
  HEAP32[$wsptr$0286 >> 2] = $sub70 + $add20 >> 11;
  HEAP32[$wsptr$0286 + 384 >> 2] = $add20 - $sub70 >> 11;
  HEAP32[$wsptr$0286 + 32 >> 2] = $add81 + $add29 >> 11;
  HEAP32[$wsptr$0286 + 352 >> 2] = $add29 - $add81 >> 11;
  HEAP32[$wsptr$0286 + 64 >> 2] = $add87 + $add23 >> 11;
  HEAP32[$wsptr$0286 + 320 >> 2] = $add23 - $add87 >> 11;
  HEAP32[$wsptr$0286 + 96 >> 2] = $add88 + $sub38 >> 11;
  HEAP32[$wsptr$0286 + 288 >> 2] = $sub38 - $add88 >> 11;
  HEAP32[$wsptr$0286 + 128 >> 2] = $add96 + $sub41 >> 11;
  HEAP32[$wsptr$0286 + 256 >> 2] = $sub41 - $add96 >> 11;
  HEAP32[$wsptr$0286 + 160 >> 2] = $add101 + $add32 >> 11;
  HEAP32[$wsptr$0286 + 224 >> 2] = $add32 - $add101 >> 11;
  HEAP32[$wsptr$0286 + 192 >> 2] = (($sub - $mul5 | 0) * 11585 | 0) + $add >> 11;
  $ctr$0287 = $ctr$0287 + 1 | 0;
  if (($ctr$0287 | 0) == 8) break; else {
   $inptr$0284 = $inptr$0284 + 2 | 0;
   $quantptr$0285 = $quantptr$0285 + 4 | 0;
   $wsptr$0286 = $wsptr$0286 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1283 = 0;
 $wsptr$1282 = $workspace;
 while (1) {
  $add$ptr147 = (HEAP32[$output_buf + ($ctr$1283 << 2) >> 2] | 0) + $output_col | 0;
  $shl150 = (HEAP32[$wsptr$1282 >> 2] << 13) + 134348800 | 0;
  $25 = HEAP32[$wsptr$1282 + 8 >> 2] | 0;
  $26 = HEAP32[$wsptr$1282 + 16 >> 2] | 0;
  $27 = HEAP32[$wsptr$1282 + 24 >> 2] | 0;
  $add154 = $27 + $26 | 0;
  $sub155 = $26 - $27 | 0;
  $mul156 = $add154 * 9465 | 0;
  $add158 = ($sub155 * 793 | 0) + $shl150 | 0;
  $add161 = $mul156 + ($25 * 11249 | 0) + $add158 | 0;
  $add164 = ($25 * 4108 | 0) - $mul156 + $add158 | 0;
  $mul165 = $add154 * 2592 | 0;
  $add167 = ($sub155 * 3989 | 0) + $shl150 | 0;
  $add170 = ($25 * 8672 | 0) - $mul165 + $add167 | 0;
  $add173 = $mul165 + (Math_imul($25, -10258) | 0) + $add167 | 0;
  $mul174 = $add154 * 3570 | 0;
  $sub176289 = $shl150 + (Math_imul($sub155, -7678) | 0) | 0;
  $sub179 = (Math_imul($25, -1396) | 0) - $mul174 + $sub176289 | 0;
  $sub182 = $mul174 + (Math_imul($25, -6581) | 0) + $sub176289 | 0;
  $29 = HEAP32[$wsptr$1282 + 4 >> 2] | 0;
  $30 = HEAP32[$wsptr$1282 + 12 >> 2] | 0;
  $31 = HEAP32[$wsptr$1282 + 20 >> 2] | 0;
  $32 = HEAP32[$wsptr$1282 + 28 >> 2] | 0;
  $mul191 = ($30 + $29 | 0) * 10832 | 0;
  $mul193 = ($31 + $29 | 0) * 9534 | 0;
  $add194 = $32 + $29 | 0;
  $mul195 = $add194 * 7682 | 0;
  $sub199 = $mul191 + (Math_imul($29, -16549) | 0) + $mul193 + $mul195 | 0;
  $mul201 = Math_imul($31 + $30 | 0, -2773) | 0;
  $mul209 = Math_imul($32 + $30 | 0, -9534) | 0;
  $add210 = $mul191 + ($30 * 6859 | 0) + $mul201 + $mul209 | 0;
  $mul215 = Math_imul($32 + $31 | 0, -5384) | 0;
  $add216 = $mul201 + (Math_imul($31, -12879) | 0) + $mul193 + $mul215 | 0;
  $add217 = $mul209 + ($32 * 18068 | 0) + $mul195 + $mul215 | 0;
  $add220 = ($add194 * 2773 | 0) + (($31 - $30 | 0) * 7682 | 0) | 0;
  $add225 = $add220 + ($29 * 2611 | 0) + (Math_imul($30, -3818) | 0) | 0;
  $add230 = $add220 + ($31 * 3150 | 0) + (Math_imul($32, -14273) | 0) | 0;
  HEAP8[$add$ptr147 >> 0] = HEAP8[$add$ptr + (($sub199 + $add161 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 12 >> 0] = HEAP8[$add$ptr + (($add161 - $sub199 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 1 >> 0] = HEAP8[$add$ptr + (($add210 + $add170 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 11 >> 0] = HEAP8[$add$ptr + (($add170 - $add210 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 2 >> 0] = HEAP8[$add$ptr + (($add216 + $add164 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 10 >> 0] = HEAP8[$add$ptr + (($add164 - $add216 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 3 >> 0] = HEAP8[$add$ptr + (($add217 + $sub179 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 9 >> 0] = HEAP8[$add$ptr + (($sub179 - $add217 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 4 >> 0] = HEAP8[$add$ptr + (($add225 + $sub182 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 8 >> 0] = HEAP8[$add$ptr + (($sub182 - $add225 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 5 >> 0] = HEAP8[$add$ptr + (($add230 + $add173 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 7 >> 0] = HEAP8[$add$ptr + (($add173 - $add230 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr147 + 6 >> 0] = HEAP8[$add$ptr + (((($sub155 - $25 | 0) * 11585 | 0) + $shl150 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1283 = $ctr$1283 + 1 | 0;
  if (($ctr$1283 | 0) == 13) break; else $wsptr$1282 = $wsptr$1282 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jpeg_idct_14x14($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $29 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add10 = 0, $add147 = 0, $add148 = 0, $add159 = 0, $add165 = 0, $add167 = 0, $add169 = 0, $add176 = 0, $add190 = 0, $add196 = 0, $add199 = 0, $add205 = 0, $add208 = 0, $add211 = 0, $add26 = 0, $add32 = 0, $add34 = 0, $add36 = 0, $add55 = 0, $add69 = 0, $add76 = 0, $add79 = 0, $add85 = 0, $add88 = 0, $add9 = 0, $ctr$0287 = 0, $ctr$1283 = 0, $inptr$0284 = 0, $mul157 = 0, $mul178 = 0, $mul179 = 0, $mul18 = 0, $mul184 = 0, $mul201 = 0, $mul22 = 0, $mul24 = 0, $mul41 = 0, $mul45 = 0, $mul49 = 0, $mul5 = 0, $mul53 = 0, $mul57 = 0, $mul58 = 0, $mul63 = 0, $mul81 = 0, $quantptr$0285 = 0, $shl142 = 0, $shl175 = 0, $shl54 = 0, $shl90 = 0, $shr = 0, $sub = 0, $sub149 = 0, $sub153 = 0, $sub161 = 0, $sub164 = 0, $sub166 = 0, $sub168 = 0, $sub170 = 0, $sub183 = 0, $sub187 = 0, $sub189 = 0, $sub193 = 0, $sub28 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub37 = 0, $sub62 = 0, $sub66 = 0, $sub68 = 0, $sub73 = 0, $workspace = 0, $wsptr$0286 = 0, $wsptr$1282 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0287 = 0;
 $inptr$0284 = $coef_block;
 $quantptr$0285 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0286 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0284 >> 1] << 13, HEAP32[$quantptr$0285 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0285 + 128 >> 2] | 0, HEAP16[$inptr$0284 + 64 >> 1] | 0) | 0;
  $add9 = ($mul5 * 10438 | 0) + $add | 0;
  $add10 = ($mul5 * 2578 | 0) + $add | 0;
  $sub = (Math_imul($mul5, -7223) | 0) + $add | 0;
  $shr = (Math_imul($mul5, -11586) | 0) + $add >> 11;
  $mul18 = Math_imul(HEAP32[$quantptr$0285 + 64 >> 2] | 0, HEAP16[$inptr$0284 + 32 >> 1] | 0) | 0;
  $mul22 = Math_imul(HEAP32[$quantptr$0285 + 192 >> 2] | 0, HEAP16[$inptr$0284 + 96 >> 1] | 0) | 0;
  $mul24 = ($mul22 + $mul18 | 0) * 9058 | 0;
  $add26 = $mul24 + ($mul18 * 2237 | 0) | 0;
  $sub28 = $mul24 + (Math_imul($mul22, -14084) | 0) | 0;
  $sub31 = (Math_imul($mul22, -11295) | 0) + ($mul18 * 5027 | 0) | 0;
  $add32 = $add26 + $add9 | 0;
  $sub33 = $add9 - $add26 | 0;
  $add34 = $sub28 + $add10 | 0;
  $sub35 = $add10 - $sub28 | 0;
  $add36 = $sub31 + $sub | 0;
  $sub37 = $sub - $sub31 | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0285 + 32 >> 2] | 0, HEAP16[$inptr$0284 + 16 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0285 + 96 >> 2] | 0, HEAP16[$inptr$0284 + 48 >> 1] | 0) | 0;
  $mul49 = Math_imul(HEAP32[$quantptr$0285 + 160 >> 2] | 0, HEAP16[$inptr$0284 + 80 >> 1] | 0) | 0;
  $mul53 = Math_imul(HEAP32[$quantptr$0285 + 224 >> 2] | 0, HEAP16[$inptr$0284 + 112 >> 1] | 0) | 0;
  $shl54 = $mul53 << 13;
  $add55 = $mul49 + $mul41 | 0;
  $mul57 = ($mul45 + $mul41 | 0) * 10935 | 0;
  $mul58 = $add55 * 9810 | 0;
  $sub62 = $mul57 + (Math_imul($mul41, -9232) | 0) + $mul58 + $shl54 | 0;
  $mul63 = $add55 * 6164 | 0;
  $sub66 = $mul41 - $mul45 | 0;
  $sub68 = ($sub66 * 3826 | 0) - $shl54 | 0;
  $add69 = $mul63 + (Math_imul($mul41, -8693) | 0) + $sub68 | 0;
  $sub73 = (Math_imul($mul49 + $mul45 | 0, -1297) | 0) - $shl54 | 0;
  $add76 = $mul57 + (Math_imul($mul45, -3474) | 0) + $sub73 | 0;
  $add79 = $mul58 + (Math_imul($mul49, -19447) | 0) + $sub73 | 0;
  $mul81 = ($mul49 - $mul45 | 0) * 11512 | 0;
  $add85 = $mul81 + (Math_imul($mul49, -13850) | 0) + $mul63 + $shl54 | 0;
  $add88 = $mul81 + ($mul45 * 5529 | 0) + $sub68 | 0;
  $shl90 = $sub66 - $mul49 + $mul53 << 2;
  HEAP32[$wsptr$0286 >> 2] = $sub62 + $add32 >> 11;
  HEAP32[$wsptr$0286 + 416 >> 2] = $add32 - $sub62 >> 11;
  HEAP32[$wsptr$0286 + 32 >> 2] = $add76 + $add34 >> 11;
  HEAP32[$wsptr$0286 + 384 >> 2] = $add34 - $add76 >> 11;
  HEAP32[$wsptr$0286 + 64 >> 2] = $add79 + $add36 >> 11;
  HEAP32[$wsptr$0286 + 352 >> 2] = $add36 - $add79 >> 11;
  HEAP32[$wsptr$0286 + 96 >> 2] = $shl90 + $shr;
  HEAP32[$wsptr$0286 + 320 >> 2] = $shr - $shl90;
  HEAP32[$wsptr$0286 + 128 >> 2] = $add85 + $sub37 >> 11;
  HEAP32[$wsptr$0286 + 288 >> 2] = $sub37 - $add85 >> 11;
  HEAP32[$wsptr$0286 + 160 >> 2] = $add88 + $sub35 >> 11;
  HEAP32[$wsptr$0286 + 256 >> 2] = $sub35 - $add88 >> 11;
  HEAP32[$wsptr$0286 + 192 >> 2] = $add69 + $sub33 >> 11;
  HEAP32[$wsptr$0286 + 224 >> 2] = $sub33 - $add69 >> 11;
  $ctr$0287 = $ctr$0287 + 1 | 0;
  if (($ctr$0287 | 0) == 8) break; else {
   $inptr$0284 = $inptr$0284 + 2 | 0;
   $quantptr$0285 = $quantptr$0285 + 4 | 0;
   $wsptr$0286 = $wsptr$0286 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1283 = 0;
 $wsptr$1282 = $workspace;
 while (1) {
  $add$ptr139 = (HEAP32[$output_buf + ($ctr$1283 << 2) >> 2] | 0) + $output_col | 0;
  $shl142 = (HEAP32[$wsptr$1282 >> 2] << 13) + 134348800 | 0;
  $29 = HEAP32[$wsptr$1282 + 16 >> 2] | 0;
  $add147 = $shl142 + ($29 * 10438 | 0) | 0;
  $add148 = $shl142 + ($29 * 2578 | 0) | 0;
  $sub149 = $shl142 + (Math_imul($29, -7223) | 0) | 0;
  $sub153 = $shl142 + (Math_imul($29, -11586) | 0) | 0;
  $32 = HEAP32[$wsptr$1282 + 8 >> 2] | 0;
  $33 = HEAP32[$wsptr$1282 + 24 >> 2] | 0;
  $mul157 = ($33 + $32 | 0) * 9058 | 0;
  $add159 = $mul157 + ($32 * 2237 | 0) | 0;
  $sub161 = $mul157 + (Math_imul($33, -14084) | 0) | 0;
  $sub164 = (Math_imul($33, -11295) | 0) + ($32 * 5027 | 0) | 0;
  $add165 = $add159 + $add147 | 0;
  $sub166 = $add147 - $add159 | 0;
  $add167 = $sub161 + $add148 | 0;
  $sub168 = $add148 - $sub161 | 0;
  $add169 = $sub164 + $sub149 | 0;
  $sub170 = $sub149 - $sub164 | 0;
  $36 = HEAP32[$wsptr$1282 + 4 >> 2] | 0;
  $37 = HEAP32[$wsptr$1282 + 12 >> 2] | 0;
  $38 = HEAP32[$wsptr$1282 + 20 >> 2] | 0;
  $shl175 = HEAP32[$wsptr$1282 + 28 >> 2] << 13;
  $add176 = $38 + $36 | 0;
  $mul178 = ($37 + $36 | 0) * 10935 | 0;
  $mul179 = $add176 * 9810 | 0;
  $sub183 = $mul178 + (Math_imul($36, -9232) | 0) + $mul179 + $shl175 | 0;
  $mul184 = $add176 * 6164 | 0;
  $sub187 = $36 - $37 | 0;
  $sub189 = ($sub187 * 3826 | 0) - $shl175 | 0;
  $add190 = $mul184 + (Math_imul($36, -8693) | 0) + $sub189 | 0;
  $sub193 = (Math_imul($38 + $37 | 0, -1297) | 0) - $shl175 | 0;
  $add196 = $mul178 + (Math_imul($37, -3474) | 0) + $sub193 | 0;
  $add199 = $mul179 + (Math_imul($38, -19447) | 0) + $sub193 | 0;
  $mul201 = ($38 - $37 | 0) * 11512 | 0;
  $add205 = $shl175 + (Math_imul($38, -13850) | 0) + $mul201 + $mul184 | 0;
  $add208 = $mul201 + ($37 * 5529 | 0) + $sub189 | 0;
  $add211 = ($sub187 - $38 << 13) + $shl175 | 0;
  HEAP8[$add$ptr139 >> 0] = HEAP8[$add$ptr + (($sub183 + $add165 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 13 >> 0] = HEAP8[$add$ptr + (($add165 - $sub183 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 1 >> 0] = HEAP8[$add$ptr + (($add196 + $add167 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 12 >> 0] = HEAP8[$add$ptr + (($add167 - $add196 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 2 >> 0] = HEAP8[$add$ptr + (($add199 + $add169 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 11 >> 0] = HEAP8[$add$ptr + (($add169 - $add199 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 3 >> 0] = HEAP8[$add$ptr + (($add211 + $sub153 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 10 >> 0] = HEAP8[$add$ptr + (($sub153 - $add211 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 4 >> 0] = HEAP8[$add$ptr + (($add205 + $sub170 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 9 >> 0] = HEAP8[$add$ptr + (($sub170 - $add205 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 5 >> 0] = HEAP8[$add$ptr + (($add208 + $sub168 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 8 >> 0] = HEAP8[$add$ptr + (($sub168 - $add208 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 6 >> 0] = HEAP8[$add$ptr + (($add190 + $sub166 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 7 >> 0] = HEAP8[$add$ptr + (($sub166 - $add190 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1283 = $ctr$1283 + 1 | 0;
  if (($ctr$1283 | 0) == 14) break; else $wsptr$1282 = $wsptr$1282 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jpeg_idct_4x4($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $40 = 0, $52 = 0, $53 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $80 = 0, $81 = 0, $add$ptr = 0, $add$ptr39 = 0, $add$ptr39$1 = 0, $add$ptr39$2 = 0, $add$ptr39$3 = 0, $add17 = 0, $add17$1 = 0, $add17$2 = 0, $add17$3 = 0, $add23$2 = 0, $add23$3 = 0, $add27$3 = 0, $add41 = 0, $add41$1 = 0, $add41$2 = 0, $add41$3 = 0, $add52 = 0, $add52$1 = 0, $add52$2 = 0, $add52$3 = 0, $arrayidx28 = 0, $incdec$ptr32 = 0, $mul = 0, $mul$1 = 0, $mul$2 = 0, $mul$3 = 0, $mul10 = 0, $mul10$1 = 0, $mul10$2 = 0, $mul10$3 = 0, $mul14 = 0, $mul14$1 = 0, $mul14$2 = 0, $mul14$3 = 0, $mul5 = 0, $mul5$1 = 0, $mul5$2 = 0, $mul5$3 = 0, $mul50 = 0, $mul50$1 = 0, $mul50$2 = 0, $mul50$3 = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0, $shl$3 = 0, $shl44 = 0, $shl44$1 = 0, $shl44$2 = 0, $shl44$3 = 0, $shl46 = 0, $shl46$1 = 0, $shl46$2 = 0, $shl46$3 = 0, $shl6 = 0, $shl6$1 = 0, $shl6$2 = 0, $shl6$3 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr22 = 0, $shr22$1 = 0, $shr22$2 = 0, $shr22$3 = 0, $sub54 = 0, $sub54$1 = 0, $sub54$2 = 0, $sub54$3 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $mul = Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0;
 $mul5 = Math_imul(HEAP32[$1 + 64 >> 2] | 0, HEAP16[$coef_block + 32 >> 1] | 0) | 0;
 $shl = $mul5 + $mul << 2;
 $shl6 = $mul - $mul5 << 2;
 $mul10 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $mul14 = Math_imul(HEAP32[$1 + 96 >> 2] | 0, HEAP16[$coef_block + 48 >> 1] | 0) | 0;
 $add17 = (($mul14 + $mul10 | 0) * 4433 | 0) + 1024 | 0;
 $shr = $add17 + ($mul10 * 6270 | 0) >> 11;
 $shr22 = $add17 + (Math_imul($mul14, -15137) | 0) >> 11;
 HEAP32[$workspace >> 2] = $shr + $shl;
 HEAP32[$workspace + 48 >> 2] = $shl - $shr;
 $arrayidx28 = $workspace + 16 | 0;
 HEAP32[$arrayidx28 >> 2] = $shr22 + $shl6;
 HEAP32[$workspace + 32 >> 2] = $shl6 - $shr22;
 $incdec$ptr32 = $workspace + 4 | 0;
 $mul$1 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 $mul5$1 = Math_imul(HEAP32[$1 + 68 >> 2] | 0, HEAP16[$coef_block + 34 >> 1] | 0) | 0;
 $shl$1 = $mul5$1 + $mul$1 << 2;
 $shl6$1 = $mul$1 - $mul5$1 << 2;
 $mul10$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $mul14$1 = Math_imul(HEAP32[$1 + 100 >> 2] | 0, HEAP16[$coef_block + 50 >> 1] | 0) | 0;
 $add17$1 = (($mul14$1 + $mul10$1 | 0) * 4433 | 0) + 1024 | 0;
 $shr$1 = $add17$1 + ($mul10$1 * 6270 | 0) >> 11;
 $shr22$1 = $add17$1 + (Math_imul($mul14$1, -15137) | 0) >> 11;
 HEAP32[$incdec$ptr32 >> 2] = $shr$1 + $shl$1;
 HEAP32[$workspace + 52 >> 2] = $shl$1 - $shr$1;
 HEAP32[$workspace + 20 >> 2] = $shr22$1 + $shl6$1;
 HEAP32[$workspace + 36 >> 2] = $shl6$1 - $shr22$1;
 $mul$2 = Math_imul(HEAP32[$1 + 8 >> 2] | 0, HEAP16[$coef_block + 4 >> 1] | 0) | 0;
 $mul5$2 = Math_imul(HEAP32[$1 + 72 >> 2] | 0, HEAP16[$coef_block + 36 >> 1] | 0) | 0;
 $shl$2 = $mul5$2 + $mul$2 << 2;
 $shl6$2 = $mul$2 - $mul5$2 << 2;
 $mul10$2 = Math_imul(HEAP32[$1 + 40 >> 2] | 0, HEAP16[$coef_block + 20 >> 1] | 0) | 0;
 $mul14$2 = Math_imul(HEAP32[$1 + 104 >> 2] | 0, HEAP16[$coef_block + 52 >> 1] | 0) | 0;
 $add17$2 = (($mul14$2 + $mul10$2 | 0) * 4433 | 0) + 1024 | 0;
 $shr$2 = $add17$2 + ($mul10$2 * 6270 | 0) >> 11;
 $shr22$2 = $add17$2 + (Math_imul($mul14$2, -15137) | 0) >> 11;
 $add23$2 = $shr$2 + $shl$2 | 0;
 HEAP32[$workspace + 8 >> 2] = $add23$2;
 HEAP32[$workspace + 56 >> 2] = $shl$2 - $shr$2;
 HEAP32[$workspace + 24 >> 2] = $shr22$2 + $shl6$2;
 HEAP32[$workspace + 40 >> 2] = $shl6$2 - $shr22$2;
 $mul$3 = Math_imul(HEAP32[$1 + 12 >> 2] | 0, HEAP16[$coef_block + 6 >> 1] | 0) | 0;
 $mul5$3 = Math_imul(HEAP32[$1 + 76 >> 2] | 0, HEAP16[$coef_block + 38 >> 1] | 0) | 0;
 $shl$3 = $mul5$3 + $mul$3 << 2;
 $shl6$3 = $mul$3 - $mul5$3 << 2;
 $mul10$3 = Math_imul(HEAP32[$1 + 44 >> 2] | 0, HEAP16[$coef_block + 22 >> 1] | 0) | 0;
 $mul14$3 = Math_imul(HEAP32[$1 + 108 >> 2] | 0, HEAP16[$coef_block + 54 >> 1] | 0) | 0;
 $add17$3 = (($mul14$3 + $mul10$3 | 0) * 4433 | 0) + 1024 | 0;
 $shr$3 = $add17$3 + ($mul10$3 * 6270 | 0) >> 11;
 $shr22$3 = $add17$3 + (Math_imul($mul14$3, -15137) | 0) >> 11;
 $add23$3 = $shr$3 + $shl$3 | 0;
 HEAP32[$workspace + 12 >> 2] = $add23$3;
 HEAP32[$workspace + 60 >> 2] = $shl$3 - $shr$3;
 $add27$3 = $shr22$3 + $shl6$3 | 0;
 HEAP32[$workspace + 28 >> 2] = $add27$3;
 HEAP32[$workspace + 44 >> 2] = $shl6$3 - $shr22$3;
 $add$ptr = $0 + -384 | 0;
 $add$ptr39 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $add41 = (HEAP32[$workspace >> 2] | 0) + 16400 | 0;
 $shl44 = $add41 + $add23$2 << 13;
 $shl46 = $add41 - $add23$2 << 13;
 $40 = HEAP32[$incdec$ptr32 >> 2] | 0;
 $mul50 = ($add23$3 + $40 | 0) * 4433 | 0;
 $add52 = $mul50 + ($40 * 6270 | 0) | 0;
 $sub54 = $mul50 + (Math_imul($add23$3, -15137) | 0) | 0;
 HEAP8[$add$ptr39 >> 0] = HEAP8[$add$ptr + (($add52 + $shl44 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39 + 3 >> 0] = HEAP8[$add$ptr + (($shl44 - $add52 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39 + 1 >> 0] = HEAP8[$add$ptr + (($sub54 + $shl46 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39 + 2 >> 0] = HEAP8[$add$ptr + (($shl46 - $sub54 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr39$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $add41$1 = (HEAP32[$arrayidx28 >> 2] | 0) + 16400 | 0;
 $52 = HEAP32[$workspace + 24 >> 2] | 0;
 $shl44$1 = $add41$1 + $52 << 13;
 $shl46$1 = $add41$1 - $52 << 13;
 $53 = HEAP32[$workspace + 20 >> 2] | 0;
 $mul50$1 = ($add27$3 + $53 | 0) * 4433 | 0;
 $add52$1 = $mul50$1 + ($53 * 6270 | 0) | 0;
 $sub54$1 = $mul50$1 + (Math_imul($add27$3, -15137) | 0) | 0;
 HEAP8[$add$ptr39$1 >> 0] = HEAP8[$add$ptr + (($add52$1 + $shl44$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$1 + 3 >> 0] = HEAP8[$add$ptr + (($shl44$1 - $add52$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$1 + 1 >> 0] = HEAP8[$add$ptr + (($sub54$1 + $shl46$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$1 + 2 >> 0] = HEAP8[$add$ptr + (($shl46$1 - $sub54$1 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr39$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $add41$2 = (HEAP32[$workspace + 32 >> 2] | 0) + 16400 | 0;
 $65 = HEAP32[$workspace + 40 >> 2] | 0;
 $shl44$2 = $add41$2 + $65 << 13;
 $shl46$2 = $add41$2 - $65 << 13;
 $66 = HEAP32[$workspace + 36 >> 2] | 0;
 $67 = HEAP32[$workspace + 44 >> 2] | 0;
 $mul50$2 = ($67 + $66 | 0) * 4433 | 0;
 $add52$2 = $mul50$2 + ($66 * 6270 | 0) | 0;
 $sub54$2 = $mul50$2 + (Math_imul($67, -15137) | 0) | 0;
 HEAP8[$add$ptr39$2 >> 0] = HEAP8[$add$ptr + (($add52$2 + $shl44$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$2 + 3 >> 0] = HEAP8[$add$ptr + (($shl44$2 - $add52$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$2 + 1 >> 0] = HEAP8[$add$ptr + (($sub54$2 + $shl46$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$2 + 2 >> 0] = HEAP8[$add$ptr + (($shl46$2 - $sub54$2 | 0) >>> 18 & 1023) >> 0] | 0;
 $add$ptr39$3 = (HEAP32[$output_buf + 12 >> 2] | 0) + $output_col | 0;
 $add41$3 = (HEAP32[$workspace + 48 >> 2] | 0) + 16400 | 0;
 $79 = HEAP32[$workspace + 56 >> 2] | 0;
 $shl44$3 = $add41$3 + $79 << 13;
 $shl46$3 = $add41$3 - $79 << 13;
 $80 = HEAP32[$workspace + 52 >> 2] | 0;
 $81 = HEAP32[$workspace + 60 >> 2] | 0;
 $mul50$3 = ($81 + $80 | 0) * 4433 | 0;
 $add52$3 = $mul50$3 + ($80 * 6270 | 0) | 0;
 $sub54$3 = $mul50$3 + (Math_imul($81, -15137) | 0) | 0;
 HEAP8[$add$ptr39$3 >> 0] = HEAP8[$add$ptr + (($add52$3 + $shl44$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$3 + 3 >> 0] = HEAP8[$add$ptr + (($shl44$3 - $add52$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$3 + 1 >> 0] = HEAP8[$add$ptr + (($sub54$3 + $shl46$3 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr39$3 + 2 >> 0] = HEAP8[$add$ptr + (($shl46$3 - $sub54$3 | 0) >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _access_virt_barray($cinfo, $ptr, $start_row, $num_rows, $writable) {
 $cinfo = $cinfo | 0;
 $ptr = $ptr | 0;
 $start_row = $start_row | 0;
 $num_rows = $num_rows | 0;
 $writable = $writable | 0;
 var $$pre = 0, $$pre48$i = 0, $$pre48$i77 = 0, $$sub$i = 0, $$sub$i102 = 0, $$sub$us$i = 0, $$sub$us$i90 = 0, $12 = 0, $13 = 0, $19 = 0, $20 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $8 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$us$i = 0, $b_s_info$i = 0, $b_s_info$i73 = 0, $cond15$i = 0, $cond15$i105 = 0, $cond15$sub16$i108 = 0, $cond15$sub16$i112 = 0, $cond15$sub16$us$i100 = 0, $cond15$sub16$us$i96 = 0, $cond15$us$i = 0, $cond15$us$i93 = 0, $cur_start_row = 0, $dirty = 0, $file_offset$044$i111 = 0, $file_offset$044$us$i99 = 0, $first_undef_row = 0, $first_undef_row$i = 0, $first_undef_row$i71 = 0, $i$045$i110 = 0, $i$045$us$i98 = 0, $mul = 0, $mul$i = 0, $mul$i65 = 0, $mul25$i = 0, $mul25$us$i = 0, $rows_in_array = 0, $rows_in_mem$i = 0, $rows_in_mem$i69$phi$trans$insert = 0, $rowsperchunk$i = 0, $rowsperchunk$i68 = 0, $storemerge = 0, $sub = 0, $sub$i = 0, $sub$us$i = 0, $sub16$i = 0, $sub16$i106 = 0, $sub16$us$i = 0, $sub16$us$i94 = 0, $sub57 = 0, $sub59 = 0, $sub79 = 0, $sub8$i = 0, $sub8$i103 = 0, $sub8$us$i = 0, $sub8$us$i91 = 0, $tobool39 = 0, $tobool5083 = 0, $undef_row$081 = 0, $undef_row$082 = 0, $undef_row$188 = 0, $write_backing_store$i = 0, label = 0;
 $add = $num_rows + $start_row | 0;
 $rows_in_array = $ptr + 4 | 0;
 if (($add >>> 0 <= (HEAP32[$rows_in_array >> 2] | 0) >>> 0 ? (HEAP32[$ptr + 12 >> 2] | 0) >>> 0 >= $num_rows >>> 0 : 0) ? (HEAP32[$ptr >> 2] | 0) != 0 : 0) {} else {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 23;
  FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($cinfo);
 }
 $cur_start_row = $ptr + 24 | 0;
 $5 = HEAP32[$cur_start_row >> 2] | 0;
 if ($5 >>> 0 <= $start_row >>> 0 ? $add >>> 0 <= ((HEAP32[$ptr + 16 >> 2] | 0) + $5 | 0) >>> 0 : 0) {} else label = 7;
 L9 : do if ((label | 0) == 7) {
  if (!(HEAP32[$ptr + 40 >> 2] | 0)) {
   $8 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$8 + 20 >> 2] = 71;
   FUNCTION_TABLE_vi[HEAP32[$8 >> 2] & 255]($cinfo);
  }
  $dirty = $ptr + 36 | 0;
  if (HEAP32[$dirty >> 2] | 0) {
   $mul$i = HEAP32[$ptr + 8 >> 2] << 7;
   $12 = HEAP32[$cur_start_row >> 2] | 0;
   $rowsperchunk$i = $ptr + 20 | 0;
   $rows_in_mem$i = $ptr + 16 | 0;
   $13 = HEAP32[$rows_in_mem$i >> 2] | 0;
   L16 : do if (($13 | 0) > 0 ? ($first_undef_row$i = $ptr + 28 | 0, $b_s_info$i = $ptr + 48 | 0, $write_backing_store$i = $ptr + 52 | 0, $$pre48$i = HEAP32[$rowsperchunk$i >> 2] | 0, $$sub$i102 = ($$pre48$i | 0) < ($13 | 0) ? $$pre48$i : $13, $sub8$i103 = (HEAP32[$first_undef_row$i >> 2] | 0) - $12 | 0, $cond15$i105 = ($$sub$i102 | 0) < ($sub8$i103 | 0) ? $$sub$i102 : $sub8$i103, $sub16$i106 = (HEAP32[$rows_in_array >> 2] | 0) - $12 | 0, $cond15$sub16$i108 = ($cond15$i105 | 0) < ($sub16$i106 | 0) ? $cond15$i105 : $sub16$i106, ($cond15$sub16$i108 | 0) >= 1) : 0) {
    $cond15$sub16$i112 = $cond15$sub16$i108;
    $file_offset$044$i111 = Math_imul($12, $mul$i) | 0;
    $i$045$i110 = 0;
    while (1) {
     $mul25$i = Math_imul($cond15$sub16$i112, $mul$i) | 0;
     FUNCTION_TABLE_viiiii[HEAP32[$write_backing_store$i >> 2] & 63]($cinfo, $b_s_info$i, HEAP32[(HEAP32[$ptr >> 2] | 0) + ($i$045$i110 << 2) >> 2] | 0, $file_offset$044$i111, $mul25$i);
     $19 = HEAP32[$rowsperchunk$i >> 2] | 0;
     $i$045$i110 = $19 + $i$045$i110 | 0;
     $20 = HEAP32[$rows_in_mem$i >> 2] | 0;
     if (($20 | 0) <= ($i$045$i110 | 0)) break L16;
     $sub$i = $20 - $i$045$i110 | 0;
     $$sub$i = ($19 | 0) < ($sub$i | 0) ? $19 : $sub$i;
     $add$i = $i$045$i110 + (HEAP32[$cur_start_row >> 2] | 0) | 0;
     $sub8$i = (HEAP32[$first_undef_row$i >> 2] | 0) - $add$i | 0;
     $cond15$i = ($$sub$i | 0) < ($sub8$i | 0) ? $$sub$i : $sub8$i;
     $sub16$i = (HEAP32[$rows_in_array >> 2] | 0) - $add$i | 0;
     $cond15$sub16$i112 = ($cond15$i | 0) < ($sub16$i | 0) ? $cond15$i : $sub16$i;
     if (($cond15$sub16$i112 | 0) < 1) break; else $file_offset$044$i111 = $mul25$i + $file_offset$044$i111 | 0;
    }
   } while (0);
   HEAP32[$dirty >> 2] = 0;
  }
  $rows_in_mem$i69$phi$trans$insert = $ptr + 16 | 0;
  $$pre = HEAP32[$rows_in_mem$i69$phi$trans$insert >> 2] | 0;
  if ((HEAP32[$cur_start_row >> 2] | 0) >>> 0 < $start_row >>> 0) $storemerge = $start_row; else {
   $sub = $add - $$pre | 0;
   $storemerge = ($sub | 0) > 0 ? $sub : 0;
  }
  HEAP32[$cur_start_row >> 2] = $storemerge;
  $mul$i65 = HEAP32[$ptr + 8 >> 2] << 7;
  $rowsperchunk$i68 = $ptr + 20 | 0;
  if (($$pre | 0) > 0 ? ($first_undef_row$i71 = $ptr + 28 | 0, $b_s_info$i73 = $ptr + 48 | 0, $$pre48$i77 = HEAP32[$rowsperchunk$i68 >> 2] | 0, $$sub$us$i90 = ($$pre48$i77 | 0) < ($$pre | 0) ? $$pre48$i77 : $$pre, $sub8$us$i91 = (HEAP32[$first_undef_row$i71 >> 2] | 0) - $storemerge | 0, $cond15$us$i93 = ($$sub$us$i90 | 0) < ($sub8$us$i91 | 0) ? $$sub$us$i90 : $sub8$us$i91, $sub16$us$i94 = (HEAP32[$rows_in_array >> 2] | 0) - $storemerge | 0, $cond15$sub16$us$i96 = ($cond15$us$i93 | 0) < ($sub16$us$i94 | 0) ? $cond15$us$i93 : $sub16$us$i94, ($cond15$sub16$us$i96 | 0) >= 1) : 0) {
   $cond15$sub16$us$i100 = $cond15$sub16$us$i96;
   $file_offset$044$us$i99 = Math_imul($mul$i65, $storemerge) | 0;
   $i$045$us$i98 = 0;
   while (1) {
    $mul25$us$i = Math_imul($cond15$sub16$us$i100, $mul$i65) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[$b_s_info$i73 >> 2] & 63]($cinfo, $b_s_info$i73, HEAP32[(HEAP32[$ptr >> 2] | 0) + ($i$045$us$i98 << 2) >> 2] | 0, $file_offset$044$us$i99, $mul25$us$i);
    $31 = HEAP32[$rowsperchunk$i68 >> 2] | 0;
    $i$045$us$i98 = $31 + $i$045$us$i98 | 0;
    $32 = HEAP32[$rows_in_mem$i69$phi$trans$insert >> 2] | 0;
    if (($32 | 0) <= ($i$045$us$i98 | 0)) break L9;
    $sub$us$i = $32 - $i$045$us$i98 | 0;
    $$sub$us$i = ($31 | 0) < ($sub$us$i | 0) ? $31 : $sub$us$i;
    $add$us$i = $i$045$us$i98 + (HEAP32[$cur_start_row >> 2] | 0) | 0;
    $sub8$us$i = (HEAP32[$first_undef_row$i71 >> 2] | 0) - $add$us$i | 0;
    $cond15$us$i = ($$sub$us$i | 0) < ($sub8$us$i | 0) ? $$sub$us$i : $sub8$us$i;
    $sub16$us$i = (HEAP32[$rows_in_array >> 2] | 0) - $add$us$i | 0;
    $cond15$sub16$us$i100 = ($cond15$us$i | 0) < ($sub16$us$i | 0) ? $cond15$us$i : $sub16$us$i;
    if (($cond15$sub16$us$i100 | 0) < 1) break; else $file_offset$044$us$i99 = $mul25$us$i + $file_offset$044$us$i99 | 0;
   }
  }
 } while (0);
 $first_undef_row = $ptr + 28 | 0;
 $35 = HEAP32[$first_undef_row >> 2] | 0;
 do if ($35 >>> 0 < $add >>> 0) {
  $tobool39 = ($writable | 0) == 0;
  if ($35 >>> 0 < $start_row >>> 0) if ($tobool39) {
   $tobool5083 = 0;
   $undef_row$081 = $start_row;
  } else {
   $36 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$36 + 20 >> 2] = 23;
   FUNCTION_TABLE_vi[HEAP32[$36 >> 2] & 255]($cinfo);
   $undef_row$082 = $start_row;
   label = 28;
  } else if ($tobool39) {
   $tobool5083 = 0;
   $undef_row$081 = $35;
  } else {
   $undef_row$082 = $35;
   label = 28;
  }
  if ((label | 0) == 28) {
   HEAP32[$first_undef_row >> 2] = $add;
   $tobool5083 = 1;
   $undef_row$081 = $undef_row$082;
  }
  if (!(HEAP32[$ptr + 32 >> 2] | 0)) {
   if ($tobool5083) break;
   $43 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$43 + 20 >> 2] = 23;
   FUNCTION_TABLE_vi[HEAP32[$43 >> 2] & 255]($cinfo);
   break;
  }
  $mul = HEAP32[$ptr + 8 >> 2] << 7;
  $40 = HEAP32[$cur_start_row >> 2] | 0;
  $sub57 = $undef_row$081 - $40 | 0;
  $sub59 = $add - $40 | 0;
  if ($sub57 >>> 0 < $sub59 >>> 0) {
   $undef_row$188 = $sub57;
   do {
    _memset(HEAP32[(HEAP32[$ptr >> 2] | 0) + ($undef_row$188 << 2) >> 2] | 0, 0, $mul | 0) | 0;
    $undef_row$188 = $undef_row$188 + 1 | 0;
   } while (($undef_row$188 | 0) != ($sub59 | 0));
  }
 } while (0);
 if (!$writable) {
  $45 = HEAP32[$ptr >> 2] | 0;
  $46 = HEAP32[$cur_start_row >> 2] | 0;
  $sub79 = $start_row - $46 | 0;
  $add$ptr = $45 + ($sub79 << 2) | 0;
  return $add$ptr | 0;
 }
 HEAP32[$ptr + 36 >> 2] = 1;
 $45 = HEAP32[$ptr >> 2] | 0;
 $46 = HEAP32[$cur_start_row >> 2] | 0;
 $sub79 = $start_row - $46 | 0;
 $add$ptr = $45 + ($sub79 << 2) | 0;
 return $add$ptr | 0;
}

function _access_virt_sarray($cinfo, $ptr, $start_row, $num_rows, $writable) {
 $cinfo = $cinfo | 0;
 $ptr = $ptr | 0;
 $start_row = $start_row | 0;
 $num_rows = $num_rows | 0;
 $writable = $writable | 0;
 var $$pre = 0, $$pre48$i = 0, $$pre48$i76 = 0, $$sub$i = 0, $$sub$i101 = 0, $$sub$us$i = 0, $$sub$us$i89 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = 0, $20 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $8 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$us$i = 0, $b_s_info$i = 0, $b_s_info$i72 = 0, $cond15$i = 0, $cond15$i104 = 0, $cond15$sub16$i107 = 0, $cond15$sub16$i111 = 0, $cond15$sub16$us$i95 = 0, $cond15$sub16$us$i99 = 0, $cond15$us$i = 0, $cond15$us$i92 = 0, $cur_start_row = 0, $dirty = 0, $file_offset$044$i110 = 0, $file_offset$044$us$i98 = 0, $first_undef_row = 0, $first_undef_row$i = 0, $first_undef_row$i70 = 0, $i$045$i109 = 0, $i$045$us$i97 = 0, $mul25$i = 0, $mul25$us$i = 0, $rows_in_array = 0, $rows_in_mem$i = 0, $rows_in_mem$i68$phi$trans$insert = 0, $rowsperchunk$i = 0, $rowsperchunk$i67 = 0, $storemerge = 0, $sub = 0, $sub$i = 0, $sub$us$i = 0, $sub16$i = 0, $sub16$i105 = 0, $sub16$us$i = 0, $sub16$us$i93 = 0, $sub57 = 0, $sub59 = 0, $sub79 = 0, $sub8$i = 0, $sub8$i102 = 0, $sub8$us$i = 0, $sub8$us$i90 = 0, $tobool39 = 0, $tobool5082 = 0, $undef_row$080 = 0, $undef_row$081 = 0, $undef_row$187 = 0, $write_backing_store$i = 0, label = 0;
 $add = $num_rows + $start_row | 0;
 $rows_in_array = $ptr + 4 | 0;
 if (($add >>> 0 <= (HEAP32[$rows_in_array >> 2] | 0) >>> 0 ? (HEAP32[$ptr + 12 >> 2] | 0) >>> 0 >= $num_rows >>> 0 : 0) ? (HEAP32[$ptr >> 2] | 0) != 0 : 0) {} else {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 23;
  FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($cinfo);
 }
 $cur_start_row = $ptr + 24 | 0;
 $5 = HEAP32[$cur_start_row >> 2] | 0;
 if ($5 >>> 0 <= $start_row >>> 0 ? $add >>> 0 <= ((HEAP32[$ptr + 16 >> 2] | 0) + $5 | 0) >>> 0 : 0) {} else label = 7;
 L9 : do if ((label | 0) == 7) {
  if (!(HEAP32[$ptr + 40 >> 2] | 0)) {
   $8 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$8 + 20 >> 2] = 71;
   FUNCTION_TABLE_vi[HEAP32[$8 >> 2] & 255]($cinfo);
  }
  $dirty = $ptr + 36 | 0;
  if (HEAP32[$dirty >> 2] | 0) {
   $11 = HEAP32[$ptr + 8 >> 2] | 0;
   $12 = HEAP32[$cur_start_row >> 2] | 0;
   $rowsperchunk$i = $ptr + 20 | 0;
   $rows_in_mem$i = $ptr + 16 | 0;
   $13 = HEAP32[$rows_in_mem$i >> 2] | 0;
   L16 : do if (($13 | 0) > 0 ? ($first_undef_row$i = $ptr + 28 | 0, $b_s_info$i = $ptr + 48 | 0, $write_backing_store$i = $ptr + 52 | 0, $$pre48$i = HEAP32[$rowsperchunk$i >> 2] | 0, $$sub$i101 = ($$pre48$i | 0) < ($13 | 0) ? $$pre48$i : $13, $sub8$i102 = (HEAP32[$first_undef_row$i >> 2] | 0) - $12 | 0, $cond15$i104 = ($$sub$i101 | 0) < ($sub8$i102 | 0) ? $$sub$i101 : $sub8$i102, $sub16$i105 = (HEAP32[$rows_in_array >> 2] | 0) - $12 | 0, $cond15$sub16$i107 = ($cond15$i104 | 0) < ($sub16$i105 | 0) ? $cond15$i104 : $sub16$i105, ($cond15$sub16$i107 | 0) >= 1) : 0) {
    $cond15$sub16$i111 = $cond15$sub16$i107;
    $file_offset$044$i110 = Math_imul($12, $11) | 0;
    $i$045$i109 = 0;
    while (1) {
     $mul25$i = Math_imul($cond15$sub16$i111, $11) | 0;
     FUNCTION_TABLE_viiiii[HEAP32[$write_backing_store$i >> 2] & 63]($cinfo, $b_s_info$i, HEAP32[(HEAP32[$ptr >> 2] | 0) + ($i$045$i109 << 2) >> 2] | 0, $file_offset$044$i110, $mul25$i);
     $19 = HEAP32[$rowsperchunk$i >> 2] | 0;
     $i$045$i109 = $19 + $i$045$i109 | 0;
     $20 = HEAP32[$rows_in_mem$i >> 2] | 0;
     if (($20 | 0) <= ($i$045$i109 | 0)) break L16;
     $sub$i = $20 - $i$045$i109 | 0;
     $$sub$i = ($19 | 0) < ($sub$i | 0) ? $19 : $sub$i;
     $add$i = $i$045$i109 + (HEAP32[$cur_start_row >> 2] | 0) | 0;
     $sub8$i = (HEAP32[$first_undef_row$i >> 2] | 0) - $add$i | 0;
     $cond15$i = ($$sub$i | 0) < ($sub8$i | 0) ? $$sub$i : $sub8$i;
     $sub16$i = (HEAP32[$rows_in_array >> 2] | 0) - $add$i | 0;
     $cond15$sub16$i111 = ($cond15$i | 0) < ($sub16$i | 0) ? $cond15$i : $sub16$i;
     if (($cond15$sub16$i111 | 0) < 1) break; else $file_offset$044$i110 = $mul25$i + $file_offset$044$i110 | 0;
    }
   } while (0);
   HEAP32[$dirty >> 2] = 0;
  }
  $rows_in_mem$i68$phi$trans$insert = $ptr + 16 | 0;
  $$pre = HEAP32[$rows_in_mem$i68$phi$trans$insert >> 2] | 0;
  if ((HEAP32[$cur_start_row >> 2] | 0) >>> 0 < $start_row >>> 0) $storemerge = $start_row; else {
   $sub = $add - $$pre | 0;
   $storemerge = ($sub | 0) > 0 ? $sub : 0;
  }
  HEAP32[$cur_start_row >> 2] = $storemerge;
  $25 = HEAP32[$ptr + 8 >> 2] | 0;
  $rowsperchunk$i67 = $ptr + 20 | 0;
  if (($$pre | 0) > 0 ? ($first_undef_row$i70 = $ptr + 28 | 0, $b_s_info$i72 = $ptr + 48 | 0, $$pre48$i76 = HEAP32[$rowsperchunk$i67 >> 2] | 0, $$sub$us$i89 = ($$pre48$i76 | 0) < ($$pre | 0) ? $$pre48$i76 : $$pre, $sub8$us$i90 = (HEAP32[$first_undef_row$i70 >> 2] | 0) - $storemerge | 0, $cond15$us$i92 = ($$sub$us$i89 | 0) < ($sub8$us$i90 | 0) ? $$sub$us$i89 : $sub8$us$i90, $sub16$us$i93 = (HEAP32[$rows_in_array >> 2] | 0) - $storemerge | 0, $cond15$sub16$us$i95 = ($cond15$us$i92 | 0) < ($sub16$us$i93 | 0) ? $cond15$us$i92 : $sub16$us$i93, ($cond15$sub16$us$i95 | 0) >= 1) : 0) {
   $cond15$sub16$us$i99 = $cond15$sub16$us$i95;
   $file_offset$044$us$i98 = Math_imul($25, $storemerge) | 0;
   $i$045$us$i97 = 0;
   while (1) {
    $mul25$us$i = Math_imul($cond15$sub16$us$i99, $25) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[$b_s_info$i72 >> 2] & 63]($cinfo, $b_s_info$i72, HEAP32[(HEAP32[$ptr >> 2] | 0) + ($i$045$us$i97 << 2) >> 2] | 0, $file_offset$044$us$i98, $mul25$us$i);
    $31 = HEAP32[$rowsperchunk$i67 >> 2] | 0;
    $i$045$us$i97 = $31 + $i$045$us$i97 | 0;
    $32 = HEAP32[$rows_in_mem$i68$phi$trans$insert >> 2] | 0;
    if (($32 | 0) <= ($i$045$us$i97 | 0)) break L9;
    $sub$us$i = $32 - $i$045$us$i97 | 0;
    $$sub$us$i = ($31 | 0) < ($sub$us$i | 0) ? $31 : $sub$us$i;
    $add$us$i = $i$045$us$i97 + (HEAP32[$cur_start_row >> 2] | 0) | 0;
    $sub8$us$i = (HEAP32[$first_undef_row$i70 >> 2] | 0) - $add$us$i | 0;
    $cond15$us$i = ($$sub$us$i | 0) < ($sub8$us$i | 0) ? $$sub$us$i : $sub8$us$i;
    $sub16$us$i = (HEAP32[$rows_in_array >> 2] | 0) - $add$us$i | 0;
    $cond15$sub16$us$i99 = ($cond15$us$i | 0) < ($sub16$us$i | 0) ? $cond15$us$i : $sub16$us$i;
    if (($cond15$sub16$us$i99 | 0) < 1) break; else $file_offset$044$us$i98 = $mul25$us$i + $file_offset$044$us$i98 | 0;
   }
  }
 } while (0);
 $first_undef_row = $ptr + 28 | 0;
 $35 = HEAP32[$first_undef_row >> 2] | 0;
 do if ($35 >>> 0 < $add >>> 0) {
  $tobool39 = ($writable | 0) == 0;
  if ($35 >>> 0 < $start_row >>> 0) if ($tobool39) {
   $tobool5082 = 0;
   $undef_row$080 = $start_row;
  } else {
   $36 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$36 + 20 >> 2] = 23;
   FUNCTION_TABLE_vi[HEAP32[$36 >> 2] & 255]($cinfo);
   $undef_row$081 = $start_row;
   label = 28;
  } else if ($tobool39) {
   $tobool5082 = 0;
   $undef_row$080 = $35;
  } else {
   $undef_row$081 = $35;
   label = 28;
  }
  if ((label | 0) == 28) {
   HEAP32[$first_undef_row >> 2] = $add;
   $tobool5082 = 1;
   $undef_row$080 = $undef_row$081;
  }
  if (!(HEAP32[$ptr + 32 >> 2] | 0)) {
   if ($tobool5082) break;
   $43 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$43 + 20 >> 2] = 23;
   FUNCTION_TABLE_vi[HEAP32[$43 >> 2] & 255]($cinfo);
   break;
  }
  $39 = HEAP32[$ptr + 8 >> 2] | 0;
  $40 = HEAP32[$cur_start_row >> 2] | 0;
  $sub57 = $undef_row$080 - $40 | 0;
  $sub59 = $add - $40 | 0;
  if ($sub57 >>> 0 < $sub59 >>> 0) {
   $undef_row$187 = $sub57;
   do {
    _memset(HEAP32[(HEAP32[$ptr >> 2] | 0) + ($undef_row$187 << 2) >> 2] | 0, 0, $39 | 0) | 0;
    $undef_row$187 = $undef_row$187 + 1 | 0;
   } while (($undef_row$187 | 0) != ($sub59 | 0));
  }
 } while (0);
 if (!$writable) {
  $45 = HEAP32[$ptr >> 2] | 0;
  $46 = HEAP32[$cur_start_row >> 2] | 0;
  $sub79 = $start_row - $46 | 0;
  $add$ptr = $45 + ($sub79 << 2) | 0;
  return $add$ptr | 0;
 }
 HEAP32[$ptr + 36 >> 2] = 1;
 $45 = HEAP32[$ptr >> 2] | 0;
 $46 = HEAP32[$cur_start_row >> 2] | 0;
 $sub79 = $start_row - $46 | 0;
 $add$ptr = $45 + ($sub79 << 2) | 0;
 return $add$ptr | 0;
}

function _jpeg_idct_8x16($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $add = 0, $add$ptr = 0, $add$ptr163 = 0, $add102 = 0, $add103 = 0, $add106 = 0, $add107 = 0, $add165 = 0, $add176 = 0, $add179 = 0, $add181 = 0, $add187 = 0, $add188 = 0, $add193 = 0, $add194 = 0, $add200 = 0, $add202 = 0, $add208 = 0, $add210 = 0, $add23 = 0, $add25 = 0, $add30 = 0, $add32 = 0, $add34 = 0, $add36 = 0, $add54 = 0, $add8 = 0, $add89 = 0, $add9 = 0, $add91 = 0, $add99 = 0, $ctr$0271 = 0, $ctr$1267 = 0, $inptr$0268 = 0, $mul101 = 0, $mul105 = 0, $mul14 = 0, $mul174 = 0, $mul18 = 0, $mul190 = 0, $mul196 = 0, $mul20 = 0, $mul204 = 0, $mul21 = 0, $mul41 = 0, $mul45 = 0, $mul49 = 0, $mul5 = 0, $mul53 = 0, $mul56 = 0, $mul57 = 0, $mul59 = 0, $mul6 = 0, $mul61 = 0, $mul62 = 0, $mul64 = 0, $mul7 = 0, $mul74 = 0, $mul82 = 0, $mul90 = 0, $mul95 = 0, $quantptr$0269 = 0, $shl168 = 0, $shl170 = 0, $sub = 0, $sub10 = 0, $sub178 = 0, $sub180 = 0, $sub182 = 0, $sub19 = 0, $sub27 = 0, $sub29 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub37 = 0, $sub68 = 0, $sub72 = 0, $workspace = 0, $wsptr$0270 = 0, $wsptr$1266 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0271 = 0;
 $inptr$0268 = $coef_block;
 $quantptr$0269 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0270 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0268 >> 1] << 13, HEAP32[$quantptr$0269 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0269 + 128 >> 2] | 0, HEAP16[$inptr$0268 + 64 >> 1] | 0) | 0;
  $mul6 = $mul5 * 10703 | 0;
  $mul7 = $mul5 * 4433 | 0;
  $add8 = $mul6 + $add | 0;
  $sub = $add - $mul6 | 0;
  $add9 = $mul7 + $add | 0;
  $sub10 = $add - $mul7 | 0;
  $mul14 = Math_imul(HEAP32[$quantptr$0269 + 64 >> 2] | 0, HEAP16[$inptr$0268 + 32 >> 1] | 0) | 0;
  $mul18 = Math_imul(HEAP32[$quantptr$0269 + 192 >> 2] | 0, HEAP16[$inptr$0268 + 96 >> 1] | 0) | 0;
  $sub19 = $mul14 - $mul18 | 0;
  $mul20 = $sub19 * 2260 | 0;
  $mul21 = $sub19 * 11363 | 0;
  $add23 = $mul21 + ($mul18 * 20995 | 0) | 0;
  $add25 = $mul20 + ($mul14 * 7373 | 0) | 0;
  $sub27 = $mul21 + (Math_imul($mul14, -4926) | 0) | 0;
  $sub29 = $mul20 + (Math_imul($mul18, -4176) | 0) | 0;
  $add30 = $add23 + $add8 | 0;
  $sub31 = $add8 - $add23 | 0;
  $add32 = $add25 + $add9 | 0;
  $sub33 = $add9 - $add25 | 0;
  $add34 = $sub27 + $sub10 | 0;
  $sub35 = $sub10 - $sub27 | 0;
  $add36 = $sub29 + $sub | 0;
  $sub37 = $sub - $sub29 | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0269 + 32 >> 2] | 0, HEAP16[$inptr$0268 + 16 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0269 + 96 >> 2] | 0, HEAP16[$inptr$0268 + 48 >> 1] | 0) | 0;
  $mul49 = Math_imul(HEAP32[$quantptr$0269 + 160 >> 2] | 0, HEAP16[$inptr$0268 + 80 >> 1] | 0) | 0;
  $mul53 = Math_imul(HEAP32[$quantptr$0269 + 224 >> 2] | 0, HEAP16[$inptr$0268 + 112 >> 1] | 0) | 0;
  $add54 = $mul49 + $mul41 | 0;
  $mul56 = ($mul45 + $mul41 | 0) * 11086 | 0;
  $mul57 = $add54 * 10217 | 0;
  $mul59 = ($mul53 + $mul41 | 0) * 8956 | 0;
  $mul61 = ($mul41 - $mul53 | 0) * 7350 | 0;
  $mul62 = $add54 * 5461 | 0;
  $mul64 = ($mul41 - $mul45 | 0) * 3363 | 0;
  $sub68 = $mul56 + (Math_imul($mul41, -18730) | 0) + $mul57 + $mul59 | 0;
  $sub72 = $mul64 + (Math_imul($mul41, -15038) | 0) + $mul62 + $mul61 | 0;
  $mul74 = ($mul49 + $mul45 | 0) * 1136 | 0;
  $mul82 = ($mul49 - $mul45 | 0) * 11529 | 0;
  $add89 = $mul53 + $mul45 | 0;
  $mul90 = Math_imul($add89, -5461) | 0;
  $add91 = $mul56 + ($mul45 * 589 | 0) + $mul74 + $mul90 | 0;
  $mul95 = Math_imul($add89, -10217) | 0;
  $add99 = $mul64 + ($mul45 * 16154 | 0) + $mul82 + $mul95 | 0;
  $mul101 = Math_imul($mul53 + $mul49 | 0, -11086) | 0;
  $add102 = $mul74 + (Math_imul($mul49, -9222) | 0) + $mul57 + $mul101 | 0;
  $add103 = $mul90 + ($mul53 * 8728 | 0) + $mul59 + $mul101 | 0;
  $mul105 = ($mul53 - $mul49 | 0) * 3363 | 0;
  $add106 = $mul95 + ($mul53 * 25733 | 0) + $mul61 + $mul105 | 0;
  $add107 = $mul82 + (Math_imul($mul49, -6278) | 0) + $mul62 + $mul105 | 0;
  HEAP32[$wsptr$0270 >> 2] = $sub68 + $add30 >> 11;
  HEAP32[$wsptr$0270 + 480 >> 2] = $add30 - $sub68 >> 11;
  HEAP32[$wsptr$0270 + 32 >> 2] = $add91 + $add32 >> 11;
  HEAP32[$wsptr$0270 + 448 >> 2] = $add32 - $add91 >> 11;
  HEAP32[$wsptr$0270 + 64 >> 2] = $add102 + $add34 >> 11;
  HEAP32[$wsptr$0270 + 416 >> 2] = $add34 - $add102 >> 11;
  HEAP32[$wsptr$0270 + 96 >> 2] = $add103 + $add36 >> 11;
  HEAP32[$wsptr$0270 + 384 >> 2] = $add36 - $add103 >> 11;
  HEAP32[$wsptr$0270 + 128 >> 2] = $add106 + $sub37 >> 11;
  HEAP32[$wsptr$0270 + 352 >> 2] = $sub37 - $add106 >> 11;
  HEAP32[$wsptr$0270 + 160 >> 2] = $add107 + $sub35 >> 11;
  HEAP32[$wsptr$0270 + 320 >> 2] = $sub35 - $add107 >> 11;
  HEAP32[$wsptr$0270 + 192 >> 2] = $add99 + $sub33 >> 11;
  HEAP32[$wsptr$0270 + 288 >> 2] = $sub33 - $add99 >> 11;
  HEAP32[$wsptr$0270 + 224 >> 2] = $sub72 + $sub31 >> 11;
  HEAP32[$wsptr$0270 + 256 >> 2] = $sub31 - $sub72 >> 11;
  $ctr$0271 = $ctr$0271 + 1 | 0;
  if (($ctr$0271 | 0) == 8) break; else {
   $inptr$0268 = $inptr$0268 + 2 | 0;
   $quantptr$0269 = $quantptr$0269 + 4 | 0;
   $wsptr$0270 = $wsptr$0270 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1267 = 0;
 $wsptr$1266 = $workspace;
 while (1) {
  $add$ptr163 = (HEAP32[$output_buf + ($ctr$1267 << 2) >> 2] | 0) + $output_col | 0;
  $add165 = (HEAP32[$wsptr$1266 >> 2] | 0) + 16400 | 0;
  $26 = HEAP32[$wsptr$1266 + 16 >> 2] | 0;
  $shl168 = $add165 + $26 << 13;
  $shl170 = $add165 - $26 << 13;
  $27 = HEAP32[$wsptr$1266 + 8 >> 2] | 0;
  $28 = HEAP32[$wsptr$1266 + 24 >> 2] | 0;
  $mul174 = ($28 + $27 | 0) * 4433 | 0;
  $add176 = $mul174 + ($27 * 6270 | 0) | 0;
  $sub178 = $mul174 + (Math_imul($28, -15137) | 0) | 0;
  $add179 = $add176 + $shl168 | 0;
  $sub180 = $shl168 - $add176 | 0;
  $add181 = $sub178 + $shl170 | 0;
  $sub182 = $shl170 - $sub178 | 0;
  $30 = HEAP32[$wsptr$1266 + 28 >> 2] | 0;
  $31 = HEAP32[$wsptr$1266 + 20 >> 2] | 0;
  $32 = HEAP32[$wsptr$1266 + 12 >> 2] | 0;
  $33 = HEAP32[$wsptr$1266 + 4 >> 2] | 0;
  $add187 = $32 + $30 | 0;
  $add188 = $33 + $31 | 0;
  $mul190 = ($add188 + $add187 | 0) * 9633 | 0;
  $add193 = $mul190 + (Math_imul($add187, -16069) | 0) | 0;
  $add194 = $mul190 + (Math_imul($add188, -3196) | 0) | 0;
  $mul196 = Math_imul($33 + $30 | 0, -7373) | 0;
  $add200 = $mul196 + ($30 * 2446 | 0) + $add193 | 0;
  $add202 = $mul196 + ($33 * 12299 | 0) + $add194 | 0;
  $mul204 = Math_imul($32 + $31 | 0, -20995) | 0;
  $add208 = $mul204 + ($31 * 16819 | 0) + $add194 | 0;
  $add210 = $mul204 + ($32 * 25172 | 0) + $add193 | 0;
  HEAP8[$add$ptr163 >> 0] = HEAP8[$add$ptr + (($add202 + $add179 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 7 >> 0] = HEAP8[$add$ptr + (($add179 - $add202 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 1 >> 0] = HEAP8[$add$ptr + (($add210 + $add181 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 6 >> 0] = HEAP8[$add$ptr + (($add181 - $add210 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 2 >> 0] = HEAP8[$add$ptr + (($add208 + $sub182 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 5 >> 0] = HEAP8[$add$ptr + (($sub182 - $add208 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 3 >> 0] = HEAP8[$add$ptr + (($add200 + $sub180 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr163 + 4 >> 0] = HEAP8[$add$ptr + (($sub180 - $add200 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1267 = $ctr$1267 + 1 | 0;
  if (($ctr$1267 | 0) == 16) break; else $wsptr$1266 = $wsptr$1266 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jpeg_idct_islow($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $$sink = 0, $0 = 0, $17 = 0, $2 = 0, $3 = 0, $31 = 0, $32 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $add = 0, $add$ptr = 0, $add$ptr146 = 0, $add103 = 0, $add105 = 0, $add111 = 0, $add113 = 0, $add148 = 0, $add200 = 0, $add203 = 0, $add205 = 0, $add211 = 0, $add212 = 0, $add217 = 0, $add218 = 0, $add224 = 0, $add226 = 0, $add232 = 0, $add234 = 0, $add55 = 0, $add67 = 0, $add70 = 0, $add72 = 0, $add90 = 0, $add91 = 0, $add96 = 0, $add97 = 0, $ctr$0251 = 0, $ctr$1247 = 0, $inptr$0248 = 0, $mul107 = 0, $mul198 = 0, $mul214 = 0, $mul220 = 0, $mul228 = 0, $mul59 = 0, $mul63 = 0, $mul65 = 0, $mul77 = 0, $mul81 = 0, $mul85 = 0, $mul89 = 0, $mul93 = 0, $mul99 = 0, $quantptr$0249 = 0, $shl = 0, $shl192 = 0, $shl194 = 0, $shl54 = 0, $shr135$sink = 0, $sub = 0, $sub202 = 0, $sub204 = 0, $sub206 = 0, $sub69 = 0, $sub71 = 0, $sub73 = 0, $workspace = 0, $wsptr$0250 = 0, $wsptr$2246 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0251 = 8;
 $inptr$0248 = $coef_block;
 $quantptr$0249 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0250 = $workspace;
 while (1) {
  $2 = HEAP16[$inptr$0248 + 16 >> 1] | 0;
  $3 = HEAP16[$inptr$0248 + 32 >> 1] | 0;
  if (!(($2 | $3) << 16 >> 16)) if (((((HEAP16[$inptr$0248 + 48 >> 1] | 0) == 0 ? (HEAP16[$inptr$0248 + 64 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0248 + 80 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0248 + 96 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0248 + 112 >> 1] | 0) == 0 : 0) {
   $shl = Math_imul(HEAP16[$inptr$0248 >> 1] << 2, HEAP32[$quantptr$0249 >> 2] | 0) | 0;
   HEAP32[$wsptr$0250 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 32 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 64 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 96 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 128 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 160 >> 2] = $shl;
   HEAP32[$wsptr$0250 + 192 >> 2] = $shl;
   $$sink = 56;
   $shr135$sink = $shl;
  } else {
   $17 = 0;
   label = 9;
  } else {
   $17 = $3;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   $shl54 = Math_imul(HEAP16[$inptr$0248 + 64 >> 1] << 13, HEAP32[$quantptr$0249 + 128 >> 2] | 0) | 0;
   $add = Math_imul(HEAP16[$inptr$0248 >> 1] << 13, HEAP32[$quantptr$0249 >> 2] | 0) | 0 | 1024;
   $add55 = $shl54 + $add | 0;
   $sub = $add - $shl54 | 0;
   $mul59 = Math_imul(HEAP32[$quantptr$0249 + 64 >> 2] | 0, $17 << 16 >> 16) | 0;
   $mul63 = Math_imul(HEAP32[$quantptr$0249 + 192 >> 2] | 0, HEAP16[$inptr$0248 + 96 >> 1] | 0) | 0;
   $mul65 = ($mul63 + $mul59 | 0) * 4433 | 0;
   $add67 = $mul65 + ($mul59 * 6270 | 0) | 0;
   $sub69 = $mul65 + (Math_imul($mul63, -15137) | 0) | 0;
   $add70 = $add67 + $add55 | 0;
   $sub71 = $add55 - $add67 | 0;
   $add72 = $sub69 + $sub | 0;
   $sub73 = $sub - $sub69 | 0;
   $mul77 = Math_imul(HEAP32[$quantptr$0249 + 224 >> 2] | 0, HEAP16[$inptr$0248 + 112 >> 1] | 0) | 0;
   $mul81 = Math_imul(HEAP32[$quantptr$0249 + 160 >> 2] | 0, HEAP16[$inptr$0248 + 80 >> 1] | 0) | 0;
   $mul85 = Math_imul(HEAP32[$quantptr$0249 + 96 >> 2] | 0, HEAP16[$inptr$0248 + 48 >> 1] | 0) | 0;
   $mul89 = Math_imul(HEAP32[$quantptr$0249 + 32 >> 2] | 0, $2 << 16 >> 16) | 0;
   $add90 = $mul85 + $mul77 | 0;
   $add91 = $mul89 + $mul81 | 0;
   $mul93 = ($add91 + $add90 | 0) * 9633 | 0;
   $add96 = $mul93 + (Math_imul($add90, -16069) | 0) | 0;
   $add97 = $mul93 + (Math_imul($add91, -3196) | 0) | 0;
   $mul99 = Math_imul($mul89 + $mul77 | 0, -7373) | 0;
   $add103 = $mul99 + ($mul77 * 2446 | 0) + $add96 | 0;
   $add105 = $mul99 + ($mul89 * 12299 | 0) + $add97 | 0;
   $mul107 = Math_imul($mul85 + $mul81 | 0, -20995) | 0;
   $add111 = $mul107 + ($mul81 * 16819 | 0) + $add97 | 0;
   $add113 = $mul107 + ($mul85 * 25172 | 0) + $add96 | 0;
   HEAP32[$wsptr$0250 >> 2] = $add105 + $add70 >> 11;
   HEAP32[$wsptr$0250 + 224 >> 2] = $add70 - $add105 >> 11;
   HEAP32[$wsptr$0250 + 32 >> 2] = $add113 + $add72 >> 11;
   HEAP32[$wsptr$0250 + 192 >> 2] = $add72 - $add113 >> 11;
   HEAP32[$wsptr$0250 + 64 >> 2] = $add111 + $sub73 >> 11;
   HEAP32[$wsptr$0250 + 160 >> 2] = $sub73 - $add111 >> 11;
   HEAP32[$wsptr$0250 + 96 >> 2] = $add103 + $sub71 >> 11;
   $$sink = 32;
   $shr135$sink = $sub71 - $add103 >> 11;
  }
  HEAP32[$wsptr$0250 + ($$sink << 2) >> 2] = $shr135$sink;
  if ($ctr$0251 >>> 0 > 1) {
   $ctr$0251 = $ctr$0251 + -1 | 0;
   $inptr$0248 = $inptr$0248 + 2 | 0;
   $quantptr$0249 = $quantptr$0249 + 4 | 0;
   $wsptr$0250 = $wsptr$0250 + 4 | 0;
  } else break;
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1247 = 0;
 $wsptr$2246 = $workspace;
 while (1) {
  $add$ptr146 = (HEAP32[$output_buf + ($ctr$1247 << 2) >> 2] | 0) + $output_col | 0;
  $add148 = (HEAP32[$wsptr$2246 >> 2] | 0) + 16400 | 0;
  $31 = HEAP32[$wsptr$2246 + 4 >> 2] | 0;
  $32 = HEAP32[$wsptr$2246 + 8 >> 2] | 0;
  if (!($31 | $32)) if (((((HEAP32[$wsptr$2246 + 12 >> 2] | 0) == 0 ? (HEAP32[$wsptr$2246 + 16 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2246 + 20 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2246 + 24 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2246 + 28 >> 2] | 0) == 0 : 0) {
   $41 = HEAP8[$add$ptr + ($add148 >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 >> 0] = $41;
   _memset($add$ptr146 + 1 | 0, $41 | 0, 7) | 0;
  } else {
   $44 = 0;
   label = 19;
  } else {
   $44 = $32;
   label = 19;
  }
  if ((label | 0) == 19) {
   label = 0;
   $42 = HEAP32[$wsptr$2246 + 16 >> 2] | 0;
   $shl192 = $42 + $add148 << 13;
   $shl194 = $add148 - $42 << 13;
   $43 = HEAP32[$wsptr$2246 + 24 >> 2] | 0;
   $mul198 = ($43 + $44 | 0) * 4433 | 0;
   $add200 = $mul198 + ($44 * 6270 | 0) | 0;
   $sub202 = $mul198 + (Math_imul($43, -15137) | 0) | 0;
   $add203 = $add200 + $shl192 | 0;
   $sub204 = $shl192 - $add200 | 0;
   $add205 = $sub202 + $shl194 | 0;
   $sub206 = $shl194 - $sub202 | 0;
   $46 = HEAP32[$wsptr$2246 + 28 >> 2] | 0;
   $47 = HEAP32[$wsptr$2246 + 20 >> 2] | 0;
   $48 = HEAP32[$wsptr$2246 + 12 >> 2] | 0;
   $add211 = $48 + $46 | 0;
   $add212 = $47 + $31 | 0;
   $mul214 = ($add211 + $add212 | 0) * 9633 | 0;
   $add217 = $mul214 + (Math_imul($add211, -16069) | 0) | 0;
   $add218 = $mul214 + (Math_imul($add212, -3196) | 0) | 0;
   $mul220 = Math_imul($46 + $31 | 0, -7373) | 0;
   $add224 = $mul220 + ($46 * 2446 | 0) + $add217 | 0;
   $add226 = $mul220 + ($31 * 12299 | 0) + $add218 | 0;
   $mul228 = Math_imul($48 + $47 | 0, -20995) | 0;
   $add232 = $mul228 + ($47 * 16819 | 0) + $add218 | 0;
   $add234 = $mul228 + ($48 * 25172 | 0) + $add217 | 0;
   HEAP8[$add$ptr146 >> 0] = HEAP8[$add$ptr + (($add226 + $add203 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 7 >> 0] = HEAP8[$add$ptr + (($add203 - $add226 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 1 >> 0] = HEAP8[$add$ptr + (($add234 + $add205 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 6 >> 0] = HEAP8[$add$ptr + (($add205 - $add234 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 2 >> 0] = HEAP8[$add$ptr + (($add232 + $sub206 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 5 >> 0] = HEAP8[$add$ptr + (($sub206 - $add232 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 3 >> 0] = HEAP8[$add$ptr + (($add224 + $sub204 | 0) >>> 18 & 1023) >> 0] | 0;
   HEAP8[$add$ptr146 + 4 >> 0] = HEAP8[$add$ptr + (($sub204 - $add224 | 0) >>> 18 & 1023) >> 0] | 0;
  }
  $ctr$1247 = $ctr$1247 + 1 | 0;
  if (($ctr$1247 | 0) == 8) break; else $wsptr$2246 = $wsptr$2246 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _decode_mcu_AC_first_63($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $40 = 0, $EOBRUN$0 = 0, $EOBRUN$1 = 0, $EOBRUN9 = 0, $add = 0, $and = 0, $and51 = 0, $and67 = 0, $bits_left$093 = 0, $bits_left$1 = 0, $bits_left$2 = 0, $bits_left$4$ph = 0, $bits_left$5 = 0, $bits_left$6 = 0, $bits_left$7 = 0, $bits_left$8 = 0, $bits_left$i$i = 0, $bits_left18 = 0, $bits_left30 = 0, $br_state = 0, $bytes_in_buffer15 = 0, $call41 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $discarded_bytes$i$i = 0, $get_buffer$092 = 0, $get_buffer$1 = 0, $get_buffer$2 = 0, $get_buffer$4$ph = 0, $get_buffer$5 = 0, $get_buffer$6 = 0, $get_buffer$7 = 0, $get_buffer$8 = 0, $get_buffer16 = 0, $get_buffer29 = 0, $k$091 = 0, $k$1 = 0, $nb$0 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go118 = 0, $retval$2 = 0, $s$2$ph = 0, $shl83 = 0, $src = 0, $sub64 = 0, $sub94 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $br_state = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $4 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $4 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$4 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$2 = 0;
   STACKTOP = sp;
   return $retval$2 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 if (!(HEAP32[$0 + 40 >> 2] | 0)) {
  $EOBRUN9 = $0 + 20 | 0;
  $12 = HEAP32[$EOBRUN9 >> 2] | 0;
  if (!$12) {
   HEAP32[$br_state + 16 >> 2] = $cinfo;
   $src = $cinfo + 24 | 0;
   $13 = HEAP32[$src >> 2] | 0;
   HEAP32[$br_state >> 2] = HEAP32[$13 >> 2];
   $bytes_in_buffer15 = $br_state + 4 | 0;
   HEAP32[$bytes_in_buffer15 >> 2] = HEAP32[$13 + 4 >> 2];
   $get_buffer16 = $0 + 12 | 0;
   $17 = HEAP32[$get_buffer16 >> 2] | 0;
   $bits_left18 = $0 + 16 | 0;
   $18 = HEAP32[$bits_left18 >> 2] | 0;
   $19 = HEAP32[$cinfo + 416 >> 2] | 0;
   $20 = HEAP32[$cinfo + 424 >> 2] | 0;
   $21 = HEAP32[$cinfo + 432 >> 2] | 0;
   $22 = HEAP32[$MCU_data >> 2] | 0;
   $23 = HEAP32[$0 + 64 >> 2] | 0;
   $24 = HEAP32[$cinfo + 412 >> 2] | 0;
   L18 : do if (($24 | 0) <= ($19 | 0)) {
    $get_buffer29 = $br_state + 8 | 0;
    $bits_left30 = $br_state + 12 | 0;
    $bits_left$093 = $18;
    $get_buffer$092 = $17;
    $k$091 = $24;
    L20 : while (1) {
     if (($bits_left$093 | 0) < 8) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$092, $bits_left$093, 0) | 0)) {
       $retval$2 = 0;
       label = 36;
       break;
      }
      $25 = HEAP32[$get_buffer29 >> 2] | 0;
      $26 = HEAP32[$bits_left30 >> 2] | 0;
      if (($26 | 0) < 8) {
       $bits_left$2 = $26;
       $get_buffer$2 = $25;
       $nb$0 = 1;
       label = 19;
      } else {
       $bits_left$1 = $26;
       $get_buffer$1 = $25;
       label = 17;
      }
     } else {
      $bits_left$1 = $bits_left$093;
      $get_buffer$1 = $get_buffer$092;
      label = 17;
     }
     if ((label | 0) == 17) {
      label = 0;
      $and = $get_buffer$1 >> $bits_left$1 + -8 & 255;
      $27 = HEAP32[$23 + 144 + ($and << 2) >> 2] | 0;
      if (!$27) {
       $bits_left$2 = $bits_left$1;
       $get_buffer$2 = $get_buffer$1;
       $nb$0 = 9;
       label = 19;
      } else {
       $bits_left$4$ph = $bits_left$1 - $27 | 0;
       $get_buffer$4$ph = $get_buffer$1;
       $s$2$ph = HEAPU8[$23 + 1168 + $and >> 0] | 0;
      }
     }
     if ((label | 0) == 19) {
      label = 0;
      $call41 = _jpeg_huff_decode($br_state, $get_buffer$2, $bits_left$2, $23, $nb$0) | 0;
      if (($call41 | 0) < 0) {
       $retval$2 = 0;
       label = 36;
       break;
      }
      $bits_left$4$ph = HEAP32[$bits_left30 >> 2] | 0;
      $get_buffer$4$ph = HEAP32[$get_buffer29 >> 2] | 0;
      $s$2$ph = $call41;
     }
     $trunc = $s$2$ph >>> 4;
     $and51 = $s$2$ph & 15;
     if (!$and51) {
      switch ($trunc & 268435455 | 0) {
      case 0:
       {
        $EOBRUN$0 = 0;
        $bits_left$8 = $bits_left$4$ph;
        $get_buffer$8 = $get_buffer$4$ph;
        break L18;
        break;
       }
      case 15:
       break;
      default:
       {
        label = 27;
        break L20;
       }
      }
      $bits_left$7 = $bits_left$4$ph;
      $get_buffer$7 = $get_buffer$4$ph;
      $k$1 = $k$091 + 15 | 0;
     } else {
      $add = $trunc + $k$091 | 0;
      if (($bits_left$4$ph | 0) < ($and51 | 0)) {
       if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $and51) | 0)) {
        $retval$2 = 0;
        label = 36;
        break;
       }
       $bits_left$5 = HEAP32[$bits_left30 >> 2] | 0;
       $get_buffer$5 = HEAP32[$get_buffer29 >> 2] | 0;
      } else {
       $bits_left$5 = $bits_left$4$ph;
       $get_buffer$5 = $get_buffer$4$ph;
      }
      $sub64 = $bits_left$5 - $and51 | 0;
      $33 = HEAP32[3152 + ($and51 << 2) >> 2] | 0;
      $and67 = $get_buffer$5 >> $sub64 & $33;
      HEAP16[$22 + (HEAP32[$21 + ($add << 2) >> 2] << 1) >> 1] = $and67 - (($and67 | 0) > (HEAP32[3152 + ($and51 + -1 << 2) >> 2] | 0) ? 0 : $33) << $20;
      $bits_left$7 = $sub64;
      $get_buffer$7 = $get_buffer$5;
      $k$1 = $add;
     }
     if (($k$1 | 0) < ($19 | 0)) {
      $bits_left$093 = $bits_left$7;
      $get_buffer$092 = $get_buffer$7;
      $k$091 = $k$1 + 1 | 0;
     } else {
      $EOBRUN$0 = 0;
      $bits_left$8 = $bits_left$7;
      $get_buffer$8 = $get_buffer$7;
      break L18;
     }
    }
    if ((label | 0) == 27) {
     $shl83 = 1 << $trunc;
     do if (($bits_left$4$ph | 0) < ($trunc | 0)) if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $trunc) | 0)) {
      $retval$2 = 0;
      STACKTOP = sp;
      return $retval$2 | 0;
     } else {
      $bits_left$6 = HEAP32[$bits_left30 >> 2] | 0;
      $get_buffer$6 = HEAP32[$get_buffer29 >> 2] | 0;
      break;
     } else {
      $bits_left$6 = $bits_left$4$ph;
      $get_buffer$6 = $get_buffer$4$ph;
     } while (0);
     $sub94 = $bits_left$6 - $trunc | 0;
     $EOBRUN$0 = $shl83 + -1 + ($get_buffer$6 >> $sub94 & HEAP32[3152 + ($trunc << 2) >> 2]) | 0;
     $bits_left$8 = $sub94;
     $get_buffer$8 = $get_buffer$6;
     break;
    } else if ((label | 0) == 36) {
     STACKTOP = sp;
     return $retval$2 | 0;
    }
   } else {
    $EOBRUN$0 = 0;
    $bits_left$8 = $18;
    $get_buffer$8 = $17;
   } while (0);
   $40 = HEAP32[$src >> 2] | 0;
   HEAP32[$40 >> 2] = HEAP32[$br_state >> 2];
   HEAP32[$40 + 4 >> 2] = HEAP32[$bytes_in_buffer15 >> 2];
   HEAP32[$get_buffer16 >> 2] = $get_buffer$8;
   HEAP32[$bits_left18 >> 2] = $bits_left$8;
   $EOBRUN$1 = $EOBRUN$0;
  } else $EOBRUN$1 = $12 + -1 | 0;
  HEAP32[$EOBRUN9 >> 2] = $EOBRUN$1;
 }
 $restarts_to_go118 = $0 + 44 | 0;
 HEAP32[$restarts_to_go118 >> 2] = (HEAP32[$restarts_to_go118 >> 2] | 0) + -1;
 $retval$2 = 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _start_pass($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $39 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $53 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $Ah154 = 0, $Ah75 = 0, $Ah96$pre$phiZ2D = 0, $Al91 = 0, $Se = 0, $Ss = 0, $a = 0, $arrayidx170 = 0, $arrayidx206 = 0, $arrayidx72 = 0, $c = 0, $call = 0, $call211 = 0, $ci$0137 = 0, $ci$1130 = 0, $cmp100 = 0, $cmp119 = 0, $coef_bits = 0, $coefi$0135 = 0, $comps_in_scan143$phi$trans$insert = 0, $comps_in_scan143$pre$phiZ2D = 0, $comps_in_scan45 = 0, $ct = 0, $decode_mcu = 0, $lim_Se184 = 0, $mem = 0, $progressive_mode = 0, $restart_interval = 0, $restarts_to_go = 0, $sub = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $progressive_mode = $cinfo + 224 | 0;
 $Ss = $cinfo + 412 | 0;
 $2 = HEAP32[$Ss >> 2] | 0;
 $cmp119 = ($2 | 0) == 0;
 do if (HEAP32[$progressive_mode >> 2] | 0) {
  $Se = $cinfo + 416 | 0;
  $3 = HEAP32[$Se >> 2] | 0;
  if ($cmp119) if (!$3) label = 7; else label = 11; else if ((($3 | 0) >= ($2 | 0) ? ($3 | 0) <= (HEAP32[$cinfo + 436 >> 2] | 0) : 0) ? (HEAP32[$cinfo + 340 >> 2] | 0) == 1 : 0) label = 7; else label = 11;
  do if ((label | 0) == 7) {
   $6 = HEAP32[$cinfo + 420 >> 2] | 0;
   if ($6) {
    $sub = $6 + -1 | 0;
    if (($sub | 0) == (HEAP32[$cinfo + 424 >> 2] | 0)) $8 = $sub; else {
     label = 11;
     break;
    }
   } else $8 = HEAP32[$cinfo + 424 >> 2] | 0;
   if (($8 | 0) > 13) label = 11;
  } while (0);
  if ((label | 0) == 11) {
   $9 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$9 + 20 >> 2] = 17;
   HEAP32[$9 + 24 >> 2] = $2;
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAP32[$Se >> 2];
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 32 >> 2] = HEAP32[$cinfo + 420 >> 2];
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 36 >> 2] = HEAP32[$cinfo + 424 >> 2];
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
  $comps_in_scan45 = $cinfo + 340 | 0;
  $18 = HEAP32[$comps_in_scan45 >> 2] | 0;
  if (($18 | 0) > 0) {
   $coef_bits = $cinfo + 160 | 0;
   $Ah75 = $cinfo + 420 | 0;
   $Al91 = $cinfo + 424 | 0;
   $ci$0137 = 0;
   do {
    $20 = HEAP32[(HEAP32[$cinfo + 344 + ($ci$0137 << 2) >> 2] | 0) + 4 >> 2] | 0;
    $21 = HEAP32[$coef_bits >> 2] | 0;
    $22 = HEAP32[$Ss >> 2] | 0;
    if ($22) if ((HEAP32[$21 + ($20 << 8) >> 2] | 0) < 0) {
     $24 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$24 + 20 >> 2] = 118;
     HEAP32[$24 + 24 >> 2] = $20;
     HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
     $29 = HEAP32[$Ss >> 2] | 0;
    } else $29 = $22; else $29 = 0;
    if (($29 | 0) <= (HEAP32[$Se >> 2] | 0)) {
     $coefi$0135 = $29;
     while (1) {
      $arrayidx72 = $21 + ($20 << 8) + ($coefi$0135 << 2) | 0;
      $30 = HEAP32[$arrayidx72 >> 2] | 0;
      if ((HEAP32[$Ah75 >> 2] | 0) != ((($30 | 0) > 0 ? $30 : 0) | 0)) {
       $33 = HEAP32[$cinfo >> 2] | 0;
       HEAP32[$33 + 20 >> 2] = 118;
       HEAP32[$33 + 24 >> 2] = $20;
       HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $coefi$0135;
       FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
      }
      HEAP32[$arrayidx72 >> 2] = HEAP32[$Al91 >> 2];
      if (($coefi$0135 | 0) < (HEAP32[$Se >> 2] | 0)) $coefi$0135 = $coefi$0135 + 1 | 0; else break;
     }
    }
    $ci$0137 = $ci$0137 + 1 | 0;
    $39 = HEAP32[$comps_in_scan45 >> 2] | 0;
   } while (($ci$0137 | 0) < ($39 | 0));
   $74 = $39;
   $Ah96$pre$phiZ2D = $Ah75;
  } else {
   $74 = $18;
   $Ah96$pre$phiZ2D = $cinfo + 420 | 0;
  }
  $cmp100 = (HEAP32[$Ss >> 2] | 0) == 0;
  $decode_mcu = $0 + 4 | 0;
  if (!(HEAP32[$Ah96$pre$phiZ2D >> 2] | 0)) if ($cmp100) {
   HEAP32[$decode_mcu >> 2] = 52;
   $48 = $74;
   $comps_in_scan143$pre$phiZ2D = $comps_in_scan45;
   break;
  } else {
   HEAP32[$decode_mcu >> 2] = 53;
   $48 = $74;
   $comps_in_scan143$pre$phiZ2D = $comps_in_scan45;
   break;
  } else if ($cmp100) {
   HEAP32[$decode_mcu >> 2] = 54;
   $48 = $74;
   $comps_in_scan143$pre$phiZ2D = $comps_in_scan45;
   break;
  } else {
   HEAP32[$decode_mcu >> 2] = 55;
   $48 = $74;
   $comps_in_scan143$pre$phiZ2D = $comps_in_scan45;
   break;
  }
 } else {
  if (($cmp119 ? (HEAP32[$cinfo + 420 >> 2] | 0) == 0 : 0) ? (HEAP32[$cinfo + 424 >> 2] | 0) == 0 : 0) {
   $44 = HEAP32[$cinfo + 416 >> 2] | 0;
   if (($44 | 0) < 64 ? ($44 | 0) != (HEAP32[$cinfo + 436 >> 2] | 0) : 0) label = 36;
  } else label = 36;
  if ((label | 0) == 36) {
   $46 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$46 + 20 >> 2] = 125;
   FUNCTION_TABLE_vii[HEAP32[$46 + 4 >> 2] & 255]($cinfo, -1);
  }
  HEAP32[$0 + 4 >> 2] = 56;
  $comps_in_scan143$phi$trans$insert = $cinfo + 340 | 0;
  $48 = HEAP32[$comps_in_scan143$phi$trans$insert >> 2] | 0;
  $comps_in_scan143$pre$phiZ2D = $comps_in_scan143$phi$trans$insert;
 } while (0);
 if (($48 | 0) <= 0) {
  $c = $0 + 12 | 0;
  HEAP32[$c >> 2] = 0;
  $a = $0 + 16 | 0;
  HEAP32[$a >> 2] = 0;
  $ct = $0 + 20 | 0;
  HEAP32[$ct >> 2] = -16;
  $restart_interval = $cinfo + 280 | 0;
  $73 = HEAP32[$restart_interval >> 2] | 0;
  $restarts_to_go = $0 + 56 | 0;
  HEAP32[$restarts_to_go >> 2] = $73;
  return;
 }
 $lim_Se184 = $cinfo + 436 | 0;
 $Ah154 = $cinfo + 420 | 0;
 $mem = $cinfo + 4 | 0;
 $ci$1130 = 0;
 do {
  $49 = HEAP32[$cinfo + 344 + ($ci$1130 << 2) >> 2] | 0;
  if (HEAP32[$progressive_mode >> 2] | 0) if (!(HEAP32[$Ss >> 2] | 0)) {
   if (!(HEAP32[$Ah154 >> 2] | 0)) label = 43;
  } else label = 50; else label = 43;
  do if ((label | 0) == 43) {
   label = 0;
   $53 = HEAP32[$49 + 20 >> 2] | 0;
   if ($53 >>> 0 > 15) {
    $55 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$55 + 20 >> 2] = 50;
    HEAP32[$55 + 24 >> 2] = $53;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
   $arrayidx170 = $0 + 60 + ($53 << 2) | 0;
   $58 = HEAP32[$arrayidx170 >> 2] | 0;
   if (!$58) {
    $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 64) | 0;
    HEAP32[$arrayidx170 >> 2] = $call;
    $61 = $call;
   } else $61 = $58;
   dest = $61;
   stop = dest + 64 | 0;
   do {
    HEAP8[dest >> 0] = 0;
    dest = dest + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$0 + 24 + ($ci$1130 << 2) >> 2] = 0;
   HEAP32[$0 + 40 + ($ci$1130 << 2) >> 2] = 0;
   if (!(HEAP32[$progressive_mode >> 2] | 0)) if (!(HEAP32[$lim_Se184 >> 2] | 0)) break; else {
    label = 50;
    break;
   } else if (!(HEAP32[$Ss >> 2] | 0)) break; else {
    label = 50;
    break;
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0;
   $63 = HEAP32[$49 + 24 >> 2] | 0;
   if ($63 >>> 0 > 15) {
    $65 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$65 + 20 >> 2] = 50;
    HEAP32[$65 + 24 >> 2] = $63;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
   $arrayidx206 = $0 + 124 + ($63 << 2) | 0;
   $68 = HEAP32[$arrayidx206 >> 2] | 0;
   if (!$68) {
    $call211 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 256) | 0;
    HEAP32[$arrayidx206 >> 2] = $call211;
    $71 = $call211;
   } else $71 = $68;
   _memset($71 | 0, 0, 256) | 0;
  }
  $ci$1130 = $ci$1130 + 1 | 0;
 } while (($ci$1130 | 0) < (HEAP32[$comps_in_scan143$pre$phiZ2D >> 2] | 0));
 $c = $0 + 12 | 0;
 HEAP32[$c >> 2] = 0;
 $a = $0 + 16 | 0;
 HEAP32[$a >> 2] = 0;
 $ct = $0 + 20 | 0;
 HEAP32[$ct >> 2] = -16;
 $restart_interval = $cinfo + 280 | 0;
 $73 = HEAP32[$restart_interval >> 2] | 0;
 $restarts_to_go = $0 + 56 | 0;
 HEAP32[$restarts_to_go >> 2] = $73;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call26 = 0.0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  } else {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0) ? ($35 = HEAP32[$__g_end >> 2] | 0, ($35 - $__g | 0) < 160) : 0) {
  $36 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $35 + 4;
  HEAP32[$35 >> 2] = $36;
 }
 $call26 = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $call26;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 } else $53 = 1;
 do if ($44) {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($53) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $53 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i12 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i100 = 0, $cond$i65 = 0, $cond$i91 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i32 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i53 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $vararg_buffer = sp + 264 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 292 | 0;
 $ref$tmp = sp + 280 | 0;
 $__a_end = sp + 276 | 0;
 $__g = sp;
 $__g_end = sp + 272 | 0;
 $__dc = sp + 268 | 0;
 HEAP32[$__grouping >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 43072) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 10896, 10922, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i12 = 0;
 while (1) {
  if (($__i$0$i$i12 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i12 << 2) >> 2] = 0;
  $__i$0$i$i12 = $__i$0$i$i12 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $45 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if ($5) {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i32 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i$i$i32 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i32, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $36 = 0;
    $46 = 1;
   } else {
    $22 = $5;
    $36 = $45;
    $46 = 0;
   }
  } else {
   $22 = 0;
   $36 = 0;
   $46 = 1;
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if ($10) {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i13$i$i53 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i53, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($46) {
    $47 = $10;
    break;
   } else {
    $39 = $10;
    $__a$2 = $__a$0;
    break L12;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   }
  } else label = 22; while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;
    $__a$2 = $__a$0;
    break;
   } else $47 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i65 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i65 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i91 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i91 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i91, 0);
   $cond$i$i100 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i100 + $cond$i65;
   $__a$1 = $cond$i$i100;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $39 = $47;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 127]($22) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $45 = $36;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 35941, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if ($22) {
  $34 = HEAP32[$22 + 12 >> 2] | 0;
  if (($34 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $48 = 1;
  } else $48 = 0;
 } else $48 = 1;
 do if ($39) {
  $40 = HEAP32[$39 + 12 >> 2] | 0;
  if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$40 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($48) break; else {
   label = 52;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  }
 } else label = 50; while (0);
 if ((label | 0) == 50 ? $48 : 0) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i99 = 0, $cond$i64 = 0, $cond$i90 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer = sp + 192 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 220 | 0;
 $ref$tmp = sp + 208 | 0;
 $__a_end = sp + 204 | 0;
 $__g = sp;
 $__g_end = sp + 200 | 0;
 $__dc = sp + 196 | 0;
 HEAP32[$__grouping >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 43040) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 10896, 10922, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $45 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if ($5) {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $36 = 0;
    $46 = 1;
   } else {
    $22 = $5;
    $36 = $45;
    $46 = 0;
   }
  } else {
   $22 = 0;
   $36 = 0;
   $46 = 1;
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if ($10) {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i13$i$i52 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i52, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($46) {
    $47 = $10;
    break;
   } else {
    $39 = $10;
    $__a$2 = $__a$0;
    break L12;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   }
  } else label = 22; while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;
    $__a$2 = $__a$0;
    break;
   } else $47 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i64 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i64 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i64 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i90 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i90 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i90, 0);
   $cond$i$i99 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i99 + $cond$i64;
   $__a$1 = $cond$i$i99;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $39 = $47;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 127]($22) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $45 = $36;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 35941, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if ($22) {
  $34 = HEAP32[$22 + 12 >> 2] | 0;
  if (($34 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $48 = 1;
  } else $48 = 0;
 } else $48 = 1;
 do if ($39) {
  $40 = HEAP32[$39 + 12 >> 2] | 0;
  if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$40 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($48) break; else {
   label = 52;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  }
 } else label = 50; while (0);
 if ((label | 0) == 50 ? $48 : 0) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i102 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i103 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i81 = 0, $call$i84 = 0, $call$i87 = 0, $call$i90 = 0, $call$i99 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i104 = 0, $incdec$ptr21 = 0, $incdec$ptr87 = 0, $incdec$ptr91 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 $call$i81 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43080) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 20 >> 2] & 255]($__grouping, $call$i81);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i84 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $call$i84;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1 ? (HEAP8[$__nf$0 >> 0] | 0) == 48 : 0) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i87 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 4;
  HEAP32[$7 >> 2] = $call$i87;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i90 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 4;
  HEAP32[$10 >> 2] = $call$i90;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($conv25, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   if (!(_isdigit_l($conv34, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0) {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i99 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 16 >> 2] & 127]($call$i81) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $call$i99;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 4;
   HEAP32[$32 >> 2] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) {
   $$pre$phiZ2D = $call$i;
   $41 = $add$ptr78;
  } else {
   $__first$addr$0$i$i102 = $add$ptr78;
   $__last$addr$0$i$i103 = $21;
   while (1) {
    $incdec$ptr$i$i104 = $__last$addr$0$i$i103 + -4 | 0;
    if ($__first$addr$0$i$i102 >>> 0 >= $incdec$ptr$i$i104 >>> 0) {
     $$pre$phiZ2D = $call$i;
     $41 = $21;
     break L19;
    }
    $22 = HEAP32[$__first$addr$0$i$i102 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i102 >> 2] = HEAP32[$incdec$ptr$i$i104 >> 2];
    HEAP32[$incdec$ptr$i$i104 >> 2] = $22;
    $__first$addr$0$i$i102 = $__first$addr$0$i$i102 + 4 | 0;
    $__last$addr$0$i$i103 = $incdec$ptr$i$i104;
   }
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $add$ptr = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $$pre$phiZ2D = $call$i;
  $41 = $add$ptr;
 } while (0);
 $42 = $41;
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $39 = $42;
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 63]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr91 = $37 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr91;
  HEAP32[$37 >> 2] = $call$i111;
  $42 = $incdec$ptr91;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 12 >> 2] & 127]($call$i81) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr87 = $35 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr87;
  HEAP32[$35 >> 2] = $call$i120;
  $39 = $incdec$ptr87;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nf$3, $__ne, $39) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _jpeg_idct_11x11($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $29 = 0, $30 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $add = 0, $add$ptr = 0, $add$ptr131 = 0, $add142 = 0, $add146 = 0, $add147 = 0, $add153 = 0, $add156 = 0, $add157 = 0, $add163 = 0, $add17 = 0, $add170 = 0, $add179 = 0, $add192 = 0, $add195 = 0, $add198 = 0, $add204 = 0, $add21 = 0, $add22 = 0, $add28 = 0, $add31 = 0, $add32 = 0, $add38 = 0, $add57 = 0, $add66 = 0, $add79 = 0, $add82 = 0, $add85 = 0, $add91 = 0, $ctr$0247 = 0, $ctr$1243 = 0, $inptr$0244 = 0, $mul13 = 0, $mul141 = 0, $mul16 = 0, $mul173 = 0, $mul174 = 0, $mul176 = 0, $mul194 = 0, $mul44 = 0, $mul48 = 0, $mul5 = 0, $mul52 = 0, $mul56 = 0, $mul60 = 0, $mul61 = 0, $mul63 = 0, $mul81 = 0, $mul9 = 0, $quantptr$0245 = 0, $shl134 = 0, $sub144 = 0, $sub150 = 0, $sub159 = 0, $sub165 = 0, $sub183 = 0, $sub186 = 0, $sub19 = 0, $sub25 = 0, $sub34 = 0, $sub40 = 0, $sub70 = 0, $sub73 = 0, $workspace = 0, $wsptr$0246 = 0, $wsptr$1242 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0247 = 0;
 $inptr$0244 = $coef_block;
 $quantptr$0245 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0246 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0244 >> 1] << 13, HEAP32[$quantptr$0245 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0245 + 64 >> 2] | 0, HEAP16[$inptr$0244 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0245 + 128 >> 2] | 0, HEAP16[$inptr$0244 + 64 >> 1] | 0) | 0;
  $mul13 = Math_imul(HEAP32[$quantptr$0245 + 192 >> 2] | 0, HEAP16[$inptr$0244 + 96 >> 1] | 0) | 0;
  $mul16 = ($mul9 - $mul5 | 0) * 3529 | 0;
  $add17 = $mul13 + $mul5 | 0;
  $sub19 = $add17 - $mul9 | 0;
  $add21 = ($sub19 * 11116 | 0) + $add | 0;
  $add22 = $add21 + (($mul9 - $mul13 | 0) * 20862 | 0) | 0;
  $sub25 = $add22 + (Math_imul($mul9, -14924) | 0) + $mul16 | 0;
  $add28 = $add22 + ($mul13 * 17333 | 0) | 0;
  $add31 = $add21 + $mul16 + (Math_imul($mul5, -12399) | 0) | 0;
  $add32 = $add21 + (Math_imul($add17, -9467) | 0) | 0;
  $sub34 = $add32 + (Math_imul($mul13, -6461) | 0) | 0;
  $add38 = ($mul9 * 15929 | 0) + (Math_imul($mul5, -11395) | 0) + $add32 | 0;
  $sub40 = (Math_imul($sub19, -11585) | 0) + $add | 0;
  $mul44 = Math_imul(HEAP32[$quantptr$0245 + 32 >> 2] | 0, HEAP16[$inptr$0244 + 16 >> 1] | 0) | 0;
  $mul48 = Math_imul(HEAP32[$quantptr$0245 + 96 >> 2] | 0, HEAP16[$inptr$0244 + 48 >> 1] | 0) | 0;
  $mul52 = Math_imul(HEAP32[$quantptr$0245 + 160 >> 2] | 0, HEAP16[$inptr$0244 + 80 >> 1] | 0) | 0;
  $mul56 = Math_imul(HEAP32[$quantptr$0245 + 224 >> 2] | 0, HEAP16[$inptr$0244 + 112 >> 1] | 0) | 0;
  $add57 = $mul48 + $mul44 | 0;
  $mul60 = ($mul52 + $add57 + $mul56 | 0) * 3264 | 0;
  $mul61 = $add57 * 7274 | 0;
  $mul63 = ($mul52 + $mul44 | 0) * 5492 | 0;
  $add66 = $mul60 + (($mul56 + $mul44 | 0) * 3e3 | 0) | 0;
  $sub70 = $mul61 + (Math_imul($mul44, -7562) | 0) + $mul63 + $add66 | 0;
  $sub73 = $mul60 + (Math_imul($mul52 + $mul48 | 0, -9527) | 0) | 0;
  $add79 = $mul63 + (Math_imul($mul52, -9766) | 0) + $sub73 | 0;
  $mul81 = Math_imul($mul56 + $mul48 | 0, -14731) | 0;
  $add82 = $mul61 + ($mul48 * 16984 | 0) + $mul81 + $sub73 | 0;
  $add85 = $mul81 + ($mul56 * 17223 | 0) + $add66 | 0;
  $add91 = ($mul52 * 8203 | 0) + (Math_imul($mul48, -12019) | 0) + (Math_imul($mul56, -13802) | 0) + $mul60 | 0;
  HEAP32[$wsptr$0246 >> 2] = $sub70 + $add28 >> 11;
  HEAP32[$wsptr$0246 + 320 >> 2] = $add28 - $sub70 >> 11;
  HEAP32[$wsptr$0246 + 32 >> 2] = $add82 + $sub25 >> 11;
  HEAP32[$wsptr$0246 + 288 >> 2] = $sub25 - $add82 >> 11;
  HEAP32[$wsptr$0246 + 64 >> 2] = $add79 + $sub34 >> 11;
  HEAP32[$wsptr$0246 + 256 >> 2] = $sub34 - $add79 >> 11;
  HEAP32[$wsptr$0246 + 96 >> 2] = $add85 + $add31 >> 11;
  HEAP32[$wsptr$0246 + 224 >> 2] = $add31 - $add85 >> 11;
  HEAP32[$wsptr$0246 + 128 >> 2] = $add91 + $add38 >> 11;
  HEAP32[$wsptr$0246 + 192 >> 2] = $add38 - $add91 >> 11;
  HEAP32[$wsptr$0246 + 160 >> 2] = $sub40 >> 11;
  $ctr$0247 = $ctr$0247 + 1 | 0;
  if (($ctr$0247 | 0) == 8) break; else {
   $inptr$0244 = $inptr$0244 + 2 | 0;
   $quantptr$0245 = $quantptr$0245 + 4 | 0;
   $wsptr$0246 = $wsptr$0246 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1243 = 0;
 $wsptr$1242 = $workspace;
 while (1) {
  $add$ptr131 = (HEAP32[$output_buf + ($ctr$1243 << 2) >> 2] | 0) + $output_col | 0;
  $shl134 = (HEAP32[$wsptr$1242 >> 2] << 13) + 134348800 | 0;
  $29 = HEAP32[$wsptr$1242 + 8 >> 2] | 0;
  $30 = HEAP32[$wsptr$1242 + 16 >> 2] | 0;
  $31 = HEAP32[$wsptr$1242 + 24 >> 2] | 0;
  $mul141 = ($30 - $29 | 0) * 3529 | 0;
  $add142 = $31 + $29 | 0;
  $sub144 = $add142 - $30 | 0;
  $add146 = ($sub144 * 11116 | 0) + $shl134 | 0;
  $add147 = $add146 + (($30 - $31 | 0) * 20862 | 0) | 0;
  $sub150 = $add147 + (Math_imul($30, -14924) | 0) + $mul141 | 0;
  $add153 = $add147 + ($31 * 17333 | 0) | 0;
  $add156 = $add146 + $mul141 + (Math_imul($29, -12399) | 0) | 0;
  $add157 = $add146 + (Math_imul($add142, -9467) | 0) | 0;
  $sub159 = $add157 + (Math_imul($31, -6461) | 0) | 0;
  $add163 = ($30 * 15929 | 0) + (Math_imul($29, -11395) | 0) + $add157 | 0;
  $sub165 = (Math_imul($sub144, -11585) | 0) + $shl134 | 0;
  $37 = HEAP32[$wsptr$1242 + 4 >> 2] | 0;
  $38 = HEAP32[$wsptr$1242 + 12 >> 2] | 0;
  $39 = HEAP32[$wsptr$1242 + 20 >> 2] | 0;
  $40 = HEAP32[$wsptr$1242 + 28 >> 2] | 0;
  $add170 = $38 + $37 | 0;
  $mul173 = ($add170 + $39 + $40 | 0) * 3264 | 0;
  $mul174 = $add170 * 7274 | 0;
  $mul176 = ($39 + $37 | 0) * 5492 | 0;
  $add179 = $mul173 + (($40 + $37 | 0) * 3e3 | 0) | 0;
  $sub183 = $mul174 + (Math_imul($37, -7562) | 0) + $mul176 + $add179 | 0;
  $sub186 = $mul173 + (Math_imul($39 + $38 | 0, -9527) | 0) | 0;
  $add192 = $mul176 + (Math_imul($39, -9766) | 0) + $sub186 | 0;
  $mul194 = Math_imul($40 + $38 | 0, -14731) | 0;
  $add195 = $mul174 + ($38 * 16984 | 0) + $mul194 + $sub186 | 0;
  $add198 = $mul194 + ($40 * 17223 | 0) + $add179 | 0;
  $add204 = ($39 * 8203 | 0) + (Math_imul($38, -12019) | 0) + (Math_imul($40, -13802) | 0) + $mul173 | 0;
  HEAP8[$add$ptr131 >> 0] = HEAP8[$add$ptr + (($sub183 + $add153 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 10 >> 0] = HEAP8[$add$ptr + (($add153 - $sub183 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 1 >> 0] = HEAP8[$add$ptr + (($add195 + $sub150 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 9 >> 0] = HEAP8[$add$ptr + (($sub150 - $add195 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 2 >> 0] = HEAP8[$add$ptr + (($add192 + $sub159 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 8 >> 0] = HEAP8[$add$ptr + (($sub159 - $add192 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 3 >> 0] = HEAP8[$add$ptr + (($add198 + $add156 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 7 >> 0] = HEAP8[$add$ptr + (($add156 - $add198 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 4 >> 0] = HEAP8[$add$ptr + (($add204 + $add163 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 6 >> 0] = HEAP8[$add$ptr + (($add163 - $add204 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr131 + 5 >> 0] = HEAP8[$add$ptr + ($sub165 >>> 18 & 1023) >> 0] | 0;
  $ctr$1243 = $ctr$1243 + 1 | 0;
  if (($ctr$1243 | 0) == 11) break; else $wsptr$1242 = $wsptr$1242 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  } else {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $36 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 } else $57 = 1;
 do if ($48) {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($57) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $57 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  } else {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $36 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 } else $57 = 1;
 do if ($48) {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($57) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $57 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  } else {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $36 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 } else $57 = 1;
 do if ($48) {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($57) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $57 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  } else {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $36 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 } else $57 = 1;
 do if ($48) {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($57) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $57 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP16[$__v >> 1] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP16[$__v >> 1] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call25 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if ($4) {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  } else {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if ($9) {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   }
  } else label = 19; while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0 ? ($33 = HEAP32[$__g_end >> 2] | 0, ($33 - $__g | 0) < 160) : 0) {
  $34 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $34;
 }
 $call25 = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 HEAP32[$__v >> 2] = $call25;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if ($21) {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 } else $51 = 1;
 do if ($42) {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($51) break; else {
   label = 50;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  }
 } else label = 48; while (0);
 if ((label | 0) == 48 ? $51 : 0) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _update_box($cinfo, $boxp) {
 $cinfo = $cinfo | 0;
 $boxp = $boxp | 0;
 var $1 = 0, $10 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add211 = 0, $c0$0655 = 0, $c0$1581 = 0, $c0$2503 = 0, $c0$3427 = 0, $c0$4351 = 0, $c0$5275 = 0, $c0$6184 = 0, $c0max$0 = 0, $c0max4 = 0, $c0min$0 = 0, $c1$0653 = 0, $c1$1579 = 0, $c1$2505 = 0, $c1$3429 = 0, $c1$4348 = 0, $c1$5272 = 0, $c1$6180 = 0, $c1max$0 = 0, $c1max6 = 0, $c1min$0 = 0, $c1min5 = 0, $c2$0650 = 0, $c2$1576 = 0, $c2$2500 = 0, $c2$3424 = 0, $c2$4353 = 0, $c2$5277 = 0, $c2$6176 = 0, $c2max$0 = 0, $c2max8 = 0, $c2min$0 = 0, $c2min7 = 0, $ccount$0$lcssa = 0, $ccount$0185 = 0, $ccount$1181 = 0, $ccount$2178 = 0, $colorcount = 0, $histp$0651 = 0, $histp$1577 = 0, $histp$2501 = 0, $histp$3425 = 0, $histp$4349 = 0, $histp$5273 = 0, $histp$6177 = 0, $mul = 0, $mul204 = 0, $shl206 = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$boxp >> 2] | 0;
 $c0max4 = $boxp + 4 | 0;
 $3 = HEAP32[$c0max4 >> 2] | 0;
 $c1min5 = $boxp + 8 | 0;
 $4 = HEAP32[$c1min5 >> 2] | 0;
 $c1max6 = $boxp + 12 | 0;
 $5 = HEAP32[$c1max6 >> 2] | 0;
 $c2min7 = $boxp + 16 | 0;
 $6 = HEAP32[$c2min7 >> 2] | 0;
 $c2max8 = $boxp + 20 | 0;
 $7 = HEAP32[$c2max8 >> 2] | 0;
 L1 : do if (($3 | 0) <= ($2 | 0) | ($4 | 0) > ($5 | 0) | ($6 | 0) > ($7 | 0)) $c0min$0 = $2; else {
  $c0$0655 = $2;
  L3 : while (1) {
   $8 = HEAP32[$1 + ($c0$0655 << 2) >> 2] | 0;
   $c1$0653 = $4;
   while (1) {
    $c2$0650 = $6;
    $histp$0651 = $8 + ($c1$0653 << 6) + ($6 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$0651 >> 1] | 0) break L3;
     if (($c2$0650 | 0) < ($7 | 0)) {
      $c2$0650 = $c2$0650 + 1 | 0;
      $histp$0651 = $histp$0651 + 2 | 0;
     } else break;
    }
    if (($c1$0653 | 0) < ($5 | 0)) $c1$0653 = $c1$0653 + 1 | 0; else break;
   }
   if (($c0$0655 | 0) < ($3 | 0)) $c0$0655 = $c0$0655 + 1 | 0; else {
    $c0min$0 = $2;
    break L1;
   }
  }
  HEAP32[$boxp >> 2] = $c0$0655;
  $c0min$0 = $c0$0655;
 } while (0);
 L14 : do if (($3 | 0) <= ($c0min$0 | 0) | ($4 | 0) > ($5 | 0) | ($6 | 0) > ($7 | 0)) $c0max$0 = $3; else {
  $c0$1581 = $3;
  L16 : while (1) {
   $10 = HEAP32[$1 + ($c0$1581 << 2) >> 2] | 0;
   $c1$1579 = $4;
   while (1) {
    $c2$1576 = $6;
    $histp$1577 = $10 + ($c1$1579 << 6) + ($6 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$1577 >> 1] | 0) break L16;
     if (($c2$1576 | 0) < ($7 | 0)) {
      $c2$1576 = $c2$1576 + 1 | 0;
      $histp$1577 = $histp$1577 + 2 | 0;
     } else break;
    }
    if (($c1$1579 | 0) < ($5 | 0)) $c1$1579 = $c1$1579 + 1 | 0; else break;
   }
   if (($c0$1581 | 0) > ($c0min$0 | 0)) $c0$1581 = $c0$1581 + -1 | 0; else {
    $c0max$0 = $3;
    break L14;
   }
  }
  HEAP32[$c0max4 >> 2] = $c0$1581;
  $c0max$0 = $c0$1581;
 } while (0);
 L27 : do if (($5 | 0) <= ($4 | 0) | ($c0max$0 | 0) < ($c0min$0 | 0) | ($6 | 0) > ($7 | 0)) $c1min$0 = $4; else {
  $c1$2505 = $4;
  L29 : while (1) {
   $c0$2503 = $c0min$0;
   while (1) {
    $c2$2500 = $6;
    $histp$2501 = (HEAP32[$1 + ($c0$2503 << 2) >> 2] | 0) + ($c1$2505 << 6) + ($6 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$2501 >> 1] | 0) break L29;
     if (($c2$2500 | 0) < ($7 | 0)) {
      $c2$2500 = $c2$2500 + 1 | 0;
      $histp$2501 = $histp$2501 + 2 | 0;
     } else break;
    }
    if (($c0$2503 | 0) < ($c0max$0 | 0)) $c0$2503 = $c0$2503 + 1 | 0; else break;
   }
   if (($c1$2505 | 0) < ($5 | 0)) $c1$2505 = $c1$2505 + 1 | 0; else {
    $c1min$0 = $4;
    break L27;
   }
  }
  HEAP32[$c1min5 >> 2] = $c1$2505;
  $c1min$0 = $c1$2505;
 } while (0);
 L40 : do if (($5 | 0) <= ($c1min$0 | 0) | ($c0max$0 | 0) < ($c0min$0 | 0) | ($6 | 0) > ($7 | 0)) $c1max$0 = $5; else {
  $c1$3429 = $5;
  L42 : while (1) {
   $c0$3427 = $c0min$0;
   while (1) {
    $c2$3424 = $6;
    $histp$3425 = (HEAP32[$1 + ($c0$3427 << 2) >> 2] | 0) + ($c1$3429 << 6) + ($6 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$3425 >> 1] | 0) break L42;
     if (($c2$3424 | 0) < ($7 | 0)) {
      $c2$3424 = $c2$3424 + 1 | 0;
      $histp$3425 = $histp$3425 + 2 | 0;
     } else break;
    }
    if (($c0$3427 | 0) < ($c0max$0 | 0)) $c0$3427 = $c0$3427 + 1 | 0; else break;
   }
   if (($c1$3429 | 0) > ($c1min$0 | 0)) $c1$3429 = $c1$3429 + -1 | 0; else {
    $c1max$0 = $5;
    break L40;
   }
  }
  HEAP32[$c1max6 >> 2] = $c1$3429;
  $c1max$0 = $c1$3429;
 } while (0);
 L53 : do if (($7 | 0) <= ($6 | 0) | ($c0max$0 | 0) < ($c0min$0 | 0) | ($c1max$0 | 0) < ($c1min$0 | 0)) $c2min$0 = $6; else {
  $c2$4353 = $6;
  L55 : while (1) {
   $c0$4351 = $c0min$0;
   while (1) {
    $c1$4348 = $c1min$0;
    $histp$4349 = (HEAP32[$1 + ($c0$4351 << 2) >> 2] | 0) + ($c1min$0 << 6) + ($c2$4353 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$4349 >> 1] | 0) break L55;
     if (($c1$4348 | 0) < ($c1max$0 | 0)) {
      $c1$4348 = $c1$4348 + 1 | 0;
      $histp$4349 = $histp$4349 + 64 | 0;
     } else break;
    }
    if (($c0$4351 | 0) < ($c0max$0 | 0)) $c0$4351 = $c0$4351 + 1 | 0; else break;
   }
   if (($c2$4353 | 0) < ($7 | 0)) $c2$4353 = $c2$4353 + 1 | 0; else {
    $c2min$0 = $6;
    break L53;
   }
  }
  HEAP32[$c2min7 >> 2] = $c2$4353;
  $c2min$0 = $c2$4353;
 } while (0);
 L66 : do if (($7 | 0) <= ($c2min$0 | 0) | ($c0max$0 | 0) < ($c0min$0 | 0) | ($c1max$0 | 0) < ($c1min$0 | 0)) $c2max$0 = $7; else {
  $c2$5277 = $7;
  L68 : while (1) {
   $c0$5275 = $c0min$0;
   while (1) {
    $c1$5272 = $c1min$0;
    $histp$5273 = (HEAP32[$1 + ($c0$5275 << 2) >> 2] | 0) + ($c1min$0 << 6) + ($c2$5277 << 1) | 0;
    while (1) {
     if (HEAP16[$histp$5273 >> 1] | 0) break L68;
     if (($c1$5272 | 0) < ($c1max$0 | 0)) {
      $c1$5272 = $c1$5272 + 1 | 0;
      $histp$5273 = $histp$5273 + 64 | 0;
     } else break;
    }
    if (($c0$5275 | 0) < ($c0max$0 | 0)) $c0$5275 = $c0$5275 + 1 | 0; else break;
   }
   if (($c2$5277 | 0) > ($c2min$0 | 0)) $c2$5277 = $c2$5277 + -1 | 0; else {
    $c2max$0 = $7;
    break L66;
   }
  }
  HEAP32[$c2max8 >> 2] = $c2$5277;
  $c2max$0 = $c2$5277;
 } while (0);
 $mul = $c0max$0 - $c0min$0 << 4;
 $mul204 = ($c1max$0 - $c1min$0 | 0) * 12 | 0;
 $shl206 = $c2max$0 - $c2min$0 << 3;
 $add211 = (Math_imul($mul204, $mul204) | 0) + (Math_imul($mul, $mul) | 0) + (Math_imul($shl206, $shl206) | 0) | 0;
 HEAP32[$boxp + 24 >> 2] = $add211;
 if (($c0max$0 | 0) < ($c0min$0 | 0) | ($c1max$0 | 0) < ($c1min$0 | 0) | ($c2max$0 | 0) < ($c2min$0 | 0)) {
  $ccount$0$lcssa = 0;
  $colorcount = $boxp + 28 | 0;
  HEAP32[$colorcount >> 2] = $ccount$0$lcssa;
  return;
 }
 $c0$6184 = $c0min$0;
 $ccount$0185 = 0;
 while (1) {
  $20 = HEAP32[$1 + ($c0$6184 << 2) >> 2] | 0;
  $c1$6180 = $c1min$0;
  $ccount$1181 = $ccount$0185;
  while (1) {
   $c2$6176 = $c2min$0;
   $ccount$2178 = $ccount$1181;
   $histp$6177 = $20 + ($c1$6180 << 6) + ($c2min$0 << 1) | 0;
   while (1) {
    $ccount$2178 = $ccount$2178 + ((HEAP16[$histp$6177 >> 1] | 0) != 0 & 1) | 0;
    if (($c2$6176 | 0) >= ($c2max$0 | 0)) break; else {
     $c2$6176 = $c2$6176 + 1 | 0;
     $histp$6177 = $histp$6177 + 2 | 0;
    }
   }
   if (($c1$6180 | 0) < ($c1max$0 | 0)) {
    $c1$6180 = $c1$6180 + 1 | 0;
    $ccount$1181 = $ccount$2178;
   } else break;
  }
  if (($c0$6184 | 0) < ($c0max$0 | 0)) {
   $c0$6184 = $c0$6184 + 1 | 0;
   $ccount$0185 = $ccount$2178;
  } else {
   $ccount$0$lcssa = $ccount$2178;
   break;
  }
 }
 $colorcount = $boxp + 28 | 0;
 HEAP32[$colorcount >> 2] = $ccount$0$lcssa;
 return;
}

function _jpeg_idct_12x12($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $add = 0, $add$ptr = 0, $add$ptr121 = 0, $add127 = 0, $add135 = 0, $add137 = 0, $add138 = 0, $add142 = 0, $add150 = 0, $add154 = 0, $add157 = 0, $add163 = 0, $add167 = 0, $add172 = 0, $add178 = 0, $add20 = 0, $add22 = 0, $add23 = 0, $add27 = 0, $add47 = 0, $add51 = 0, $add54 = 0, $add60 = 0, $add64 = 0, $add69 = 0, $add7 = 0, $add75 = 0, $ctr$0250 = 0, $ctr$1246 = 0, $inptr$0247 = 0, $mul11 = 0, $mul126 = 0, $mul148 = 0, $mul149 = 0, $mul152 = 0, $mul159 = 0, $mul176 = 0, $mul32 = 0, $mul36 = 0, $mul40 = 0, $mul44 = 0, $mul45 = 0, $mul46 = 0, $mul49 = 0, $mul56 = 0, $mul6 = 0, $mul73 = 0, $quantptr$0248 = 0, $shl124 = 0, $shl133 = 0, $shl18 = 0, $sub = 0, $sub128 = 0, $sub134 = 0, $sub136 = 0, $sub139 = 0, $sub141 = 0, $sub143 = 0, $sub173 = 0, $sub174 = 0, $sub180 = 0, $sub19 = 0, $sub21 = 0, $sub24 = 0, $sub26 = 0, $sub28 = 0, $sub70 = 0, $sub71 = 0, $sub77 = 0, $workspace = 0, $wsptr$0249 = 0, $wsptr$1245 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0250 = 0;
 $inptr$0247 = $coef_block;
 $quantptr$0248 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0249 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0247 >> 1] << 13, HEAP32[$quantptr$0248 >> 2] | 0) | 0 | 1024;
  $mul6 = Math_imul((HEAP16[$inptr$0247 + 64 >> 1] | 0) * 10033 | 0, HEAP32[$quantptr$0248 + 128 >> 2] | 0) | 0;
  $add7 = $mul6 + $add | 0;
  $sub = $add - $mul6 | 0;
  $mul11 = Math_imul(HEAP32[$quantptr$0248 + 64 >> 2] | 0, HEAP16[$inptr$0247 + 32 >> 1] | 0) | 0;
  $shl18 = Math_imul(HEAP16[$inptr$0247 + 96 >> 1] << 13, HEAP32[$quantptr$0248 + 192 >> 2] | 0) | 0;
  $sub19 = ($mul11 << 13) - $shl18 | 0;
  $add20 = $sub19 + $add | 0;
  $sub21 = $add - $sub19 | 0;
  $add22 = $shl18 + ($mul11 * 11190 | 0) | 0;
  $add23 = $add22 + $add7 | 0;
  $sub24 = $add7 - $add22 | 0;
  $sub26 = ($mul11 * 2998 | 0) - $shl18 | 0;
  $add27 = $sub26 + $sub | 0;
  $sub28 = $sub - $sub26 | 0;
  $mul32 = Math_imul(HEAP32[$quantptr$0248 + 32 >> 2] | 0, HEAP16[$inptr$0247 + 16 >> 1] | 0) | 0;
  $mul36 = Math_imul(HEAP32[$quantptr$0248 + 96 >> 2] | 0, HEAP16[$inptr$0247 + 48 >> 1] | 0) | 0;
  $mul40 = Math_imul(HEAP32[$quantptr$0248 + 160 >> 2] | 0, HEAP16[$inptr$0247 + 80 >> 1] | 0) | 0;
  $mul44 = Math_imul(HEAP32[$quantptr$0248 + 224 >> 2] | 0, HEAP16[$inptr$0247 + 112 >> 1] | 0) | 0;
  $mul45 = $mul36 * 10703 | 0;
  $mul46 = Math_imul($mul36, -4433) | 0;
  $add47 = $mul40 + $mul32 | 0;
  $mul49 = ($mul44 + $add47 | 0) * 7053 | 0;
  $add51 = $mul49 + ($add47 * 2139 | 0) | 0;
  $add54 = $mul45 + ($mul32 * 2295 | 0) + $add51 | 0;
  $mul56 = Math_imul($mul44 + $mul40 | 0, -8565) | 0;
  $add60 = (Math_imul($mul40, -12112) | 0) + $mul46 + $mul56 + $add51 | 0;
  $add64 = ($mul44 * 12998 | 0) - $mul45 + $mul49 + $mul56 | 0;
  $add69 = $mul46 + (Math_imul($mul32, -5540) | 0) + (Math_imul($mul44, -16244) | 0) + $mul49 | 0;
  $sub70 = $mul32 - $mul44 | 0;
  $sub71 = $mul36 - $mul40 | 0;
  $mul73 = ($sub70 + $sub71 | 0) * 4433 | 0;
  $add75 = $mul73 + ($sub70 * 6270 | 0) | 0;
  $sub77 = $mul73 + (Math_imul($sub71, -15137) | 0) | 0;
  HEAP32[$wsptr$0249 >> 2] = $add54 + $add23 >> 11;
  HEAP32[$wsptr$0249 + 352 >> 2] = $add23 - $add54 >> 11;
  HEAP32[$wsptr$0249 + 32 >> 2] = $add75 + $add20 >> 11;
  HEAP32[$wsptr$0249 + 320 >> 2] = $add20 - $add75 >> 11;
  HEAP32[$wsptr$0249 + 64 >> 2] = $add60 + $add27 >> 11;
  HEAP32[$wsptr$0249 + 288 >> 2] = $add27 - $add60 >> 11;
  HEAP32[$wsptr$0249 + 96 >> 2] = $add64 + $sub28 >> 11;
  HEAP32[$wsptr$0249 + 256 >> 2] = $sub28 - $add64 >> 11;
  HEAP32[$wsptr$0249 + 128 >> 2] = $sub77 + $sub21 >> 11;
  HEAP32[$wsptr$0249 + 224 >> 2] = $sub21 - $sub77 >> 11;
  HEAP32[$wsptr$0249 + 160 >> 2] = $add69 + $sub24 >> 11;
  HEAP32[$wsptr$0249 + 192 >> 2] = $sub24 - $add69 >> 11;
  $ctr$0250 = $ctr$0250 + 1 | 0;
  if (($ctr$0250 | 0) == 8) break; else {
   $inptr$0247 = $inptr$0247 + 2 | 0;
   $quantptr$0248 = $quantptr$0248 + 4 | 0;
   $wsptr$0249 = $wsptr$0249 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1246 = 0;
 $wsptr$1245 = $workspace;
 while (1) {
  $add$ptr121 = (HEAP32[$output_buf + ($ctr$1246 << 2) >> 2] | 0) + $output_col | 0;
  $shl124 = (HEAP32[$wsptr$1245 >> 2] << 13) + 134348800 | 0;
  $mul126 = (HEAP32[$wsptr$1245 + 16 >> 2] | 0) * 10033 | 0;
  $add127 = $shl124 + $mul126 | 0;
  $sub128 = $shl124 - $mul126 | 0;
  $25 = HEAP32[$wsptr$1245 + 8 >> 2] | 0;
  $shl133 = HEAP32[$wsptr$1245 + 24 >> 2] << 13;
  $sub134 = ($25 << 13) - $shl133 | 0;
  $add135 = $sub134 + $shl124 | 0;
  $sub136 = $shl124 - $sub134 | 0;
  $add137 = $shl133 + ($25 * 11190 | 0) | 0;
  $add138 = $add137 + $add127 | 0;
  $sub139 = $add127 - $add137 | 0;
  $sub141 = ($25 * 2998 | 0) - $shl133 | 0;
  $add142 = $sub141 + $sub128 | 0;
  $sub143 = $sub128 - $sub141 | 0;
  $27 = HEAP32[$wsptr$1245 + 4 >> 2] | 0;
  $28 = HEAP32[$wsptr$1245 + 12 >> 2] | 0;
  $29 = HEAP32[$wsptr$1245 + 20 >> 2] | 0;
  $30 = HEAP32[$wsptr$1245 + 28 >> 2] | 0;
  $mul148 = $28 * 10703 | 0;
  $mul149 = Math_imul($28, -4433) | 0;
  $add150 = $29 + $27 | 0;
  $mul152 = ($add150 + $30 | 0) * 7053 | 0;
  $add154 = $mul152 + ($add150 * 2139 | 0) | 0;
  $add157 = $mul148 + ($27 * 2295 | 0) + $add154 | 0;
  $mul159 = Math_imul($30 + $29 | 0, -8565) | 0;
  $add163 = (Math_imul($29, -12112) | 0) + $mul149 + $mul159 + $add154 | 0;
  $add167 = ($30 * 12998 | 0) - $mul148 + $mul152 + $mul159 | 0;
  $add172 = $mul149 + (Math_imul($27, -5540) | 0) + (Math_imul($30, -16244) | 0) + $mul152 | 0;
  $sub173 = $27 - $30 | 0;
  $sub174 = $28 - $29 | 0;
  $mul176 = ($sub173 + $sub174 | 0) * 4433 | 0;
  $add178 = $mul176 + ($sub173 * 6270 | 0) | 0;
  $sub180 = $mul176 + (Math_imul($sub174, -15137) | 0) | 0;
  HEAP8[$add$ptr121 >> 0] = HEAP8[$add$ptr + (($add157 + $add138 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 11 >> 0] = HEAP8[$add$ptr + (($add138 - $add157 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 1 >> 0] = HEAP8[$add$ptr + (($add178 + $add135 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 10 >> 0] = HEAP8[$add$ptr + (($add135 - $add178 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 2 >> 0] = HEAP8[$add$ptr + (($add163 + $add142 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 9 >> 0] = HEAP8[$add$ptr + (($add142 - $add163 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 3 >> 0] = HEAP8[$add$ptr + (($add167 + $sub143 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 8 >> 0] = HEAP8[$add$ptr + (($sub143 - $add167 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 4 >> 0] = HEAP8[$add$ptr + (($sub180 + $sub136 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 7 >> 0] = HEAP8[$add$ptr + (($sub136 - $sub180 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 5 >> 0] = HEAP8[$add$ptr + (($add172 + $sub139 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 6 >> 0] = HEAP8[$add$ptr + (($sub139 - $add172 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1246 = $ctr$1246 + 1 | 0;
  if (($ctr$1246 | 0) == 12) break; else $wsptr$1245 = $wsptr$1245 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i21 = 0, $__ninp_$i$i97 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $conv = 0, $conv$i = 0, $conv$i82 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i120 = 0, $retval$0$i$i$i$i42 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i141 = 0, $retval$0$i$i13$i$i63 = 0, $retval$0$i$i81 = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if ($0) {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $62 = 1;
   break;
  } else {
   $62 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $62 = 1; while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if ($5) {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($62) {
   $63 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  }
 } else label = 14; while (0);
 if ((label | 0) == 14) if ($62) label = 16; else {
  $63 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($conv$i << 24 >> 24 > -1 ? ($__tab_$i = $__ct + 8 | 0, HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 2048) : 0) {
   $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $conv$i, 0) | 0) << 24 >> 24;
   $20 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i21 = $20 + 12 | 0;
   $21 = HEAP32[$__ninp_$i$i21 >> 2] | 0;
   if (($21 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 40 >> 2] & 127]($20) | 0; else {
    HEAP32[$__ninp_$i$i21 >> 2] = $21 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0;
   }
   $30 = $63;
   $64 = $63;
   $__n$addr$0$in = $__n;
   $__r$0$in = $conv;
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0;
    $__n$addr$0 = $__n$addr$0$in + -1 | 0;
    $25 = HEAP32[$__b >> 2] | 0;
    do if ($25) {
     $26 = HEAP32[$25 + 12 >> 2] | 0;
     if (($26 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) $retval$0$i$i$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 127]($25) | 0; else $retval$0$i$i$i$i42 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$26 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i42, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $36 = 1;
      break;
     } else {
      $36 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } else $36 = 1; while (0);
    if ($30) {
     $31 = HEAP32[$30 + 12 >> 2] | 0;
     if (($31 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $retval$0$i$i13$i$i63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $retval$0$i$i13$i$i63 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$31 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i63, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      $37 = 1;
      $56 = 0;
      $65 = 0;
     } else {
      $37 = 0;
      $56 = $64;
      $65 = $30;
     }
    } else {
     $37 = 1;
     $56 = $64;
     $65 = 0;
    }
    $39 = HEAP32[$__b >> 2] | 0;
    if (!(($__n$addr$0$in | 0) > 1 & ($36 ^ $37))) break;
    $40 = HEAP32[$39 + 12 >> 2] | 0;
    if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i81 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$40 >> 0] | 0) | 0;
    $conv$i82 = $retval$0$i$i81 & 255;
    if ($conv$i82 << 24 >> 24 <= -1) {
     $retval$2 = $__r$0;
     break L22;
    }
    if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i81 << 24 >> 24 << 1) >> 1] & 2048)) {
     $retval$2 = $__r$0;
     break L22;
    }
    $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $conv$i82, 0) | 0) << 24 >> 24) | 0;
    $47 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i97 = $47 + 12 | 0;
    $48 = HEAP32[$__ninp_$i$i97 >> 2] | 0;
    if (($48 | 0) == (HEAP32[$47 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 40 >> 2] & 127]($47) | 0; else {
     HEAP32[$__ninp_$i$i97 >> 2] = $48 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
    }
    $30 = $65;
    $64 = $56;
    $__n$addr$0$in = $__n$addr$0;
    $__r$0$in = $add;
   }
   do if ($39) {
    $52 = HEAP32[$39 + 12 >> 2] | 0;
    if (($52 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i$i$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i$i$i120 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$52 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i120, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$__b >> 2] = 0;
     $66 = 1;
     break;
    } else {
     $66 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } else $66 = 1; while (0);
   do if ($56) {
    $57 = HEAP32[$56 + 12 >> 2] | 0;
    if (($57 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) $retval$0$i$i13$i$i141 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 127]($56) | 0; else $retval$0$i$i13$i$i141 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$57 >> 0] | 0) | 0;
    if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i141, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($66) {
     $retval$2 = $__r$0;
     break L22;
    } else break; else {
     HEAP32[$__e >> 2] = 0;
     label = 63;
     break;
    }
   } else label = 63; while (0);
   if ((label | 0) == 63 ? !$66 : 0) {
    $retval$2 = $__r$0;
    break;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   $retval$2 = $__r$0;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$2 = 0;
 } while (0);
 return $retval$2 | 0;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i101 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i102 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i80 = 0, $call$i83 = 0, $call$i86 = 0, $call$i89 = 0, $call$i98 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i103 = 0, $incdec$ptr21 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 $call$i80 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43056) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 20 >> 2] & 255]($__grouping, $call$i80);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $call$i83;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1 ? (HEAP8[$__nf$0 >> 0] | 0) == 48 : 0) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i86 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 1;
  HEAP8[$7 >> 0] = $call$i86;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 1;
  HEAP8[$10 >> 0] = $call$i89;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($conv25, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   if (!(_isdigit_l($conv34, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0) {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 16 >> 2] & 127]($call$i80) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $call$i98;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 1;
   HEAP8[$32 >> 0] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) $$pre$phiZ2D = $call$i; else {
   $__first$addr$0$i$i101 = $add$ptr78;
   $__last$addr$0$i$i102 = $21;
   while (1) {
    $incdec$ptr$i$i103 = $__last$addr$0$i$i102 + -1 | 0;
    if ($__first$addr$0$i$i101 >>> 0 >= $incdec$ptr$i$i103 >>> 0) {
     $$pre$phiZ2D = $call$i;
     break L19;
    }
    $22 = HEAP8[$__first$addr$0$i$i101 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i101 >> 0] = HEAP8[$incdec$ptr$i$i103 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i103 >> 0] = $22;
    $__first$addr$0$i$i101 = $__first$addr$0$i$i101 + 1 | 0;
    $__last$addr$0$i$i102 = $incdec$ptr$i$i103;
   }
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
  $$pre$phiZ2D = $call$i;
 } while (0);
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 63]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $37 + 1;
  HEAP8[$37 >> 0] = $call$i111;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 12 >> 2] & 127]($call$i80) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $35 + 1;
  HEAP8[$35 >> 0] = $call$i120;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _decode_mcu_DC_first_62($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $$in = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $37 = 0, $39 = 0, $5 = 0, $add = 0, $and = 0, $and62 = 0, $arrayidx70 = 0, $bits_left$0$lcssa = 0, $bits_left$076 = 0, $bits_left$1 = 0, $bits_left$2 = 0, $bits_left$4$ph = 0, $bits_left$5 = 0, $bits_left$6 = 0, $bits_left$i$i = 0, $bits_left16 = 0, $bits_left28 = 0, $blkn$077 = 0, $blocks_in_MCU = 0, $br_state = 0, $bytes_in_buffer13 = 0, $call38 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $discarded_bytes$i$i = 0, $get_buffer$0$lcssa = 0, $get_buffer$075 = 0, $get_buffer$1 = 0, $get_buffer$2 = 0, $get_buffer$4$ph = 0, $get_buffer$5 = 0, $get_buffer$6 = 0, $get_buffer14 = 0, $get_buffer27 = 0, $nb$0 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go87 = 0, $retval$2 = 0, $s$2$ph = 0, $s$3 = 0, $saved = 0, $src = 0, $state = 0, $sub59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $br_state = sp + 20 | 0;
 $state = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $1 = HEAP32[$cinfo + 424 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $5 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $5 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$5 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$2 = 0;
   STACKTOP = sp;
   return $retval$2 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 if (!(HEAP32[$0 + 40 >> 2] | 0)) {
  HEAP32[$br_state + 16 >> 2] = $cinfo;
  $src = $cinfo + 24 | 0;
  $13 = HEAP32[$src >> 2] | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  HEAP32[$br_state >> 2] = $14;
  $16 = HEAP32[$13 + 4 >> 2] | 0;
  $bytes_in_buffer13 = $br_state + 4 | 0;
  HEAP32[$bytes_in_buffer13 >> 2] = $16;
  $get_buffer14 = $0 + 12 | 0;
  $17 = HEAP32[$get_buffer14 >> 2] | 0;
  $bits_left16 = $0 + 16 | 0;
  $18 = HEAP32[$bits_left16 >> 2] | 0;
  $saved = $0 + 20 | 0;
  HEAP32[$state >> 2] = HEAP32[$saved >> 2];
  HEAP32[$state + 4 >> 2] = HEAP32[$saved + 4 >> 2];
  HEAP32[$state + 8 >> 2] = HEAP32[$saved + 8 >> 2];
  HEAP32[$state + 12 >> 2] = HEAP32[$saved + 12 >> 2];
  HEAP32[$state + 16 >> 2] = HEAP32[$saved + 16 >> 2];
  $blocks_in_MCU = $cinfo + 368 | 0;
  do if ((HEAP32[$blocks_in_MCU >> 2] | 0) > 0) {
   $get_buffer27 = $br_state + 8 | 0;
   $bits_left28 = $br_state + 12 | 0;
   $bits_left$076 = $18;
   $blkn$077 = 0;
   $get_buffer$075 = $17;
   while (1) {
    $20 = HEAP32[$MCU_data + ($blkn$077 << 2) >> 2] | 0;
    $21 = HEAP32[$cinfo + 372 + ($blkn$077 << 2) >> 2] | 0;
    $24 = HEAP32[$0 + 48 + (HEAP32[(HEAP32[$cinfo + 344 + ($21 << 2) >> 2] | 0) + 20 >> 2] << 2) >> 2] | 0;
    if (($bits_left$076 | 0) < 8) {
     if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$075, $bits_left$076, 0) | 0)) {
      $retval$2 = 0;
      label = 28;
      break;
     }
     $25 = HEAP32[$get_buffer27 >> 2] | 0;
     $26 = HEAP32[$bits_left28 >> 2] | 0;
     if (($26 | 0) < 8) {
      $bits_left$2 = $26;
      $get_buffer$2 = $25;
      $nb$0 = 1;
      label = 17;
     } else {
      $bits_left$1 = $26;
      $get_buffer$1 = $25;
      label = 15;
     }
    } else {
     $bits_left$1 = $bits_left$076;
     $get_buffer$1 = $get_buffer$075;
     label = 15;
    }
    if ((label | 0) == 15) {
     label = 0;
     $and = $get_buffer$1 >> $bits_left$1 + -8 & 255;
     $27 = HEAP32[$24 + 144 + ($and << 2) >> 2] | 0;
     if (!$27) {
      $bits_left$2 = $bits_left$1;
      $get_buffer$2 = $get_buffer$1;
      $nb$0 = 9;
      label = 17;
     } else {
      $bits_left$4$ph = $bits_left$1 - $27 | 0;
      $get_buffer$4$ph = $get_buffer$1;
      $s$2$ph = HEAPU8[$24 + 1168 + $and >> 0] | 0;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     $call38 = _jpeg_huff_decode($br_state, $get_buffer$2, $bits_left$2, $24, $nb$0) | 0;
     if (($call38 | 0) < 0) {
      $retval$2 = 0;
      label = 28;
      break;
     }
     $bits_left$4$ph = HEAP32[$bits_left28 >> 2] | 0;
     $get_buffer$4$ph = HEAP32[$get_buffer27 >> 2] | 0;
     $s$2$ph = $call38;
    }
    if (!$s$2$ph) {
     $bits_left$6 = $bits_left$4$ph;
     $get_buffer$6 = $get_buffer$4$ph;
     $s$3 = 0;
    } else {
     if (($bits_left$4$ph | 0) < ($s$2$ph | 0)) {
      if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$4$ph, $bits_left$4$ph, $s$2$ph) | 0)) {
       $retval$2 = 0;
       label = 28;
       break;
      }
      $bits_left$5 = HEAP32[$bits_left28 >> 2] | 0;
      $get_buffer$5 = HEAP32[$get_buffer27 >> 2] | 0;
     } else {
      $bits_left$5 = $bits_left$4$ph;
      $get_buffer$5 = $get_buffer$4$ph;
     }
     $sub59 = $bits_left$5 - $s$2$ph | 0;
     $33 = HEAP32[3152 + ($s$2$ph << 2) >> 2] | 0;
     $and62 = $get_buffer$5 >> $sub59 & $33;
     $bits_left$6 = $sub59;
     $get_buffer$6 = $get_buffer$5;
     $s$3 = $and62 - (($and62 | 0) > (HEAP32[3152 + ($s$2$ph + -1 << 2) >> 2] | 0) ? 0 : $33) | 0;
    }
    $arrayidx70 = $state + 4 + ($21 << 2) | 0;
    $add = (HEAP32[$arrayidx70 >> 2] | 0) + $s$3 | 0;
    HEAP32[$arrayidx70 >> 2] = $add;
    HEAP16[$20 >> 1] = $add << $1;
    $blkn$077 = $blkn$077 + 1 | 0;
    if (($blkn$077 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
     label = 25;
     break;
    } else {
     $bits_left$076 = $bits_left$6;
     $get_buffer$075 = $get_buffer$6;
    }
   }
   if ((label | 0) == 25) {
    $$in = HEAP32[$src >> 2] | 0;
    $37 = HEAP32[$br_state >> 2] | 0;
    $39 = HEAP32[$bytes_in_buffer13 >> 2] | 0;
    $bits_left$0$lcssa = $bits_left$6;
    $get_buffer$0$lcssa = $get_buffer$6;
    break;
   } else if ((label | 0) == 28) {
    STACKTOP = sp;
    return $retval$2 | 0;
   }
  } else {
   $$in = $13;
   $37 = $14;
   $39 = $16;
   $bits_left$0$lcssa = $18;
   $get_buffer$0$lcssa = $17;
  } while (0);
  HEAP32[$$in >> 2] = $37;
  HEAP32[$$in + 4 >> 2] = $39;
  HEAP32[$get_buffer14 >> 2] = $get_buffer$0$lcssa;
  HEAP32[$bits_left16 >> 2] = $bits_left$0$lcssa;
  HEAP32[$saved >> 2] = HEAP32[$state >> 2];
  HEAP32[$saved + 4 >> 2] = HEAP32[$state + 4 >> 2];
  HEAP32[$saved + 8 >> 2] = HEAP32[$state + 8 >> 2];
  HEAP32[$saved + 12 >> 2] = HEAP32[$state + 12 >> 2];
  HEAP32[$saved + 16 >> 2] = HEAP32[$state + 16 >> 2];
 }
 $restarts_to_go87 = $0 + 44 | 0;
 HEAP32[$restarts_to_go87 >> 2] = (HEAP32[$restarts_to_go87 >> 2] | 0) + -1;
 $retval$2 = 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _start_pass_51($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0.0, $3 = 0, $32 = 0, $5 = 0, $6 = 0, $8 = 0, $DCT_v_scaled_size = 0, $arrayidx52 = 0, $ci$074 = 0, $compptr$073 = 0, $dct_method = 0, $i$069 = 0, $i$168 = 0, $i$266 = 0, $inc101 = 0, $inc101$1 = 0, $inc101$2 = 0, $inc101$3 = 0, $inc101$4 = 0, $inc101$5 = 0, $inc101$6 = 0, $method$072 = 0, $method$1 = 0, $method_ptr$071 = 0, $method_ptr$1 = 0, $num_components = 0, $row$067 = 0, $shr = 0;
 $0 = HEAP32[$cinfo + 472 >> 2] | 0;
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) <= 0) return;
 $dct_method = $cinfo + 72 | 0;
 $ci$074 = 0;
 $compptr$073 = HEAP32[$cinfo + 216 >> 2] | 0;
 $method$072 = 0;
 $method_ptr$071 = 0;
 while (1) {
  $3 = HEAP32[$compptr$073 + 36 >> 2] | 0;
  $DCT_v_scaled_size = $compptr$073 + 40 | 0;
  L6 : do switch (($3 << 8) + (HEAP32[$DCT_v_scaled_size >> 2] | 0) | 0) {
  case 257:
   {
    $method$1 = 0;
    $method_ptr$1 = 13;
    break;
   }
  case 514:
   {
    $method$1 = 0;
    $method_ptr$1 = 14;
    break;
   }
  case 771:
   {
    $method$1 = 0;
    $method_ptr$1 = 15;
    break;
   }
  case 1028:
   {
    $method$1 = 0;
    $method_ptr$1 = 16;
    break;
   }
  case 1285:
   {
    $method$1 = 0;
    $method_ptr$1 = 17;
    break;
   }
  case 1542:
   {
    $method$1 = 0;
    $method_ptr$1 = 18;
    break;
   }
  case 1799:
   {
    $method$1 = 0;
    $method_ptr$1 = 19;
    break;
   }
  case 2313:
   {
    $method$1 = 0;
    $method_ptr$1 = 20;
    break;
   }
  case 2570:
   {
    $method$1 = 0;
    $method_ptr$1 = 21;
    break;
   }
  case 2827:
   {
    $method$1 = 0;
    $method_ptr$1 = 22;
    break;
   }
  case 3084:
   {
    $method$1 = 0;
    $method_ptr$1 = 23;
    break;
   }
  case 3341:
   {
    $method$1 = 0;
    $method_ptr$1 = 24;
    break;
   }
  case 3598:
   {
    $method$1 = 0;
    $method_ptr$1 = 25;
    break;
   }
  case 3855:
   {
    $method$1 = 0;
    $method_ptr$1 = 26;
    break;
   }
  case 4112:
   {
    $method$1 = 0;
    $method_ptr$1 = 27;
    break;
   }
  case 4104:
   {
    $method$1 = 0;
    $method_ptr$1 = 28;
    break;
   }
  case 3591:
   {
    $method$1 = 0;
    $method_ptr$1 = 29;
    break;
   }
  case 3078:
   {
    $method$1 = 0;
    $method_ptr$1 = 30;
    break;
   }
  case 2565:
   {
    $method$1 = 0;
    $method_ptr$1 = 31;
    break;
   }
  case 2052:
   {
    $method$1 = 0;
    $method_ptr$1 = 32;
    break;
   }
  case 1539:
   {
    $method$1 = 0;
    $method_ptr$1 = 33;
    break;
   }
  case 1026:
   {
    $method$1 = 0;
    $method_ptr$1 = 34;
    break;
   }
  case 513:
   {
    $method$1 = 0;
    $method_ptr$1 = 35;
    break;
   }
  case 2064:
   {
    $method$1 = 0;
    $method_ptr$1 = 36;
    break;
   }
  case 1806:
   {
    $method$1 = 0;
    $method_ptr$1 = 37;
    break;
   }
  case 1548:
   {
    $method$1 = 0;
    $method_ptr$1 = 38;
    break;
   }
  case 1290:
   {
    $method$1 = 0;
    $method_ptr$1 = 39;
    break;
   }
  case 1032:
   {
    $method$1 = 0;
    $method_ptr$1 = 40;
    break;
   }
  case 774:
   {
    $method$1 = 0;
    $method_ptr$1 = 41;
    break;
   }
  case 516:
   {
    $method$1 = 0;
    $method_ptr$1 = 42;
    break;
   }
  case 258:
   {
    $method$1 = 0;
    $method_ptr$1 = 43;
    break;
   }
  case 2056:
   {
    $5 = HEAP32[$dct_method >> 2] | 0;
    switch ($5 | 0) {
    case 0:
     {
      $method$1 = $5;
      $method_ptr$1 = 44;
      break L6;
      break;
     }
    case 1:
     {
      $method$1 = $5;
      $method_ptr$1 = 45;
      break L6;
      break;
     }
    case 2:
     {
      $method$1 = $5;
      $method_ptr$1 = 46;
      break L6;
      break;
     }
    default:
     {
      $6 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$6 + 20 >> 2] = 49;
      FUNCTION_TABLE_vi[HEAP32[$6 >> 2] & 255]($cinfo);
      $method$1 = $method$072;
      $method_ptr$1 = $method_ptr$071;
      break L6;
     }
    }
    break;
   }
  default:
   {
    $8 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$8 + 20 >> 2] = 7;
    HEAP32[$8 + 24 >> 2] = $3;
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAP32[$DCT_v_scaled_size >> 2];
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    $method$1 = $method$072;
    $method_ptr$1 = $method_ptr$071;
   }
  } while (0);
  HEAP32[$0 + 4 + ($ci$074 << 2) >> 2] = $method_ptr$1;
  L44 : do if ((HEAP32[$compptr$073 + 52 >> 2] | 0 ? ($arrayidx52 = $0 + 44 + ($ci$074 << 2) | 0, (HEAP32[$arrayidx52 >> 2] | 0) != ($method$1 | 0)) : 0) ? ($15 = HEAP32[$compptr$073 + 80 >> 2] | 0, $15 | 0) : 0) {
   HEAP32[$arrayidx52 >> 2] = $method$1;
   switch ($method$1 | 0) {
   case 0:
    {
     $16 = HEAP32[$compptr$073 + 84 >> 2] | 0;
     $i$069 = 0;
     do {
      HEAP32[$16 + ($i$069 << 2) >> 2] = HEAPU16[$15 + ($i$069 << 1) >> 1];
      $i$069 = $i$069 + 1 | 0;
     } while (($i$069 | 0) != 64);
     break;
    }
   case 1:
    {
     $18 = HEAP32[$compptr$073 + 84 >> 2] | 0;
     $i$168 = 0;
     do {
      $shr = (Math_imul(HEAP16[3216 + ($i$168 << 1) >> 1] | 0, HEAPU16[$15 + ($i$168 << 1) >> 1] | 0) | 0) + 2048 >> 12;
      HEAP32[$18 + ($i$168 << 2) >> 2] = $shr;
      $i$168 = $i$168 + 1 | 0;
     } while (($i$168 | 0) != 64);
     break;
    }
   case 2:
    {
     $21 = HEAP32[$compptr$073 + 84 >> 2] | 0;
     $i$266 = 0;
     $row$067 = 0;
     while (1) {
      $22 = +HEAPF64[3344 + ($row$067 << 3) >> 3];
      HEAPF32[$21 + ($i$266 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($i$266 << 1) >> 1] | 0) * .125;
      $inc101 = $i$266 | 1;
      HEAPF32[$21 + ($inc101 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101 << 1) >> 1] | 0) * 1.387039845 * .125;
      $inc101$1 = $inc101 + 1 | 0;
      HEAPF32[$21 + ($inc101$1 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$1 << 1) >> 1] | 0) * 1.306562965 * .125;
      $inc101$2 = $i$266 | 3;
      HEAPF32[$21 + ($inc101$2 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$2 << 1) >> 1] | 0) * 1.175875602 * .125;
      $inc101$3 = $inc101$2 + 1 | 0;
      HEAPF32[$21 + ($inc101$3 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$3 << 1) >> 1] | 0) * .125;
      $inc101$4 = $inc101$2 + 2 | 0;
      HEAPF32[$21 + ($inc101$4 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$4 << 1) >> 1] | 0) * .785694958 * .125;
      $inc101$5 = $inc101$2 + 3 | 0;
      HEAPF32[$21 + ($inc101$5 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$5 << 1) >> 1] | 0) * .5411961 * .125;
      $inc101$6 = $i$266 | 7;
      HEAPF32[$21 + ($inc101$6 << 2) >> 2] = $22 * +(HEAPU16[$15 + ($inc101$6 << 1) >> 1] | 0) * .275899379 * .125;
      $row$067 = $row$067 + 1 | 0;
      if (($row$067 | 0) == 8) break; else $i$266 = $i$266 + 8 | 0;
     }
     break;
    }
   default:
    {
     $32 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$32 + 20 >> 2] = 49;
     FUNCTION_TABLE_vi[HEAP32[$32 >> 2] & 255]($cinfo);
     break L44;
    }
   }
  } while (0);
  $ci$074 = $ci$074 + 1 | 0;
  if (($ci$074 | 0) >= (HEAP32[$num_components >> 2] | 0)) break; else {
   $compptr$073 = $compptr$073 + 88 | 0;
   $method$072 = $method$1;
   $method_ptr$071 = $method_ptr$1;
  }
 }
 return;
}

function _jpeg_idct_ifast($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $$sink = 0, $0 = 0, $15 = 0, $2 = 0, $3 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $add = 0, $add$ptr = 0, $add$ptr130 = 0, $add132 = 0, $add175 = 0, $add180 = 0, $add187 = 0, $add189 = 0, $add193 = 0, $add199 = 0, $add203 = 0, $add61 = 0, $add65 = 0, $add67 = 0, $add85 = 0, $add87 = 0, $add89 = 0, $ctr$0223 = 0, $ctr$1219 = 0, $inptr$0220 = 0, $mul = 0, $mul48 = 0, $mul52 = 0, $mul56 = 0, $mul60 = 0, $mul72 = 0, $mul76 = 0, $mul80 = 0, $mul84 = 0, $quantptr$0221 = 0, $shr209 = 0, $shr95 = 0, $sub = 0, $sub102 = 0, $sub103 = 0, $sub104 = 0, $sub119$sink = 0, $sub177 = 0, $sub186 = 0, $sub188 = 0, $sub190 = 0, $sub196 = 0, $sub202 = 0, $sub216 = 0, $sub217 = 0, $sub218 = 0, $sub64 = 0, $sub66 = 0, $sub68 = 0, $sub86 = 0, $sub88 = 0, $workspace = 0, $wsptr$0222 = 0, $wsptr$2218 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0223 = 8;
 $inptr$0220 = $coef_block;
 $quantptr$0221 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0222 = $workspace;
 while (1) {
  $2 = HEAP16[$inptr$0220 + 16 >> 1] | 0;
  $3 = HEAP16[$inptr$0220 + 32 >> 1] | 0;
  if (!(($2 | $3) << 16 >> 16)) if (((((HEAP16[$inptr$0220 + 48 >> 1] | 0) == 0 ? (HEAP16[$inptr$0220 + 64 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0220 + 80 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0220 + 96 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0220 + 112 >> 1] | 0) == 0 : 0) {
   $mul = Math_imul(HEAP32[$quantptr$0221 >> 2] | 0, HEAP16[$inptr$0220 >> 1] | 0) | 0;
   HEAP32[$wsptr$0222 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 32 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 64 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 96 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 128 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 160 >> 2] = $mul;
   HEAP32[$wsptr$0222 + 192 >> 2] = $mul;
   $$sink = 56;
   $sub119$sink = $mul;
  } else {
   $15 = 0;
   label = 9;
  } else {
   $15 = $3;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   $mul48 = Math_imul(HEAP32[$quantptr$0221 >> 2] | 0, HEAP16[$inptr$0220 >> 1] | 0) | 0;
   $mul52 = Math_imul(HEAP32[$quantptr$0221 + 64 >> 2] | 0, $15 << 16 >> 16) | 0;
   $mul56 = Math_imul(HEAP32[$quantptr$0221 + 128 >> 2] | 0, HEAP16[$inptr$0220 + 64 >> 1] | 0) | 0;
   $mul60 = Math_imul(HEAP32[$quantptr$0221 + 192 >> 2] | 0, HEAP16[$inptr$0220 + 96 >> 1] | 0) | 0;
   $add = $mul56 + $mul48 | 0;
   $sub = $mul48 - $mul56 | 0;
   $add61 = $mul60 + $mul52 | 0;
   $sub64 = (($mul52 - $mul60 | 0) * 362 >> 8) - $add61 | 0;
   $add65 = $add61 + $add | 0;
   $sub66 = $add - $add61 | 0;
   $add67 = $sub64 + $sub | 0;
   $sub68 = $sub - $sub64 | 0;
   $mul72 = Math_imul(HEAP32[$quantptr$0221 + 32 >> 2] | 0, $2 << 16 >> 16) | 0;
   $mul76 = Math_imul(HEAP32[$quantptr$0221 + 96 >> 2] | 0, HEAP16[$inptr$0220 + 48 >> 1] | 0) | 0;
   $mul80 = Math_imul(HEAP32[$quantptr$0221 + 160 >> 2] | 0, HEAP16[$inptr$0220 + 80 >> 1] | 0) | 0;
   $mul84 = Math_imul(HEAP32[$quantptr$0221 + 224 >> 2] | 0, HEAP16[$inptr$0220 + 112 >> 1] | 0) | 0;
   $add85 = $mul80 + $mul76 | 0;
   $sub86 = $mul80 - $mul76 | 0;
   $add87 = $mul84 + $mul72 | 0;
   $sub88 = $mul72 - $mul84 | 0;
   $add89 = $add87 + $add85 | 0;
   $shr95 = ($sub88 + $sub86 | 0) * 473 >> 8;
   $sub102 = $shr95 - ($sub86 * 669 >> 8) - $add89 | 0;
   $sub103 = (($add87 - $add85 | 0) * 362 >> 8) - $sub102 | 0;
   $sub104 = $shr95 - ($sub88 * 277 >> 8) - $sub103 | 0;
   HEAP32[$wsptr$0222 >> 2] = $add89 + $add65;
   HEAP32[$wsptr$0222 + 224 >> 2] = $add65 - $add89;
   HEAP32[$wsptr$0222 + 32 >> 2] = $sub102 + $add67;
   HEAP32[$wsptr$0222 + 192 >> 2] = $add67 - $sub102;
   HEAP32[$wsptr$0222 + 64 >> 2] = $sub103 + $sub68;
   HEAP32[$wsptr$0222 + 160 >> 2] = $sub68 - $sub103;
   HEAP32[$wsptr$0222 + 96 >> 2] = $sub104 + $sub66;
   $$sink = 32;
   $sub119$sink = $sub66 - $sub104 | 0;
  }
  HEAP32[$wsptr$0222 + ($$sink << 2) >> 2] = $sub119$sink;
  if ($ctr$0223 >>> 0 > 1) {
   $ctr$0223 = $ctr$0223 + -1 | 0;
   $inptr$0220 = $inptr$0220 + 2 | 0;
   $quantptr$0221 = $quantptr$0221 + 4 | 0;
   $wsptr$0222 = $wsptr$0222 + 4 | 0;
  } else break;
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1219 = 0;
 $wsptr$2218 = $workspace;
 while (1) {
  $add$ptr130 = (HEAP32[$output_buf + ($ctr$1219 << 2) >> 2] | 0) + $output_col | 0;
  $add132 = (HEAP32[$wsptr$2218 >> 2] | 0) + 16400 | 0;
  $30 = HEAP32[$wsptr$2218 + 4 >> 2] | 0;
  $31 = HEAP32[$wsptr$2218 + 8 >> 2] | 0;
  if (!($30 | $31)) if (((((HEAP32[$wsptr$2218 + 12 >> 2] | 0) == 0 ? (HEAP32[$wsptr$2218 + 16 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2218 + 20 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2218 + 24 >> 2] | 0) == 0 : 0) ? (HEAP32[$wsptr$2218 + 28 >> 2] | 0) == 0 : 0) {
   $40 = HEAP8[$add$ptr + ($add132 >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 >> 0] = $40;
   _memset($add$ptr130 + 1 | 0, $40 | 0, 7) | 0;
  } else {
   $43 = 0;
   label = 19;
  } else {
   $43 = $31;
   label = 19;
  }
  if ((label | 0) == 19) {
   label = 0;
   $41 = HEAP32[$wsptr$2218 + 16 >> 2] | 0;
   $add175 = $41 + $add132 | 0;
   $sub177 = $add132 - $41 | 0;
   $42 = HEAP32[$wsptr$2218 + 24 >> 2] | 0;
   $add180 = $42 + $43 | 0;
   $sub186 = (($43 - $42 | 0) * 362 >> 8) - $add180 | 0;
   $add187 = $add180 + $add175 | 0;
   $sub188 = $add175 - $add180 | 0;
   $add189 = $sub186 + $sub177 | 0;
   $sub190 = $sub177 - $sub186 | 0;
   $44 = HEAP32[$wsptr$2218 + 20 >> 2] | 0;
   $45 = HEAP32[$wsptr$2218 + 12 >> 2] | 0;
   $add193 = $45 + $44 | 0;
   $sub196 = $44 - $45 | 0;
   $46 = HEAP32[$wsptr$2218 + 28 >> 2] | 0;
   $add199 = $46 + $30 | 0;
   $sub202 = $30 - $46 | 0;
   $add203 = $add199 + $add193 | 0;
   $shr209 = ($sub202 + $sub196 | 0) * 473 >> 8;
   $sub216 = $shr209 - ($sub196 * 669 >> 8) - $add203 | 0;
   $sub217 = (($add199 - $add193 | 0) * 362 >> 8) - $sub216 | 0;
   $sub218 = $shr209 - ($sub202 * 277 >> 8) - $sub217 | 0;
   HEAP8[$add$ptr130 >> 0] = HEAP8[$add$ptr + (($add203 + $add187 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 7 >> 0] = HEAP8[$add$ptr + (($add187 - $add203 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 1 >> 0] = HEAP8[$add$ptr + (($sub216 + $add189 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 6 >> 0] = HEAP8[$add$ptr + (($add189 - $sub216 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 2 >> 0] = HEAP8[$add$ptr + (($sub217 + $sub190 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 5 >> 0] = HEAP8[$add$ptr + (($sub190 - $sub217 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 3 >> 0] = HEAP8[$add$ptr + (($sub218 + $sub188 | 0) >>> 5 & 1023) >> 0] | 0;
   HEAP8[$add$ptr130 + 4 >> 0] = HEAP8[$add$ptr + (($sub188 - $sub218 | 0) >>> 5 & 1023) >> 0] | 0;
  }
  $ctr$1219 = $ctr$1219 + 1 | 0;
  if (($ctr$1219 | 0) == 8) break; else $wsptr$2218 = $wsptr$2218 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i24 = 0, $__ninp_$i$i93 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $conv = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i116 = 0, $retval$0$i$i$i$i45 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i137 = 0, $retval$0$i$i13$i$i66 = 0, $retval$0$i$i84 = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if ($0) {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $60 = 1;
   break;
  } else {
   $60 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $60 = 1; while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if ($5) {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($60) {
   $61 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  }
 } else label = 14; while (0);
 if ((label | 0) == 14) if ($60) label = 16; else {
  $61 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$2 = 0;
   break;
  }
  $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24;
  $19 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i24 = $19 + 12 | 0;
  $20 = HEAP32[$__ninp_$i$i24 >> 2] | 0;
  if (($20 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 40 >> 2] & 127]($19) | 0; else {
   HEAP32[$__ninp_$i$i24 >> 2] = $20 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$20 >> 2] | 0) | 0;
  }
  $29 = $61;
  $62 = $61;
  $__n$addr$0$in = $__n;
  $__r$0$in = $conv;
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $__n$addr$0 = $__n$addr$0$in + -1 | 0;
   $24 = HEAP32[$__b >> 2] | 0;
   do if ($24) {
    $25 = HEAP32[$24 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $retval$0$i$i$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $retval$0$i$i$i$i45 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$25 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i45, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$__b >> 2] = 0;
     $35 = 1;
     break;
    } else {
     $35 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } else $35 = 1; while (0);
   if ($29) {
    $30 = HEAP32[$29 + 12 >> 2] | 0;
    if (($30 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) $retval$0$i$i13$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 127]($29) | 0; else $retval$0$i$i13$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$30 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i66, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$__e >> 2] = 0;
     $36 = 1;
     $54 = 0;
     $63 = 0;
    } else {
     $36 = 0;
     $54 = $62;
     $63 = $29;
    }
   } else {
    $36 = 1;
    $54 = $62;
    $63 = 0;
   }
   $38 = HEAP32[$__b >> 2] | 0;
   if (!(($__n$addr$0$in | 0) > 1 & ($35 ^ $36))) break;
   $39 = HEAP32[$38 + 12 >> 2] | 0;
   if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i84) | 0)) {
    $retval$2 = $__r$0;
    break L22;
   }
   $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i84, 0) | 0) << 24 >> 24) | 0;
   $45 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i93 = $45 + 12 | 0;
   $46 = HEAP32[$__ninp_$i$i93 >> 2] | 0;
   if (($46 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 40 >> 2] & 127]($45) | 0; else {
    HEAP32[$__ninp_$i$i93 >> 2] = $46 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$46 >> 2] | 0) | 0;
   }
   $29 = $63;
   $62 = $54;
   $__n$addr$0$in = $__n$addr$0;
   $__r$0$in = $add;
  }
  do if ($38) {
   $50 = HEAP32[$38 + 12 >> 2] | 0;
   if (($50 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i$i$i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i$i$i116 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$50 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i116, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $64 = 1;
    break;
   } else {
    $64 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $64 = 1; while (0);
  do if ($54) {
   $55 = HEAP32[$54 + 12 >> 2] | 0;
   if (($55 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) $retval$0$i$i13$i$i137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 127]($54) | 0; else $retval$0$i$i13$i$i137 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i137, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($64) {
    $retval$2 = $__r$0;
    break L22;
   } else break; else {
    HEAP32[$__e >> 2] = 0;
    label = 61;
    break;
   }
  } else label = 61; while (0);
  if ((label | 0) == 61 ? !$64 : 0) {
   $retval$2 = $__r$0;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $retval$2 = $__r$0;
 } while (0);
 return $retval$2 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head318 = 0, $head6 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[10871] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $1 >>> 0 <= $p >>> 0 & $add$ptr >>> 0 > $p >>> 0)) _abort();
 $head6 = $add$ptr + 4 | 0;
 $2 = HEAP32[$head6 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0 ? ($and - $nb | 0) >>> 0 <= HEAP32[10987] << 1 >>> 0 : 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  HEAP32[$head6 >> 2] = HEAP32[$head6 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[10873] | 0) == ($add$ptr | 0)) {
  $add = (HEAP32[10870] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[10873] = $add$ptr41;
  HEAP32[10870] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[10872] | 0) == ($add$ptr | 0)) {
  $add58 = (HEAP32[10869] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $p + $add58 | 0;
   HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge3 = $sub62;
  } else {
   HEAP32[$head >> 2] = $0 & 1 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[10869] = $storemerge3;
  HEAP32[10872] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 >= 256) {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $22;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $21;
    $RP$1$ph = $arrayidx179;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if (!$23) {
     $arrayidx190 = $R$1 + 16 | 0;
     $24 = HEAP32[$arrayidx190 >> 2] | 0;
     if (!$24) break; else {
      $R$1$be = $24;
      $RP$1$be = $arrayidx190;
     }
    } else {
     $R$1$be = $23;
     $RP$1$be = $arrayidx186;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($1 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($1 >>> 0 > $18 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 43772 + ($25 << 2) | 0;
   do if ((HEAP32[$arrayidx206 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[10868] = HEAP32[10868] & ~(1 << $25);
     break L49;
    }
   } else if ((HEAP32[10871] | 0) >>> 0 <= $16 >>> 0) {
    $arrayidx226 = $16 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx226 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx226 : $16 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } else _abort(); while (0);
   $30 = HEAP32[10871] | 0;
   if ($30 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($30 >>> 0 > $31 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ((HEAP32[10871] | 0) >>> 0 > $32 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } else {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 43508 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $11 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[10867] = HEAP32[10867] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $12 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  } else $fd148$pre$phiZ2D = $12 + 8 | 0;
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } while (0);
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $0 & 1 | $add105 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $p + $add105 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $17 = 0, $18 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0;
 L1 : do if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0)) {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $17 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr64 = $this + 16 + ($17 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($17 | 0) <= 1) break;
   $18 = HEAP32[$this + 8 >> 2] | 0;
   if (($18 & 2 | 0) == 0 ? ($number_to_static_ptr76 = $info + 36 | 0, (HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) : 0) {
    if (!($18 & 1)) {
     $search_done110 = $info + 54 | 0;
     $p65$2 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done110 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$2 = $p65$2 + 8 | 0;
      if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    }
    $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
    $search_done92 = $info + 54 | 0;
    $p65$1 = $incdec$ptr69;
    while (1) {
     if (HEAP8[$search_done92 >> 0] | 0) break L1;
     if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1 ? (HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1 : 0) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
     $p65$1 = $p65$1 + 8 | 0;
     if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
    }
   }
   $search_done79 = $info + 54 | 0;
   $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done79 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0) ? ($dst_ptr_not_leading_to_static_ptr = $info + 20 | 0, (HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) : 0) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $is_dst_type_derived_from_static_type = $info + 44 | 0;
   if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
    $add$ptr = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
    $found_our_static_ptr = $info + 52 | 0;
    $found_any_static_type = $info + 53 | 0;
    $search_done = $info + 54 | 0;
    $__flags34 = $this + 8 | 0;
    $path_dst_ptr_to_static_ptr = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0 = 0;
    $is_dst_type_derived_from_static_type13$0$off0 = 0;
    $p$0 = $this + 16 | 0;
    L33 : while (1) {
     if ($p$0 >>> 0 >= $add$ptr >>> 0) {
      label = 18;
      break;
     }
     HEAP8[$found_our_static_ptr >> 0] = 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$search_done >> 0] | 0) {
      label = 18;
      break;
     }
     do if (HEAP8[$found_any_static_type >> 0] | 0) {
      if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags34 >> 2] & 1)) {
       $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
       label = 19;
       break L33;
      } else {
       $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
       break;
      }
      if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
       $does_dst_type_point_to_our_static_type$274 = 1;
       label = 19;
       break L33;
      }
      if (!(HEAP32[$__flags34 >> 2] & 2)) {
       $does_dst_type_point_to_our_static_type$274 = 1;
       label = 19;
       break L33;
      } else {
       $does_dst_type_point_to_our_static_type$1 = 1;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
      }
     } else {
      $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
      $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
     } while (0);
     $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
     $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
     $p$0 = $p$0 + 8 | 0;
    }
    if ((label | 0) == 18) if ($is_dst_type_derived_from_static_type13$0$off0) {
     $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
     label = 19;
    } else {
     $12 = 4;
     $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
    }
    if ((label | 0) == 19) {
     $12 = 3;
     $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
    }
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
    if ($does_dst_type_point_to_our_static_type$273 & 1) break;
   }
   HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
   $number_to_dst_ptr = $info + 40 | 0;
   HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
   if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
   if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } else __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); while (0);
 return;
}

function _jpeg_idct_14x7($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $21 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $add = 0, $add$ptr = 0, $add$ptr87 = 0, $add107 = 0, $add113 = 0, $add115 = 0, $add117 = 0, $add124 = 0, $add138 = 0, $add144 = 0, $add147 = 0, $add153 = 0, $add156 = 0, $add159 = 0, $add21 = 0, $add24 = 0, $add27 = 0, $add30 = 0, $add53 = 0, $add56 = 0, $add59 = 0, $add95 = 0, $add96 = 0, $ctr$0230 = 0, $ctr$1226 = 0, $inptr$0227 = 0, $mul105 = 0, $mul126 = 0, $mul127 = 0, $mul13 = 0, $mul132 = 0, $mul14 = 0, $mul149 = 0, $mul16 = 0, $mul36 = 0, $mul40 = 0, $mul44 = 0, $mul46 = 0, $mul48 = 0, $mul5 = 0, $mul52 = 0, $mul55 = 0, $mul9 = 0, $quantptr$0228 = 0, $shl123 = 0, $shl90 = 0, $sub101 = 0, $sub109 = 0, $sub112 = 0, $sub114 = 0, $sub116 = 0, $sub118 = 0, $sub131 = 0, $sub135 = 0, $sub137 = 0, $sub141 = 0, $sub20 = 0, $sub97 = 0, $workspace = 0, $wsptr$0229 = 0, $wsptr$1225 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0230 = 0;
 $inptr$0227 = $coef_block;
 $quantptr$0228 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0229 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0227 >> 1] << 13, HEAP32[$quantptr$0228 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0228 + 64 >> 2] | 0, HEAP16[$inptr$0227 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0228 + 128 >> 2] | 0, HEAP16[$inptr$0227 + 64 >> 1] | 0) | 0;
  $mul13 = Math_imul(HEAP32[$quantptr$0228 + 192 >> 2] | 0, HEAP16[$inptr$0227 + 96 >> 1] | 0) | 0;
  $mul14 = ($mul9 - $mul13 | 0) * 7223 | 0;
  $mul16 = ($mul5 - $mul9 | 0) * 2578 | 0;
  $sub20 = (Math_imul($mul9, -15083) | 0) + $add + $mul16 + $mul14 | 0;
  $add21 = $mul13 + $mul5 | 0;
  $add24 = ($add21 * 10438 | 0) + $add | 0;
  $add27 = $mul14 + (Math_imul($mul13, -637) | 0) + $add24 | 0;
  $add30 = $mul16 + (Math_imul($mul5, -20239) | 0) + $add24 | 0;
  $mul36 = Math_imul(HEAP32[$quantptr$0228 + 32 >> 2] | 0, HEAP16[$inptr$0227 + 16 >> 1] | 0) | 0;
  $mul40 = Math_imul(HEAP32[$quantptr$0228 + 96 >> 2] | 0, HEAP16[$inptr$0227 + 48 >> 1] | 0) | 0;
  $mul44 = Math_imul(HEAP32[$quantptr$0228 + 160 >> 2] | 0, HEAP16[$inptr$0227 + 80 >> 1] | 0) | 0;
  $mul46 = ($mul40 + $mul36 | 0) * 7663 | 0;
  $mul48 = ($mul36 - $mul40 | 0) * 1395 | 0;
  $mul52 = Math_imul($mul44 + $mul40 | 0, -11295) | 0;
  $add53 = $mul46 + $mul48 + $mul52 | 0;
  $mul55 = ($mul44 + $mul36 | 0) * 5027 | 0;
  $add56 = $mul55 + ($mul46 - $mul48) | 0;
  $add59 = $mul55 + ($mul44 * 15326 | 0) + $mul52 | 0;
  HEAP32[$wsptr$0229 >> 2] = $add56 + $add27 >> 11;
  HEAP32[$wsptr$0229 + 192 >> 2] = $add27 - $add56 >> 11;
  HEAP32[$wsptr$0229 + 32 >> 2] = $add53 + $sub20 >> 11;
  HEAP32[$wsptr$0229 + 160 >> 2] = $sub20 - $add53 >> 11;
  HEAP32[$wsptr$0229 + 64 >> 2] = $add59 + $add30 >> 11;
  HEAP32[$wsptr$0229 + 128 >> 2] = $add30 - $add59 >> 11;
  HEAP32[$wsptr$0229 + 96 >> 2] = (($mul9 - $add21 | 0) * 11585 | 0) + $add >> 11;
  $ctr$0230 = $ctr$0230 + 1 | 0;
  if (($ctr$0230 | 0) == 8) break; else {
   $inptr$0227 = $inptr$0227 + 2 | 0;
   $quantptr$0228 = $quantptr$0228 + 4 | 0;
   $wsptr$0229 = $wsptr$0229 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1226 = 0;
 $wsptr$1225 = $workspace;
 while (1) {
  $add$ptr87 = (HEAP32[$output_buf + ($ctr$1226 << 2) >> 2] | 0) + $output_col | 0;
  $shl90 = (HEAP32[$wsptr$1225 >> 2] << 13) + 134348800 | 0;
  $21 = HEAP32[$wsptr$1225 + 16 >> 2] | 0;
  $add95 = $shl90 + ($21 * 10438 | 0) | 0;
  $add96 = $shl90 + ($21 * 2578 | 0) | 0;
  $sub97 = $shl90 + (Math_imul($21, -7223) | 0) | 0;
  $sub101 = $shl90 + (Math_imul($21, -11586) | 0) | 0;
  $24 = HEAP32[$wsptr$1225 + 8 >> 2] | 0;
  $25 = HEAP32[$wsptr$1225 + 24 >> 2] | 0;
  $mul105 = ($25 + $24 | 0) * 9058 | 0;
  $add107 = $mul105 + ($24 * 2237 | 0) | 0;
  $sub109 = $mul105 + (Math_imul($25, -14084) | 0) | 0;
  $sub112 = (Math_imul($25, -11295) | 0) + ($24 * 5027 | 0) | 0;
  $add113 = $add107 + $add95 | 0;
  $sub114 = $add95 - $add107 | 0;
  $add115 = $sub109 + $add96 | 0;
  $sub116 = $add96 - $sub109 | 0;
  $add117 = $sub112 + $sub97 | 0;
  $sub118 = $sub97 - $sub112 | 0;
  $28 = HEAP32[$wsptr$1225 + 4 >> 2] | 0;
  $29 = HEAP32[$wsptr$1225 + 12 >> 2] | 0;
  $30 = HEAP32[$wsptr$1225 + 20 >> 2] | 0;
  $shl123 = HEAP32[$wsptr$1225 + 28 >> 2] << 13;
  $add124 = $30 + $28 | 0;
  $mul126 = ($29 + $28 | 0) * 10935 | 0;
  $mul127 = $add124 * 9810 | 0;
  $sub131 = $mul126 + (Math_imul($28, -9232) | 0) + $mul127 + $shl123 | 0;
  $mul132 = $add124 * 6164 | 0;
  $sub135 = $28 - $29 | 0;
  $sub137 = ($sub135 * 3826 | 0) - $shl123 | 0;
  $add138 = $mul132 + (Math_imul($28, -8693) | 0) + $sub137 | 0;
  $sub141 = (Math_imul($30 + $29 | 0, -1297) | 0) - $shl123 | 0;
  $add144 = $mul126 + (Math_imul($29, -3474) | 0) + $sub141 | 0;
  $add147 = $mul127 + (Math_imul($30, -19447) | 0) + $sub141 | 0;
  $mul149 = ($30 - $29 | 0) * 11512 | 0;
  $add153 = $shl123 + (Math_imul($30, -13850) | 0) + $mul149 + $mul132 | 0;
  $add156 = $mul149 + ($29 * 5529 | 0) + $sub137 | 0;
  $add159 = ($sub135 - $30 << 13) + $shl123 | 0;
  HEAP8[$add$ptr87 >> 0] = HEAP8[$add$ptr + (($sub131 + $add113 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 13 >> 0] = HEAP8[$add$ptr + (($add113 - $sub131 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 1 >> 0] = HEAP8[$add$ptr + (($add144 + $add115 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 12 >> 0] = HEAP8[$add$ptr + (($add115 - $add144 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 2 >> 0] = HEAP8[$add$ptr + (($add147 + $add117 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 11 >> 0] = HEAP8[$add$ptr + (($add117 - $add147 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 3 >> 0] = HEAP8[$add$ptr + (($add159 + $sub101 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 10 >> 0] = HEAP8[$add$ptr + (($sub101 - $add159 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 4 >> 0] = HEAP8[$add$ptr + (($add153 + $sub118 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 9 >> 0] = HEAP8[$add$ptr + (($sub118 - $add153 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 5 >> 0] = HEAP8[$add$ptr + (($add156 + $sub116 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 8 >> 0] = HEAP8[$add$ptr + (($sub116 - $add156 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 6 >> 0] = HEAP8[$add$ptr + (($add138 + $sub114 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 7 >> 0] = HEAP8[$add$ptr + (($sub114 - $add138 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1226 = $ctr$1226 + 1 | 0;
  if (($ctr$1226 | 0) == 7) break; else $wsptr$1225 = $wsptr$1225 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _decompress_onepass($cinfo, $output_buf) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 var $$pre94 = 0, $$sink = 0, $0 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $DCT_h_scaled_size = 0, $DCT_v_scaled_size = 0, $MCU_col_num$086 = 0, $MCU_ctr = 0, $MCU_height = 0, $MCU_rows_per_iMCU_row = 0, $MCU_vert_offset = 0, $MCU_width = 0, $add42 = 0, $arraydecay = 0, $blkn$084 = 0, $blkn$179 = 0, $blkn$179$us = 0, $blkn$2 = 0, $blocks_in_MCU = 0, $ci$083 = 0, $cmp21 = 0, $coef1 = 0, $comps_in_scan = 0, $cond = 0, $entropy = 0, $idct = 0, $inc52 = 0, $inc56 = 0, $inc60 = 0, $input_iMCU_row = 0, $input_iMCU_row59$pre$phiZ2D = 0, $last_row_height = 0, $lim_Se = 0, $mul25 = 0, $output_col$075$us = 0, $output_iMCU_row = 0, $output_ptr$078$us = 0, $retval$0 = 0, $sub = 0, $sub2 = 0, $total_iMCU_rows = 0, $xindex$074$us = 0, $yindex$077 = 0, $yindex$077$us = 0, $yoffset$089 = 0, label = 0;
 $coef1 = $cinfo + 452 | 0;
 $0 = HEAP32[$coef1 >> 2] | 0;
 $sub = (HEAP32[$cinfo + 360 >> 2] | 0) + -1 | 0;
 $total_iMCU_rows = $cinfo + 332 | 0;
 $2 = HEAP32[$total_iMCU_rows >> 2] | 0;
 $sub2 = $2 + -1 | 0;
 $MCU_vert_offset = $0 + 24 | 0;
 $3 = HEAP32[$MCU_vert_offset >> 2] | 0;
 $MCU_rows_per_iMCU_row = $0 + 28 | 0;
 $4 = HEAP32[$MCU_rows_per_iMCU_row >> 2] | 0;
 do if (($3 | 0) < ($4 | 0)) {
  $MCU_ctr = $0 + 20 | 0;
  $lim_Se = $cinfo + 436 | 0;
  $entropy = $cinfo + 468 | 0;
  $arraydecay = $0 + 32 | 0;
  $blocks_in_MCU = $cinfo + 368 | 0;
  $comps_in_scan = $cinfo + 340 | 0;
  $idct = $cinfo + 472 | 0;
  $input_iMCU_row = $cinfo + 148 | 0;
  $40 = $4;
  $5 = HEAP32[$MCU_ctr >> 2] | 0;
  $yoffset$089 = $3;
  L3 : while (1) {
   if ($5 >>> 0 > $sub >>> 0) $30 = $40; else {
    $MCU_col_num$086 = $5;
    while (1) {
     if (HEAP32[$lim_Se >> 2] | 0) _memset(HEAP32[$arraydecay >> 2] | 0, 0, HEAP32[$blocks_in_MCU >> 2] << 7 | 0) | 0;
     if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$entropy >> 2] | 0) + 4 >> 2] & 63]($cinfo, $arraydecay) | 0)) break L3;
     $11 = HEAP32[$comps_in_scan >> 2] | 0;
     if (($11 | 0) > 0) {
      $cmp21 = $MCU_col_num$086 >>> 0 < $sub >>> 0;
      $41 = $11;
      $blkn$084 = 0;
      $ci$083 = 0;
      while (1) {
       $12 = HEAP32[$cinfo + 344 + ($ci$083 << 2) >> 2] | 0;
       L17 : do if (HEAP32[$12 + 52 >> 2] | 0) {
        $16 = HEAP32[$12 + 4 >> 2] | 0;
        $17 = HEAP32[(HEAP32[$idct >> 2] | 0) + 4 + ($16 << 2) >> 2] | 0;
        $MCU_width = $12 + 56 | 0;
        $cond = HEAP32[($cmp21 ? $MCU_width : $12 + 72 | 0) >> 2] | 0;
        $DCT_v_scaled_size = $12 + 40 | 0;
        $18 = HEAP32[$DCT_v_scaled_size >> 2] | 0;
        $mul25 = Math_imul(HEAP32[$12 + 68 >> 2] | 0, $MCU_col_num$086) | 0;
        $MCU_height = $12 + 60 | 0;
        $20 = HEAP32[$MCU_height >> 2] | 0;
        if (($20 | 0) > 0) {
         $last_row_height = $12 + 76 | 0;
         $DCT_h_scaled_size = $12 + 36 | 0;
         if (($cond | 0) <= 0) {
          $$pre94 = HEAP32[$MCU_width >> 2] | 0;
          $blkn$179 = $blkn$084;
          $yindex$077 = 0;
          while (1) {
           $add42 = $$pre94 + $blkn$179 | 0;
           $yindex$077 = $yindex$077 + 1 | 0;
           if (($yindex$077 | 0) >= ($20 | 0)) {
            $29 = $41;
            $blkn$2 = $add42;
            break L17;
           } else $blkn$179 = $add42;
          }
         }
         $42 = $20;
         $43 = $18;
         $blkn$179$us = $blkn$084;
         $output_ptr$078$us = (HEAP32[$output_buf + ($16 << 2) >> 2] | 0) + ((Math_imul($18, $yoffset$089) | 0) << 2) | 0;
         $yindex$077$us = 0;
         while (1) {
          if ((HEAP32[$input_iMCU_row >> 2] | 0) >>> 0 >= $sub2 >>> 0 ? ($yindex$077$us + $yoffset$089 | 0) >= (HEAP32[$last_row_height >> 2] | 0) : 0) {
           $25 = $43;
           $26 = $42;
          } else {
           $output_col$075$us = $mul25;
           $xindex$074$us = 0;
           while (1) {
            FUNCTION_TABLE_viiiii[$17 & 63]($cinfo, $12, HEAP32[$0 + 32 + ($xindex$074$us + $blkn$179$us << 2) >> 2] | 0, $output_ptr$078$us, $output_col$075$us);
            $xindex$074$us = $xindex$074$us + 1 | 0;
            if (($xindex$074$us | 0) == ($cond | 0)) break; else $output_col$075$us = (HEAP32[$DCT_h_scaled_size >> 2] | 0) + $output_col$075$us | 0;
           }
           $25 = HEAP32[$DCT_v_scaled_size >> 2] | 0;
           $26 = HEAP32[$MCU_height >> 2] | 0;
          }
          $blkn$179$us = (HEAP32[$MCU_width >> 2] | 0) + $blkn$179$us | 0;
          $yindex$077$us = $yindex$077$us + 1 | 0;
          if (($yindex$077$us | 0) >= ($26 | 0)) break; else {
           $42 = $26;
           $43 = $25;
           $output_ptr$078$us = $output_ptr$078$us + ($25 << 2) | 0;
          }
         }
         $29 = HEAP32[$comps_in_scan >> 2] | 0;
         $blkn$2 = $blkn$179$us;
        } else {
         $29 = $41;
         $blkn$2 = $blkn$084;
        }
       } else {
        $29 = $41;
        $blkn$2 = (HEAP32[$12 + 64 >> 2] | 0) + $blkn$084 | 0;
       } while (0);
       $ci$083 = $ci$083 + 1 | 0;
       if (($ci$083 | 0) >= ($29 | 0)) break; else {
        $41 = $29;
        $blkn$084 = $blkn$2;
       }
      }
     }
     $inc52 = $MCU_col_num$086 + 1 | 0;
     if ($inc52 >>> 0 > $sub >>> 0) break; else $MCU_col_num$086 = $inc52;
    }
    $30 = HEAP32[$MCU_rows_per_iMCU_row >> 2] | 0;
   }
   HEAP32[$MCU_ctr >> 2] = 0;
   $inc56 = $yoffset$089 + 1 | 0;
   if (($inc56 | 0) < ($30 | 0)) {
    $40 = $30;
    $5 = 0;
    $yoffset$089 = $inc56;
   } else {
    label = 30;
    break;
   }
  }
  if ((label | 0) == 30) {
   $33 = HEAP32[$total_iMCU_rows >> 2] | 0;
   $input_iMCU_row59$pre$phiZ2D = $input_iMCU_row;
   break;
  }
  HEAP32[$MCU_vert_offset >> 2] = $yoffset$089;
  HEAP32[$MCU_ctr >> 2] = $MCU_col_num$086;
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $33 = $2;
  $input_iMCU_row59$pre$phiZ2D = $cinfo + 148 | 0;
 } while (0);
 $output_iMCU_row = $cinfo + 156 | 0;
 HEAP32[$output_iMCU_row >> 2] = (HEAP32[$output_iMCU_row >> 2] | 0) + 1;
 $inc60 = (HEAP32[$input_iMCU_row59$pre$phiZ2D >> 2] | 0) + 1 | 0;
 HEAP32[$input_iMCU_row59$pre$phiZ2D >> 2] = $inc60;
 if ($inc60 >>> 0 >= $33 >>> 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 460 >> 2] | 0) + 12 >> 2] & 255]($cinfo);
  $retval$0 = 4;
  return $retval$0 | 0;
 }
 $34 = HEAP32[$coef1 >> 2] | 0;
 if ((HEAP32[$cinfo + 340 >> 2] | 0) > 1) $$sink = 1; else {
  $36 = HEAP32[$cinfo + 344 >> 2] | 0;
  $$sink = HEAP32[($inc60 >>> 0 < ($33 + -1 | 0) >>> 0 ? $36 + 12 | 0 : $36 + 76 | 0) >> 2] | 0;
 }
 HEAP32[$34 + 28 >> 2] = $$sink;
 HEAP32[$34 + 20 >> 2] = 0;
 HEAP32[$34 + 24 >> 2] = 0;
 $retval$0 = 3;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($this) {
 $this = $this | 0;
 var $Attrs = 0, $IsEndOfEncoding = 0, $Name = 0, $NameInfo = 0, $Names = 0, $Names49 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call20 = 0, $call23 = 0, $call28 = 0, $call39 = 0, $call50 = 0, $call52 = 0, $call7 = 0, $call8 = 0, $ref$tmp46 = 0, $retval$10 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp$byval_copy = sp + 48 | 0;
 $IsEndOfEncoding = sp + 40 | 0;
 $NameInfo = sp + 24 | 0;
 $Name = sp + 20 | 0;
 $Attrs = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $ref$tmp46 = sp;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 84:
 case 71:
  {
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break;
  }
 default:
  {
   HEAP32[$IsEndOfEncoding >> 2] = $this;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($NameInfo, $this);
   $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call7, $NameInfo) | 0;
   HEAP32[$Name >> 2] = $call8;
   if (($call8 | 0) != 0 ? !(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this, $NameInfo) | 0) : 0) if (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding) | 0) $retval$9 = $call8; else {
    HEAP32[$Attrs >> 2] = 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33583);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
    HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
    do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
     $Names = $this + 8 | 0;
     $call20 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
     while (1) {
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
       label = 11;
       break;
      }
      $call23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call7) | 0;
      HEAP32[$agg$tmp$byval_copy >> 2] = $call23;
      if (!$call23) {
       label = 12;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp$byval_copy);
     }
     if ((label | 0) == 11) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp$byval_copy, $this, $call20);
      $call28 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
      HEAP32[$Attrs >> 2] = $call28;
      label = 13;
      break;
     } else if ((label | 0) == 12) {
      $retval$8 = 0;
      break;
     }
    } else label = 13; while (0);
    if ((label | 0) == 13) {
     HEAP32[$agg$tmp$byval_copy >> 2] = 0;
     if (((HEAP8[$NameInfo >> 0] | 0) == 0 ? (HEAP8[$NameInfo + 1 >> 0] | 0) != 0 : 0) ? ($call39 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7) | 0, HEAP32[$agg$tmp$byval_copy >> 2] = $call39, ($call39 | 0) == 0) : 0) $retval$7 = 0; else label = 16;
     do if ((label | 0) == 16) {
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0) {
       __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp46);
       $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Name, $ref$tmp46, $Attrs, $NameInfo + 4 | 0, $NameInfo + 8 | 0) | 0;
       break;
      }
      $Names49 = $this + 8 | 0;
      $call50 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names49) | 0;
      while (1) {
       $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7) | 0;
       HEAP32[$ref$tmp46 >> 2] = $call52;
       if (!$call52) {
        label = 21;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names49, $ref$tmp46);
       if (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding) | 0) {
        label = 22;
        break;
       }
      }
      if ((label | 0) == 21) {
       $retval$7 = 0;
       break;
      } else if ((label | 0) == 22) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp46, $this, $call50);
       $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Name, $ref$tmp46, $Attrs, $NameInfo + 4 | 0, $NameInfo + 8 | 0) | 0;
       break;
      }
     } while (0);
     $retval$8 = $retval$7;
    }
    $retval$9 = $retval$8;
   } else $retval$9 = 0;
   $retval$10 = $retval$9;
  }
 }
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _jpeg_idct_7x14($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add10 = 0, $add154 = 0, $add157 = 0, $add160 = 0, $add163 = 0, $add177 = 0, $add180 = 0, $add183 = 0, $add26 = 0, $add32 = 0, $add34 = 0, $add36 = 0, $add55 = 0, $add69 = 0, $add76 = 0, $add79 = 0, $add85 = 0, $add88 = 0, $add9 = 0, $ctr$0225 = 0, $ctr$1221 = 0, $inptr$0222 = 0, $mul147 = 0, $mul149 = 0, $mul170 = 0, $mul172 = 0, $mul176 = 0, $mul179 = 0, $mul18 = 0, $mul22 = 0, $mul24 = 0, $mul41 = 0, $mul45 = 0, $mul49 = 0, $mul5 = 0, $mul53 = 0, $mul57 = 0, $mul58 = 0, $mul63 = 0, $mul81 = 0, $quantptr$0223 = 0, $shl142 = 0, $shl54 = 0, $shl90 = 0, $shr = 0, $sub = 0, $sub153 = 0, $sub28 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub37 = 0, $sub62 = 0, $sub66 = 0, $sub68 = 0, $sub73 = 0, $workspace = 0, $wsptr$0224 = 0, $wsptr$1220 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0225 = 0;
 $inptr$0222 = $coef_block;
 $quantptr$0223 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0224 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0222 >> 1] << 13, HEAP32[$quantptr$0223 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0223 + 128 >> 2] | 0, HEAP16[$inptr$0222 + 64 >> 1] | 0) | 0;
  $add9 = ($mul5 * 10438 | 0) + $add | 0;
  $add10 = ($mul5 * 2578 | 0) + $add | 0;
  $sub = (Math_imul($mul5, -7223) | 0) + $add | 0;
  $shr = (Math_imul($mul5, -11586) | 0) + $add >> 11;
  $mul18 = Math_imul(HEAP32[$quantptr$0223 + 64 >> 2] | 0, HEAP16[$inptr$0222 + 32 >> 1] | 0) | 0;
  $mul22 = Math_imul(HEAP32[$quantptr$0223 + 192 >> 2] | 0, HEAP16[$inptr$0222 + 96 >> 1] | 0) | 0;
  $mul24 = ($mul22 + $mul18 | 0) * 9058 | 0;
  $add26 = $mul24 + ($mul18 * 2237 | 0) | 0;
  $sub28 = $mul24 + (Math_imul($mul22, -14084) | 0) | 0;
  $sub31 = (Math_imul($mul22, -11295) | 0) + ($mul18 * 5027 | 0) | 0;
  $add32 = $add26 + $add9 | 0;
  $sub33 = $add9 - $add26 | 0;
  $add34 = $sub28 + $add10 | 0;
  $sub35 = $add10 - $sub28 | 0;
  $add36 = $sub31 + $sub | 0;
  $sub37 = $sub - $sub31 | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0223 + 32 >> 2] | 0, HEAP16[$inptr$0222 + 16 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0223 + 96 >> 2] | 0, HEAP16[$inptr$0222 + 48 >> 1] | 0) | 0;
  $mul49 = Math_imul(HEAP32[$quantptr$0223 + 160 >> 2] | 0, HEAP16[$inptr$0222 + 80 >> 1] | 0) | 0;
  $mul53 = Math_imul(HEAP32[$quantptr$0223 + 224 >> 2] | 0, HEAP16[$inptr$0222 + 112 >> 1] | 0) | 0;
  $shl54 = $mul53 << 13;
  $add55 = $mul49 + $mul41 | 0;
  $mul57 = ($mul45 + $mul41 | 0) * 10935 | 0;
  $mul58 = $add55 * 9810 | 0;
  $sub62 = $mul57 + (Math_imul($mul41, -9232) | 0) + $mul58 + $shl54 | 0;
  $mul63 = $add55 * 6164 | 0;
  $sub66 = $mul41 - $mul45 | 0;
  $sub68 = ($sub66 * 3826 | 0) - $shl54 | 0;
  $add69 = $mul63 + (Math_imul($mul41, -8693) | 0) + $sub68 | 0;
  $sub73 = (Math_imul($mul49 + $mul45 | 0, -1297) | 0) - $shl54 | 0;
  $add76 = $mul57 + (Math_imul($mul45, -3474) | 0) + $sub73 | 0;
  $add79 = $mul58 + (Math_imul($mul49, -19447) | 0) + $sub73 | 0;
  $mul81 = ($mul49 - $mul45 | 0) * 11512 | 0;
  $add85 = $mul81 + (Math_imul($mul49, -13850) | 0) + $mul63 + $shl54 | 0;
  $add88 = $mul81 + ($mul45 * 5529 | 0) + $sub68 | 0;
  $shl90 = $sub66 - $mul49 + $mul53 << 2;
  HEAP32[$wsptr$0224 >> 2] = $sub62 + $add32 >> 11;
  HEAP32[$wsptr$0224 + 364 >> 2] = $add32 - $sub62 >> 11;
  HEAP32[$wsptr$0224 + 28 >> 2] = $add76 + $add34 >> 11;
  HEAP32[$wsptr$0224 + 336 >> 2] = $add34 - $add76 >> 11;
  HEAP32[$wsptr$0224 + 56 >> 2] = $add79 + $add36 >> 11;
  HEAP32[$wsptr$0224 + 308 >> 2] = $add36 - $add79 >> 11;
  HEAP32[$wsptr$0224 + 84 >> 2] = $shl90 + $shr;
  HEAP32[$wsptr$0224 + 280 >> 2] = $shr - $shl90;
  HEAP32[$wsptr$0224 + 112 >> 2] = $add85 + $sub37 >> 11;
  HEAP32[$wsptr$0224 + 252 >> 2] = $sub37 - $add85 >> 11;
  HEAP32[$wsptr$0224 + 140 >> 2] = $add88 + $sub35 >> 11;
  HEAP32[$wsptr$0224 + 224 >> 2] = $sub35 - $add88 >> 11;
  HEAP32[$wsptr$0224 + 168 >> 2] = $add69 + $sub33 >> 11;
  HEAP32[$wsptr$0224 + 196 >> 2] = $sub33 - $add69 >> 11;
  $ctr$0225 = $ctr$0225 + 1 | 0;
  if (($ctr$0225 | 0) == 7) break; else {
   $inptr$0222 = $inptr$0222 + 2 | 0;
   $quantptr$0223 = $quantptr$0223 + 4 | 0;
   $wsptr$0224 = $wsptr$0224 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1221 = 0;
 $wsptr$1220 = $workspace;
 while (1) {
  $add$ptr139 = (HEAP32[$output_buf + ($ctr$1221 << 2) >> 2] | 0) + $output_col | 0;
  $shl142 = (HEAP32[$wsptr$1220 >> 2] << 13) + 134348800 | 0;
  $29 = HEAP32[$wsptr$1220 + 8 >> 2] | 0;
  $30 = HEAP32[$wsptr$1220 + 16 >> 2] | 0;
  $31 = HEAP32[$wsptr$1220 + 24 >> 2] | 0;
  $mul147 = ($30 - $31 | 0) * 7223 | 0;
  $mul149 = ($29 - $30 | 0) * 2578 | 0;
  $sub153 = (Math_imul($30, -15083) | 0) + $shl142 + $mul149 + $mul147 | 0;
  $add154 = $31 + $29 | 0;
  $add157 = ($add154 * 10438 | 0) + $shl142 | 0;
  $add160 = $mul147 + (Math_imul($31, -637) | 0) + $add157 | 0;
  $add163 = $mul149 + (Math_imul($29, -20239) | 0) + $add157 | 0;
  $35 = HEAP32[$wsptr$1220 + 4 >> 2] | 0;
  $36 = HEAP32[$wsptr$1220 + 12 >> 2] | 0;
  $37 = HEAP32[$wsptr$1220 + 20 >> 2] | 0;
  $mul170 = ($36 + $35 | 0) * 7663 | 0;
  $mul172 = ($35 - $36 | 0) * 1395 | 0;
  $mul176 = Math_imul($37 + $36 | 0, -11295) | 0;
  $add177 = $mul170 + $mul172 + $mul176 | 0;
  $mul179 = ($37 + $35 | 0) * 5027 | 0;
  $add180 = $mul170 - $mul172 + $mul179 | 0;
  $add183 = $mul179 + ($37 * 15326 | 0) + $mul176 | 0;
  HEAP8[$add$ptr139 >> 0] = HEAP8[$add$ptr + (($add180 + $add160 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 6 >> 0] = HEAP8[$add$ptr + (($add160 - $add180 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 1 >> 0] = HEAP8[$add$ptr + (($add177 + $sub153 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 5 >> 0] = HEAP8[$add$ptr + (($sub153 - $add177 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 2 >> 0] = HEAP8[$add$ptr + (($add183 + $add163 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 4 >> 0] = HEAP8[$add$ptr + (($add163 - $add183 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr139 + 3 >> 0] = HEAP8[$add$ptr + (((($30 - $add154 | 0) * 11585 | 0) + $shl142 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1221 = $ctr$1221 + 1 | 0;
  if (($ctr$1221 | 0) == 14) break; else $wsptr$1220 = $wsptr$1220 + 28 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jpeg_idct_10x10($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $add = 0, $add$ptr = 0, $add$ptr107 = 0, $add114 = 0, $add124 = 0, $add127 = 0, $add129 = 0, $add136 = 0, $add140 = 0, $add143 = 0, $add146 = 0, $add159 = 0, $add23 = 0, $add26 = 0, $add28 = 0, $add46 = 0, $add51 = 0, $add54 = 0, $add57 = 0, $add70 = 0, $add8 = 0, $ctr$0214 = 0, $ctr$1210 = 0, $inptr$0211 = 0, $mul122 = 0, $mul138 = 0, $mul139 = 0, $mul147 = 0, $mul15 = 0, $mul19 = 0, $mul21 = 0, $mul33 = 0, $mul37 = 0, $mul41 = 0, $mul45 = 0, $mul48 = 0, $mul5 = 0, $mul50 = 0, $mul58 = 0, $quantptr$0212 = 0, $shl110 = 0, $shl134 = 0, $shl49 = 0, $shl64 = 0, $shr = 0, $sub = 0, $sub115 = 0, $sub118 = 0, $sub126 = 0, $sub128 = 0, $sub130 = 0, $sub137 = 0, $sub150 = 0, $sub153 = 0, $sub156 = 0, $sub25 = 0, $sub27 = 0, $sub29 = 0, $sub47 = 0, $sub61 = 0, $sub67 = 0, $workspace = 0, $wsptr$0213 = 0, $wsptr$1209 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0214 = 0;
 $inptr$0211 = $coef_block;
 $quantptr$0212 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0213 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0211 >> 1] << 13, HEAP32[$quantptr$0212 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0212 + 128 >> 2] | 0, HEAP16[$inptr$0211 + 64 >> 1] | 0) | 0;
  $add8 = ($mul5 * 9373 | 0) + $add | 0;
  $sub = (Math_imul($mul5, -3580) | 0) + $add | 0;
  $shr = (Math_imul($mul5, -11586) | 0) + $add >> 11;
  $mul15 = Math_imul(HEAP32[$quantptr$0212 + 64 >> 2] | 0, HEAP16[$inptr$0211 + 32 >> 1] | 0) | 0;
  $mul19 = Math_imul(HEAP32[$quantptr$0212 + 192 >> 2] | 0, HEAP16[$inptr$0211 + 96 >> 1] | 0) | 0;
  $mul21 = ($mul19 + $mul15 | 0) * 6810 | 0;
  $add23 = $mul21 + ($mul15 * 4209 | 0) | 0;
  $sub25 = $mul21 + (Math_imul($mul19, -17828) | 0) | 0;
  $add26 = $add23 + $add8 | 0;
  $sub27 = $add8 - $add23 | 0;
  $add28 = $sub25 + $sub | 0;
  $sub29 = $sub - $sub25 | 0;
  $mul33 = Math_imul(HEAP32[$quantptr$0212 + 32 >> 2] | 0, HEAP16[$inptr$0211 + 16 >> 1] | 0) | 0;
  $mul37 = Math_imul(HEAP32[$quantptr$0212 + 96 >> 2] | 0, HEAP16[$inptr$0211 + 48 >> 1] | 0) | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0212 + 160 >> 2] | 0, HEAP16[$inptr$0211 + 80 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0212 + 224 >> 2] | 0, HEAP16[$inptr$0211 + 112 >> 1] | 0) | 0;
  $add46 = $mul45 + $mul37 | 0;
  $sub47 = $mul37 - $mul45 | 0;
  $mul48 = $sub47 * 2531 | 0;
  $shl49 = $mul41 << 13;
  $mul50 = $add46 * 7791 | 0;
  $add51 = $mul48 + $shl49 | 0;
  $add54 = $mul50 + ($mul33 * 11443 | 0) + $add51 | 0;
  $add57 = ($mul33 * 1812 | 0) - $mul50 + $add51 | 0;
  $mul58 = $add46 * 4815 | 0;
  $sub61 = $shl49 - $mul48 - ($sub47 << 12) | 0;
  $shl64 = $mul33 - $mul41 - $sub47 << 2;
  $sub67 = ($mul33 * 10323 | 0) - $mul58 - $sub61 | 0;
  $add70 = $sub61 + (($mul33 * 5260 | 0) - $mul58) | 0;
  HEAP32[$wsptr$0213 >> 2] = $add54 + $add26 >> 11;
  HEAP32[$wsptr$0213 + 288 >> 2] = $add26 - $add54 >> 11;
  HEAP32[$wsptr$0213 + 32 >> 2] = $sub67 + $add28 >> 11;
  HEAP32[$wsptr$0213 + 256 >> 2] = $add28 - $sub67 >> 11;
  HEAP32[$wsptr$0213 + 64 >> 2] = $shl64 + $shr;
  HEAP32[$wsptr$0213 + 224 >> 2] = $shr - $shl64;
  HEAP32[$wsptr$0213 + 96 >> 2] = $add70 + $sub29 >> 11;
  HEAP32[$wsptr$0213 + 192 >> 2] = $sub29 - $add70 >> 11;
  HEAP32[$wsptr$0213 + 128 >> 2] = $add57 + $sub27 >> 11;
  HEAP32[$wsptr$0213 + 160 >> 2] = $sub27 - $add57 >> 11;
  $ctr$0214 = $ctr$0214 + 1 | 0;
  if (($ctr$0214 | 0) == 8) break; else {
   $inptr$0211 = $inptr$0211 + 2 | 0;
   $quantptr$0212 = $quantptr$0212 + 4 | 0;
   $wsptr$0213 = $wsptr$0213 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1210 = 0;
 $wsptr$1209 = $workspace;
 while (1) {
  $add$ptr107 = (HEAP32[$output_buf + ($ctr$1210 << 2) >> 2] | 0) + $output_col | 0;
  $shl110 = (HEAP32[$wsptr$1209 >> 2] << 13) + 134348800 | 0;
  $23 = HEAP32[$wsptr$1209 + 16 >> 2] | 0;
  $add114 = $shl110 + ($23 * 9373 | 0) | 0;
  $sub115 = $shl110 + (Math_imul($23, -3580) | 0) | 0;
  $sub118 = $shl110 + (Math_imul($23, -11586) | 0) | 0;
  $26 = HEAP32[$wsptr$1209 + 8 >> 2] | 0;
  $27 = HEAP32[$wsptr$1209 + 24 >> 2] | 0;
  $mul122 = ($27 + $26 | 0) * 6810 | 0;
  $add124 = $mul122 + ($26 * 4209 | 0) | 0;
  $sub126 = $mul122 + (Math_imul($27, -17828) | 0) | 0;
  $add127 = $add124 + $add114 | 0;
  $sub128 = $add114 - $add124 | 0;
  $add129 = $sub126 + $sub115 | 0;
  $sub130 = $sub115 - $sub126 | 0;
  $29 = HEAP32[$wsptr$1209 + 4 >> 2] | 0;
  $30 = HEAP32[$wsptr$1209 + 12 >> 2] | 0;
  $shl134 = HEAP32[$wsptr$1209 + 20 >> 2] << 13;
  $32 = HEAP32[$wsptr$1209 + 28 >> 2] | 0;
  $add136 = $32 + $30 | 0;
  $sub137 = $30 - $32 | 0;
  $mul138 = $sub137 * 2531 | 0;
  $mul139 = $add136 * 7791 | 0;
  $add140 = $mul138 + $shl134 | 0;
  $add143 = $mul139 + ($29 * 11443 | 0) + $add140 | 0;
  $add146 = ($29 * 1812 | 0) - $mul139 + $add140 | 0;
  $mul147 = $add136 * 4815 | 0;
  $sub150 = $shl134 - $mul138 - ($sub137 << 12) | 0;
  $sub153 = ($29 - $sub137 << 13) - $shl134 | 0;
  $sub156 = ($29 * 10323 | 0) - $mul147 - $sub150 | 0;
  $add159 = $sub150 + (($29 * 5260 | 0) - $mul147) | 0;
  HEAP8[$add$ptr107 >> 0] = HEAP8[$add$ptr + (($add143 + $add127 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 9 >> 0] = HEAP8[$add$ptr + (($add127 - $add143 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 1 >> 0] = HEAP8[$add$ptr + (($sub156 + $add129 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 8 >> 0] = HEAP8[$add$ptr + (($add129 - $sub156 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 2 >> 0] = HEAP8[$add$ptr + (($sub153 + $sub118 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 7 >> 0] = HEAP8[$add$ptr + (($sub118 - $sub153 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 3 >> 0] = HEAP8[$add$ptr + (($add159 + $sub130 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 6 >> 0] = HEAP8[$add$ptr + (($sub130 - $add159 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 4 >> 0] = HEAP8[$add$ptr + (($add146 + $sub128 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 5 >> 0] = HEAP8[$add$ptr + (($sub128 - $add146 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1210 = $ctr$1210 + 1 | 0;
  if (($ctr$1210 | 0) == 10) break; else $wsptr$1209 = $wsptr$1209 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $17 = 0, $22 = 0, $3 = 0, $30 = 0, $7 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0, $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call189 = 0, $call215 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0, $tobool181 = 0, $tobool55 = 0, $tobool61 = 0, $trunc = 0, label = 0;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0 = 24;
   $emin$0 = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 default:
  $retval$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $0 = HEAP32[$rpos >> 2] | 0;
   if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $0 + 1;
    $cond = HEAPU8[$0 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L13 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub13 = 1 - ((($cond | 0) == 45 & 1) << 1) | 0;
    $3 = HEAP32[$rpos >> 2] | 0;
    if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $3 + 1;
     $c$0 = HEAPU8[$3 >> 0] | 0;
     $sign$0 = $sub13;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $sub13;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $sign$0 = 1;
   }
  } while (0);
  $c$197 = $c$0;
  $i$096 = 0;
  while (1) {
   if (($c$197 | 32 | 0) != (HEAP8[27800 + $i$096 >> 0] | 0)) {
    $c$1$lcssa = $c$197;
    $trunc = $i$096;
    break;
   }
   do if ($i$096 >>> 0 < 7) {
    $7 = HEAP32[$rpos >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $7 + 1;
     $c$2 = HEAPU8[$7 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$197; while (0);
   $i$096 = $i$096 + 1 | 0;
   if ($i$096 >>> 0 >= 8) {
    $c$1$lcssa = $c$2;
    $trunc = 8;
    break;
   } else $c$197 = $c$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $tobool55 = ($pok | 0) != 0;
    if ($tobool55 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $c$395 = $c$1$lcssa;
     $i$294 = 0;
     while (1) {
      if (($c$395 | 32 | 0) != (HEAP8[27809 + $i$294 >> 0] | 0)) {
       $c$5 = $c$395;
       $i$3 = $i$294;
       break L34;
      }
      do if ($i$294 >>> 0 < 2) {
       $14 = HEAP32[$rpos >> 2] | 0;
       if ($14 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $14 + 1;
        $c$4 = HEAPU8[$14 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$395; while (0);
      $i$294 = $i$294 + 1 | 0;
      if ($i$294 >>> 0 >= 3) {
       $c$5 = $c$4;
       $i$3 = 3;
       break;
      } else $c$395 = $c$4;
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $trunc;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $17 = HEAP32[$rpos >> 2] | 0;
      if ($17 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $17 + 1;
       $cond135 = HEAPU8[$17 >> 0] | 0;
      } else $cond135 = ___shgetc($f) | 0;
      if (($cond135 | 0) != 40) {
       if (!(HEAP32[$shend >> 2] | 0)) {
        $retval$0 = nan;
        break L4;
       }
       HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while (1) {
       $22 = HEAP32[$rpos >> 2] | 0;
       if ($22 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $22 + 1;
        $cond159 = HEAPU8[$22 >> 0] | 0;
       } else $cond159 = ___shgetc($f) | 0;
       if (!(($cond159 + -48 | 0) >>> 0 < 10 | ($cond159 + -65 | 0) >>> 0 < 26) ? !(($cond159 | 0) == 95 | ($cond159 + -97 | 0) >>> 0 < 26) : 0) break;
       $i$4 = $i$4 + 1 | 0;
      }
      if (($cond159 | 0) == 41) {
       $retval$0 = nan;
       break L4;
      }
      $tobool181 = (HEAP32[$shend >> 2] | 0) == 0;
      if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      if (!$tobool55) {
       $call189 = ___errno_location() | 0;
       HEAP32[$call189 >> 2] = 28;
       ___shlim($f, 0, 0);
       $retval$0 = 0.0;
       break L4;
      }
      if (!$i$4) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while (1) {
       $dec19293$in = $dec19293$in + -1 | 0;
       if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       if (!$dec19293$in) {
        $retval$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($c$5 | 0) == 48) {
       $30 = HEAP32[$rpos >> 2] | 0;
       if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $30 + 1;
        $cond231 = HEAPU8[$30 >> 0] | 0;
       } else $cond231 = ___shgetc($f) | 0;
       if (($cond231 | 32 | 0) == 120) {
        $retval$0 = +_hexfloat($f, $bits$0, $emin$0, $sign$0, $pok);
        break L4;
       }
       if (!(HEAP32[$shend >> 2] | 0)) $c$6 = 48; else {
        HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
        $c$6 = 48;
       }
      } else $c$6 = $c$5;
      $retval$0 = +_decfloat($f, $c$6, $bits$0, $emin$0, $sign$0, $pok);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      $call215 = ___errno_location() | 0;
      HEAP32[$call215 >> 2] = 28;
      ___shlim($f, 0, 0);
      $retval$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $tobool61 = (HEAP32[$shend >> 2] | 0) == 0;
   if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $trunc >>> 0 > 3) {
    $i$190 = $trunc;
    do {
     if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $i$190 = $i$190 + -1 | 0;
    } while ($i$190 >>> 0 > 3);
   }
  }
  $retval$0 = +($sign$0 | 0) * inf;
 } while (0);
 return +$retval$0;
}

function _jpeg_calc_output_dimensions($cinfo) {
 $cinfo = $cinfo | 0;
 var $$lcssa = 0, $$lcssa$sink = 0, $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $24 = 0, $25 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $DCT_h_scaled_size = 0, $DCT_h_scaled_size$us = 0, $DCT_v_scaled_size = 0, $DCT_v_scaled_size$us = 0, $block_size = 0, $call = 0, $call65 = 0, $ci$089 = 0, $ci$089$us = 0, $ci$169 = 0, $cmp1783 = 0, $cmp1783$us = 0, $cmp488 = 0, $compptr$090 = 0, $compptr$090$us = 0, $compptr$170 = 0, $cond73 = 0, $image_height = 0, $image_width = 0, $max_h_samp_factor56 = 0, $max_v_samp_factor = 0, $max_v_samp_factor62 = 0, $mul = 0, $mul$lcssa = 0, $mul13 = 0, $mul13$lcssa = 0, $mul13$lcssa$us = 0, $mul13$us = 0, $mul1385 = 0, $mul1385$us = 0, $mul31 = 0, $mul31$us = 0, $mul39 = 0, $mul39$us = 0, $mul55 = 0, $mul61 = 0, $mul76 = 0, $num_components = 0, $ssize$075 = 0, $ssize$184 = 0, $ssize$184$us = 0;
 $0 = HEAP32[$cinfo + 20 >> 2] | 0;
 if (($0 | 0) != 202) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 21;
  HEAP32[$1 + 24 >> 2] = $0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 _jpeg_core_output_dimensions($cinfo);
 $4 = HEAP32[$cinfo + 216 >> 2] | 0;
 $num_components = $cinfo + 36 | 0;
 $5 = HEAP32[$num_components >> 2] | 0;
 $cmp488 = ($5 | 0) > 0;
 if ($cmp488) {
  $6 = HEAP32[$cinfo + 324 >> 2] | 0;
  $cond73 = (HEAP32[$cinfo + 76 >> 2] | 0) == 0 ? 4 : 8;
  $max_v_samp_factor = $cinfo + 320 | 0;
  $8 = HEAP32[$cinfo + 328 >> 2] | 0;
  if (($6 | 0) > ($cond73 | 0)) {
   $cmp1783$us = ($8 | 0) > ($cond73 | 0);
   $mul39$us = $6 << 1;
   $ci$089$us = 0;
   $compptr$090$us = $4;
   while (1) {
    $DCT_h_scaled_size$us = $compptr$090$us + 36 | 0;
    HEAP32[$DCT_h_scaled_size$us >> 2] = $6;
    L10 : do if ($cmp1783$us) $mul13$lcssa$us = $8; else {
     $10 = HEAP32[$max_v_samp_factor >> 2] | 0;
     $9 = HEAP32[$compptr$090$us + 12 >> 2] | 0;
     $mul1385$us = $8;
     $ssize$184$us = 1;
     while (1) {
      $ssize$184$us = $ssize$184$us << 1;
      if (($10 | 0) % (Math_imul($ssize$184$us, $9) | 0) | 0 | 0) {
       $mul13$lcssa$us = $mul1385$us;
       break L10;
      }
      $mul13$us = Math_imul($8, $ssize$184$us) | 0;
      if (($mul13$us | 0) > ($cond73 | 0)) {
       $mul13$lcssa$us = $mul13$us;
       break;
      } else $mul1385$us = $mul13$us;
     }
    } while (0);
    $DCT_v_scaled_size$us = $compptr$090$us + 40 | 0;
    HEAP32[$DCT_v_scaled_size$us >> 2] = $mul13$lcssa$us;
    $mul31$us = $mul13$lcssa$us << 1;
    if (($6 | 0) <= ($mul31$us | 0)) {
     if (($mul13$lcssa$us | 0) > ($mul39$us | 0)) HEAP32[$DCT_v_scaled_size$us >> 2] = $mul39$us;
    } else HEAP32[$DCT_h_scaled_size$us >> 2] = $mul31$us;
    $ci$089$us = $ci$089$us + 1 | 0;
    if (($ci$089$us | 0) >= ($5 | 0)) break; else $compptr$090$us = $compptr$090$us + 88 | 0;
   }
  } else {
   $$pre = HEAP32[$cinfo + 316 >> 2] | 0;
   $cmp1783 = ($8 | 0) > ($cond73 | 0);
   $ci$089 = 0;
   $compptr$090 = $4;
   while (1) {
    $11 = HEAP32[$compptr$090 + 8 >> 2] | 0;
    $mul76 = $6;
    $ssize$075 = 1;
    while (1) {
     $ssize$075 = $ssize$075 << 1;
     if (($$pre | 0) % (Math_imul($ssize$075, $11) | 0) | 0 | 0) {
      $mul$lcssa = $mul76;
      break;
     }
     $mul = Math_imul($6, $ssize$075) | 0;
     if (($mul | 0) > ($cond73 | 0)) {
      $mul$lcssa = $mul;
      break;
     } else $mul76 = $mul;
    }
    $DCT_h_scaled_size = $compptr$090 + 36 | 0;
    HEAP32[$DCT_h_scaled_size >> 2] = $mul$lcssa;
    L28 : do if ($cmp1783) $mul13$lcssa = $8; else {
     $12 = HEAP32[$max_v_samp_factor >> 2] | 0;
     $13 = HEAP32[$compptr$090 + 12 >> 2] | 0;
     $mul1385 = $8;
     $ssize$184 = 1;
     while (1) {
      $ssize$184 = $ssize$184 << 1;
      if (($12 | 0) % (Math_imul($ssize$184, $13) | 0) | 0 | 0) {
       $mul13$lcssa = $mul1385;
       break L28;
      }
      $mul13 = Math_imul($8, $ssize$184) | 0;
      if (($mul13 | 0) > ($cond73 | 0)) {
       $mul13$lcssa = $mul13;
       break;
      } else $mul1385 = $mul13;
     }
    } while (0);
    $DCT_v_scaled_size = $compptr$090 + 40 | 0;
    HEAP32[$DCT_v_scaled_size >> 2] = $mul13$lcssa;
    $mul31 = $mul13$lcssa << 1;
    if (($mul$lcssa | 0) <= ($mul31 | 0)) {
     $mul39 = $mul$lcssa << 1;
     if (($mul13$lcssa | 0) > ($mul39 | 0)) HEAP32[$DCT_v_scaled_size >> 2] = $mul39;
    } else HEAP32[$DCT_h_scaled_size >> 2] = $mul31;
    $ci$089 = $ci$089 + 1 | 0;
    if (($ci$089 | 0) >= ($5 | 0)) break; else $compptr$090 = $compptr$090 + 88 | 0;
   }
  }
  if ($cmp488) {
   $image_width = $cinfo + 28 | 0;
   $max_h_samp_factor56 = $cinfo + 316 | 0;
   $block_size = $cinfo + 428 | 0;
   $image_height = $cinfo + 32 | 0;
   $max_v_samp_factor62 = $cinfo + 320 | 0;
   $ci$169 = 0;
   $compptr$170 = $4;
   while (1) {
    $mul55 = Math_imul(Math_imul(HEAP32[$compptr$170 + 8 >> 2] | 0, HEAP32[$image_width >> 2] | 0) | 0, HEAP32[$compptr$170 + 36 >> 2] | 0) | 0;
    $call = _jdiv_round_up($mul55, Math_imul(HEAP32[$block_size >> 2] | 0, HEAP32[$max_h_samp_factor56 >> 2] | 0) | 0) | 0;
    HEAP32[$compptr$170 + 44 >> 2] = $call;
    $mul61 = Math_imul(Math_imul(HEAP32[$compptr$170 + 12 >> 2] | 0, HEAP32[$image_height >> 2] | 0) | 0, HEAP32[$compptr$170 + 40 >> 2] | 0) | 0;
    $call65 = _jdiv_round_up($mul61, Math_imul(HEAP32[$block_size >> 2] | 0, HEAP32[$max_v_samp_factor62 >> 2] | 0) | 0) | 0;
    HEAP32[$compptr$170 + 48 >> 2] = $call65;
    $ci$169 = $ci$169 + 1 | 0;
    $24 = HEAP32[$num_components >> 2] | 0;
    if (($ci$169 | 0) >= ($24 | 0)) {
     $$lcssa = $24;
     break;
    } else $compptr$170 = $compptr$170 + 88 | 0;
   }
  } else $$lcssa = $5;
 } else $$lcssa = $5;
 $25 = HEAP32[$cinfo + 44 >> 2] | 0;
 switch ($25 | 0) {
 case 1:
  {
   $$lcssa$sink = $25;
   break;
  }
 case 6:
 case 2:
  {
   $$lcssa$sink = 3;
   break;
  }
 case 7:
 case 3:
  {
   $$lcssa$sink = 3;
   break;
  }
 case 5:
 case 4:
  {
   $$lcssa$sink = 4;
   break;
  }
 default:
  $$lcssa$sink = $$lcssa;
 }
 HEAP32[$cinfo + 120 >> 2] = $$lcssa$sink;
 HEAP32[$cinfo + 124 >> 2] = (HEAP32[$cinfo + 84 >> 2] | 0) == 0 ? $$lcssa$sink : 1;
 if (!(_use_merged_upsample($cinfo) | 0)) {
  $$sink = 1;
  $28 = $cinfo + 128 | 0;
  HEAP32[$28 >> 2] = $$sink;
  return;
 }
 $$sink = HEAP32[$cinfo + 320 >> 2] | 0;
 $28 = $cinfo + 128 | 0;
 HEAP32[$28 >> 2] = $$sink;
 return;
}

function _jpeg_idct_float($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $$sink = 0, $0 = 0, $15 = 0, $2 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $add = 0.0, $add$ptr = 0, $add$ptr126 = 0, $add128 = 0.0, $add130 = 0.0, $add135 = 0.0, $add141 = 0.0, $add143 = 0.0, $add147 = 0.0, $add153 = 0.0, $add157 = 0.0, $add61 = 0.0, $add65 = 0.0, $add67 = 0.0, $add85 = 0.0, $add87 = 0.0, $add89 = 0.0, $ctr$0198 = 0, $ctr$1194 = 0, $inptr$0195 = 0, $mul = 0.0, $mul161 = 0.0, $mul48 = 0.0, $mul52 = 0.0, $mul56 = 0.0, $mul60 = 0.0, $mul72 = 0.0, $mul76 = 0.0, $mul80 = 0.0, $mul84 = 0.0, $mul93 = 0.0, $quantptr$0196 = 0, $sub = 0.0, $sub100 = 0.0, $sub115$sink = 0.0, $sub132 = 0.0, $sub140 = 0.0, $sub142 = 0.0, $sub144 = 0.0, $sub150 = 0.0, $sub156 = 0.0, $sub166 = 0.0, $sub167 = 0.0, $sub168 = 0.0, $sub64 = 0.0, $sub66 = 0.0, $sub68 = 0.0, $sub86 = 0.0, $sub88 = 0.0, $sub98 = 0.0, $sub99 = 0.0, $workspace = 0, $wsptr$0197 = 0, $wsptr$2193 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0198 = 8;
 $inptr$0195 = $coef_block;
 $quantptr$0196 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0197 = $workspace;
 while (1) {
  $2 = HEAP16[$inptr$0195 + 16 >> 1] | 0;
  $3 = HEAP16[$inptr$0195 + 32 >> 1] | 0;
  if (!(($2 | $3) << 16 >> 16)) if (((((HEAP16[$inptr$0195 + 48 >> 1] | 0) == 0 ? (HEAP16[$inptr$0195 + 64 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0195 + 80 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0195 + 96 >> 1] | 0) == 0 : 0) ? (HEAP16[$inptr$0195 + 112 >> 1] | 0) == 0 : 0) {
   $mul = +HEAPF32[$quantptr$0196 >> 2] * +(HEAP16[$inptr$0195 >> 1] | 0);
   HEAPF32[$wsptr$0197 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 32 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 64 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 96 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 128 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 160 >> 2] = $mul;
   HEAPF32[$wsptr$0197 + 192 >> 2] = $mul;
   $$sink = 56;
   $sub115$sink = $mul;
  } else {
   $15 = 0;
   label = 9;
  } else {
   $15 = $3;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   $mul48 = +HEAPF32[$quantptr$0196 >> 2] * +(HEAP16[$inptr$0195 >> 1] | 0);
   $mul52 = +HEAPF32[$quantptr$0196 + 64 >> 2] * +($15 << 16 >> 16);
   $mul56 = +HEAPF32[$quantptr$0196 + 128 >> 2] * +(HEAP16[$inptr$0195 + 64 >> 1] | 0);
   $mul60 = +HEAPF32[$quantptr$0196 + 192 >> 2] * +(HEAP16[$inptr$0195 + 96 >> 1] | 0);
   $add = $mul48 + $mul56;
   $sub = $mul48 - $mul56;
   $add61 = $mul52 + $mul60;
   $sub64 = ($mul52 - $mul60) * 1.4142135381698608 - $add61;
   $add65 = $add + $add61;
   $sub66 = $add - $add61;
   $add67 = $sub + $sub64;
   $sub68 = $sub - $sub64;
   $mul72 = +HEAPF32[$quantptr$0196 + 32 >> 2] * +($2 << 16 >> 16);
   $mul76 = +HEAPF32[$quantptr$0196 + 96 >> 2] * +(HEAP16[$inptr$0195 + 48 >> 1] | 0);
   $mul80 = +HEAPF32[$quantptr$0196 + 160 >> 2] * +(HEAP16[$inptr$0195 + 80 >> 1] | 0);
   $mul84 = +HEAPF32[$quantptr$0196 + 224 >> 2] * +(HEAP16[$inptr$0195 + 112 >> 1] | 0);
   $add85 = $mul76 + $mul80;
   $sub86 = $mul80 - $mul76;
   $add87 = $mul72 + $mul84;
   $sub88 = $mul72 - $mul84;
   $add89 = $add85 + $add87;
   $mul93 = ($sub86 + $sub88) * 1.8477590084075928;
   $sub98 = $mul93 - $sub86 * 2.613126039505005 - $add89;
   $sub99 = ($add87 - $add85) * 1.4142135381698608 - $sub98;
   $sub100 = $mul93 - $sub88 * 1.0823922157287598 - $sub99;
   HEAPF32[$wsptr$0197 >> 2] = $add65 + $add89;
   HEAPF32[$wsptr$0197 + 224 >> 2] = $add65 - $add89;
   HEAPF32[$wsptr$0197 + 32 >> 2] = $add67 + $sub98;
   HEAPF32[$wsptr$0197 + 192 >> 2] = $add67 - $sub98;
   HEAPF32[$wsptr$0197 + 64 >> 2] = $sub68 + $sub99;
   HEAPF32[$wsptr$0197 + 160 >> 2] = $sub68 - $sub99;
   HEAPF32[$wsptr$0197 + 96 >> 2] = $sub66 + $sub100;
   $$sink = 32;
   $sub115$sink = $sub66 - $sub100;
  }
  HEAPF32[$wsptr$0197 + ($$sink << 2) >> 2] = $sub115$sink;
  if ($ctr$0198 >>> 0 > 1) {
   $ctr$0198 = $ctr$0198 + -1 | 0;
   $inptr$0195 = $inptr$0195 + 2 | 0;
   $quantptr$0196 = $quantptr$0196 + 4 | 0;
   $wsptr$0197 = $wsptr$0197 + 4 | 0;
  } else break;
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1194 = 0;
 $wsptr$2193 = $workspace;
 while (1) {
  $add$ptr126 = (HEAP32[$output_buf + ($ctr$1194 << 2) >> 2] | 0) + $output_col | 0;
  $add128 = +HEAPF32[$wsptr$2193 >> 2] + 512.5;
  $30 = +HEAPF32[$wsptr$2193 + 16 >> 2];
  $add130 = $add128 + $30;
  $sub132 = $add128 - $30;
  $31 = +HEAPF32[$wsptr$2193 + 8 >> 2];
  $32 = +HEAPF32[$wsptr$2193 + 24 >> 2];
  $add135 = $31 + $32;
  $sub140 = ($31 - $32) * 1.4142135381698608 - $add135;
  $add141 = $add130 + $add135;
  $sub142 = $add130 - $add135;
  $add143 = $sub132 + $sub140;
  $sub144 = $sub132 - $sub140;
  $33 = +HEAPF32[$wsptr$2193 + 20 >> 2];
  $34 = +HEAPF32[$wsptr$2193 + 12 >> 2];
  $add147 = $33 + $34;
  $sub150 = $33 - $34;
  $35 = +HEAPF32[$wsptr$2193 + 4 >> 2];
  $36 = +HEAPF32[$wsptr$2193 + 28 >> 2];
  $add153 = $35 + $36;
  $sub156 = $35 - $36;
  $add157 = $add147 + $add153;
  $mul161 = ($sub150 + $sub156) * 1.8477590084075928;
  $sub166 = $mul161 - $sub150 * 2.613126039505005 - $add157;
  $sub167 = ($add153 - $add147) * 1.4142135381698608 - $sub166;
  $sub168 = $mul161 - $sub156 * 1.0823922157287598 - $sub167;
  HEAP8[$add$ptr126 >> 0] = HEAP8[$add$ptr + (~~($add141 + $add157) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 7 >> 0] = HEAP8[$add$ptr + (~~($add141 - $add157) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 1 >> 0] = HEAP8[$add$ptr + (~~($add143 + $sub166) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 6 >> 0] = HEAP8[$add$ptr + (~~($add143 - $sub166) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 2 >> 0] = HEAP8[$add$ptr + (~~($sub144 + $sub167) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 5 >> 0] = HEAP8[$add$ptr + (~~($sub144 - $sub167) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 3 >> 0] = HEAP8[$add$ptr + (~~($sub142 + $sub168) & 1023) >> 0] | 0;
  HEAP8[$add$ptr126 + 4 >> 0] = HEAP8[$add$ptr + (~~($sub142 - $sub168) & 1023) >> 0] | 0;
  $ctr$1194 = $ctr$1194 + 1 | 0;
  if (($ctr$1194 | 0) == 8) break; else $wsptr$2193 = $wsptr$2193 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _process_data_context_main($cinfo, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $0 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $37 = 0, $38 = 0, $39 = 0, $44 = 0, $46 = 0, $52 = 0, $add$i52 = 0, $add10$i = 0, $add20$i = 0, $add22$i = 0, $arrayidx$i = 0, $arrayidx$i51 = 0, $arrayidx12$i = 0, $arrayidx4$i = 0, $buffer_full = 0, $ci$033$i = 0, $ci$047$i = 0, $compptr$032$i = 0, $compptr$046$i = 0, $context_state = 0, $div$i = 0, $div$i57 = 0, $i$030$i = 0, $i$044$i = 0, $iMCU_row_ctr = 0, $main = 0, $mul$i = 0, $mul21$i = 0, $mul8$i = 0, $mul9$i = 0, $rem$i = 0, $rowgroup_ctr = 0, $rowgroup_ctr17$pre$phiZ2D = 0, $rowgroup_ctr30$pre$phiZ2D = 0, $rowgroups_avail = 0, $rowgroups_avail$i = 0, $rowgroups_avail18$pre$phiZ2D = 0, $rowgroups_avail31$pre$phiZ2D = 0, $spec$select$i = 0, $sub$i59 = 0, $whichptr28 = 0, label = 0;
 $main = $cinfo + 448 | 0;
 $0 = HEAP32[$main >> 2] | 0;
 $buffer_full = $0 + 56 | 0;
 do if (!(HEAP32[$buffer_full >> 2] | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$cinfo + 452 >> 2] | 0) + 12 >> 2] & 63]($cinfo, HEAP32[$0 + 60 + (HEAP32[$0 + 68 >> 2] << 2) >> 2] | 0) | 0)) return; else {
  HEAP32[$buffer_full >> 2] = 1;
  $iMCU_row_ctr = $0 + 76 | 0;
  HEAP32[$iMCU_row_ctr >> 2] = (HEAP32[$iMCU_row_ctr >> 2] | 0) + 1;
  break;
 } while (0);
 $context_state = $0 + 72 | 0;
 switch (HEAP32[$context_state >> 2] | 0) {
 case 2:
  {
   $rowgroup_ctr = $0 + 48 | 0;
   $rowgroups_avail = $0 + 52 | 0;
   FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 456 >> 2] | 0) + 4 >> 2] & 7]($cinfo, HEAP32[$0 + 60 + (HEAP32[$0 + 68 >> 2] << 2) >> 2] | 0, $rowgroup_ctr, HEAP32[$rowgroups_avail >> 2] | 0, $output_buf, $out_row_ctr, $out_rows_avail);
   if ((HEAP32[$rowgroup_ctr >> 2] | 0) >>> 0 < (HEAP32[$rowgroups_avail >> 2] | 0) >>> 0) return;
   HEAP32[$context_state >> 2] = 0;
   if ((HEAP32[$out_row_ctr >> 2] | 0) >>> 0 < $out_rows_avail >>> 0) {
    $rowgroup_ctr17$pre$phiZ2D = $rowgroup_ctr;
    $rowgroups_avail18$pre$phiZ2D = $rowgroups_avail;
    label = 9;
   } else return;
   break;
  }
 case 0:
  {
   $rowgroup_ctr17$pre$phiZ2D = $0 + 48 | 0;
   $rowgroups_avail18$pre$phiZ2D = $0 + 52 | 0;
   label = 9;
   break;
  }
 case 1:
  {
   $rowgroup_ctr30$pre$phiZ2D = $0 + 48 | 0;
   $rowgroups_avail31$pre$phiZ2D = $0 + 52 | 0;
   break;
  }
 default:
  return;
 }
 if ((label | 0) == 9) {
  HEAP32[$rowgroup_ctr17$pre$phiZ2D >> 2] = 0;
  $16 = HEAP32[$cinfo + 328 >> 2] | 0;
  HEAP32[$rowgroups_avail18$pre$phiZ2D >> 2] = $16 + -1;
  if ((HEAP32[$0 + 76 >> 2] | 0) == (HEAP32[$cinfo + 332 >> 2] | 0) ? ($19 = HEAP32[$main >> 2] | 0, $20 = HEAP32[$cinfo + 36 >> 2] | 0, ($20 | 0) > 0) : 0) {
   $rowgroups_avail$i = $19 + 52 | 0;
   $arrayidx$i = $19 + 60 + (HEAP32[$19 + 68 >> 2] << 2) | 0;
   $ci$033$i = 0;
   $compptr$032$i = HEAP32[$cinfo + 216 >> 2] | 0;
   while (1) {
    $mul$i = Math_imul(HEAP32[$compptr$032$i + 40 >> 2] | 0, HEAP32[$compptr$032$i + 12 >> 2] | 0) | 0;
    $div$i = ($mul$i | 0) / ($16 | 0) | 0;
    $rem$i = ((HEAP32[$compptr$032$i + 48 >> 2] | 0) >>> 0) % ($mul$i >>> 0) | 0;
    $spec$select$i = ($rem$i | 0) == 0 ? $mul$i : $rem$i;
    if (!$ci$033$i) HEAP32[$rowgroups_avail$i >> 2] = (($spec$select$i + -1 | 0) / ($div$i | 0) | 0) + 1;
    $27 = HEAP32[(HEAP32[$arrayidx$i >> 2] | 0) + ($ci$033$i << 2) >> 2] | 0;
    $mul8$i = $div$i << 1;
    if (($div$i | 0) > 0) {
     $arrayidx12$i = $27 + ($spec$select$i + -1 << 2) | 0;
     $i$030$i = 0;
     do {
      HEAP32[$27 + ($i$030$i + $spec$select$i << 2) >> 2] = HEAP32[$arrayidx12$i >> 2];
      $i$030$i = $i$030$i + 1 | 0;
     } while (($i$030$i | 0) < ($mul8$i | 0));
    }
    $ci$033$i = $ci$033$i + 1 | 0;
    if (($ci$033$i | 0) == ($20 | 0)) break; else $compptr$032$i = $compptr$032$i + 88 | 0;
   }
  }
  HEAP32[$context_state >> 2] = 1;
  $rowgroup_ctr30$pre$phiZ2D = $rowgroup_ctr17$pre$phiZ2D;
  $rowgroups_avail31$pre$phiZ2D = $rowgroups_avail18$pre$phiZ2D;
 }
 $whichptr28 = $0 + 68 | 0;
 FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 456 >> 2] | 0) + 4 >> 2] & 7]($cinfo, HEAP32[$0 + 60 + (HEAP32[$whichptr28 >> 2] << 2) >> 2] | 0, $rowgroup_ctr30$pre$phiZ2D, HEAP32[$rowgroups_avail31$pre$phiZ2D >> 2] | 0, $output_buf, $out_row_ctr, $out_rows_avail);
 if ((HEAP32[$rowgroup_ctr30$pre$phiZ2D >> 2] | 0) >>> 0 < (HEAP32[$rowgroups_avail31$pre$phiZ2D >> 2] | 0) >>> 0) return;
 if ((HEAP32[$0 + 76 >> 2] | 0) == 1) {
  $37 = HEAP32[$main >> 2] | 0;
  $38 = HEAP32[$cinfo + 328 >> 2] | 0;
  $39 = HEAP32[$cinfo + 36 >> 2] | 0;
  if (($39 | 0) > 0) {
   $arrayidx$i51 = $37 + 60 | 0;
   $arrayidx4$i = $37 + 64 | 0;
   $add$i52 = $38 + 1 | 0;
   $add20$i = $38 + 2 | 0;
   $ci$047$i = 0;
   $compptr$046$i = HEAP32[$cinfo + 216 >> 2] | 0;
   while (1) {
    $div$i57 = (Math_imul(HEAP32[$compptr$046$i + 40 >> 2] | 0, HEAP32[$compptr$046$i + 12 >> 2] | 0) | 0) / ($38 | 0) | 0;
    $44 = HEAP32[(HEAP32[$arrayidx$i51 >> 2] | 0) + ($ci$047$i << 2) >> 2] | 0;
    $46 = HEAP32[(HEAP32[$arrayidx4$i >> 2] | 0) + ($ci$047$i << 2) >> 2] | 0;
    if (($div$i57 | 0) > 0) {
     $mul9$i = Math_imul($div$i57, $add$i52) | 0;
     $mul21$i = Math_imul($div$i57, $add20$i) | 0;
     $i$044$i = 0;
     do {
      $add10$i = $i$044$i + $mul9$i | 0;
      $sub$i59 = $i$044$i - $div$i57 | 0;
      HEAP32[$44 + ($sub$i59 << 2) >> 2] = HEAP32[$44 + ($add10$i << 2) >> 2];
      HEAP32[$46 + ($sub$i59 << 2) >> 2] = HEAP32[$46 + ($add10$i << 2) >> 2];
      $add22$i = $i$044$i + $mul21$i | 0;
      HEAP32[$44 + ($add22$i << 2) >> 2] = HEAP32[$44 + ($i$044$i << 2) >> 2];
      HEAP32[$46 + ($add22$i << 2) >> 2] = HEAP32[$46 + ($i$044$i << 2) >> 2];
      $i$044$i = $i$044$i + 1 | 0;
     } while (($i$044$i | 0) != ($div$i57 | 0));
    }
    $ci$047$i = $ci$047$i + 1 | 0;
    if (($ci$047$i | 0) == ($39 | 0)) {
     $52 = $38;
     break;
    } else $compptr$046$i = $compptr$046$i + 88 | 0;
   }
  } else $52 = $38;
 } else $52 = HEAP32[$cinfo + 328 >> 2] | 0;
 HEAP32[$whichptr28 >> 2] = HEAP32[$whichptr28 >> 2] ^ 1;
 HEAP32[$buffer_full >> 2] = 0;
 HEAP32[$rowgroup_ctr30$pre$phiZ2D >> 2] = $52 + 1;
 HEAP32[$rowgroups_avail31$pre$phiZ2D >> 2] = $52 + 2;
 HEAP32[$context_state >> 2] = 2;
 return;
}

function _decode_mcu_AC_first($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $5 = 0, $8 = 0, $Ah$i = 0, $Al = 0, $Se = 0, $Ss$i = 0, $add$ptr = 0, $add$ptr19 = 0, $add$ptr26 = 0, $add$ptr38 = 0, $add$ptr51 = 0, $add$ptr54 = 0, $arraydecay = 0, $arrayidx10 = 0, $arrayidx35 = 0, $call25 = 0, $call27 = 0, $ci$032$i = 0, $comps_in_scan$i = 0, $ct = 0, $inc = 0, $inc$lcssa = 0, $inc68 = 0, $inc73 = 0, $k$0 = 0, $k$1$lcssa = 0, $lim_Se$i = 0, $m$079 = 0, $m$1 = 0, $progressive_mode$i = 0, $restart_interval = 0, $restarts_to_go = 0, $shl = 0, $shl41 = 0, $shr82 = 0, $shr85 = 0, $spec$select = 0, $st$0$lcssa = 0, $st$072 = 0, $st$178 = 0, $st$2 = 0, $tobool59 = 0, $v$0$lcssa = 0, $v$084 = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0) {
  $restarts_to_go = $0 + 56 | 0;
  $2 = HEAP32[$restarts_to_go >> 2] | 0;
  if (!$2) {
   if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$cinfo + 464 >> 2] | 0) + 8 >> 2] & 127]($cinfo) | 0)) {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 25;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
   }
   $comps_in_scan$i = $cinfo + 340 | 0;
   if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
    $progressive_mode$i = $cinfo + 224 | 0;
    $Ss$i = $cinfo + 412 | 0;
    $lim_Se$i = $cinfo + 436 | 0;
    $Ah$i = $cinfo + 420 | 0;
    $ci$032$i = 0;
    do {
     $8 = HEAP32[$cinfo + 344 + ($ci$032$i << 2) >> 2] | 0;
     if (HEAP32[$progressive_mode$i >> 2] | 0) if (!(HEAP32[$Ss$i >> 2] | 0)) {
      if (!(HEAP32[$Ah$i >> 2] | 0)) label = 10;
     } else label = 13; else label = 10;
     do if ((label | 0) == 10) {
      label = 0;
      dest = HEAP32[$0 + 60 + (HEAP32[$8 + 20 >> 2] << 2) >> 2] | 0;
      stop = dest + 64 | 0;
      do {
       HEAP8[dest >> 0] = 0;
       dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$0 + 24 + ($ci$032$i << 2) >> 2] = 0;
      HEAP32[$0 + 40 + ($ci$032$i << 2) >> 2] = 0;
      if (!(HEAP32[$progressive_mode$i >> 2] | 0)) if (!(HEAP32[$lim_Se$i >> 2] | 0)) break; else {
       label = 13;
       break;
      } else if (!(HEAP32[$Ss$i >> 2] | 0)) break; else {
       label = 13;
       break;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      _memset(HEAP32[$0 + 124 + (HEAP32[$8 + 24 >> 2] << 2) >> 2] | 0, 0, 256) | 0;
     }
     $ci$032$i = $ci$032$i + 1 | 0;
    } while (($ci$032$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = -16;
   $18 = HEAP32[$restart_interval >> 2] | 0;
   HEAP32[$restarts_to_go >> 2] = $18;
   $19 = $18;
  } else $19 = $2;
  HEAP32[$restarts_to_go >> 2] = $19 + -1;
 }
 $ct = $0 + 20 | 0;
 if ((HEAP32[$ct >> 2] | 0) == -1) return 1;
 $21 = HEAP32[$cinfo + 432 >> 2] | 0;
 $22 = HEAP32[$MCU_data >> 2] | 0;
 $24 = HEAP32[(HEAP32[$cinfo + 344 >> 2] | 0) + 24 >> 2] | 0;
 $arrayidx10 = $0 + 124 + ($24 << 2) | 0;
 $arraydecay = $0 + 188 | 0;
 $Se = $cinfo + 416 | 0;
 $Al = $cinfo + 424 | 0;
 $arrayidx35 = $cinfo + 264 + $24 | 0;
 $k$0 = (HEAP32[$cinfo + 412 >> 2] | 0) + -1 | 0;
 L29 : while (1) {
  $add$ptr = (HEAP32[$arrayidx10 >> 2] | 0) + ($k$0 * 3 | 0) | 0;
  if (_arith_decode($cinfo, $add$ptr) | 0) {
   label = 36;
   break;
  }
  $inc68 = $k$0 + 1 | 0;
  if (!(_arith_decode($cinfo, $add$ptr + 1 | 0) | 0)) {
   $inc73 = $inc68;
   $st$072 = $add$ptr;
   while (1) {
    if (($inc73 | 0) >= (HEAP32[$Se >> 2] | 0)) {
     label = 23;
     break L29;
    }
    $add$ptr19 = $st$072 + 3 | 0;
    $inc = $inc73 + 1 | 0;
    if (!(_arith_decode($cinfo, $st$072 + 4 | 0) | 0)) {
     $inc73 = $inc;
     $st$072 = $add$ptr19;
    } else {
     $inc$lcssa = $inc;
     $k$1$lcssa = $inc73;
     $st$0$lcssa = $add$ptr19;
     break;
    }
   }
  } else {
   $inc$lcssa = $inc68;
   $k$1$lcssa = $k$0;
   $st$0$lcssa = $add$ptr;
  }
  $call25 = _arith_decode($cinfo, $arraydecay) | 0;
  $add$ptr26 = $st$0$lcssa + 2 | 0;
  $call27 = _arith_decode($cinfo, $add$ptr26) | 0;
  if ($call27) {
   if (_arith_decode($cinfo, $add$ptr26) | 0) {
    $shl = $call27 << 1;
    $add$ptr38 = (HEAP32[$arrayidx10 >> 2] | 0) + (($k$1$lcssa | 0) < (HEAPU8[$arrayidx35 >> 0] | 0 | 0) ? 189 : 217) | 0;
    if (!(_arith_decode($cinfo, $add$ptr38) | 0)) {
     $m$1 = $shl;
     $st$2 = $add$ptr38;
    } else {
     $m$079 = $shl;
     $st$178 = $add$ptr38;
     while (1) {
      $shl41 = $m$079 << 1;
      if (($shl41 | 0) == 32768) {
       label = 30;
       break L29;
      }
      $add$ptr51 = $st$178 + 1 | 0;
      if (!(_arith_decode($cinfo, $add$ptr51) | 0)) {
       $m$1 = $shl41;
       $st$2 = $add$ptr51;
       break;
      } else {
       $m$079 = $shl41;
       $st$178 = $add$ptr51;
      }
     }
    }
   } else {
    $m$1 = $call27;
    $st$2 = $add$ptr26;
   }
   $add$ptr54 = $st$2 + 14 | 0;
   $shr82 = $m$1 >> 1;
   if (!$shr82) $v$0$lcssa = $m$1; else {
    $shr85 = $shr82;
    $v$084 = $m$1;
    while (1) {
     $tobool59 = (_arith_decode($cinfo, $add$ptr54) | 0) == 0;
     $spec$select = ($tobool59 ? 0 : $shr85) | $v$084;
     $shr85 = $shr85 >> 1;
     if (!$shr85) {
      $v$0$lcssa = $spec$select;
      break;
     } else $v$084 = $spec$select;
    }
   }
  } else $v$0$lcssa = 0;
  HEAP16[$22 + (HEAP32[$21 + ($inc$lcssa << 2) >> 2] << 1) >> 1] = (($call25 | 0) == 0 ? $v$0$lcssa + 1 | 0 : ~$v$0$lcssa) << HEAP32[$Al >> 2];
  if (($inc$lcssa | 0) < (HEAP32[$Se >> 2] | 0)) $k$0 = $inc$lcssa; else {
   label = 36;
   break;
  }
 }
 if ((label | 0) == 23) {
  $28 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$28 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$28 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 30) {
  $32 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$32 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$32 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 36) return 1;
 return 0;
}

function _jpeg_idct_9x9($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $add = 0, $add$ptr = 0, $add$ptr97 = 0, $add105 = 0, $add110 = 0, $add120 = 0, $add122 = 0, $add137 = 0, $add139 = 0, $add15 = 0, $add19 = 0, $add29 = 0, $add31 = 0, $add58 = 0, $add60 = 0, $ctr$0195 = 0, $ctr$1191 = 0, $inptr$0192 = 0, $mul104 = 0, $mul114 = 0, $mul115 = 0, $mul116 = 0, $mul127 = 0, $mul129 = 0, $mul131 = 0, $mul135 = 0, $mul14 = 0, $mul142 = 0, $mul23 = 0, $mul24 = 0, $mul25 = 0, $mul35 = 0, $mul43 = 0, $mul47 = 0, $mul48 = 0, $mul5 = 0, $mul50 = 0, $mul52 = 0, $mul56 = 0, $mul63 = 0, $mul9 = 0, $quantptr$0193 = 0, $shl100 = 0, $sub107 = 0, $sub108 = 0, $sub112 = 0, $sub118 = 0, $sub133 = 0, $sub16 = 0, $sub17 = 0, $sub21 = 0, $sub27 = 0, $sub54 = 0, $workspace = 0, $wsptr$0194 = 0, $wsptr$1190 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0195 = 0;
 $inptr$0192 = $coef_block;
 $quantptr$0193 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0194 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0192 >> 1] << 13, HEAP32[$quantptr$0193 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0193 + 64 >> 2] | 0, HEAP16[$inptr$0192 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0193 + 128 >> 2] | 0, HEAP16[$inptr$0192 + 64 >> 1] | 0) | 0;
  $mul14 = Math_imul((HEAP16[$inptr$0192 + 96 >> 1] | 0) * 5793 | 0, HEAP32[$quantptr$0193 + 192 >> 2] | 0) | 0;
  $add15 = $mul14 + $add | 0;
  $sub16 = $add - $mul14 - $mul14 | 0;
  $sub17 = $mul5 - $mul9 | 0;
  $add19 = $sub16 + ($sub17 * 5793 | 0) | 0;
  $sub21 = (Math_imul($sub17, -11586) | 0) + $sub16 | 0;
  $mul23 = ($mul9 + $mul5 | 0) * 10887 | 0;
  $mul24 = $mul5 * 8875 | 0;
  $mul25 = $mul9 * 2012 | 0;
  $sub27 = $mul23 - $mul25 + $add15 | 0;
  $add29 = $add15 - $mul23 + $mul24 | 0;
  $add31 = $add15 - $mul24 + $mul25 | 0;
  $mul35 = Math_imul(HEAP32[$quantptr$0193 + 32 >> 2] | 0, HEAP16[$inptr$0192 + 16 >> 1] | 0) | 0;
  $mul43 = Math_imul(HEAP32[$quantptr$0193 + 160 >> 2] | 0, HEAP16[$inptr$0192 + 80 >> 1] | 0) | 0;
  $mul47 = Math_imul(HEAP32[$quantptr$0193 + 224 >> 2] | 0, HEAP16[$inptr$0192 + 112 >> 1] | 0) | 0;
  $mul48 = Math_imul(Math_imul(HEAP16[$inptr$0192 + 48 >> 1] | 0, -10033) | 0, HEAP32[$quantptr$0193 + 96 >> 2] | 0) | 0;
  $mul50 = ($mul43 + $mul35 | 0) * 7447 | 0;
  $mul52 = ($mul47 + $mul35 | 0) * 3962 | 0;
  $sub54 = $mul50 - $mul48 + $mul52 | 0;
  $mul56 = ($mul43 - $mul47 | 0) * 11409 | 0;
  $add58 = $mul48 - $mul56 + $mul50 | 0;
  $add60 = $mul56 + $mul48 + $mul52 | 0;
  $mul63 = ($mul35 - $mul43 - $mul47 | 0) * 10033 | 0;
  HEAP32[$wsptr$0194 >> 2] = $sub54 + $sub27 >> 11;
  HEAP32[$wsptr$0194 + 256 >> 2] = $sub27 - $sub54 >> 11;
  HEAP32[$wsptr$0194 + 32 >> 2] = $mul63 + $add19 >> 11;
  HEAP32[$wsptr$0194 + 224 >> 2] = $add19 - $mul63 >> 11;
  HEAP32[$wsptr$0194 + 64 >> 2] = $add58 + $add29 >> 11;
  HEAP32[$wsptr$0194 + 192 >> 2] = $add29 - $add58 >> 11;
  HEAP32[$wsptr$0194 + 96 >> 2] = $add60 + $add31 >> 11;
  HEAP32[$wsptr$0194 + 160 >> 2] = $add31 - $add60 >> 11;
  HEAP32[$wsptr$0194 + 128 >> 2] = $sub21 >> 11;
  $ctr$0195 = $ctr$0195 + 1 | 0;
  if (($ctr$0195 | 0) == 8) break; else {
   $inptr$0192 = $inptr$0192 + 2 | 0;
   $quantptr$0193 = $quantptr$0193 + 4 | 0;
   $wsptr$0194 = $wsptr$0194 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1191 = 0;
 $wsptr$1190 = $workspace;
 while (1) {
  $add$ptr97 = (HEAP32[$output_buf + ($ctr$1191 << 2) >> 2] | 0) + $output_col | 0;
  $shl100 = (HEAP32[$wsptr$1190 >> 2] << 13) + 134348800 | 0;
  $20 = HEAP32[$wsptr$1190 + 8 >> 2] | 0;
  $21 = HEAP32[$wsptr$1190 + 16 >> 2] | 0;
  $mul104 = (HEAP32[$wsptr$1190 + 24 >> 2] | 0) * 5793 | 0;
  $add105 = $mul104 + $shl100 | 0;
  $sub107 = $shl100 - $mul104 - $mul104 | 0;
  $sub108 = $20 - $21 | 0;
  $add110 = $sub107 + ($sub108 * 5793 | 0) | 0;
  $sub112 = (Math_imul($sub108, -11586) | 0) + $sub107 | 0;
  $mul114 = ($21 + $20 | 0) * 10887 | 0;
  $mul115 = $20 * 8875 | 0;
  $mul116 = $21 * 2012 | 0;
  $sub118 = $mul114 - $mul116 + $add105 | 0;
  $add120 = $add105 - $mul114 + $mul115 | 0;
  $add122 = $add105 - $mul115 + $mul116 | 0;
  $23 = HEAP32[$wsptr$1190 + 4 >> 2] | 0;
  $25 = HEAP32[$wsptr$1190 + 20 >> 2] | 0;
  $26 = HEAP32[$wsptr$1190 + 28 >> 2] | 0;
  $mul127 = Math_imul(HEAP32[$wsptr$1190 + 12 >> 2] | 0, -10033) | 0;
  $mul129 = ($25 + $23 | 0) * 7447 | 0;
  $mul131 = ($26 + $23 | 0) * 3962 | 0;
  $sub133 = $mul129 - $mul127 + $mul131 | 0;
  $mul135 = ($25 - $26 | 0) * 11409 | 0;
  $add137 = $mul127 - $mul135 + $mul129 | 0;
  $add139 = $mul135 + $mul127 + $mul131 | 0;
  $mul142 = ($23 - $25 - $26 | 0) * 10033 | 0;
  HEAP8[$add$ptr97 >> 0] = HEAP8[$add$ptr + (($sub133 + $sub118 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 8 >> 0] = HEAP8[$add$ptr + (($sub118 - $sub133 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 1 >> 0] = HEAP8[$add$ptr + (($mul142 + $add110 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 7 >> 0] = HEAP8[$add$ptr + (($add110 - $mul142 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 2 >> 0] = HEAP8[$add$ptr + (($add137 + $add120 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 6 >> 0] = HEAP8[$add$ptr + (($add120 - $add137 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 3 >> 0] = HEAP8[$add$ptr + (($add139 + $add122 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 5 >> 0] = HEAP8[$add$ptr + (($add122 - $add139 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr97 + 4 >> 0] = HEAP8[$add$ptr + ($sub112 >>> 18 & 1023) >> 0] | 0;
  $ctr$1191 = $ctr$1191 + 1 | 0;
  if (($ctr$1191 | 0) == 9) break; else $wsptr$1190 = $wsptr$1190 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($this) {
 $this = $this | 0;
 var $ExprList = 0, $Global = 0, $IsArray = 0, $Names = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $call12 = 0, $call17 = 0, $call18 = 0, $call26 = 0, $call32 = 0, $call8 = 0, $frombool = 0, $frombool3 = 0, $retval$5 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp22$byval_copy = sp + 48 | 0;
 $Global = sp + 57 | 0;
 $agg$tmp = sp + 40 | 0;
 $IsArray = sp + 56 | 0;
 $agg$tmp4 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $ExprList = sp + 16 | 0;
 $Ty = sp;
 $agg$tmp22 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29638);
 HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 $frombool = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0) & 1;
 HEAP8[$Global >> 0] = $frombool;
 $frombool3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 97 & 1;
 HEAP8[$IsArray >> 0] = $frombool3;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 30252);
 HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0) ? (__ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 30255), HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2], HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2], !(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0)) : 0) $retval$7 = 0; else label = 3;
 do if ((label | 0) == 3) {
  $Names = $this + 8 | 0;
  $call8 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) break;
   $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp22$byval_copy >> 2] = $call12;
   if (!$call12) {
    label = 7;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp22$byval_copy);
  }
  if ((label | 0) == 7) {
   $retval$7 = 0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ExprList, $this, $call8);
  $call17 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call17) | 0;
  HEAP32[$Ty >> 2] = $call18;
  do if ($call18) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 30258);
   HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2];
   HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp22 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0)) {
    if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0)) {
     $retval$5 = 0;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($agg$tmp22$byval_copy);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this, $ExprList, $Ty, $agg$tmp22$byval_copy, $Global, $IsArray) | 0;
    break;
   }
   $call26 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 15;
     break;
    }
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call17) | 0;
    HEAP32[$agg$tmp22$byval_copy >> 2] = $call32;
    if (!$call32) {
     label = 13;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp22$byval_copy);
   }
   if ((label | 0) == 13) {
    $retval$5 = 0;
    break;
   } else if ((label | 0) == 15) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp22$byval_copy, $this, $call26);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this, $ExprList, $Ty, $agg$tmp22$byval_copy, $Global, $IsArray) | 0;
    break;
   }
  } else $retval$5 = 0; while (0);
  $retval$7 = $retval$5;
 } while (0);
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0, $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $retval$0 = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv = $4 & 2047;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $10 = getTempRet0() | 0;
 L1 : do if (!(($9 | 0) == 0 & ($10 | 0) == 0) ? ($14 = ___DOUBLE_BITS($y) | 0, $16 = (getTempRet0() | 0) & 2147483647, !(($conv | 0) == 2047 | ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0))) : 0) {
  $22 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
  $23 = getTempRet0() | 0;
  if (!($23 >>> 0 > $10 >>> 0 | ($23 | 0) == ($10 | 0) & $22 >>> 0 > $9 >>> 0)) return +(($22 | 0) == ($9 | 0) & ($23 | 0) == ($10 | 0) ? $x * 0.0 : $x);
  if (!$conv) {
   $32 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
   $33 = getTempRet0() | 0;
   if (($33 | 0) > -1 | ($33 | 0) == -1 & $32 >>> 0 > 4294967295) {
    $39 = $32;
    $40 = $33;
    $ex$081 = 0;
    while (1) {
     $dec = $ex$081 + -1 | 0;
     $39 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0;
     $40 = getTempRet0() | 0;
     if (!(($40 | 0) > -1 | ($40 | 0) == -1 & $39 >>> 0 > 4294967295)) {
      $ex$0$lcssa = $dec;
      break;
     } else $ex$081 = $dec;
    }
   } else $ex$0$lcssa = 0;
   $48 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
   $72 = $48;
   $73 = getTempRet0() | 0;
   $ex$1 = $ex$0$lcssa;
  } else {
   $72 = $0;
   $73 = $1 & 1048575 | 1048576;
   $ex$1 = $conv;
  }
  if (!$conv5) {
   $52 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
   $53 = getTempRet0() | 0;
   if (($53 | 0) > -1 | ($53 | 0) == -1 & $52 >>> 0 > 4294967295) {
    $59 = $52;
    $60 = $53;
    $ey$077 = 0;
    while (1) {
     $dec64 = $ey$077 + -1 | 0;
     $59 = _bitshift64Shl($59 | 0, $60 | 0, 1) | 0;
     $60 = getTempRet0() | 0;
     if (!(($60 | 0) > -1 | ($60 | 0) == -1 & $59 >>> 0 > 4294967295)) {
      $ey$0$lcssa = $dec64;
      break;
     } else $ey$077 = $dec64;
    }
   } else $ey$0$lcssa = 0;
   $68 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
   $74 = $68;
   $75 = getTempRet0() | 0;
   $ey$1 = $ey$0$lcssa;
  } else {
   $74 = $2;
   $75 = $3 & 1048575 | 1048576;
   $ey$1 = $conv5;
  }
  $76 = _i64Subtract($72 | 0, $73 | 0, $74 | 0, $75 | 0) | 0;
  $77 = getTempRet0() | 0;
  $82 = ($77 | 0) > -1 | ($77 | 0) == -1 & $76 >>> 0 > 4294967295;
  L25 : do if (($ex$1 | 0) > ($ey$1 | 0)) {
   $136 = $72;
   $137 = $73;
   $84 = $76;
   $86 = $77;
   $cmp8571 = $82;
   $ex$268 = $ex$1;
   while (1) {
    if ($cmp8571) if (($84 | 0) == 0 & ($86 | 0) == 0) break; else {
     $88 = $84;
     $89 = $86;
    } else {
     $88 = $136;
     $89 = $137;
    }
    $90 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
    $91 = getTempRet0() | 0;
    $dec96 = $ex$268 + -1 | 0;
    $92 = _i64Subtract($90 | 0, $91 | 0, $74 | 0, $75 | 0) | 0;
    $93 = getTempRet0() | 0;
    $98 = ($93 | 0) > -1 | ($93 | 0) == -1 & $92 >>> 0 > 4294967295;
    if (($dec96 | 0) > ($ey$1 | 0)) {
     $136 = $90;
     $137 = $91;
     $84 = $92;
     $86 = $93;
     $cmp8571 = $98;
     $ex$268 = $dec96;
    } else {
     $100 = $92;
     $102 = $93;
     $134 = $90;
     $135 = $91;
     $cmp85$lcssa = $98;
     $ex$2$lcssa = $dec96;
     break L25;
    }
   }
   $retval$0 = $x * 0.0;
   break L1;
  } else {
   $100 = $76;
   $102 = $77;
   $134 = $72;
   $135 = $73;
   $cmp85$lcssa = $82;
   $ex$2$lcssa = $ex$1;
  } while (0);
  if ($cmp85$lcssa) if (($100 | 0) == 0 & ($102 | 0) == 0) {
   $retval$0 = $x * 0.0;
   break;
  } else {
   $105 = $102;
   $107 = $100;
  } else {
   $105 = $135;
   $107 = $134;
  }
  if ($105 >>> 0 < 1048576 | ($105 | 0) == 1048576 & $107 >>> 0 < 0) {
   $111 = $107;
   $112 = $105;
   $ex$362 = $ex$2$lcssa;
   while (1) {
    $113 = _bitshift64Shl($111 | 0, $112 | 0, 1) | 0;
    $114 = getTempRet0() | 0;
    $dec117 = $ex$362 + -1 | 0;
    if ($114 >>> 0 < 1048576 | ($114 | 0) == 1048576 & $113 >>> 0 < 0) {
     $111 = $113;
     $112 = $114;
     $ex$362 = $dec117;
    } else {
     $120 = $113;
     $121 = $114;
     $ex$3$lcssa = $dec117;
     break;
    }
   }
  } else {
   $120 = $107;
   $121 = $105;
   $ex$3$lcssa = $ex$2$lcssa;
  }
  if (($ex$3$lcssa | 0) > 0) {
   $122 = _i64Add($120 | 0, $121 | 0, 0, -1048576) | 0;
   $123 = getTempRet0() | 0;
   $124 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
   $131 = $123 | (getTempRet0() | 0);
   $132 = $122 | $124;
  } else {
   $128 = _bitshift64Lshr($120 | 0, $121 | 0, 1 - $ex$3$lcssa | 0) | 0;
   $131 = getTempRet0() | 0;
   $132 = $128;
  }
  HEAP32[tempDoublePtr >> 2] = $132;
  HEAP32[tempDoublePtr + 4 >> 2] = $131 | $8;
  $retval$0 = +HEAPF64[tempDoublePtr >> 3];
 } else label = 3; while (0);
 if ((label | 0) == 3) {
  $mul = $x * $y;
  $retval$0 = $mul / $mul;
 }
 return +$retval$0;
}

function _start_input_pass_79($cinfo) {
 $cinfo = $cinfo | 0;
 var $$pre26$i = 0, $0 = 0, $1 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $7 = 0, $block_size$i = 0, $blocks_in_MCU25$i = 0, $call$i = 0, $call$i15 = 0, $call23$i = 0, $ci$024$i = 0, $ci$076$i = 0, $coef = 0, $comps_in_scan$i = 0, $consume_data = 0, $entropy = 0, $inc70$i = 0, $inputctl = 0, $mcublks$074$i = 0, $mem$i = 0, $mul35$i = 0, $mul39$i = 0, $quant_table$i = 0, $rem$i = 0, $rem43$i = 0, $rem51$i = 0, label = 0;
 $comps_in_scan$i = $cinfo + 340 | 0;
 $0 = HEAP32[$comps_in_scan$i >> 2] | 0;
 if (($0 | 0) != 1) {
  if (($0 + -1 | 0) >>> 0 > 3) {
   $7 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$7 + 20 >> 2] = 27;
   HEAP32[$7 + 24 >> 2] = $0;
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = 4;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
  $block_size$i = $cinfo + 428 | 0;
  $call$i = _jdiv_round_up(HEAP32[$cinfo + 28 >> 2] | 0, Math_imul(HEAP32[$block_size$i >> 2] | 0, HEAP32[$cinfo + 316 >> 2] | 0) | 0) | 0;
  HEAP32[$cinfo + 360 >> 2] = $call$i;
  $call23$i = _jdiv_round_up(HEAP32[$cinfo + 32 >> 2] | 0, Math_imul(HEAP32[$block_size$i >> 2] | 0, HEAP32[$cinfo + 320 >> 2] | 0) | 0) | 0;
  HEAP32[$cinfo + 364 >> 2] = $call23$i;
  $blocks_in_MCU25$i = $cinfo + 368 | 0;
  HEAP32[$blocks_in_MCU25$i >> 2] = 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) <= 0) {
   $entropy = $cinfo + 468 | 0;
   $41 = HEAP32[$entropy >> 2] | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   FUNCTION_TABLE_vi[$42 & 255]($cinfo);
   $coef = $cinfo + 452 | 0;
   $43 = HEAP32[$coef >> 2] | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   FUNCTION_TABLE_vi[$44 & 255]($cinfo);
   $45 = HEAP32[$coef >> 2] | 0;
   $consume_data = $45 + 4 | 0;
   $46 = HEAP32[$consume_data >> 2] | 0;
   $inputctl = $cinfo + 460 | 0;
   $47 = HEAP32[$inputctl >> 2] | 0;
   HEAP32[$47 >> 2] = $46;
   return;
  }
  $24 = 0;
  $ci$076$i = 0;
  while (1) {
   $18 = HEAP32[$cinfo + 344 + ($ci$076$i << 2) >> 2] | 0;
   $19 = HEAP32[$18 + 8 >> 2] | 0;
   HEAP32[$18 + 56 >> 2] = $19;
   $20 = HEAP32[$18 + 12 >> 2] | 0;
   HEAP32[$18 + 60 >> 2] = $20;
   $mul35$i = Math_imul($20, $19) | 0;
   HEAP32[$18 + 64 >> 2] = $mul35$i;
   $mul39$i = Math_imul(HEAP32[$18 + 36 >> 2] | 0, $19) | 0;
   HEAP32[$18 + 68 >> 2] = $mul39$i;
   $rem43$i = ((HEAP32[$18 + 28 >> 2] | 0) >>> 0) % ($19 >>> 0) | 0;
   HEAP32[$18 + 72 >> 2] = ($rem43$i | 0) == 0 ? $19 : $rem43$i;
   $rem51$i = ((HEAP32[$18 + 32 >> 2] | 0) >>> 0) % ($20 >>> 0) | 0;
   HEAP32[$18 + 76 >> 2] = ($rem51$i | 0) == 0 ? $20 : $rem51$i;
   if (($mul35$i + $24 | 0) > 10) {
    $25 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$25 + 20 >> 2] = 14;
    FUNCTION_TABLE_vi[HEAP32[$25 >> 2] & 255]($cinfo);
   }
   if (($mul35$i | 0) > 0) {
    $mcublks$074$i = $mul35$i;
    while (1) {
     $27 = HEAP32[$blocks_in_MCU25$i >> 2] | 0;
     HEAP32[$blocks_in_MCU25$i >> 2] = $27 + 1;
     HEAP32[$cinfo + 372 + ($27 << 2) >> 2] = $ci$076$i;
     if (($mcublks$074$i | 0) > 1) $mcublks$074$i = $mcublks$074$i + -1 | 0; else break;
    }
   }
   $inc70$i = $ci$076$i + 1 | 0;
   $28 = HEAP32[$comps_in_scan$i >> 2] | 0;
   if (($inc70$i | 0) >= ($28 | 0)) break;
   $24 = HEAP32[$blocks_in_MCU25$i >> 2] | 0;
   $ci$076$i = $inc70$i;
  }
  if (($28 | 0) > 0) $48 = $28; else {
   $entropy = $cinfo + 468 | 0;
   $41 = HEAP32[$entropy >> 2] | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   FUNCTION_TABLE_vi[$42 & 255]($cinfo);
   $coef = $cinfo + 452 | 0;
   $43 = HEAP32[$coef >> 2] | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   FUNCTION_TABLE_vi[$44 & 255]($cinfo);
   $45 = HEAP32[$coef >> 2] | 0;
   $consume_data = $45 + 4 | 0;
   $46 = HEAP32[$consume_data >> 2] | 0;
   $inputctl = $cinfo + 460 | 0;
   $47 = HEAP32[$inputctl >> 2] | 0;
   HEAP32[$47 >> 2] = $46;
   return;
  }
 } else {
  $1 = HEAP32[$cinfo + 344 >> 2] | 0;
  HEAP32[$cinfo + 360 >> 2] = HEAP32[$1 + 28 >> 2];
  $3 = HEAP32[$1 + 32 >> 2] | 0;
  HEAP32[$cinfo + 364 >> 2] = $3;
  HEAP32[$1 + 56 >> 2] = 1;
  HEAP32[$1 + 60 >> 2] = 1;
  HEAP32[$1 + 64 >> 2] = 1;
  HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 72 >> 2] = 1;
  $5 = HEAP32[$1 + 12 >> 2] | 0;
  $rem$i = ($3 >>> 0) % ($5 >>> 0) | 0;
  HEAP32[$1 + 76 >> 2] = ($rem$i | 0) == 0 ? $5 : $rem$i;
  HEAP32[$cinfo + 368 >> 2] = 1;
  HEAP32[$cinfo + 372 >> 2] = 0;
  $48 = 1;
 }
 $mem$i = $cinfo + 4 | 0;
 $49 = $48;
 $ci$024$i = 0;
 while (1) {
  $29 = HEAP32[$cinfo + 344 + ($ci$024$i << 2) >> 2] | 0;
  $quant_table$i = $29 + 80 | 0;
  if (!(HEAP32[$quant_table$i >> 2] | 0)) {
   $31 = HEAP32[$29 + 16 >> 2] | 0;
   $$pre26$i = $cinfo + 164 + ($31 << 2) | 0;
   if ($31 >>> 0 <= 3 ? (HEAP32[$$pre26$i >> 2] | 0) != 0 : 0) {} else {
    $34 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$34 + 20 >> 2] = 54;
    HEAP32[$34 + 24 >> 2] = $31;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
   $call$i15 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem$i >> 2] >> 2] & 31]($cinfo, 1, 132) | 0;
   _memcpy($call$i15 | 0, HEAP32[$$pre26$i >> 2] | 0, 132) | 0;
   HEAP32[$quant_table$i >> 2] = $call$i15;
   $40 = HEAP32[$comps_in_scan$i >> 2] | 0;
  } else $40 = $49;
  $ci$024$i = $ci$024$i + 1 | 0;
  if (($ci$024$i | 0) >= ($40 | 0)) break; else $49 = $40;
 }
 $entropy = $cinfo + 468 | 0;
 $41 = HEAP32[$entropy >> 2] | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 FUNCTION_TABLE_vi[$42 & 255]($cinfo);
 $coef = $cinfo + 452 | 0;
 $43 = HEAP32[$coef >> 2] | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 FUNCTION_TABLE_vi[$44 & 255]($cinfo);
 $45 = HEAP32[$coef >> 2] | 0;
 $consume_data = $45 + 4 | 0;
 $46 = HEAP32[$consume_data >> 2] | 0;
 $inputctl = $cinfo + 460 | 0;
 $47 = HEAP32[$inputctl >> 2] | 0;
 HEAP32[$47 >> 2] = $46;
 return;
}

function _jpeg_idct_12x6($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $add = 0, $add$ptr = 0, $add$ptr63 = 0, $add105 = 0, $add109 = 0, $add114 = 0, $add120 = 0, $add14 = 0, $add32 = 0, $add35 = 0, $add69 = 0, $add7 = 0, $add77 = 0, $add79 = 0, $add80 = 0, $add84 = 0, $add92 = 0, $add96 = 0, $add99 = 0, $ctr$0188 = 0, $ctr$1184 = 0, $inptr$0185 = 0, $mul101 = 0, $mul118 = 0, $mul13 = 0, $mul19 = 0, $mul23 = 0, $mul27 = 0, $mul29 = 0, $mul6 = 0, $mul68 = 0, $mul90 = 0, $mul91 = 0, $mul94 = 0, $quantptr$0186 = 0, $shl38 = 0, $shl66 = 0, $shl75 = 0, $shr = 0, $sub115 = 0, $sub116 = 0, $sub122 = 0, $sub15 = 0, $sub70 = 0, $sub76 = 0, $sub78 = 0, $sub81 = 0, $sub83 = 0, $sub85 = 0, $workspace = 0, $wsptr$0187 = 0, $wsptr$1183 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0188 = 0;
 $inptr$0185 = $coef_block;
 $quantptr$0186 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0187 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0185 >> 1] << 13, HEAP32[$quantptr$0186 >> 2] | 0) | 0 | 1024;
  $mul6 = Math_imul((HEAP16[$inptr$0185 + 64 >> 1] | 0) * 5793 | 0, HEAP32[$quantptr$0186 + 128 >> 2] | 0) | 0;
  $add7 = $mul6 + $add | 0;
  $shr = (Math_imul($mul6, -2) | 0) + $add >> 11;
  $mul13 = Math_imul((HEAP16[$inptr$0185 + 32 >> 1] | 0) * 10033 | 0, HEAP32[$quantptr$0186 + 64 >> 2] | 0) | 0;
  $add14 = $mul13 + $add7 | 0;
  $sub15 = $add7 - $mul13 | 0;
  $mul19 = Math_imul(HEAP32[$quantptr$0186 + 32 >> 2] | 0, HEAP16[$inptr$0185 + 16 >> 1] | 0) | 0;
  $mul23 = Math_imul(HEAP32[$quantptr$0186 + 96 >> 2] | 0, HEAP16[$inptr$0185 + 48 >> 1] | 0) | 0;
  $mul27 = Math_imul(HEAP32[$quantptr$0186 + 160 >> 2] | 0, HEAP16[$inptr$0185 + 80 >> 1] | 0) | 0;
  $mul29 = ($mul27 + $mul19 | 0) * 2998 | 0;
  $add32 = $mul29 + ($mul23 + $mul19 << 13) | 0;
  $add35 = $mul29 + ($mul27 - $mul23 << 13) | 0;
  $shl38 = $mul19 - $mul23 - $mul27 << 2;
  HEAP32[$wsptr$0187 >> 2] = $add32 + $add14 >> 11;
  HEAP32[$wsptr$0187 + 160 >> 2] = $add14 - $add32 >> 11;
  HEAP32[$wsptr$0187 + 32 >> 2] = $shl38 + $shr;
  HEAP32[$wsptr$0187 + 128 >> 2] = $shr - $shl38;
  HEAP32[$wsptr$0187 + 64 >> 2] = $add35 + $sub15 >> 11;
  HEAP32[$wsptr$0187 + 96 >> 2] = $sub15 - $add35 >> 11;
  $ctr$0188 = $ctr$0188 + 1 | 0;
  if (($ctr$0188 | 0) == 8) break; else {
   $inptr$0185 = $inptr$0185 + 2 | 0;
   $quantptr$0186 = $quantptr$0186 + 4 | 0;
   $wsptr$0187 = $wsptr$0187 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1184 = 0;
 $wsptr$1183 = $workspace;
 while (1) {
  $add$ptr63 = (HEAP32[$output_buf + ($ctr$1184 << 2) >> 2] | 0) + $output_col | 0;
  $shl66 = (HEAP32[$wsptr$1183 >> 2] << 13) + 134348800 | 0;
  $mul68 = (HEAP32[$wsptr$1183 + 16 >> 2] | 0) * 10033 | 0;
  $add69 = $shl66 + $mul68 | 0;
  $sub70 = $shl66 - $mul68 | 0;
  $17 = HEAP32[$wsptr$1183 + 8 >> 2] | 0;
  $shl75 = HEAP32[$wsptr$1183 + 24 >> 2] << 13;
  $sub76 = ($17 << 13) - $shl75 | 0;
  $add77 = $sub76 + $shl66 | 0;
  $sub78 = $shl66 - $sub76 | 0;
  $add79 = $shl75 + ($17 * 11190 | 0) | 0;
  $add80 = $add79 + $add69 | 0;
  $sub81 = $add69 - $add79 | 0;
  $sub83 = ($17 * 2998 | 0) - $shl75 | 0;
  $add84 = $sub83 + $sub70 | 0;
  $sub85 = $sub70 - $sub83 | 0;
  $19 = HEAP32[$wsptr$1183 + 4 >> 2] | 0;
  $20 = HEAP32[$wsptr$1183 + 12 >> 2] | 0;
  $21 = HEAP32[$wsptr$1183 + 20 >> 2] | 0;
  $22 = HEAP32[$wsptr$1183 + 28 >> 2] | 0;
  $mul90 = $20 * 10703 | 0;
  $mul91 = Math_imul($20, -4433) | 0;
  $add92 = $21 + $19 | 0;
  $mul94 = ($add92 + $22 | 0) * 7053 | 0;
  $add96 = $mul94 + ($add92 * 2139 | 0) | 0;
  $add99 = $mul90 + ($19 * 2295 | 0) + $add96 | 0;
  $mul101 = Math_imul($22 + $21 | 0, -8565) | 0;
  $add105 = (Math_imul($21, -12112) | 0) + $mul91 + $mul101 + $add96 | 0;
  $add109 = ($22 * 12998 | 0) - $mul90 + $mul94 + $mul101 | 0;
  $add114 = $mul91 + (Math_imul($19, -5540) | 0) + (Math_imul($22, -16244) | 0) + $mul94 | 0;
  $sub115 = $19 - $22 | 0;
  $sub116 = $20 - $21 | 0;
  $mul118 = ($sub115 + $sub116 | 0) * 4433 | 0;
  $add120 = $mul118 + ($sub115 * 6270 | 0) | 0;
  $sub122 = $mul118 + (Math_imul($sub116, -15137) | 0) | 0;
  HEAP8[$add$ptr63 >> 0] = HEAP8[$add$ptr + (($add99 + $add80 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 11 >> 0] = HEAP8[$add$ptr + (($add80 - $add99 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 1 >> 0] = HEAP8[$add$ptr + (($add120 + $add77 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 10 >> 0] = HEAP8[$add$ptr + (($add77 - $add120 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 2 >> 0] = HEAP8[$add$ptr + (($add105 + $add84 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 9 >> 0] = HEAP8[$add$ptr + (($add84 - $add105 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 3 >> 0] = HEAP8[$add$ptr + (($add109 + $sub85 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 8 >> 0] = HEAP8[$add$ptr + (($sub85 - $add109 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 4 >> 0] = HEAP8[$add$ptr + (($sub122 + $sub78 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 7 >> 0] = HEAP8[$add$ptr + (($sub78 - $sub122 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 5 >> 0] = HEAP8[$add$ptr + (($add114 + $sub81 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 6 >> 0] = HEAP8[$add$ptr + (($sub81 - $add114 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1184 = $ctr$1184 + 1 | 0;
  if (($ctr$1184 | 0) == 6) break; else $wsptr$1183 = $wsptr$1183 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i75 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i76 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i54 = 0, $call$i60 = 0, $call$i63 = 0, $call$i66 = 0, $call$i69 = 0, $call$i72 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i77 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 $call$i54 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43080) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 20 >> 2] & 255]($__grouping, $call$i54);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0) {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i60 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 4;
    HEAP32[$6 >> 2] = $call$i60;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1 ? (HEAP8[$__nf$0 >> 0] | 0) == 48 : 0) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 4;
   HEAP32[$10 >> 2] = $call$i63;
   $call$i66 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 4;
   HEAP32[$13 >> 2] = $call$i66;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i72 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 16 >> 2] & 127]($call$i54) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 4;
    HEAP32[$23 >> 2] = $call$i72;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i69 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 4;
   HEAP32[$28 >> 2] = $call$i69;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52 << 2) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i75 = $add$ptr54;
   $__last$addr$0$i$i76 = $17;
   while (1) {
    $incdec$ptr$i$i77 = $__last$addr$0$i$i76 + -4 | 0;
    if ($__first$addr$0$i$i75 >>> 0 >= $incdec$ptr$i$i77 >>> 0) break;
    $18 = HEAP32[$__first$addr$0$i$i75 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i75 >> 2] = HEAP32[$incdec$ptr$i$i77 >> 2];
    HEAP32[$incdec$ptr$i$i77 >> 2] = $18;
    $__first$addr$0$i$i75 = $__first$addr$0$i$i75 + 4 | 0;
    $__last$addr$0$i$i76 = $incdec$ptr$i$i77;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _decode_mcu_DC_first($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $35 = 0, $5 = 0, $8 = 0, $Ah$i = 0, $Al = 0, $Ss$i = 0, $add$ptr = 0, $add$ptr20 = 0, $add$ptr26 = 0, $add$ptr34 = 0, $add$ptr60 = 0, $add$sink = 0, $add75 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx74 = 0, $blkn$083 = 0, $blocks_in_MCU = 0, $call18 = 0, $call21 = 0, $ci$032$i = 0, $comps_in_scan$i = 0, $ct = 0, $lim_Se$i = 0, $m$075 = 0, $m$1 = 0, $mul = 0, $progressive_mode$i = 0, $restart_interval = 0, $restarts_to_go = 0, $shl = 0, $shr6277 = 0, $shr6280 = 0, $spec$select = 0, $st$074 = 0, $st$1 = 0, $tobool66 = 0, $v$0$lcssa = 0, $v$079 = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0) {
  $restarts_to_go = $0 + 56 | 0;
  $2 = HEAP32[$restarts_to_go >> 2] | 0;
  if (!$2) {
   if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$cinfo + 464 >> 2] | 0) + 8 >> 2] & 127]($cinfo) | 0)) {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 25;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
   }
   $comps_in_scan$i = $cinfo + 340 | 0;
   if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
    $progressive_mode$i = $cinfo + 224 | 0;
    $Ss$i = $cinfo + 412 | 0;
    $lim_Se$i = $cinfo + 436 | 0;
    $Ah$i = $cinfo + 420 | 0;
    $ci$032$i = 0;
    do {
     $8 = HEAP32[$cinfo + 344 + ($ci$032$i << 2) >> 2] | 0;
     if (HEAP32[$progressive_mode$i >> 2] | 0) if (!(HEAP32[$Ss$i >> 2] | 0)) {
      if (!(HEAP32[$Ah$i >> 2] | 0)) label = 10;
     } else label = 13; else label = 10;
     do if ((label | 0) == 10) {
      label = 0;
      dest = HEAP32[$0 + 60 + (HEAP32[$8 + 20 >> 2] << 2) >> 2] | 0;
      stop = dest + 64 | 0;
      do {
       HEAP8[dest >> 0] = 0;
       dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$0 + 24 + ($ci$032$i << 2) >> 2] = 0;
      HEAP32[$0 + 40 + ($ci$032$i << 2) >> 2] = 0;
      if (!(HEAP32[$progressive_mode$i >> 2] | 0)) if (!(HEAP32[$lim_Se$i >> 2] | 0)) break; else {
       label = 13;
       break;
      } else if (!(HEAP32[$Ss$i >> 2] | 0)) break; else {
       label = 13;
       break;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      _memset(HEAP32[$0 + 124 + (HEAP32[$8 + 24 >> 2] << 2) >> 2] | 0, 0, 256) | 0;
     }
     $ci$032$i = $ci$032$i + 1 | 0;
    } while (($ci$032$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = -16;
   $18 = HEAP32[$restart_interval >> 2] | 0;
   HEAP32[$restarts_to_go >> 2] = $18;
   $19 = $18;
  } else $19 = $2;
  HEAP32[$restarts_to_go >> 2] = $19 + -1;
 }
 $ct = $0 + 20 | 0;
 if ((HEAP32[$ct >> 2] | 0) == -1) return 1;
 $blocks_in_MCU = $cinfo + 368 | 0;
 if ((HEAP32[$blocks_in_MCU >> 2] | 0) <= 0) return 1;
 $Al = $cinfo + 424 | 0;
 $blkn$083 = 0;
 L32 : while (1) {
  $22 = HEAP32[$MCU_data + ($blkn$083 << 2) >> 2] | 0;
  $23 = HEAP32[$cinfo + 372 + ($blkn$083 << 2) >> 2] | 0;
  $25 = HEAP32[(HEAP32[$cinfo + 344 + ($23 << 2) >> 2] | 0) + 20 >> 2] | 0;
  $arrayidx11 = $0 + 60 + ($25 << 2) | 0;
  $arrayidx12 = $0 + 40 + ($23 << 2) | 0;
  $add$ptr = (HEAP32[$arrayidx11 >> 2] | 0) + (HEAP32[$arrayidx12 >> 2] | 0) | 0;
  if (!(_arith_decode($cinfo, $add$ptr) | 0)) {
   HEAP32[$arrayidx12 >> 2] = 0;
   $35 = HEAP32[$0 + 24 + ($23 << 2) >> 2] | 0;
  } else {
   $call18 = _arith_decode($cinfo, $add$ptr + 1 | 0) | 0;
   $add$ptr20 = $add$ptr + 2 + $call18 | 0;
   $call21 = _arith_decode($cinfo, $add$ptr20) | 0;
   if ($call21) {
    $add$ptr26 = (HEAP32[$arrayidx11 >> 2] | 0) + 20 | 0;
    if (!(_arith_decode($cinfo, $add$ptr26) | 0)) {
     $m$1 = $call21;
     $st$1 = $add$ptr26;
    } else {
     $m$075 = $call21;
     $st$074 = $add$ptr26;
     while (1) {
      $shl = $m$075 << 1;
      if (($shl | 0) == 32768) break L32;
      $add$ptr34 = $st$074 + 1 | 0;
      if (!(_arith_decode($cinfo, $add$ptr34) | 0)) {
       $m$1 = $shl;
       $st$1 = $add$ptr34;
       break;
      } else {
       $m$075 = $shl;
       $st$074 = $add$ptr34;
      }
     }
    }
   } else {
    $m$1 = 0;
    $st$1 = $add$ptr20;
   }
   do if (($m$1 | 0) >= (1 << (HEAPU8[$cinfo + 232 + $25 >> 0] | 0) >> 1 | 0)) {
    $mul = $call18 << 2;
    if (($m$1 | 0) > (1 << (HEAPU8[$cinfo + 248 + $25 >> 0] | 0) >> 1 | 0)) {
     $add$sink = $mul + 12 | 0;
     break;
    } else {
     $add$sink = $mul + 4 | 0;
     break;
    }
   } else $add$sink = 0; while (0);
   HEAP32[$arrayidx12 >> 2] = $add$sink;
   $add$ptr60 = $st$1 + 14 | 0;
   $shr6277 = $m$1 >> 1;
   if (!$shr6277) $v$0$lcssa = $m$1; else {
    $shr6280 = $shr6277;
    $v$079 = $m$1;
    while (1) {
     $tobool66 = (_arith_decode($cinfo, $add$ptr60) | 0) == 0;
     $spec$select = ($tobool66 ? 0 : $shr6280) | $v$079;
     $shr6280 = $shr6280 >> 1;
     if (!$shr6280) {
      $v$0$lcssa = $spec$select;
      break;
     } else $v$079 = $spec$select;
    }
   }
   $arrayidx74 = $0 + 24 + ($23 << 2) | 0;
   $add75 = (HEAP32[$arrayidx74 >> 2] | 0) + (($call18 | 0) == 0 ? $v$0$lcssa + 1 | 0 : ~$v$0$lcssa) | 0;
   HEAP32[$arrayidx74 >> 2] = $add75;
   $35 = $add75;
  }
  HEAP16[$22 >> 1] = $35 << HEAP32[$Al >> 2];
  $blkn$083 = $blkn$083 + 1 | 0;
  if (($blkn$083 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
   label = 37;
   break;
  }
 }
 if ((label | 0) == 37) return 1;
 $29 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$29 + 20 >> 2] = 117;
 FUNCTION_TABLE_vii[HEAP32[$29 + 4 >> 2] & 255]($cinfo, -1);
 HEAP32[$ct >> 2] = -1;
 return 1;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i74 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i75 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i53 = 0, $call$i59 = 0, $call$i62 = 0, $call$i65 = 0, $call$i68 = 0, $call$i71 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i76 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 $call$i53 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43056) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 20 >> 2] & 255]($__grouping, $call$i53);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0) {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i59;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1 ? (HEAP8[$__nf$0 >> 0] | 0) == 48 : 0) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i62 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $call$i62;
   $call$i65 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 1;
   HEAP8[$13 >> 0] = $call$i65;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 16 >> 2] & 127]($call$i53) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $call$i71;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i68 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 1;
   HEAP8[$28 >> 0] = $call$i68;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i74 = $add$ptr54;
   $__last$addr$0$i$i75 = $17;
   while (1) {
    $incdec$ptr$i$i76 = $__last$addr$0$i$i75 + -1 | 0;
    if ($__first$addr$0$i$i74 >>> 0 >= $incdec$ptr$i$i76 >>> 0) break;
    $18 = HEAP8[$__first$addr$0$i$i74 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i74 >> 0] = HEAP8[$incdec$ptr$i$i76 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i76 >> 0] = $18;
    $__first$addr$0$i$i74 = $__first$addr$0$i$i74 + 1 | 0;
    $__last$addr$0$i$i75 = $incdec$ptr$i$i76;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _jpeg_idct_6x12($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $26 = 0, $27 = 0, $28 = 0, $add = 0, $add$ptr = 0, $add$ptr121 = 0, $add127 = 0, $add132 = 0, $add141 = 0, $add144 = 0, $add20 = 0, $add22 = 0, $add23 = 0, $add27 = 0, $add47 = 0, $add51 = 0, $add54 = 0, $add60 = 0, $add64 = 0, $add69 = 0, $add7 = 0, $add75 = 0, $ctr$0185 = 0, $ctr$1181 = 0, $inptr$0182 = 0, $mul11 = 0, $mul126 = 0, $mul131 = 0, $mul138 = 0, $mul32 = 0, $mul36 = 0, $mul40 = 0, $mul44 = 0, $mul45 = 0, $mul46 = 0, $mul49 = 0, $mul56 = 0, $mul6 = 0, $mul73 = 0, $quantptr$0183 = 0, $shl124 = 0, $shl147 = 0, $shl18 = 0, $sub = 0, $sub129 = 0, $sub133 = 0, $sub19 = 0, $sub21 = 0, $sub24 = 0, $sub26 = 0, $sub28 = 0, $sub70 = 0, $sub71 = 0, $sub77 = 0, $workspace = 0, $wsptr$0184 = 0, $wsptr$1180 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0185 = 0;
 $inptr$0182 = $coef_block;
 $quantptr$0183 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0184 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0182 >> 1] << 13, HEAP32[$quantptr$0183 >> 2] | 0) | 0 | 1024;
  $mul6 = Math_imul((HEAP16[$inptr$0182 + 64 >> 1] | 0) * 10033 | 0, HEAP32[$quantptr$0183 + 128 >> 2] | 0) | 0;
  $add7 = $mul6 + $add | 0;
  $sub = $add - $mul6 | 0;
  $mul11 = Math_imul(HEAP32[$quantptr$0183 + 64 >> 2] | 0, HEAP16[$inptr$0182 + 32 >> 1] | 0) | 0;
  $shl18 = Math_imul(HEAP16[$inptr$0182 + 96 >> 1] << 13, HEAP32[$quantptr$0183 + 192 >> 2] | 0) | 0;
  $sub19 = ($mul11 << 13) - $shl18 | 0;
  $add20 = $sub19 + $add | 0;
  $sub21 = $add - $sub19 | 0;
  $add22 = $shl18 + ($mul11 * 11190 | 0) | 0;
  $add23 = $add22 + $add7 | 0;
  $sub24 = $add7 - $add22 | 0;
  $sub26 = ($mul11 * 2998 | 0) - $shl18 | 0;
  $add27 = $sub26 + $sub | 0;
  $sub28 = $sub - $sub26 | 0;
  $mul32 = Math_imul(HEAP32[$quantptr$0183 + 32 >> 2] | 0, HEAP16[$inptr$0182 + 16 >> 1] | 0) | 0;
  $mul36 = Math_imul(HEAP32[$quantptr$0183 + 96 >> 2] | 0, HEAP16[$inptr$0182 + 48 >> 1] | 0) | 0;
  $mul40 = Math_imul(HEAP32[$quantptr$0183 + 160 >> 2] | 0, HEAP16[$inptr$0182 + 80 >> 1] | 0) | 0;
  $mul44 = Math_imul(HEAP32[$quantptr$0183 + 224 >> 2] | 0, HEAP16[$inptr$0182 + 112 >> 1] | 0) | 0;
  $mul45 = $mul36 * 10703 | 0;
  $mul46 = Math_imul($mul36, -4433) | 0;
  $add47 = $mul40 + $mul32 | 0;
  $mul49 = ($mul44 + $add47 | 0) * 7053 | 0;
  $add51 = $mul49 + ($add47 * 2139 | 0) | 0;
  $add54 = $mul45 + ($mul32 * 2295 | 0) + $add51 | 0;
  $mul56 = Math_imul($mul44 + $mul40 | 0, -8565) | 0;
  $add60 = (Math_imul($mul40, -12112) | 0) + $mul46 + $mul56 + $add51 | 0;
  $add64 = ($mul44 * 12998 | 0) - $mul45 + $mul49 + $mul56 | 0;
  $add69 = $mul46 + (Math_imul($mul32, -5540) | 0) + (Math_imul($mul44, -16244) | 0) + $mul49 | 0;
  $sub70 = $mul32 - $mul44 | 0;
  $sub71 = $mul36 - $mul40 | 0;
  $mul73 = ($sub70 + $sub71 | 0) * 4433 | 0;
  $add75 = $mul73 + ($sub70 * 6270 | 0) | 0;
  $sub77 = $mul73 + (Math_imul($sub71, -15137) | 0) | 0;
  HEAP32[$wsptr$0184 >> 2] = $add54 + $add23 >> 11;
  HEAP32[$wsptr$0184 + 264 >> 2] = $add23 - $add54 >> 11;
  HEAP32[$wsptr$0184 + 24 >> 2] = $add75 + $add20 >> 11;
  HEAP32[$wsptr$0184 + 240 >> 2] = $add20 - $add75 >> 11;
  HEAP32[$wsptr$0184 + 48 >> 2] = $add60 + $add27 >> 11;
  HEAP32[$wsptr$0184 + 216 >> 2] = $add27 - $add60 >> 11;
  HEAP32[$wsptr$0184 + 72 >> 2] = $add64 + $sub28 >> 11;
  HEAP32[$wsptr$0184 + 192 >> 2] = $sub28 - $add64 >> 11;
  HEAP32[$wsptr$0184 + 96 >> 2] = $sub77 + $sub21 >> 11;
  HEAP32[$wsptr$0184 + 168 >> 2] = $sub21 - $sub77 >> 11;
  HEAP32[$wsptr$0184 + 120 >> 2] = $add69 + $sub24 >> 11;
  HEAP32[$wsptr$0184 + 144 >> 2] = $sub24 - $add69 >> 11;
  $ctr$0185 = $ctr$0185 + 1 | 0;
  if (($ctr$0185 | 0) == 6) break; else {
   $inptr$0182 = $inptr$0182 + 2 | 0;
   $quantptr$0183 = $quantptr$0183 + 4 | 0;
   $wsptr$0184 = $wsptr$0184 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1181 = 0;
 $wsptr$1180 = $workspace;
 while (1) {
  $add$ptr121 = (HEAP32[$output_buf + ($ctr$1181 << 2) >> 2] | 0) + $output_col | 0;
  $shl124 = (HEAP32[$wsptr$1180 >> 2] << 13) + 134348800 | 0;
  $mul126 = (HEAP32[$wsptr$1180 + 16 >> 2] | 0) * 5793 | 0;
  $add127 = $shl124 + $mul126 | 0;
  $sub129 = $shl124 - $mul126 - $mul126 | 0;
  $mul131 = (HEAP32[$wsptr$1180 + 8 >> 2] | 0) * 10033 | 0;
  $add132 = $add127 + $mul131 | 0;
  $sub133 = $add127 - $mul131 | 0;
  $26 = HEAP32[$wsptr$1180 + 4 >> 2] | 0;
  $27 = HEAP32[$wsptr$1180 + 12 >> 2] | 0;
  $28 = HEAP32[$wsptr$1180 + 20 >> 2] | 0;
  $mul138 = ($28 + $26 | 0) * 2998 | 0;
  $add141 = $mul138 + ($27 + $26 << 13) | 0;
  $add144 = $mul138 + ($28 - $27 << 13) | 0;
  $shl147 = $26 - $27 - $28 << 13;
  HEAP8[$add$ptr121 >> 0] = HEAP8[$add$ptr + (($add141 + $add132 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 5 >> 0] = HEAP8[$add$ptr + (($add132 - $add141 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 1 >> 0] = HEAP8[$add$ptr + (($shl147 + $sub129 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 4 >> 0] = HEAP8[$add$ptr + (($sub129 - $shl147 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 2 >> 0] = HEAP8[$add$ptr + (($add144 + $sub133 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr121 + 3 >> 0] = HEAP8[$add$ptr + (($sub133 - $add144 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1181 = $ctr$1181 + 1 | 0;
  if (($ctr$1181 | 0) == 12) break; else $wsptr$1180 = $wsptr$1180 + 24 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26locale5__impC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $facets_ = 0, $name_ = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 20908;
 $facets_ = $this + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($facets_, 28);
 $name_ = $this + 144 | 0;
 HEAP32[$name_ >> 2] = 0;
 HEAP32[$name_ + 4 >> 2] = 0;
 HEAP32[$name_ + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($name_, 35944, __ZNSt3__211char_traitsIcE6lengthEPKc(35944) | 0);
 HEAP32[$this + 12 >> 2] = HEAP32[$facets_ >> 2];
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this, 41320);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this, 41328);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 41336);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 41352);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 41360);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 41368);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 41384);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 41392);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 41400);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 41424);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41456);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41464);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41472);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41480);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 41488);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 41496);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 41504);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 41512);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41520);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41528);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41536);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41544);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41552);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41568);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 41584);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 41600);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this, 41616);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this, 41624);
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $3 = 0, $7 = 0, $8 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i35 = 0, $__i$0$i$i42 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i75$sink = 0, $cond$i83$sink = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(992);
 $agg$tmp$byval_copy = sp + 912 | 0;
 $vararg_buffer1 = sp + 904 | 0;
 $__buf = sp + 800 | 0;
 $__bb = sp + 984 | 0;
 $__digits = sp + 400 | 0;
 $__loc = sp + 980 | 0;
 $__pat = sp + 988 | 0;
 $__dp = sp + 976 | 0;
 $__ts = sp + 972 | 0;
 $__grp = sp + 960 | 0;
 $__sym = sp + 948 | 0;
 $__sn = sp + 936 | 0;
 $__fd = sp + 932 | 0;
 $__mbuf = sp;
 $__mi = sp + 928 | 0;
 $__me = sp + 920 | 0;
 $agg$tmp = sp + 924 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$agg$tmp$byval_copy >> 3] = $__units;
 $call = _snprintf($__buf, 100, 37428, $agg$tmp$byval_copy) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 37428, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5 << 2) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 $3 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $7 = 0; else $7 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i35 = 0;
 while (1) {
  if (($__i$0$i$i35 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i35 << 2) >> 2] = 0;
  $__i$0$i$i35 = $__i$0$i$i35 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i42 = 0;
 while (1) {
  if (($__i$0$i$i42 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i42 << 2) >> 2] = 0;
  $__i$0$i$i42 = $__i$0$i$i42 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $7, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($8 | 0)) {
  $10 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $13 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $8 + 1 + ($__n$0 - $8 << 1) | 0;
  $cond$i75$sink = $10 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $10 & 255;
  $cond$i83$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $13 & 255;
 } else {
  $16 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $19 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $8 + 2 | 0;
  $cond$i75$sink = $16 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $16 & 255;
  $cond$i83$sink = $19 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $19 & 255;
 }
 $add33 = $add31$sink + $cond$i75$sink + $cond$i83$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33 << 2) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $call$i, $7, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $26 = HEAP32[$__mi >> 2] | 0;
 $27 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call46 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $26, $27, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function _decode_mcu_AC_refine($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $35 = 0, $5 = 0, $8 = 0, $Ah$i = 0, $Se = 0, $Ss$i = 0, $add$ptr = 0, $add$ptr28 = 0, $add$ptr28$lcssa = 0, $add$ptr2858 = 0, $add$ptr2862 = 0, $add$ptr59 = 0, $arraydecay50 = 0, $arrayidx20 = 0, $ci$032$i = 0, $comps_in_scan$i = 0, $conv = 0, $conv54 = 0, $conv56 = 0, $ct = 0, $inc = 0, $inc$lcssa = 0, $inc53 = 0, $inc56 = 0, $inc61 = 0, $k$0 = 0, $kex$0 = 0, $kex$1 = 0, $lim_Se$i = 0, $progressive_mode$i = 0, $restart_interval = 0, $restarts_to_go = 0, $shl = 0, $shl11 = 0, $st$0$lcssa = 0, $st$060 = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0) {
  $restarts_to_go = $0 + 56 | 0;
  $2 = HEAP32[$restarts_to_go >> 2] | 0;
  if (!$2) {
   if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$cinfo + 464 >> 2] | 0) + 8 >> 2] & 127]($cinfo) | 0)) {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 25;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
   }
   $comps_in_scan$i = $cinfo + 340 | 0;
   if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
    $progressive_mode$i = $cinfo + 224 | 0;
    $Ss$i = $cinfo + 412 | 0;
    $lim_Se$i = $cinfo + 436 | 0;
    $Ah$i = $cinfo + 420 | 0;
    $ci$032$i = 0;
    do {
     $8 = HEAP32[$cinfo + 344 + ($ci$032$i << 2) >> 2] | 0;
     if (HEAP32[$progressive_mode$i >> 2] | 0) if (!(HEAP32[$Ss$i >> 2] | 0)) {
      if (!(HEAP32[$Ah$i >> 2] | 0)) label = 10;
     } else label = 13; else label = 10;
     do if ((label | 0) == 10) {
      label = 0;
      dest = HEAP32[$0 + 60 + (HEAP32[$8 + 20 >> 2] << 2) >> 2] | 0;
      stop = dest + 64 | 0;
      do {
       HEAP8[dest >> 0] = 0;
       dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$0 + 24 + ($ci$032$i << 2) >> 2] = 0;
      HEAP32[$0 + 40 + ($ci$032$i << 2) >> 2] = 0;
      if (!(HEAP32[$progressive_mode$i >> 2] | 0)) if (!(HEAP32[$lim_Se$i >> 2] | 0)) break; else {
       label = 13;
       break;
      } else if (!(HEAP32[$Ss$i >> 2] | 0)) break; else {
       label = 13;
       break;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      _memset(HEAP32[$0 + 124 + (HEAP32[$8 + 24 >> 2] << 2) >> 2] | 0, 0, 256) | 0;
     }
     $ci$032$i = $ci$032$i + 1 | 0;
    } while (($ci$032$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = -16;
   $18 = HEAP32[$restart_interval >> 2] | 0;
   HEAP32[$restarts_to_go >> 2] = $18;
   $19 = $18;
  } else $19 = $2;
  HEAP32[$restarts_to_go >> 2] = $19 + -1;
 }
 $ct = $0 + 20 | 0;
 if ((HEAP32[$ct >> 2] | 0) == -1) return 1;
 $21 = HEAP32[$cinfo + 432 >> 2] | 0;
 $22 = HEAP32[$MCU_data >> 2] | 0;
 $24 = HEAP32[(HEAP32[$cinfo + 344 >> 2] | 0) + 24 >> 2] | 0;
 $25 = HEAP32[$cinfo + 424 >> 2] | 0;
 $shl = 1 << $25;
 $shl11 = -1 << $25;
 $Se = $cinfo + 416 | 0;
 $kex$0 = HEAP32[$Se >> 2] | 0;
 while (1) {
  if (HEAP16[$22 + (HEAP32[$21 + ($kex$0 << 2) >> 2] << 1) >> 1] | 0) {
   $kex$1 = $kex$0;
   break;
  }
  $kex$0 = $kex$0 + -1 | 0;
  if (!$kex$0) {
   $kex$1 = 0;
   break;
  }
 }
 $arrayidx20 = $0 + 124 + ($24 << 2) | 0;
 $arraydecay50 = $0 + 188 | 0;
 $conv56 = $shl & 65535;
 $conv54 = $shl11 & 65535;
 $k$0 = (HEAP32[$cinfo + 412 >> 2] | 0) + -1 | 0;
 L33 : while (1) {
  $add$ptr = (HEAP32[$arrayidx20 >> 2] | 0) + ($k$0 * 3 | 0) | 0;
  if (($k$0 | 0) >= ($kex$1 | 0) ? _arith_decode($cinfo, $add$ptr) | 0 : 0) {
   label = 38;
   break;
  }
  $inc56 = $k$0 + 1 | 0;
  $add$ptr2858 = $22 + (HEAP32[$21 + ($inc56 << 2) >> 2] << 1) | 0;
  L38 : do if (!(HEAP16[$add$ptr2858 >> 1] | 0)) {
   $add$ptr2862 = $add$ptr2858;
   $inc61 = $inc56;
   $st$060 = $add$ptr;
   while (1) {
    if (_arith_decode($cinfo, $st$060 + 1 | 0) | 0) break;
    if (($inc61 | 0) >= (HEAP32[$Se >> 2] | 0)) {
     label = 35;
     break L33;
    }
    $add$ptr59 = $st$060 + 3 | 0;
    $inc = $inc61 + 1 | 0;
    $add$ptr28 = $22 + (HEAP32[$21 + ($inc << 2) >> 2] << 1) | 0;
    if (!(HEAP16[$add$ptr28 >> 1] | 0)) {
     $add$ptr2862 = $add$ptr28;
     $inc61 = $inc;
     $st$060 = $add$ptr59;
    } else {
     $add$ptr28$lcssa = $add$ptr28;
     $inc$lcssa = $inc;
     $st$0$lcssa = $add$ptr59;
     label = 26;
     break L38;
    }
   }
   if (!(_arith_decode($cinfo, $arraydecay50) | 0)) {
    HEAP16[$add$ptr2862 >> 1] = $conv56;
    $inc53 = $inc61;
    break;
   } else {
    HEAP16[$add$ptr2862 >> 1] = $conv54;
    $inc53 = $inc61;
    break;
   }
  } else {
   $add$ptr28$lcssa = $add$ptr2858;
   $inc$lcssa = $inc56;
   $st$0$lcssa = $add$ptr;
   label = 26;
  } while (0);
  do if ((label | 0) == 26) {
   label = 0;
   if (_arith_decode($cinfo, $st$0$lcssa + 2 | 0) | 0) {
    $33 = HEAP16[$add$ptr28$lcssa >> 1] | 0;
    $conv = $33 << 16 >> 16;
    if ($33 << 16 >> 16 < 0) {
     HEAP16[$add$ptr28$lcssa >> 1] = $shl11 + $conv;
     $inc53 = $inc$lcssa;
     break;
    } else {
     HEAP16[$add$ptr28$lcssa >> 1] = $shl + $conv;
     $inc53 = $inc$lcssa;
     break;
    }
   } else $inc53 = $inc$lcssa;
  } while (0);
  if (($inc53 | 0) < (HEAP32[$Se >> 2] | 0)) $k$0 = $inc53; else {
   label = 38;
   break;
  }
 }
 if ((label | 0) == 35) {
  $35 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$35 + 20 >> 2] = 117;
  FUNCTION_TABLE_vii[HEAP32[$35 + 4 >> 2] & 255]($cinfo, -1);
  HEAP32[$ct >> 2] = -1;
  return 1;
 } else if ((label | 0) == 38) return 1;
 return 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $11 = 0, $13 = 0, $15 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i37 = 0, $__i$0$i$i45 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i80$sink = 0, $cond$i89$sink = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $agg$tmp$byval_copy = sp + 336 | 0;
 $vararg_buffer1 = sp + 328 | 0;
 $__buf = sp + 224 | 0;
 $__bb = sp + 400 | 0;
 $__digits = sp + 112 | 0;
 $__loc = sp + 396 | 0;
 $__pat = sp + 408 | 0;
 $__dp = sp + 405 | 0;
 $__ts = sp + 404 | 0;
 $__grp = sp + 384 | 0;
 $__sym = sp + 372 | 0;
 $__sn = sp + 360 | 0;
 $__fd = sp + 356 | 0;
 $__mbuf = sp;
 $__mi = sp + 352 | 0;
 $__me = sp + 344 | 0;
 $agg$tmp = sp + 348 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$agg$tmp$byval_copy >> 3] = $__units;
 $call = _snprintf($__buf, 100, 37428, $agg$tmp$byval_copy) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 37428, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 $3 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $7 = 0; else $7 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i37 = 0;
 while (1) {
  if (($__i$0$i$i37 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i37 << 2) >> 2] = 0;
  $__i$0$i$i37 = $__i$0$i$i37 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i45 = 0;
 while (1) {
  if (($__i$0$i$i45 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i45 << 2) >> 2] = 0;
  $__i$0$i$i45 = $__i$0$i$i45 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $7, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($8 | 0)) {
  $9 = HEAP8[$__sn + 11 >> 0] | 0;
  $11 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $8 + 1 + ($__n$0 - $8 << 1) | 0;
  $cond$i80$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
  $cond$i89$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $11 & 255;
 } else {
  $13 = HEAP8[$__sn + 11 >> 0] | 0;
  $15 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $8 + 2 | 0;
  $cond$i80$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $13 & 255;
  $cond$i89$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $15 & 255;
 }
 $add33 = $add31$sink + $cond$i80$sink + $cond$i89$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $call$i, $7, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $22 = HEAP32[$__mi >> 2] | 0;
 $23 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call46 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $22, $23, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function _arPattLoadFromBuffer($pattHandle, $buffer) {
 $pattHandle = $pattHandle | 0;
 $buffer = $buffer | 0;
 var $0 = 0, $14 = 0, $15 = 0, $19 = 0.0, $21 = 0, $25 = 0.0, $3 = 0, $4 = 0, $9 = 0, $add = 0, $add109 = 0, $add152 = 0, $arrayidx139 = 0, $arrayidx39 = 0, $arrayidx48 = 0, $arrayidx68 = 0, $arrayidx96 = 0, $buffPtr$0 = 0, $buffPtr$1 = 0, $buffPtr$2 = 0, $buffPtr$3 = 0, $call = 0, $call31 = 0, $call32 = 0, $cmp40 = 0, $cmp59 = 0, $div84 = 0, $h$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i1$0 = 0, $i2$0 = 0, $i3$0 = 0, $l$0 = 0, $l$1 = 0, $l$2 = 0, $m$0 = 0, $m$1 = 0, $mul = 0, $patt = 0, $pattBW = 0, $pattSize = 0, $pattf = 0, $pattpow = 0, $pattpowBW = 0, $retval$0 = 0, $sub = 0, $sub140 = 0, $sub97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 do if ($pattHandle) {
  if (!$buffer) {
   _arLog(0, 3, 21425, $vararg_buffer1);
   $retval$0 = -1;
   break;
  }
  $pattf = $pattHandle + 8 | 0;
  $0 = HEAP32[$pattHandle + 4 >> 2] | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) break;
   if (!(HEAP32[(HEAP32[$pattf >> 2] | 0) + ($i$0 << 2) >> 2] | 0)) break;
   $i$0 = $i$0 + 1 | 0;
  }
  if (($i$0 | 0) != ($0 | 0)) {
   $call = ___strdup($buffer) | 0;
   if (!$call) {
    _arLog(0, 3, 21470, $vararg_buffer3);
    $retval$0 = -1;
    break;
   }
   $pattSize = $pattHandle + 28 | 0;
   $patt = $pattHandle + 12 | 0;
   $mul = $i$0 << 2;
   $pattBW = $pattHandle + 20 | 0;
   $pattpow = $pattHandle + 16 | 0;
   $pattpowBW = $pattHandle + 24 | 0;
   $buffPtr$0 = _strtok($call, 21493) | 0;
   $h$0 = 0;
   L16 : while (1) {
    if ($h$0 >>> 0 >= 4) {
     label = 36;
     break;
    }
    $add = $h$0 + $mul | 0;
    $buffPtr$1 = $buffPtr$0;
    $i3$0 = 0;
    $l$0 = 0;
    while (1) {
     if ($i3$0 >>> 0 >= 3) break;
     $cmp40 = ($i3$0 | 0) == 0;
     $cmp59 = ($i3$0 | 0) == 2;
     $3 = HEAP32[$pattSize >> 2] | 0;
     $buffPtr$2 = $buffPtr$1;
     $i2$0 = 0;
     $l$1 = $l$0;
     while (1) {
      if (($i2$0 | 0) >= ($3 | 0)) break;
      $4 = $3;
      $buffPtr$3 = $buffPtr$2;
      $i1$0 = 0;
      $l$2 = $l$1;
      while (1) {
       if (($i1$0 | 0) >= ($4 | 0)) break;
       if (!$buffPtr$3) {
        label = 21;
        break L16;
       }
       $call31 = _atoi($buffPtr$3) | 0;
       $call32 = _strtok(0, 21493) | 0;
       $sub = 255 - $call31 | 0;
       $arrayidx39 = (HEAP32[(HEAP32[$patt >> 2] | 0) + ($add << 2) >> 2] | 0) + ((((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 | 0) * 3 | 0) + $i3$0 << 2) | 0;
       HEAP32[$arrayidx39 >> 2] = $sub;
       $9 = HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] | 0;
       $arrayidx48 = $9 + ((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 << 2) | 0;
       if (!$cmp40) {
        HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + $sub;
        if ($cmp59) {
         $arrayidx68 = $9 + ((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 << 2) | 0;
         HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) / 3 | 0;
        }
       } else HEAP32[$arrayidx48 >> 2] = $sub;
       $4 = HEAP32[$pattSize >> 2] | 0;
       $buffPtr$3 = $call32;
       $i1$0 = $i1$0 + 1 | 0;
       $l$2 = $sub + $l$2 | 0;
      }
      $3 = $4;
      $buffPtr$2 = $buffPtr$3;
      $i2$0 = $i2$0 + 1 | 0;
      $l$1 = $l$2;
     }
     $buffPtr$1 = $buffPtr$2;
     $i3$0 = $i3$0 + 1 | 0;
     $l$0 = $l$1;
    }
    $14 = HEAP32[$pattSize >> 2] | 0;
    $div84 = ($l$0 | 0) / (Math_imul($14 * 3 | 0, $14) | 0) | 0;
    $15 = $14;
    $i$1 = 0;
    $m$0 = 0;
    while (1) {
     if ($i$1 >>> 0 >= (Math_imul($15 * 3 | 0, $15) | 0) >>> 0) break;
     $arrayidx96 = (HEAP32[(HEAP32[$patt >> 2] | 0) + ($add << 2) >> 2] | 0) + ($i$1 << 2) | 0;
     $sub97 = (HEAP32[$arrayidx96 >> 2] | 0) - $div84 | 0;
     HEAP32[$arrayidx96 >> 2] = $sub97;
     $add109 = (Math_imul($sub97, $sub97) | 0) + $m$0 | 0;
     $15 = HEAP32[$pattSize >> 2] | 0;
     $i$1 = $i$1 + 1 | 0;
     $m$0 = $add109;
    }
    $19 = +Math_sqrt(+(+($m$0 | 0)));
    HEAPF64[(HEAP32[$pattpow >> 2] | 0) + ($add << 3) >> 3] = $19 == 0.0 ? 1.0e-07 : $19;
    $21 = $15;
    $i$2 = 0;
    $m$1 = 0;
    while (1) {
     if ($i$2 >>> 0 >= (Math_imul($21, $21) | 0) >>> 0) break;
     $arrayidx139 = (HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] | 0) + ($i$2 << 2) | 0;
     $sub140 = (HEAP32[$arrayidx139 >> 2] | 0) - $div84 | 0;
     HEAP32[$arrayidx139 >> 2] = $sub140;
     $add152 = (Math_imul($sub140, $sub140) | 0) + $m$1 | 0;
     $21 = HEAP32[$pattSize >> 2] | 0;
     $i$2 = $i$2 + 1 | 0;
     $m$1 = $add152;
    }
    $25 = +Math_sqrt(+(+($m$1 | 0)));
    HEAPF64[(HEAP32[$pattpowBW >> 2] | 0) + ($add << 3) >> 3] = $25 == 0.0 ? 1.0e-07 : $25;
    $buffPtr$0 = $buffPtr$1;
    $h$0 = $h$0 + 1 | 0;
   }
   if ((label | 0) == 21) {
    _arLog(0, 3, 21498, $vararg_buffer5);
    _free($call);
    $retval$0 = -1;
    break;
   } else if ((label | 0) == 36) {
    _free($call);
    HEAP32[(HEAP32[$pattf >> 2] | 0) + ($i$0 << 2) >> 2] = 1;
    HEAP32[$pattHandle >> 2] = (HEAP32[$pattHandle >> 2] | 0) + 1;
    $retval$0 = $i$0;
    break;
   }
  } else $retval$0 = -1;
 } else {
  _arLog(0, 3, 21400, sp);
  $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _jpeg_idct_7x7($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $add = 0, $add$ptr = 0, $add$ptr87 = 0, $add102 = 0, $add105 = 0, $add108 = 0, $add111 = 0, $add125 = 0, $add128 = 0, $add131 = 0, $add21 = 0, $add24 = 0, $add27 = 0, $add30 = 0, $add53 = 0, $add56 = 0, $add59 = 0, $ctr$0168 = 0, $ctr$1164 = 0, $inptr$0165 = 0, $mul118 = 0, $mul120 = 0, $mul124 = 0, $mul127 = 0, $mul13 = 0, $mul14 = 0, $mul16 = 0, $mul36 = 0, $mul40 = 0, $mul44 = 0, $mul46 = 0, $mul48 = 0, $mul5 = 0, $mul52 = 0, $mul55 = 0, $mul9 = 0, $mul95 = 0, $mul97 = 0, $quantptr$0166 = 0, $shl90 = 0, $sub101 = 0, $sub20 = 0, $workspace = 0, $wsptr$0167 = 0, $wsptr$1163 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0168 = 0;
 $inptr$0165 = $coef_block;
 $quantptr$0166 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0167 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0165 >> 1] << 13, HEAP32[$quantptr$0166 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0166 + 64 >> 2] | 0, HEAP16[$inptr$0165 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0166 + 128 >> 2] | 0, HEAP16[$inptr$0165 + 64 >> 1] | 0) | 0;
  $mul13 = Math_imul(HEAP32[$quantptr$0166 + 192 >> 2] | 0, HEAP16[$inptr$0165 + 96 >> 1] | 0) | 0;
  $mul14 = ($mul9 - $mul13 | 0) * 7223 | 0;
  $mul16 = ($mul5 - $mul9 | 0) * 2578 | 0;
  $sub20 = (Math_imul($mul9, -15083) | 0) + $add + $mul16 + $mul14 | 0;
  $add21 = $mul13 + $mul5 | 0;
  $add24 = ($add21 * 10438 | 0) + $add | 0;
  $add27 = $mul14 + (Math_imul($mul13, -637) | 0) + $add24 | 0;
  $add30 = $mul16 + (Math_imul($mul5, -20239) | 0) + $add24 | 0;
  $mul36 = Math_imul(HEAP32[$quantptr$0166 + 32 >> 2] | 0, HEAP16[$inptr$0165 + 16 >> 1] | 0) | 0;
  $mul40 = Math_imul(HEAP32[$quantptr$0166 + 96 >> 2] | 0, HEAP16[$inptr$0165 + 48 >> 1] | 0) | 0;
  $mul44 = Math_imul(HEAP32[$quantptr$0166 + 160 >> 2] | 0, HEAP16[$inptr$0165 + 80 >> 1] | 0) | 0;
  $mul46 = ($mul40 + $mul36 | 0) * 7663 | 0;
  $mul48 = ($mul36 - $mul40 | 0) * 1395 | 0;
  $mul52 = Math_imul($mul44 + $mul40 | 0, -11295) | 0;
  $add53 = $mul46 + $mul48 + $mul52 | 0;
  $mul55 = ($mul44 + $mul36 | 0) * 5027 | 0;
  $add56 = $mul55 + ($mul46 - $mul48) | 0;
  $add59 = $mul55 + ($mul44 * 15326 | 0) + $mul52 | 0;
  HEAP32[$wsptr$0167 >> 2] = $add56 + $add27 >> 11;
  HEAP32[$wsptr$0167 + 168 >> 2] = $add27 - $add56 >> 11;
  HEAP32[$wsptr$0167 + 28 >> 2] = $add53 + $sub20 >> 11;
  HEAP32[$wsptr$0167 + 140 >> 2] = $sub20 - $add53 >> 11;
  HEAP32[$wsptr$0167 + 56 >> 2] = $add59 + $add30 >> 11;
  HEAP32[$wsptr$0167 + 112 >> 2] = $add30 - $add59 >> 11;
  HEAP32[$wsptr$0167 + 84 >> 2] = (($mul9 - $add21 | 0) * 11585 | 0) + $add >> 11;
  $ctr$0168 = $ctr$0168 + 1 | 0;
  if (($ctr$0168 | 0) == 7) break; else {
   $inptr$0165 = $inptr$0165 + 2 | 0;
   $quantptr$0166 = $quantptr$0166 + 4 | 0;
   $wsptr$0167 = $wsptr$0167 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1164 = 0;
 $wsptr$1163 = $workspace;
 while (1) {
  $add$ptr87 = (HEAP32[$output_buf + ($ctr$1164 << 2) >> 2] | 0) + $output_col | 0;
  $shl90 = (HEAP32[$wsptr$1163 >> 2] << 13) + 134348800 | 0;
  $21 = HEAP32[$wsptr$1163 + 8 >> 2] | 0;
  $22 = HEAP32[$wsptr$1163 + 16 >> 2] | 0;
  $23 = HEAP32[$wsptr$1163 + 24 >> 2] | 0;
  $mul95 = ($22 - $23 | 0) * 7223 | 0;
  $mul97 = ($21 - $22 | 0) * 2578 | 0;
  $sub101 = (Math_imul($22, -15083) | 0) + $shl90 + $mul97 + $mul95 | 0;
  $add102 = $23 + $21 | 0;
  $add105 = ($add102 * 10438 | 0) + $shl90 | 0;
  $add108 = $mul95 + (Math_imul($23, -637) | 0) + $add105 | 0;
  $add111 = $mul97 + (Math_imul($21, -20239) | 0) + $add105 | 0;
  $27 = HEAP32[$wsptr$1163 + 4 >> 2] | 0;
  $28 = HEAP32[$wsptr$1163 + 12 >> 2] | 0;
  $29 = HEAP32[$wsptr$1163 + 20 >> 2] | 0;
  $mul118 = ($28 + $27 | 0) * 7663 | 0;
  $mul120 = ($27 - $28 | 0) * 1395 | 0;
  $mul124 = Math_imul($29 + $28 | 0, -11295) | 0;
  $add125 = $mul118 + $mul120 + $mul124 | 0;
  $mul127 = ($29 + $27 | 0) * 5027 | 0;
  $add128 = $mul118 - $mul120 + $mul127 | 0;
  $add131 = $mul127 + ($29 * 15326 | 0) + $mul124 | 0;
  HEAP8[$add$ptr87 >> 0] = HEAP8[$add$ptr + (($add128 + $add108 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 6 >> 0] = HEAP8[$add$ptr + (($add108 - $add128 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 1 >> 0] = HEAP8[$add$ptr + (($add125 + $sub101 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 5 >> 0] = HEAP8[$add$ptr + (($sub101 - $add125 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 2 >> 0] = HEAP8[$add$ptr + (($add131 + $add111 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 4 >> 0] = HEAP8[$add$ptr + (($add111 - $add131 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr87 + 3 >> 0] = HEAP8[$add$ptr + (((($22 - $add102 | 0) * 11585 | 0) + $shl90 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1164 = $ctr$1164 + 1 | 0;
  if (($ctr$1164 | 0) == 7) break; else $wsptr$1163 = $wsptr$1163 + 28 | 0;
 }
 STACKTOP = sp;
 return;
}

function _jinit_master_decompress($cinfo) {
 $cinfo = $cinfo | 0;
 var $11 = 0, $16 = 0, $2 = 0, $3 = 0, $33 = 0, $39 = 0, $44 = 0, $add$ptr$i$i = 0, $call = 0, $call$i = 0, $call$i$i = 0, $i$017$i$i = 0, $inputctl$i = 0, $mem = 0, $mul111$i = 0, $nscans$0$i = 0, $out_color_components$i = 0, $out_color_components16$pre$phi$iZ2D = 0, $pass_number$i = 0, $quantizer_1pass$i = 0, $quantizer_2pass$i = 0, $raw_data_out$i = 0, $raw_data_out72$pre$phi$iZ2D = 0, $using_merged_upsample$i = 0, label = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 28) | 0;
 HEAP32[$cinfo + 444 >> 2] = $call;
 HEAP32[$call >> 2] = 167;
 HEAP32[$call + 4 >> 2] = 168;
 HEAP32[$call + 8 >> 2] = 0;
 $2 = HEAP32[$cinfo + 212 >> 2] | 0;
 if (($2 | 0) != 8) {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 16;
  HEAP32[$3 + 24 >> 2] = $2;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 _jpeg_calc_output_dimensions($cinfo);
 $call$i$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1280) | 0;
 _memset($call$i$i | 0, 0, 512) | 0;
 $add$ptr$i$i = $call$i$i + 512 | 0;
 HEAP32[$cinfo + 336 >> 2] = $add$ptr$i$i;
 $i$017$i$i = 0;
 do {
  HEAP8[$add$ptr$i$i + $i$017$i$i >> 0] = $i$017$i$i;
  $i$017$i$i = $i$017$i$i + 1 | 0;
 } while (($i$017$i$i | 0) != 256);
 _memset($call$i$i + 768 | 0, -1, 512) | 0;
 if (((HEAP32[$cinfo + 116 >> 2] | 0) != 0 ? (HEAP32[$cinfo + 112 >> 2] | 0) != 0 : 0) ? ($out_color_components$i = $cinfo + 120 | 0, (HEAP32[$out_color_components$i >> 2] | 0) >= 1) : 0) $out_color_components16$pre$phi$iZ2D = $out_color_components$i; else {
  $11 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$11 + 20 >> 2] = 33;
  FUNCTION_TABLE_vi[HEAP32[$11 >> 2] & 255]($cinfo);
  $out_color_components16$pre$phi$iZ2D = $cinfo + 120 | 0;
 }
 $pass_number$i = $call + 12 | 0;
 HEAP32[$pass_number$i >> 2] = 0;
 $call$i = _use_merged_upsample($cinfo) | 0;
 $using_merged_upsample$i = $call + 16 | 0;
 HEAP32[$using_merged_upsample$i >> 2] = $call$i;
 $quantizer_1pass$i = $call + 20 | 0;
 HEAP32[$quantizer_1pass$i >> 2] = 0;
 $quantizer_2pass$i = $call + 24 | 0;
 HEAP32[$quantizer_2pass$i >> 2] = 0;
 do if (!(HEAP32[$cinfo + 84 >> 2] | 0)) {
  HEAP32[$cinfo + 100 >> 2] = 0;
  HEAP32[$cinfo + 104 >> 2] = 0;
  HEAP32[$cinfo + 108 >> 2] = 0;
  $raw_data_out72$pre$phi$iZ2D = $cinfo + 68 | 0;
 } else {
  if (!(HEAP32[$cinfo + 64 >> 2] | 0)) {
   HEAP32[$cinfo + 100 >> 2] = 0;
   HEAP32[$cinfo + 104 >> 2] = 0;
   HEAP32[$cinfo + 108 >> 2] = 0;
  }
  $raw_data_out$i = $cinfo + 68 | 0;
  if (HEAP32[$raw_data_out$i >> 2] | 0) {
   $16 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$16 + 20 >> 2] = 48;
   FUNCTION_TABLE_vi[HEAP32[$16 >> 2] & 255]($cinfo);
  }
  do if ((HEAP32[$out_color_components16$pre$phi$iZ2D >> 2] | 0) == 3) {
   if (HEAP32[$cinfo + 136 >> 2] | 0) {
    HEAP32[$cinfo + 104 >> 2] = 1;
    break;
   }
   if (!(HEAP32[$cinfo + 92 >> 2] | 0)) {
    HEAP32[$cinfo + 100 >> 2] = 1;
    break;
   } else {
    HEAP32[$cinfo + 108 >> 2] = 1;
    break;
   }
  } else {
   HEAP32[$cinfo + 100 >> 2] = 1;
   HEAP32[$cinfo + 104 >> 2] = 0;
   HEAP32[$cinfo + 108 >> 2] = 0;
   HEAP32[$cinfo + 136 >> 2] = 0;
  } while (0);
  if (HEAP32[$cinfo + 100 >> 2] | 0) {
   _jinit_1pass_quantizer($cinfo);
   HEAP32[$quantizer_1pass$i >> 2] = HEAP32[$cinfo + 484 >> 2];
  }
  if ((HEAP32[$cinfo + 108 >> 2] | 0) == 0 ? (HEAP32[$cinfo + 104 >> 2] | 0) == 0 : 0) {
   $raw_data_out72$pre$phi$iZ2D = $raw_data_out$i;
   break;
  }
  _jinit_2pass_quantizer($cinfo);
  HEAP32[$quantizer_2pass$i >> 2] = HEAP32[$cinfo + 484 >> 2];
  $raw_data_out72$pre$phi$iZ2D = $raw_data_out$i;
 } while (0);
 if (!(HEAP32[$raw_data_out72$pre$phi$iZ2D >> 2] | 0)) {
  if (!(HEAP32[$using_merged_upsample$i >> 2] | 0)) {
   _jinit_color_deconverter($cinfo);
   _jinit_upsampler($cinfo);
  } else _jinit_merged_upsampler($cinfo);
  _jinit_d_post_controller($cinfo, HEAP32[$cinfo + 108 >> 2] | 0);
 }
 _jinit_inverse_dct($cinfo);
 if (!(HEAP32[$cinfo + 228 >> 2] | 0)) _jinit_huff_decoder($cinfo); else _jinit_arith_decoder($cinfo);
 $inputctl$i = $cinfo + 460 | 0;
 if (!(HEAP32[(HEAP32[$inputctl$i >> 2] | 0) + 16 >> 2] | 0)) $33 = (HEAP32[$cinfo + 64 >> 2] | 0) != 0 & 1; else $33 = 1;
 _jinit_d_coef_controller($cinfo, $33);
 if (!(HEAP32[$raw_data_out72$pre$phi$iZ2D >> 2] | 0)) _jinit_d_main_controller($cinfo, 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$mem >> 2] | 0) + 24 >> 2] & 255]($cinfo);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$inputctl$i >> 2] | 0) + 8 >> 2] & 255]($cinfo);
 $39 = HEAP32[$cinfo + 8 >> 2] | 0;
 if (!$39) return;
 if (HEAP32[$cinfo + 64 >> 2] | 0) return;
 if (!(HEAP32[(HEAP32[$inputctl$i >> 2] | 0) + 16 >> 2] | 0)) return;
 $44 = HEAP32[$cinfo + 36 >> 2] | 0;
 $nscans$0$i = (HEAP32[$cinfo + 224 >> 2] | 0) == 0 ? $44 : ($44 * 3 | 0) + 2 | 0;
 HEAP32[$39 + 4 >> 2] = 0;
 $mul111$i = Math_imul($nscans$0$i, HEAP32[$cinfo + 332 >> 2] | 0) | 0;
 HEAP32[$39 + 8 >> 2] = $mul111$i;
 HEAP32[$39 + 12 >> 2] = 0;
 HEAP32[$39 + 16 >> 2] = (HEAP32[$cinfo + 108 >> 2] | 0) == 0 ? 2 : 3;
 HEAP32[$pass_number$i >> 2] = (HEAP32[$pass_number$i >> 2] | 0) + 1;
 return;
}

function _jpeg_fill_bit_buffer($state, $get_buffer, $bits_left, $nbits) {
 $state = $state | 0;
 $get_buffer = $get_buffer | 0;
 $bits_left = $bits_left | 0;
 $nbits = $nbits | 0;
 var $0 = 0, $1 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $6 = 0, $9 = 0, $add = 0, $bits_left$addr$063 = 0, $bits_left$addr$2 = 0, $bits_left$addr$3 = 0, $bytes_in_buffer$068 = 0, $bytes_in_buffer$1 = 0, $bytes_in_buffer$2 = 0, $bytes_in_buffer$3 = 0, $bytes_in_buffer$4 = 0, $bytes_in_buffer$6 = 0, $bytes_in_buffer$7 = 0, $bytes_in_buffer2 = 0, $c$0 = 0, $conv = 0, $dec = 0, $dec30 = 0, $entropy = 0, $get_buffer$addr$065 = 0, $get_buffer$addr$2 = 0, $get_buffer$addr$3 = 0, $incdec$ptr = 0, $incdec$ptr31 = 0, $next_input_byte$067 = 0, $next_input_byte$1 = 0, $next_input_byte$2 = 0, $next_input_byte$3 = 0, $next_input_byte$4 = 0, $next_input_byte$6 = 0, $next_input_byte$7 = 0, $or = 0, $retval$2 = 0, $src = 0, $unread_marker = 0, label = 0;
 $0 = HEAP32[$state >> 2] | 0;
 $bytes_in_buffer2 = $state + 4 | 0;
 $1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
 $2 = HEAP32[$state + 16 >> 2] | 0;
 $unread_marker = $2 + 440 | 0;
 L1 : do if (!(HEAP32[$unread_marker >> 2] | 0)) if (($bits_left | 0) < 25) {
  $src = $2 + 24 | 0;
  $bits_left$addr$063 = $bits_left;
  $bytes_in_buffer$068 = $1;
  $get_buffer$addr$065 = $get_buffer;
  $next_input_byte$067 = $0;
  L4 : while (1) {
   if (!$bytes_in_buffer$068) {
    if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$src >> 2] | 0) + 12 >> 2] & 127]($2) | 0)) {
     $retval$2 = 0;
     label = 20;
     break;
    }
    $6 = HEAP32[$src >> 2] | 0;
    $bytes_in_buffer$1 = HEAP32[$6 + 4 >> 2] | 0;
    $next_input_byte$1 = HEAP32[$6 >> 2] | 0;
   } else {
    $bytes_in_buffer$1 = $bytes_in_buffer$068;
    $next_input_byte$1 = $next_input_byte$067;
   }
   $dec = $bytes_in_buffer$1 + -1 | 0;
   $incdec$ptr = $next_input_byte$1 + 1 | 0;
   $9 = HEAP8[$next_input_byte$1 >> 0] | 0;
   $conv = $9 & 255;
   L10 : do if ($9 << 24 >> 24 == -1) {
    $bytes_in_buffer$2 = $dec;
    $next_input_byte$2 = $incdec$ptr;
    while (1) {
     if (!$bytes_in_buffer$2) {
      if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$src >> 2] | 0) + 12 >> 2] & 127]($2) | 0)) {
       $retval$2 = 0;
       label = 20;
       break L4;
      }
      $12 = HEAP32[$src >> 2] | 0;
      $bytes_in_buffer$3 = HEAP32[$12 + 4 >> 2] | 0;
      $next_input_byte$3 = HEAP32[$12 >> 2] | 0;
     } else {
      $bytes_in_buffer$3 = $bytes_in_buffer$2;
      $next_input_byte$3 = $next_input_byte$2;
     }
     $dec30 = $bytes_in_buffer$3 + -1 | 0;
     $incdec$ptr31 = $next_input_byte$3 + 1 | 0;
     $15 = HEAP8[$next_input_byte$3 >> 0] | 0;
     switch ($15 << 24 >> 24) {
     case 0:
      {
       $bytes_in_buffer$4 = $dec30;
       $c$0 = 255;
       $next_input_byte$4 = $incdec$ptr31;
       break L10;
       break;
      }
     case -1:
      {
       $bytes_in_buffer$2 = $dec30;
       $next_input_byte$2 = $incdec$ptr31;
       break;
      }
     default:
      {
       label = 13;
       break L4;
      }
     }
    }
   } else {
    $bytes_in_buffer$4 = $dec;
    $c$0 = $conv;
    $next_input_byte$4 = $incdec$ptr;
   } while (0);
   $or = $c$0 | $get_buffer$addr$065 << 8;
   $add = $bits_left$addr$063 + 8 | 0;
   if (($bits_left$addr$063 | 0) < 17) {
    $bits_left$addr$063 = $add;
    $bytes_in_buffer$068 = $bytes_in_buffer$4;
    $get_buffer$addr$065 = $or;
    $next_input_byte$067 = $next_input_byte$4;
   } else {
    $bits_left$addr$3 = $add;
    $bytes_in_buffer$7 = $bytes_in_buffer$4;
    $get_buffer$addr$3 = $or;
    $next_input_byte$7 = $next_input_byte$4;
    break L1;
   }
  }
  if ((label | 0) == 13) {
   HEAP32[$unread_marker >> 2] = $15 & 255;
   $bits_left$addr$2 = $bits_left$addr$063;
   $bytes_in_buffer$6 = $dec30;
   $get_buffer$addr$2 = $get_buffer$addr$065;
   $next_input_byte$6 = $incdec$ptr31;
   label = 15;
   break;
  } else if ((label | 0) == 20) return $retval$2 | 0;
 } else {
  $bits_left$addr$3 = $bits_left;
  $bytes_in_buffer$7 = $1;
  $get_buffer$addr$3 = $get_buffer;
  $next_input_byte$7 = $0;
 } else {
  $bits_left$addr$2 = $bits_left;
  $bytes_in_buffer$6 = $1;
  $get_buffer$addr$2 = $get_buffer;
  $next_input_byte$6 = $0;
  label = 15;
 } while (0);
 if ((label | 0) == 15) if (($bits_left$addr$2 | 0) < ($nbits | 0)) {
  $entropy = $2 + 468 | 0;
  if (!(HEAP32[(HEAP32[$entropy >> 2] | 0) + 40 >> 2] | 0)) {
   $18 = HEAP32[$2 >> 2] | 0;
   HEAP32[$18 + 20 >> 2] = 120;
   FUNCTION_TABLE_vii[HEAP32[$18 + 4 >> 2] & 255]($2, -1);
   HEAP32[(HEAP32[$entropy >> 2] | 0) + 40 >> 2] = 1;
  }
  $bits_left$addr$3 = 25;
  $bytes_in_buffer$7 = $bytes_in_buffer$6;
  $get_buffer$addr$3 = $get_buffer$addr$2 << 25 - $bits_left$addr$2;
  $next_input_byte$7 = $next_input_byte$6;
 } else {
  $bits_left$addr$3 = $bits_left$addr$2;
  $bytes_in_buffer$7 = $bytes_in_buffer$6;
  $get_buffer$addr$3 = $get_buffer$addr$2;
  $next_input_byte$7 = $next_input_byte$6;
 }
 HEAP32[$state >> 2] = $next_input_byte$7;
 HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$7;
 HEAP32[$state + 8 >> 2] = $get_buffer$addr$3;
 HEAP32[$state + 12 >> 2] = $bits_left$addr$3;
 $retval$2 = 1;
 return $retval$2 | 0;
}

function _jpeg_idct_5x10($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $add = 0, $add$ptr = 0, $add$ptr107 = 0, $add117 = 0, $add118 = 0, $add127 = 0, $add23 = 0, $add26 = 0, $add28 = 0, $add46 = 0, $add51 = 0, $add54 = 0, $add57 = 0, $add70 = 0, $add8 = 0, $ctr$0157 = 0, $ctr$1153 = 0, $inptr$0154 = 0, $mul114 = 0, $mul125 = 0, $mul15 = 0, $mul19 = 0, $mul21 = 0, $mul33 = 0, $mul37 = 0, $mul41 = 0, $mul45 = 0, $mul48 = 0, $mul5 = 0, $mul50 = 0, $mul58 = 0, $quantptr$0155 = 0, $shl110 = 0, $shl49 = 0, $shl64 = 0, $shr = 0, $sub = 0, $sub115 = 0, $sub119 = 0, $sub121 = 0, $sub129 = 0, $sub25 = 0, $sub27 = 0, $sub29 = 0, $sub47 = 0, $sub61 = 0, $sub67 = 0, $workspace = 0, $wsptr$0156 = 0, $wsptr$1152 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0157 = 0;
 $inptr$0154 = $coef_block;
 $quantptr$0155 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0156 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0154 >> 1] << 13, HEAP32[$quantptr$0155 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0155 + 128 >> 2] | 0, HEAP16[$inptr$0154 + 64 >> 1] | 0) | 0;
  $add8 = ($mul5 * 9373 | 0) + $add | 0;
  $sub = (Math_imul($mul5, -3580) | 0) + $add | 0;
  $shr = (Math_imul($mul5, -11586) | 0) + $add >> 11;
  $mul15 = Math_imul(HEAP32[$quantptr$0155 + 64 >> 2] | 0, HEAP16[$inptr$0154 + 32 >> 1] | 0) | 0;
  $mul19 = Math_imul(HEAP32[$quantptr$0155 + 192 >> 2] | 0, HEAP16[$inptr$0154 + 96 >> 1] | 0) | 0;
  $mul21 = ($mul19 + $mul15 | 0) * 6810 | 0;
  $add23 = $mul21 + ($mul15 * 4209 | 0) | 0;
  $sub25 = $mul21 + (Math_imul($mul19, -17828) | 0) | 0;
  $add26 = $add23 + $add8 | 0;
  $sub27 = $add8 - $add23 | 0;
  $add28 = $sub25 + $sub | 0;
  $sub29 = $sub - $sub25 | 0;
  $mul33 = Math_imul(HEAP32[$quantptr$0155 + 32 >> 2] | 0, HEAP16[$inptr$0154 + 16 >> 1] | 0) | 0;
  $mul37 = Math_imul(HEAP32[$quantptr$0155 + 96 >> 2] | 0, HEAP16[$inptr$0154 + 48 >> 1] | 0) | 0;
  $mul41 = Math_imul(HEAP32[$quantptr$0155 + 160 >> 2] | 0, HEAP16[$inptr$0154 + 80 >> 1] | 0) | 0;
  $mul45 = Math_imul(HEAP32[$quantptr$0155 + 224 >> 2] | 0, HEAP16[$inptr$0154 + 112 >> 1] | 0) | 0;
  $add46 = $mul45 + $mul37 | 0;
  $sub47 = $mul37 - $mul45 | 0;
  $mul48 = $sub47 * 2531 | 0;
  $shl49 = $mul41 << 13;
  $mul50 = $add46 * 7791 | 0;
  $add51 = $mul48 + $shl49 | 0;
  $add54 = $mul50 + ($mul33 * 11443 | 0) + $add51 | 0;
  $add57 = ($mul33 * 1812 | 0) - $mul50 + $add51 | 0;
  $mul58 = $add46 * 4815 | 0;
  $sub61 = $shl49 - $mul48 - ($sub47 << 12) | 0;
  $shl64 = $mul33 - $mul41 - $sub47 << 2;
  $sub67 = ($mul33 * 10323 | 0) - $mul58 - $sub61 | 0;
  $add70 = $sub61 + (($mul33 * 5260 | 0) - $mul58) | 0;
  HEAP32[$wsptr$0156 >> 2] = $add54 + $add26 >> 11;
  HEAP32[$wsptr$0156 + 180 >> 2] = $add26 - $add54 >> 11;
  HEAP32[$wsptr$0156 + 20 >> 2] = $sub67 + $add28 >> 11;
  HEAP32[$wsptr$0156 + 160 >> 2] = $add28 - $sub67 >> 11;
  HEAP32[$wsptr$0156 + 40 >> 2] = $shl64 + $shr;
  HEAP32[$wsptr$0156 + 140 >> 2] = $shr - $shl64;
  HEAP32[$wsptr$0156 + 60 >> 2] = $add70 + $sub29 >> 11;
  HEAP32[$wsptr$0156 + 120 >> 2] = $sub29 - $add70 >> 11;
  HEAP32[$wsptr$0156 + 80 >> 2] = $add57 + $sub27 >> 11;
  HEAP32[$wsptr$0156 + 100 >> 2] = $sub27 - $add57 >> 11;
  $ctr$0157 = $ctr$0157 + 1 | 0;
  if (($ctr$0157 | 0) == 5) break; else {
   $inptr$0154 = $inptr$0154 + 2 | 0;
   $quantptr$0155 = $quantptr$0155 + 4 | 0;
   $wsptr$0156 = $wsptr$0156 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1153 = 0;
 $wsptr$1152 = $workspace;
 while (1) {
  $add$ptr107 = (HEAP32[$output_buf + ($ctr$1153 << 2) >> 2] | 0) + $output_col | 0;
  $shl110 = (HEAP32[$wsptr$1152 >> 2] << 13) + 134348800 | 0;
  $23 = HEAP32[$wsptr$1152 + 8 >> 2] | 0;
  $24 = HEAP32[$wsptr$1152 + 16 >> 2] | 0;
  $mul114 = ($24 + $23 | 0) * 6476 | 0;
  $sub115 = $23 - $24 | 0;
  $add117 = ($sub115 * 2896 | 0) + $shl110 | 0;
  $add118 = $add117 + $mul114 | 0;
  $sub119 = $add117 - $mul114 | 0;
  $sub121 = (Math_imul($sub115, -11584) | 0) + $shl110 | 0;
  $26 = HEAP32[$wsptr$1152 + 4 >> 2] | 0;
  $27 = HEAP32[$wsptr$1152 + 12 >> 2] | 0;
  $mul125 = ($27 + $26 | 0) * 6810 | 0;
  $add127 = $mul125 + ($26 * 4209 | 0) | 0;
  $sub129 = $mul125 + (Math_imul($27, -17828) | 0) | 0;
  HEAP8[$add$ptr107 >> 0] = HEAP8[$add$ptr + (($add127 + $add118 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 4 >> 0] = HEAP8[$add$ptr + (($add118 - $add127 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 1 >> 0] = HEAP8[$add$ptr + (($sub129 + $sub119 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 3 >> 0] = HEAP8[$add$ptr + (($sub119 - $sub129 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr107 + 2 >> 0] = HEAP8[$add$ptr + ($sub121 >>> 18 & 1023) >> 0] | 0;
  $ctr$1153 = $ctr$1153 + 1 | 0;
  if (($ctr$1153 | 0) == 10) break; else $wsptr$1152 = $wsptr$1152 + 20 | 0;
 }
 STACKTOP = sp;
 return;
}

function _pass2_fs_dither($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add23 = 0, $add29 = 0, $arrayidx58 = 0, $belowerr0$0137 = 0, $belowerr1$0136 = 0, $belowerr2$0135 = 0, $bpreverr0$0$lcssa = 0, $bpreverr0$0134 = 0, $bpreverr1$0$lcssa = 0, $bpreverr1$0133 = 0, $bpreverr2$0$lcssa = 0, $bpreverr2$0132 = 0, $cmp17127 = 0, $col$0131 = 0, $conv48 = 0, $conv50 = 0, $conv52 = 0, $cur0$0140 = 0, $cur1$0139 = 0, $cur2$0138 = 0, $dir$0 = 0, $dir3$0 = 0, $errorptr$0 = 0, $errorptr$1$lcssa = 0, $errorptr$1130 = 0, $fserrors14 = 0, $inptr$0 = 0, $inptr$1128 = 0, $mul = 0, $mul11 = 0, $on_odd_row = 0, $outptr$0 = 0, $outptr$1129 = 0, $row$0145 = 0, $storemerge = 0, $sub = 0, $sub68 = 0, $sub72 = 0, $sub75 = 0, $sub78 = 0, $errorptr$1130$looptemp = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $1 = HEAP32[$0 + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 $3 = HEAP32[$cinfo + 336 >> 2] | 0;
 $4 = HEAP32[$0 + 40 >> 2] | 0;
 $5 = HEAP32[$cinfo + 136 >> 2] | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$5 + 4 >> 2] | 0;
 $8 = HEAP32[$5 + 8 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $on_odd_row = $0 + 36 | 0;
 $fserrors14 = $0 + 32 | 0;
 $cmp17127 = ($2 | 0) == 0;
 $sub = $2 + -1 | 0;
 $mul = $sub * 3 | 0;
 $mul11 = ($2 * 3 | 0) + 3 | 0;
 $row$0145 = 0;
 do {
  $10 = HEAP32[$input_buf + ($row$0145 << 2) >> 2] | 0;
  $11 = HEAP32[$output_buf + ($row$0145 << 2) >> 2] | 0;
  if (!(HEAP32[$on_odd_row >> 2] | 0)) {
   $dir$0 = 1;
   $dir3$0 = 3;
   $errorptr$0 = HEAP32[$fserrors14 >> 2] | 0;
   $inptr$0 = $10;
   $outptr$0 = $11;
   $storemerge = 1;
  } else {
   $dir$0 = -1;
   $dir3$0 = -3;
   $errorptr$0 = (HEAP32[$fserrors14 >> 2] | 0) + ($mul11 << 1) | 0;
   $inptr$0 = $10 + $mul | 0;
   $outptr$0 = $11 + $sub | 0;
   $storemerge = 0;
  }
  HEAP32[$on_odd_row >> 2] = $storemerge;
  if ($cmp17127) {
   $bpreverr0$0$lcssa = 0;
   $bpreverr1$0$lcssa = 0;
   $bpreverr2$0$lcssa = 0;
   $errorptr$1$lcssa = $errorptr$0;
  } else {
   $add23 = $dir3$0 + 1 | 0;
   $add29 = $dir3$0 + 2 | 0;
   $15 = Math_imul($2, $dir3$0) | 0;
   $belowerr0$0137 = 0;
   $belowerr1$0136 = 0;
   $belowerr2$0135 = 0;
   $bpreverr0$0134 = 0;
   $bpreverr1$0133 = 0;
   $bpreverr2$0132 = 0;
   $col$0131 = $2;
   $cur0$0140 = 0;
   $cur1$0139 = 0;
   $cur2$0138 = 0;
   $errorptr$1130 = $errorptr$0;
   $inptr$1128 = $inptr$0;
   $outptr$1129 = $outptr$0;
   while (1) {
    $errorptr$1130$looptemp = $errorptr$1130;
    $errorptr$1130 = $errorptr$1130 + ($dir3$0 << 1) | 0;
    $conv48 = HEAPU8[$3 + ((HEAP32[$4 + ($cur0$0140 + 8 + (HEAP16[$errorptr$1130 >> 1] | 0) >> 4 << 2) >> 2] | 0) + (HEAPU8[$inptr$1128 >> 0] | 0)) >> 0] | 0;
    $conv50 = HEAPU8[$3 + ((HEAP32[$4 + ($cur1$0139 + 8 + (HEAP16[$errorptr$1130$looptemp + ($add23 << 1) >> 1] | 0) >> 4 << 2) >> 2] | 0) + (HEAPU8[$inptr$1128 + 1 >> 0] | 0)) >> 0] | 0;
    $conv52 = HEAPU8[$3 + ((HEAP32[$4 + ($cur2$0138 + 8 + (HEAP16[$errorptr$1130$looptemp + ($add29 << 1) >> 1] | 0) >> 4 << 2) >> 2] | 0) + (HEAPU8[$inptr$1128 + 2 >> 0] | 0)) >> 0] | 0;
    $28 = $conv48 >>> 3;
    $30 = $conv50 >>> 2;
    $31 = $conv52 >>> 3;
    $arrayidx58 = (HEAP32[$1 + ($28 << 2) >> 2] | 0) + ($30 << 6) + ($31 << 1) | 0;
    $32 = HEAP16[$arrayidx58 >> 1] | 0;
    if (!($32 << 16 >> 16)) {
     _fill_inverse_cmap($cinfo, $28, $30, $31);
     $33 = HEAP16[$arrayidx58 >> 1] | 0;
    } else $33 = $32;
    $sub68 = ($33 & 65535) + -1 | 0;
    HEAP8[$outptr$1129 >> 0] = $sub68;
    $sub72 = $conv48 - (HEAPU8[$6 + $sub68 >> 0] | 0) | 0;
    $sub75 = $conv50 - (HEAPU8[$7 + $sub68 >> 0] | 0) | 0;
    $sub78 = $conv52 - (HEAPU8[$8 + $sub68 >> 0] | 0) | 0;
    HEAP16[$errorptr$1130$looptemp >> 1] = ($sub72 * 3 | 0) + $bpreverr0$0134;
    $bpreverr0$0134 = ($sub72 * 5 | 0) + $belowerr0$0137 | 0;
    HEAP16[$errorptr$1130$looptemp + 2 >> 1] = ($sub75 * 3 | 0) + $bpreverr1$0133;
    $bpreverr1$0133 = ($sub75 * 5 | 0) + $belowerr1$0136 | 0;
    HEAP16[$errorptr$1130$looptemp + 4 >> 1] = ($sub78 * 3 | 0) + $bpreverr2$0132;
    $bpreverr2$0132 = ($sub78 * 5 | 0) + $belowerr2$0135 | 0;
    $col$0131 = $col$0131 + -1 | 0;
    if (!$col$0131) break; else {
     $belowerr0$0137 = $sub72;
     $belowerr1$0136 = $sub75;
     $belowerr2$0135 = $sub78;
     $cur0$0140 = $sub72 * 7 | 0;
     $cur1$0139 = $sub75 * 7 | 0;
     $cur2$0138 = $sub78 * 7 | 0;
     $inptr$1128 = $inptr$1128 + $dir3$0 | 0;
     $outptr$1129 = $outptr$1129 + $dir$0 | 0;
    }
   }
   $bpreverr0$0$lcssa = $bpreverr0$0134;
   $bpreverr1$0$lcssa = $bpreverr1$0133;
   $bpreverr2$0$lcssa = $bpreverr2$0132;
   $errorptr$1$lcssa = $errorptr$0 + ($15 << 1) | 0;
  }
  HEAP16[$errorptr$1$lcssa >> 1] = $bpreverr0$0$lcssa;
  HEAP16[$errorptr$1$lcssa + 2 >> 1] = $bpreverr1$0$lcssa;
  HEAP16[$errorptr$1$lcssa + 4 >> 1] = $bpreverr2$0$lcssa;
  $row$0145 = $row$0145 + 1 | 0;
 } while (($row$0145 | 0) != ($num_rows | 0));
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $1 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i26 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add18$sink = 0, $add20 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call23 = 0, $call33 = 0, $cond$i$i109 = 0, $cond$i40 = 0, $cond$i81$sink = 0, $cond$i89$sink = 0, $tobool$i$i = 0, $tobool$i$i35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $agg$tmp$byval_copy = sp + 464 | 0;
 $__loc = sp + 460 | 0;
 $__pat = sp + 468 | 0;
 $__dp = sp + 456 | 0;
 $__ts = sp + 452 | 0;
 $__grp = sp + 440 | 0;
 $__sym = sp + 428 | 0;
 $__sn = sp + 416 | 0;
 $__fd = sp + 412 | 0;
 $__mbuf = sp;
 $__mi = sp + 408 | 0;
 $__me = sp + 404 | 0;
 $agg$tmp = sp + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 $__size_$i$i = $__digits + 8 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 $__size_$i2$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i2$i >> 2] | 0 : $1 & 255) | 0)) $6 = 0; else {
  $4 = HEAP32[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 2] | 0;
  $6 = ($4 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, 45) | 0);
 };
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i26 = 0;
 while (1) {
  if (($__i$0$i$i26 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i26 << 2) >> 2] = 0;
  $__i$0$i$i26 = $__i$0$i$i26 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $6, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $7 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i35 = $7 << 24 >> 24 < 0;
 $cond$i40 = $tobool$i$i35 ? HEAP32[$__size_$i2$i >> 2] | 0 : $7 & 255;
 $9 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i40 | 0) > ($9 | 0)) {
  $11 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $14 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 1 + ($cond$i40 - $9 << 1) | 0;
  $cond$i81$sink = $14 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $14 & 255;
  $cond$i89$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $11 & 255;
 } else {
  $17 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $20 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 2 | 0;
  $cond$i81$sink = $20 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $20 & 255;
  $cond$i89$sink = $17 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $17 & 255;
 }
 $add20 = $add18$sink + $cond$i89$sink + $cond$i81$sink | 0;
 if ($add20 >>> 0 > 100) {
  $call23 = _malloc($add20 << 2) | 0;
  if (!$call23) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call23;
   $__mb$0 = $call23;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i109 = $tobool$i$i35 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i109, $cond$i$i109 + ($cond$i40 << 2) | 0, $call$i, $6, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $9);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $28 = HEAP32[$__mi >> 2] | 0;
 $29 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call33 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $28, $29, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call33 | 0;
}

function _jpeg_idct_10x5($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $add = 0, $add$ptr = 0, $add$ptr53 = 0, $add105 = 0, $add13 = 0, $add14 = 0, $add29 = 0, $add60 = 0, $add70 = 0, $add73 = 0, $add75 = 0, $add82 = 0, $add86 = 0, $add89 = 0, $add92 = 0, $ctr$0159 = 0, $ctr$1155 = 0, $inptr$0156 = 0, $mul11 = 0, $mul21 = 0, $mul25 = 0, $mul27 = 0, $mul5 = 0, $mul68 = 0, $mul84 = 0, $mul85 = 0, $mul9 = 0, $mul93 = 0, $quantptr$0157 = 0, $shl56 = 0, $shl80 = 0, $sub = 0, $sub102 = 0, $sub15 = 0, $sub17 = 0, $sub31 = 0, $sub61 = 0, $sub64 = 0, $sub72 = 0, $sub74 = 0, $sub76 = 0, $sub83 = 0, $sub96 = 0, $sub99 = 0, $workspace = 0, $wsptr$0158 = 0, $wsptr$1154 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0159 = 0;
 $inptr$0156 = $coef_block;
 $quantptr$0157 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0158 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0156 >> 1] << 13, HEAP32[$quantptr$0157 >> 2] | 0) | 0 | 1024;
  $mul5 = Math_imul(HEAP32[$quantptr$0157 + 64 >> 2] | 0, HEAP16[$inptr$0156 + 32 >> 1] | 0) | 0;
  $mul9 = Math_imul(HEAP32[$quantptr$0157 + 128 >> 2] | 0, HEAP16[$inptr$0156 + 64 >> 1] | 0) | 0;
  $mul11 = ($mul9 + $mul5 | 0) * 6476 | 0;
  $sub = $mul5 - $mul9 | 0;
  $add13 = ($sub * 2896 | 0) + $add | 0;
  $add14 = $add13 + $mul11 | 0;
  $sub15 = $add13 - $mul11 | 0;
  $sub17 = (Math_imul($sub, -11584) | 0) + $add | 0;
  $mul21 = Math_imul(HEAP32[$quantptr$0157 + 32 >> 2] | 0, HEAP16[$inptr$0156 + 16 >> 1] | 0) | 0;
  $mul25 = Math_imul(HEAP32[$quantptr$0157 + 96 >> 2] | 0, HEAP16[$inptr$0156 + 48 >> 1] | 0) | 0;
  $mul27 = ($mul25 + $mul21 | 0) * 6810 | 0;
  $add29 = $mul27 + ($mul21 * 4209 | 0) | 0;
  $sub31 = $mul27 + (Math_imul($mul25, -17828) | 0) | 0;
  HEAP32[$wsptr$0158 >> 2] = $add29 + $add14 >> 11;
  HEAP32[$wsptr$0158 + 128 >> 2] = $add14 - $add29 >> 11;
  HEAP32[$wsptr$0158 + 32 >> 2] = $sub31 + $sub15 >> 11;
  HEAP32[$wsptr$0158 + 96 >> 2] = $sub15 - $sub31 >> 11;
  HEAP32[$wsptr$0158 + 64 >> 2] = $sub17 >> 11;
  $ctr$0159 = $ctr$0159 + 1 | 0;
  if (($ctr$0159 | 0) == 8) break; else {
   $inptr$0156 = $inptr$0156 + 2 | 0;
   $quantptr$0157 = $quantptr$0157 + 4 | 0;
   $wsptr$0158 = $wsptr$0158 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1155 = 0;
 $wsptr$1154 = $workspace;
 while (1) {
  $add$ptr53 = (HEAP32[$output_buf + ($ctr$1155 << 2) >> 2] | 0) + $output_col | 0;
  $shl56 = (HEAP32[$wsptr$1154 >> 2] << 13) + 134348800 | 0;
  $16 = HEAP32[$wsptr$1154 + 16 >> 2] | 0;
  $add60 = $shl56 + ($16 * 9373 | 0) | 0;
  $sub61 = $shl56 + (Math_imul($16, -3580) | 0) | 0;
  $sub64 = $shl56 + (Math_imul($16, -11586) | 0) | 0;
  $19 = HEAP32[$wsptr$1154 + 8 >> 2] | 0;
  $20 = HEAP32[$wsptr$1154 + 24 >> 2] | 0;
  $mul68 = ($20 + $19 | 0) * 6810 | 0;
  $add70 = $mul68 + ($19 * 4209 | 0) | 0;
  $sub72 = $mul68 + (Math_imul($20, -17828) | 0) | 0;
  $add73 = $add70 + $add60 | 0;
  $sub74 = $add60 - $add70 | 0;
  $add75 = $sub72 + $sub61 | 0;
  $sub76 = $sub61 - $sub72 | 0;
  $22 = HEAP32[$wsptr$1154 + 4 >> 2] | 0;
  $23 = HEAP32[$wsptr$1154 + 12 >> 2] | 0;
  $shl80 = HEAP32[$wsptr$1154 + 20 >> 2] << 13;
  $25 = HEAP32[$wsptr$1154 + 28 >> 2] | 0;
  $add82 = $25 + $23 | 0;
  $sub83 = $23 - $25 | 0;
  $mul84 = $sub83 * 2531 | 0;
  $mul85 = $add82 * 7791 | 0;
  $add86 = $mul84 + $shl80 | 0;
  $add89 = $mul85 + ($22 * 11443 | 0) + $add86 | 0;
  $add92 = ($22 * 1812 | 0) - $mul85 + $add86 | 0;
  $mul93 = $add82 * 4815 | 0;
  $sub96 = $shl80 - $mul84 - ($sub83 << 12) | 0;
  $sub99 = ($22 - $sub83 << 13) - $shl80 | 0;
  $sub102 = ($22 * 10323 | 0) - $mul93 - $sub96 | 0;
  $add105 = $sub96 + (($22 * 5260 | 0) - $mul93) | 0;
  HEAP8[$add$ptr53 >> 0] = HEAP8[$add$ptr + (($add89 + $add73 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 9 >> 0] = HEAP8[$add$ptr + (($add73 - $add89 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 1 >> 0] = HEAP8[$add$ptr + (($sub102 + $add75 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 8 >> 0] = HEAP8[$add$ptr + (($add75 - $sub102 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 2 >> 0] = HEAP8[$add$ptr + (($sub99 + $sub64 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 7 >> 0] = HEAP8[$add$ptr + (($sub64 - $sub99 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 3 >> 0] = HEAP8[$add$ptr + (($add105 + $sub76 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 6 >> 0] = HEAP8[$add$ptr + (($sub76 - $add105 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 4 >> 0] = HEAP8[$add$ptr + (($add92 + $sub74 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr53 + 5 >> 0] = HEAP8[$add$ptr + (($sub74 - $add92 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1155 = $ctr$1155 + 1 | 0;
  if (($ctr$1155 | 0) == 5) break; else $wsptr$1154 = $wsptr$1154 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $0 = 0, $11 = 0, $13 = 0, $15 = 0, $23 = 0, $24 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i27 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add19$sink = 0, $add21 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call24 = 0, $call34 = 0, $cond$i$i118 = 0, $cond$i42 = 0, $cond$i88$sink = 0, $cond$i97$sink = 0, $tobool$i$i = 0, $tobool$i$i37 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 156 | 0;
 $__loc = sp + 152 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 140 | 0;
 $__sym = sp + 128 | 0;
 $__sn = sp + 116 | 0;
 $__fd = sp + 112 | 0;
 $__mbuf = sp;
 $__mi = sp + 108 | 0;
 $__me = sp + 104 | 0;
 $agg$tmp = sp + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 $__size_$i$i = $__digits + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $__size_$i3$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i3$i >> 2] | 0 : $0 & 255) | 0)) $5 = 0; else {
  $3 = HEAP8[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 0] | 0;
  $5 = $3 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, 45) | 0) << 24 >> 24;
 };
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i27 = 0;
 while (1) {
  if (($__i$0$i$i27 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i27 << 2) >> 2] = 0;
  $__i$0$i$i27 = $__i$0$i$i27 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $5, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $6 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i37 = $6 << 24 >> 24 < 0;
 $cond$i42 = $tobool$i$i37 ? HEAP32[$__size_$i3$i >> 2] | 0 : $6 & 255;
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i42 | 0) > ($8 | 0)) {
  $9 = HEAP8[$__sn + 11 >> 0] | 0;
  $11 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 1 + ($cond$i42 - $8 << 1) | 0;
  $cond$i88$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $11 & 255;
  $cond$i97$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
 } else {
  $13 = HEAP8[$__sn + 11 >> 0] | 0;
  $15 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 2 | 0;
  $cond$i88$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $15 & 255;
  $cond$i97$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $13 & 255;
 }
 $add21 = $add19$sink + $cond$i97$sink + $cond$i88$sink | 0;
 if ($add21 >>> 0 > 100) {
  $call24 = _malloc($add21) | 0;
  if (!$call24) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call24;
   $__mb$0 = $call24;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i118 = $tobool$i$i37 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i118, $cond$i$i118 + $cond$i42 | 0, $call$i, $5, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $23 = HEAP32[$__mi >> 2] | 0;
 $24 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call34 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $23, $24, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call34 | 0;
}

function _consume_data($cinfo) {
 $cinfo = $cinfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $8 = 0, $MCU_col_num$066 = 0, $MCU_ctr = 0, $MCU_rows_per_iMCU_row = 0, $MCU_vert_offset = 0, $MCUs_per_row = 0, $arraydecay = 0, $blkn$063 = 0, $blkn$1$lcssa = 0, $blkn$159$us = 0, $blkn$255$us = 0, $buffer = 0, $buffer_ptr$057$us = 0, $call = 0, $ci$071 = 0, $ci$164 = 0, $coef1 = 0, $comps_in_scan = 0, $entropy = 0, $inc43 = 0, $inc47 = 0, $inc50 = 0, $input_iMCU_row = 0, $input_iMCU_row49 = 0, $mem = 0, $mul = 0, $mul17 = 0, $retval$0 = 0, $xindex$056$us = 0, $yindex$060$us = 0, $yoffset$068 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $buffer = sp;
 $coef1 = $cinfo + 452 | 0;
 $0 = HEAP32[$coef1 >> 2] | 0;
 $comps_in_scan = $cinfo + 340 | 0;
 if ((HEAP32[$comps_in_scan >> 2] | 0) > 0) {
  $mem = $cinfo + 4 | 0;
  $input_iMCU_row = $cinfo + 148 | 0;
  $ci$071 = 0;
  do {
   $2 = HEAP32[$cinfo + 344 + ($ci$071 << 2) >> 2] | 0;
   $8 = HEAP32[$2 + 12 >> 2] | 0;
   $mul = Math_imul($8, HEAP32[$input_iMCU_row >> 2] | 0) | 0;
   $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 32 >> 2] & 31]($cinfo, HEAP32[$0 + 72 + (HEAP32[$2 + 4 >> 2] << 2) >> 2] | 0, $mul, $8, 1) | 0;
   HEAP32[$buffer + ($ci$071 << 2) >> 2] = $call;
   $ci$071 = $ci$071 + 1 | 0;
  } while (($ci$071 | 0) < (HEAP32[$comps_in_scan >> 2] | 0));
 }
 $MCU_vert_offset = $0 + 24 | 0;
 $10 = HEAP32[$MCU_vert_offset >> 2] | 0;
 $MCU_rows_per_iMCU_row = $0 + 28 | 0;
 $11 = HEAP32[$MCU_rows_per_iMCU_row >> 2] | 0;
 L6 : do if (($10 | 0) < ($11 | 0)) {
  $MCU_ctr = $0 + 20 | 0;
  $MCUs_per_row = $cinfo + 360 | 0;
  $entropy = $cinfo + 468 | 0;
  $arraydecay = $0 + 32 | 0;
  $12 = HEAP32[$MCU_ctr >> 2] | 0;
  $13 = HEAP32[$MCUs_per_row >> 2] | 0;
  $33 = $11;
  $yoffset$068 = $10;
  L8 : while (1) {
   if ($12 >>> 0 < $13 >>> 0) {
    $MCU_col_num$066 = $12;
    while (1) {
     $14 = HEAP32[$comps_in_scan >> 2] | 0;
     if (($14 | 0) > 0) {
      $blkn$063 = 0;
      $ci$164 = 0;
      while (1) {
       $15 = HEAP32[$cinfo + 344 + ($ci$164 << 2) >> 2] | 0;
       $16 = HEAP32[$15 + 56 >> 2] | 0;
       $mul17 = Math_imul($16, $MCU_col_num$066) | 0;
       $17 = HEAP32[$15 + 60 >> 2] | 0;
       if (($17 | 0) > 0 ? ($18 = HEAP32[$buffer + ($ci$164 << 2) >> 2] | 0, ($16 | 0) > 0) : 0) {
        $blkn$159$us = $blkn$063;
        $yindex$060$us = 0;
        while (1) {
         $blkn$255$us = $blkn$159$us;
         $buffer_ptr$057$us = (HEAP32[$18 + ($yindex$060$us + $yoffset$068 << 2) >> 2] | 0) + ($mul17 << 7) | 0;
         $xindex$056$us = 0;
         while (1) {
          HEAP32[$0 + 32 + ($blkn$255$us << 2) >> 2] = $buffer_ptr$057$us;
          $xindex$056$us = $xindex$056$us + 1 | 0;
          if (($xindex$056$us | 0) == ($16 | 0)) break; else {
           $blkn$255$us = $blkn$255$us + 1 | 0;
           $buffer_ptr$057$us = $buffer_ptr$057$us + 128 | 0;
          }
         }
         $20 = $16 + $blkn$159$us | 0;
         $yindex$060$us = $yindex$060$us + 1 | 0;
         if (($yindex$060$us | 0) >= ($17 | 0)) {
          $blkn$1$lcssa = $20;
          break;
         } else $blkn$159$us = $20;
        }
       } else $blkn$1$lcssa = $blkn$063;
       $ci$164 = $ci$164 + 1 | 0;
       if (($ci$164 | 0) >= ($14 | 0)) break; else $blkn$063 = $blkn$1$lcssa;
      }
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$entropy >> 2] | 0) + 4 >> 2] & 63]($cinfo, $arraydecay) | 0)) break L8;
     $inc43 = $MCU_col_num$066 + 1 | 0;
     $23 = HEAP32[$MCUs_per_row >> 2] | 0;
     if ($inc43 >>> 0 < $23 >>> 0) $MCU_col_num$066 = $inc43; else break;
    }
    $24 = HEAP32[$MCU_rows_per_iMCU_row >> 2] | 0;
    $34 = $23;
   } else {
    $24 = $33;
    $34 = $13;
   }
   HEAP32[$MCU_ctr >> 2] = 0;
   $inc47 = $yoffset$068 + 1 | 0;
   if (($inc47 | 0) < ($24 | 0)) {
    $12 = 0;
    $13 = $34;
    $33 = $24;
    $yoffset$068 = $inc47;
   } else break L6;
  }
  HEAP32[$MCU_vert_offset >> 2] = $yoffset$068;
  HEAP32[$MCU_ctr >> 2] = $MCU_col_num$066;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $input_iMCU_row49 = $cinfo + 148 | 0;
 $inc50 = (HEAP32[$input_iMCU_row49 >> 2] | 0) + 1 | 0;
 HEAP32[$input_iMCU_row49 >> 2] = $inc50;
 $26 = HEAP32[$cinfo + 332 >> 2] | 0;
 if ($inc50 >>> 0 >= $26 >>> 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 460 >> 2] | 0) + 12 >> 2] & 255]($cinfo);
  $retval$0 = 4;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $27 = HEAP32[$coef1 >> 2] | 0;
 if ((HEAP32[$comps_in_scan >> 2] | 0) > 1) $$sink = 1; else {
  $29 = HEAP32[$cinfo + 344 >> 2] | 0;
  $$sink = HEAP32[($inc50 >>> 0 < ($26 + -1 | 0) >>> 0 ? $29 + 12 | 0 : $29 + 76 | 0) >> 2] | 0;
 }
 HEAP32[$27 + 28 >> 2] = $$sink;
 HEAP32[$27 + 20 >> 2] = 0;
 HEAP32[$27 + 24 >> 2] = 0;
 $retval$0 = 3;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _jpeg_core_output_dimensions($cinfo) {
 $cinfo = $cinfo | 0;
 var $$sink170 = 0, $1 = 0, $2 = 0, $31 = 0, $35 = 0, $block_size = 0, $call = 0, $call114 = 0, $call134 = 0, $call14 = 0, $call154 = 0, $call174 = 0, $call19 = 0, $call194 = 0, $call214 = 0, $call234 = 0, $call254 = 0, $call274 = 0, $call287 = 0, $call34 = 0, $call54 = 0, $call74 = 0, $call94 = 0, $ci$0168 = 0, $compptr$0169 = 0, $mul = 0, $mul17$sink = 0;
 $block_size = $cinfo + 428 | 0;
 $1 = HEAP32[$block_size >> 2] | 0;
 $mul = Math_imul($1, HEAP32[$cinfo + 48 >> 2] | 0) | 0;
 $2 = HEAP32[$cinfo + 52 >> 2] | 0;
 do if ($mul >>> 0 > $2 >>> 0) {
  if ($mul >>> 0 <= $2 << 1 >>> 0) {
   $call14 = _jdiv_round_up(HEAP32[$cinfo + 28 >> 2] << 1, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call14;
   $$sink170 = 2;
   $mul17$sink = HEAP32[$cinfo + 32 >> 2] << 1;
   break;
  }
  if ($mul >>> 0 <= ($2 * 3 | 0) >>> 0) {
   $call34 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 3 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call34;
   $$sink170 = 3;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 3 | 0;
   break;
  }
  if ($mul >>> 0 <= $2 << 2 >>> 0) {
   $call54 = _jdiv_round_up(HEAP32[$cinfo + 28 >> 2] << 2, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call54;
   $$sink170 = 4;
   $mul17$sink = HEAP32[$cinfo + 32 >> 2] << 2;
   break;
  }
  if ($mul >>> 0 <= ($2 * 5 | 0) >>> 0) {
   $call74 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 5 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call74;
   $$sink170 = 5;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 5 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 6 | 0) >>> 0) {
   $call94 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 6 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call94;
   $$sink170 = 6;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 6 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 7 | 0) >>> 0) {
   $call114 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 7 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call114;
   $$sink170 = 7;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 7 | 0;
   break;
  }
  if ($mul >>> 0 <= $2 << 3 >>> 0) {
   $call134 = _jdiv_round_up(HEAP32[$cinfo + 28 >> 2] << 3, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call134;
   $$sink170 = 8;
   $mul17$sink = HEAP32[$cinfo + 32 >> 2] << 3;
   break;
  }
  if ($mul >>> 0 <= ($2 * 9 | 0) >>> 0) {
   $call154 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 9 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call154;
   $$sink170 = 9;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 9 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 10 | 0) >>> 0) {
   $call174 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 10 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call174;
   $$sink170 = 10;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 10 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 11 | 0) >>> 0) {
   $call194 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 11 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call194;
   $$sink170 = 11;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 11 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 12 | 0) >>> 0) {
   $call214 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 12 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call214;
   $$sink170 = 12;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 12 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 13 | 0) >>> 0) {
   $call234 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 13 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call234;
   $$sink170 = 13;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 13 | 0;
   break;
  }
  if ($mul >>> 0 <= ($2 * 14 | 0) >>> 0) {
   $call254 = _jdiv_round_up((HEAP32[$cinfo + 28 >> 2] | 0) * 14 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call254;
   $$sink170 = 14;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 14 | 0;
   break;
  }
  $31 = HEAP32[$cinfo + 28 >> 2] | 0;
  if ($mul >>> 0 > ($2 * 15 | 0) >>> 0) {
   $call287 = _jdiv_round_up($31 << 4, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call287;
   $$sink170 = 16;
   $mul17$sink = HEAP32[$cinfo + 32 >> 2] << 4;
   break;
  } else {
   $call274 = _jdiv_round_up($31 * 15 | 0, $1) | 0;
   HEAP32[$cinfo + 112 >> 2] = $call274;
   $$sink170 = 15;
   $mul17$sink = (HEAP32[$cinfo + 32 >> 2] | 0) * 15 | 0;
   break;
  }
 } else {
  $call = _jdiv_round_up(HEAP32[$cinfo + 28 >> 2] | 0, $1) | 0;
  HEAP32[$cinfo + 112 >> 2] = $call;
  $$sink170 = 1;
  $mul17$sink = HEAP32[$cinfo + 32 >> 2] | 0;
 } while (0);
 $call19 = _jdiv_round_up($mul17$sink, HEAP32[$block_size >> 2] | 0) | 0;
 HEAP32[$cinfo + 116 >> 2] = $call19;
 HEAP32[$cinfo + 324 >> 2] = $$sink170;
 HEAP32[$cinfo + 328 >> 2] = $$sink170;
 $35 = HEAP32[$cinfo + 36 >> 2] | 0;
 if (($35 | 0) <= 0) return;
 $ci$0168 = 0;
 $compptr$0169 = HEAP32[$cinfo + 216 >> 2] | 0;
 while (1) {
  HEAP32[$compptr$0169 + 36 >> 2] = $$sink170;
  HEAP32[$compptr$0169 + 40 >> 2] = $$sink170;
  $ci$0168 = $ci$0168 + 1 | 0;
  if (($ci$0168 | 0) >= ($35 | 0)) break; else $compptr$0169 = $compptr$0169 + 88 | 0;
 }
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call16 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast32 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $agg$tmp$byval_copy = sp + 512 | 0;
 $vararg_buffer = sp + 552 | 0;
 $__wbuf = sp + 112 | 0;
 $__wb = sp + 568 | 0;
 $__wn = sp + 564 | 0;
 $__loc = sp + 560 | 0;
 $__neg = sp + 576 | 0;
 $agg$tmp = sp + 556 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 197;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 37322, 37332, $agg$tmp$byval_copy) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 392) {
   $call16 = _malloc(($sub$ptr$sub >>> 2) + 2 | 0) | 0;
   if (!$call16) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call16;
    $__nc$0 = $call16;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $agg$tmp$byval_copy + 40 | 0;
  $sub$ptr$rhs$cast32 = $agg$tmp$byval_copy;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP32[$__w$0 >> 2] | 0;
   $__first$addr$0$i = $agg$tmp$byval_copy;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP32[$__first$addr$0$i >> 2] | 0) == ($12 | 0)) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 4 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[37322 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast32 >> 2) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 4 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 37223, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if ($16) {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $29 = 1; while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if ($21) {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($29) break; else {
   label = 34;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  }
 } else label = 32; while (0);
 if ((label | 0) == 32 ? $29 : 0) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call15 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $agg$tmp$byval_copy = sp + 240 | 0;
 $vararg_buffer = sp + 216 | 0;
 $__wbuf = sp + 112 | 0;
 $__wb = sp + 232 | 0;
 $__wn = sp + 228 | 0;
 $__loc = sp + 224 | 0;
 $__neg = sp + 250 | 0;
 $agg$tmp = sp + 220 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 197;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 37212, 37222, $agg$tmp$byval_copy) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 98) {
   $call15 = _malloc($sub$ptr$sub + 2 | 0) | 0;
   if (!$call15) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call15;
    $__nc$0 = $call15;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $agg$tmp$byval_copy + 10 | 0;
  $sub$ptr$rhs$cast31 = $agg$tmp$byval_copy;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP8[$__w$0 >> 0] | 0;
   $__first$addr$0$i = $agg$tmp$byval_copy;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP8[$__first$addr$0$i >> 0] | 0) == $12 << 24 >> 24) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 1 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[37212 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast31) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 1 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 37223, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if ($16) {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $29 = 1; while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if ($21) {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($29) break; else {
   label = 34;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  }
 } else label = 32; while (0);
 if ((label | 0) == 32 ? $29 : 0) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _examine_app0($cinfo, $data, $datalen, $remaining) {
 $cinfo = $cinfo | 0;
 $data = $data | 0;
 $datalen = $datalen | 0;
 $remaining = $remaining | 0;
 var $$pre$phiZ2D = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $56 = 0, $6 = 0, $7 = 0, $JFIF_major_version = 0, $JFIF_minor_version = 0, $X_density = 0, $Y_density = 0, $add = 0, $arrayidx149 = 0, $arrayidx82 = 0, $arrayidx84 = 0, $conv31 = 0, $conv38 = 0, $density_unit = 0, $sub = 0, label = 0;
 $add = $remaining + $datalen | 0;
 if ($datalen >>> 0 > 13) {
  if ((HEAP8[$data >> 0] | 0) == 74) if ((((HEAP8[$data + 1 >> 0] | 0) == 70 ? (HEAP8[$data + 2 >> 0] | 0) == 73 : 0) ? (HEAP8[$data + 3 >> 0] | 0) == 70 : 0) ? (HEAP8[$data + 4 >> 0] | 0) == 0 : 0) {
   HEAP32[$cinfo + 284 >> 2] = 1;
   $5 = HEAP8[$data + 5 >> 0] | 0;
   $JFIF_major_version = $cinfo + 288 | 0;
   HEAP8[$JFIF_major_version >> 0] = $5;
   $6 = HEAP8[$data + 6 >> 0] | 0;
   $JFIF_minor_version = $cinfo + 289 | 0;
   HEAP8[$JFIF_minor_version >> 0] = $6;
   $7 = HEAP8[$data + 7 >> 0] | 0;
   $density_unit = $cinfo + 290 | 0;
   HEAP8[$density_unit >> 0] = $7;
   $conv31 = (HEAPU8[$data + 8 >> 0] << 8 | HEAPU8[$data + 9 >> 0]) & 65535;
   $X_density = $cinfo + 292 | 0;
   HEAP16[$X_density >> 1] = $conv31;
   $conv38 = (HEAPU8[$data + 10 >> 0] << 8 | HEAPU8[$data + 11 >> 0]) & 65535;
   $Y_density = $cinfo + 294 | 0;
   HEAP16[$Y_density >> 1] = $conv38;
   if (($5 + -1 & 255) < 2) {
    $$pre$phiZ2D = $cinfo;
    $18 = $5;
    $19 = $6;
    $20 = $conv31;
    $21 = $conv38;
    $22 = $7;
   } else {
    $12 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$12 + 20 >> 2] = 122;
    HEAP32[$12 + 24 >> 2] = $5 & 255;
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAPU8[$JFIF_minor_version >> 0];
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
    $$pre$phiZ2D = $cinfo;
    $18 = HEAP8[$JFIF_major_version >> 0] | 0;
    $19 = HEAP8[$JFIF_minor_version >> 0] | 0;
    $20 = HEAP16[$X_density >> 1] | 0;
    $21 = HEAP16[$Y_density >> 1] | 0;
    $22 = HEAP8[$density_unit >> 0] | 0;
   }
   $17 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$17 + 24 >> 2] = $18 & 255;
   HEAP32[$17 + 28 >> 2] = $19 & 255;
   HEAP32[$17 + 32 >> 2] = $20 & 65535;
   HEAP32[$17 + 36 >> 2] = $21 & 65535;
   HEAP32[$17 + 40 >> 2] = $22 & 255;
   HEAP32[$17 + 20 >> 2] = 89;
   FUNCTION_TABLE_vii[HEAP32[$17 + 4 >> 2] & 255]($$pre$phiZ2D, 1);
   $arrayidx82 = $data + 12 | 0;
   $24 = HEAP8[$arrayidx82 >> 0] | 0;
   $arrayidx84 = $data + 13 | 0;
   $25 = HEAP8[$arrayidx84 >> 0] | 0;
   if (!(($25 | $24) << 24 >> 24)) {
    $32 = $24;
    $33 = $25;
   } else {
    $26 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$26 + 20 >> 2] = 92;
    HEAP32[$26 + 24 >> 2] = HEAPU8[$arrayidx82 >> 0];
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = HEAPU8[$arrayidx84 >> 0];
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($$pre$phiZ2D, 1);
    $32 = HEAP8[$arrayidx82 >> 0] | 0;
    $33 = HEAP8[$arrayidx84 >> 0] | 0;
   }
   $sub = $add + -14 | 0;
   if (($sub | 0) == (Math_imul(($32 & 255) * 3 | 0, $33 & 255) | 0)) return;
   $34 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$34 + 20 >> 2] = 90;
   HEAP32[$34 + 24 >> 2] = $sub;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($$pre$phiZ2D, 1);
   return;
  } else label = 16;
 } else if ($datalen >>> 0 > 5 ? (HEAP8[$data >> 0] | 0) == 74 : 0) label = 16;
 if (((((label | 0) == 16 ? (HEAP8[$data + 1 >> 0] | 0) == 70 : 0) ? (HEAP8[$data + 2 >> 0] | 0) == 88 : 0) ? (HEAP8[$data + 3 >> 0] | 0) == 88 : 0) ? (HEAP8[$data + 4 >> 0] | 0) == 0 : 0) {
  $arrayidx149 = $data + 5 | 0;
  switch (HEAP8[$arrayidx149 >> 0] | 0) {
  case 16:
   {
    $42 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$42 + 20 >> 2] = 110;
    HEAP32[$42 + 24 >> 2] = $add;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    return;
   }
  case 17:
   {
    $45 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$45 + 20 >> 2] = 111;
    HEAP32[$45 + 24 >> 2] = $add;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    return;
   }
  case 19:
   {
    $48 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$48 + 20 >> 2] = 112;
    HEAP32[$48 + 24 >> 2] = $add;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    return;
   }
  default:
   {
    $51 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$51 + 20 >> 2] = 91;
    HEAP32[$51 + 24 >> 2] = HEAPU8[$arrayidx149 >> 0];
    HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $add;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
    return;
   }
  }
 }
 $56 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$56 + 20 >> 2] = 79;
 HEAP32[$56 + 24 >> 2] = $add;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($this) {
 $this = $this | 0;
 var $3 = 0, $Last = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $call22 = 0, $call28 = 0, $call3 = 0, $call49 = 0, $call8 = 0, $cmp13 = 0, $cmp51 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$2 = 0, $retval$4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp24$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $ref$tmp = sp;
 $agg$tmp17 = sp + 16 | 0;
 $agg$tmp24 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28367);
 HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0) {
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$agg$tmp24$byval_copy >> 2] = $call3;
  if (!$call3) $retval$0 = 0; else {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 46) {
    $Last = $this + 4 | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, HEAP32[$this >> 2] | 0, HEAP32[$Last >> 2] | 0);
    $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $agg$tmp24$byval_copy, $ref$tmp) | 0;
    HEAP32[$agg$tmp24$byval_copy >> 2] = $call8;
    HEAP32[$this >> 2] = HEAP32[$Last >> 2];
    $3 = $call8;
   } else $3 = $call3;
   $cmp13 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) == 0;
   $retval$0 = $cmp13 ? $3 : 0;
  }
  $retval$4 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 28370);
  HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0)) {
   $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   $cmp51 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) == 0;
   $retval$4 = $cmp51 ? $call49 : 0;
   break;
  }
  $call22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$ref$tmp >> 2] = $call22;
  if ((($call22 | 0) != 0 ? (__ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp24, 28375), HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2], HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp24 + 4 >> 2], __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0) : 0) ? ($call28 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp24$byval_copy, $this, 0), !($call28 & (__ZNK12_GLOBAL__N_110StringView5emptyEv($agg$tmp24$byval_copy) | 0))) : 0) {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 46) HEAP32[$this >> 2] = HEAP32[$this + 4 >> 2];
   if (!(__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0)) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, 28389, $ref$tmp) | 0; else $retval$2 = 0;
  } else $retval$2 = 0;
  $retval$4 = $retval$2;
 } while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($this) {
 $this = $this | 0;
 var $SpecialSub$0 = 0, $SpecialSub$1 = 0, $Subs43 = 0, $Subs54 = 0, $call37 = 0, $call48 = 0, $call60 = 0, $conv = 0, $inc = 0, $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 83) | 0) {
  $conv = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24;
  if (!(_islower($conv) | 0)) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    $Subs43 = $this + 148 | 0;
    if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs43) | 0) {
     $retval$2 = 0;
     break;
    }
    $call48 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs43, 0) | 0;
    $retval$2 = HEAP32[$call48 >> 2] | 0;
    break;
   }
   HEAP32[$ref$tmp >> 2] = 0;
   if ((!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $ref$tmp) | 0) ? ($inc = (HEAP32[$ref$tmp >> 2] | 0) + 1 | 0, HEAP32[$ref$tmp >> 2] = $inc, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) : 0) ? ($Subs54 = $this + 148 | 0, $inc >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Subs54) | 0) >>> 0) : 0) {
    $call60 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs54, $inc) | 0;
    $retval$1 = HEAP32[$call60 >> 2] | 0;
   } else $retval$1 = 0;
   $retval$2 = $retval$1;
   break;
  }
  switch ($conv | 0) {
  case 97:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 0;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 98:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 1;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 115:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 2;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 105:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 3;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 111:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 4;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 100:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 5;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  default:
   {
    $retval$2 = 0;
    break L1;
   }
  }
  $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $SpecialSub$0) | 0;
  HEAP32[$ref$tmp >> 2] = $call37;
  if (($call37 | 0) == ($SpecialSub$0 | 0)) $SpecialSub$1 = $SpecialSub$0; else {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $ref$tmp);
   $SpecialSub$1 = $call37;
  }
  $retval$2 = $SpecialSub$1;
 } else $retval$2 = 0; while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function ___get_locale($cat, $val) {
 $cat = $cat | 0;
 $val = $val | 0;
 var $11 = 0, $12 = 0, $15 = 0, $18 = 0, $5 = 0, $9 = 0, $add = 0, $arrayidx103 = 0, $buf = 0, $call = 0, $call110 = 0, $call113 = 0, $call139 = 0, $call3 = 0, $call84 = 0, $call9 = 0, $call91 = 0, $map_size = 0, $n$0$lcssa = 0, $n$085 = 0, $name120 = 0, $name144 = 0, $new$4 = 0, $p$084 = 0, $p$182 = 0, $path$180 = 0, $retval$0 = 0, $sub = 0, $sub96 = 0, $val$addr$1 = 0, $val$addr$290 = 0, $val$addr$291 = 0, $val$addr$292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $buf = sp;
 $map_size = sp + 256 | 0;
 do if (!(HEAP8[$val >> 0] | 0)) {
  $call = _getenv(27713) | 0;
  if ($call | 0 ? HEAP8[$call >> 0] | 0 : 0) {
   $val$addr$1 = $call;
   break;
  }
  $call3 = _getenv(4176 + ($cat * 12 | 0) | 0) | 0;
  if ($call3 | 0 ? HEAP8[$call3 >> 0] | 0 : 0) {
   $val$addr$1 = $call3;
   break;
  }
  $call9 = _getenv(27720) | 0;
  if ($call9 | 0 ? HEAP8[$call9 >> 0] | 0 : 0) {
   $val$addr$1 = $call9;
   break;
  }
  $val$addr$1 = 27725;
 } else $val$addr$1 = $val; while (0);
 $n$085 = 0;
 L13 : while (1) {
  switch (HEAP8[$val$addr$1 + $n$085 >> 0] | 0) {
  case 47:
  case 0:
   {
    $n$0$lcssa = $n$085;
    break L13;
    break;
   }
  default:
   {}
  }
  $n$085 = $n$085 + 1 | 0;
  if ($n$085 >>> 0 >= 15) {
   $n$0$lcssa = 15;
   break;
  }
 }
 $5 = HEAP8[$val$addr$1 >> 0] | 0;
 if ($5 << 24 >> 24 != 46 ? (HEAP8[$val$addr$1 + $n$0$lcssa >> 0] | 0) == 0 : 0) if ($5 << 24 >> 24 == 67) {
  $val$addr$290 = $val$addr$1;
  label = 15;
 } else {
  $val$addr$291 = $val$addr$1;
  label = 16;
 } else {
  $val$addr$290 = 27725;
  label = 15;
 }
 if ((label | 0) == 15) if (!(HEAP8[$val$addr$290 + 1 >> 0] | 0)) {
  $val$addr$292 = $val$addr$290;
  label = 18;
 } else {
  $val$addr$291 = $val$addr$290;
  label = 16;
 }
 L22 : do if ((label | 0) == 16) if ((_strcmp($val$addr$291, 27725) | 0) != 0 ? (_strcmp($val$addr$291, 27733) | 0) != 0 : 0) {
  $9 = HEAP32[10484] | 0;
  if ($9 | 0) {
   $p$084 = $9;
   do {
    if (!(_strcmp($val$addr$291, $p$084 + 8 | 0) | 0)) {
     $retval$0 = $p$084;
     break L22;
    }
    $p$084 = HEAP32[$p$084 + 24 >> 2] | 0;
   } while (($p$084 | 0) != 0);
  }
  ___lock(41940);
  $11 = HEAP32[10484] | 0;
  L32 : do if ($11 | 0) {
   $p$182 = $11;
   while (1) {
    if (!(_strcmp($val$addr$291, $p$182 + 8 | 0) | 0)) break;
    $12 = HEAP32[$p$182 + 24 >> 2] | 0;
    if (!$12) break L32; else $p$182 = $12;
   }
   ___unlock(41940);
   $retval$0 = $p$182;
   break L22;
  } while (0);
  L39 : do if (((HEAP32[10467] | 0) == 0 ? ($call84 = _getenv(27739) | 0, ($call84 | 0) != 0) : 0) ? (HEAP8[$call84 >> 0] | 0) != 0 : 0) {
   $sub96 = 254 - $n$0$lcssa | 0;
   $add = $n$0$lcssa + 1 | 0;
   $path$180 = $call84;
   while (1) {
    $call91 = ___strchrnul($path$180, 58) | 0;
    $15 = HEAP8[$call91 >> 0] | 0;
    $sub = $call91 - $path$180 + (($15 << 24 >> 24 != 0) << 31 >> 31) | 0;
    if ($sub >>> 0 < $sub96 >>> 0) {
     _memcpy($buf | 0, $path$180 | 0, $sub | 0) | 0;
     $arrayidx103 = $buf + $sub | 0;
     HEAP8[$arrayidx103 >> 0] = 47;
     _memcpy($arrayidx103 + 1 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
     HEAP8[$buf + ($add + $sub) >> 0] = 0;
     $call110 = ___map_file($buf | 0, $map_size | 0) | 0;
     if ($call110 | 0) break;
     $18 = HEAP8[$call91 >> 0] | 0;
    } else $18 = $15;
    $path$180 = $call91 + ($18 << 24 >> 24 != 0 & 1) | 0;
    if (!(HEAP8[$path$180 >> 0] | 0)) {
     label = 41;
     break L39;
    }
   }
   $call113 = _malloc(28) | 0;
   if (!$call113) {
    ___munmap($call110, HEAP32[$map_size >> 2] | 0) | 0;
    label = 41;
    break;
   } else {
    HEAP32[$call113 >> 2] = $call110;
    HEAP32[$call113 + 4 >> 2] = HEAP32[$map_size >> 2];
    $name120 = $call113 + 8 | 0;
    _memcpy($name120 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
    HEAP8[$name120 + $n$0$lcssa >> 0] = 0;
    HEAP32[$call113 + 24 >> 2] = HEAP32[10484];
    HEAP32[10484] = $call113;
    $new$4 = $call113;
    break;
   }
  } else label = 41; while (0);
  if ((label | 0) == 41) {
   $call139 = _malloc(28) | 0;
   if (!$call139) $new$4 = $call139; else {
    HEAP32[$call139 >> 2] = HEAP32[3663];
    HEAP32[$call139 + 4 >> 2] = HEAP32[3664];
    $name144 = $call139 + 8 | 0;
    _memcpy($name144 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
    HEAP8[$name144 + $n$0$lcssa >> 0] = 0;
    HEAP32[$call139 + 24 >> 2] = HEAP32[10484];
    HEAP32[10484] = $call139;
    $new$4 = $call139;
   }
  }
  ___unlock(41940);
  $retval$0 = ($cat | 0) == 0 & ($new$4 | 0) == 0 ? 14652 : $new$4;
 } else {
  $val$addr$292 = $val$addr$291;
  label = 18;
 } while (0);
 do if ((label | 0) == 18) {
  if (($cat | 0) == 0 ? (HEAP8[$val$addr$292 + 1 >> 0] | 0) == 46 : 0) {
   $retval$0 = 14652;
   break;
  }
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _get_interesting_appn($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $1 = 0, $13 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $add = 0, $add32$i = 0, $add38$i = 0, $b = 0, $bytes_in_buffer$0 = 0, $bytes_in_buffer$1 = 0, $bytes_in_buffer$2 = 0, $bytes_in_buffer$2$lcssa = 0, $bytes_in_buffer$257 = 0, $bytes_in_buffer$261 = 0, $bytes_in_buffer$3 = 0, $bytes_in_buffer2 = 0, $dec = 0, $fill_input_buffer36 = 0, $i$060 = 0, $incdec$ptr = 0, $next_input_byte$0 = 0, $next_input_byte$1 = 0, $next_input_byte$2 = 0, $next_input_byte$2$lcssa = 0, $next_input_byte$258 = 0, $next_input_byte$262 = 0, $next_input_byte$3 = 0, $numtoread$0 = 0, $retval$0 = 0, $shl = 0, $src = 0, $sub = 0, $sub48 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $b = sp;
 $src = $cinfo + 24 | 0;
 $0 = HEAP32[$src >> 2] | 0;
 $bytes_in_buffer2 = $0 + 4 | 0;
 $1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
 do if (!$1) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$0 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  break;
 } else $bytes_in_buffer$0 = $1; while (0);
 $next_input_byte$0 = HEAP32[$0 >> 2] | 0;
 $dec = $bytes_in_buffer$0 + -1 | 0;
 $incdec$ptr = $next_input_byte$0 + 1 | 0;
 $shl = HEAPU8[$next_input_byte$0 >> 0] << 8;
 do if (!$dec) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$1 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$1 = $dec;
  $next_input_byte$1 = $incdec$ptr;
 } while (0);
 $add = $shl | HEAPU8[$next_input_byte$1 >> 0];
 $sub = $add + -2 | 0;
 $numtoread$0 = $add >>> 0 > 15 ? 14 : $add >>> 0 > 2 ? $sub : 0;
 $bytes_in_buffer$257 = $bytes_in_buffer$1 + -1 | 0;
 $next_input_byte$258 = $next_input_byte$1 + 1 | 0;
 L13 : do if (!$numtoread$0) {
  $bytes_in_buffer$2$lcssa = $bytes_in_buffer$257;
  $next_input_byte$2$lcssa = $next_input_byte$258;
 } else {
  $fill_input_buffer36 = $0 + 12 | 0;
  $bytes_in_buffer$261 = $bytes_in_buffer$257;
  $i$060 = 0;
  $next_input_byte$262 = $next_input_byte$258;
  while (1) {
   if (!$bytes_in_buffer$261) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer36 >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     break;
    }
    $bytes_in_buffer$3 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
    $next_input_byte$3 = HEAP32[$0 >> 2] | 0;
   } else {
    $bytes_in_buffer$3 = $bytes_in_buffer$261;
    $next_input_byte$3 = $next_input_byte$262;
   }
   HEAP8[$b + $i$060 >> 0] = HEAP8[$next_input_byte$3 >> 0] | 0;
   $i$060 = $i$060 + 1 | 0;
   $bytes_in_buffer$2 = $bytes_in_buffer$3 + -1 | 0;
   $next_input_byte$2 = $next_input_byte$3 + 1 | 0;
   if ($i$060 >>> 0 >= $numtoread$0 >>> 0) {
    $bytes_in_buffer$2$lcssa = $bytes_in_buffer$2;
    $next_input_byte$2$lcssa = $next_input_byte$2;
    break L13;
   } else {
    $bytes_in_buffer$261 = $bytes_in_buffer$2;
    $next_input_byte$262 = $next_input_byte$2;
   }
  }
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $sub48 = $sub - $numtoread$0 | 0;
 $13 = HEAP32[$cinfo + 440 >> 2] | 0;
 L23 : do switch ($13 | 0) {
 case 224:
  {
   _examine_app0($cinfo, $b, $numtoread$0, $sub48);
   break;
  }
 case 238:
  {
   if (((($numtoread$0 >>> 0 > 11 & (HEAP8[$b >> 0] | 0) == 65 ? (HEAP8[$b + 1 >> 0] | 0) == 100 : 0) ? (HEAP8[$b + 2 >> 0] | 0) == 111 : 0) ? (HEAP8[$b + 3 >> 0] | 0) == 98 : 0) ? (HEAP8[$b + 4 >> 0] | 0) == 101 : 0) {
    $add32$i = HEAPU8[$b + 7 >> 0] << 8 | HEAPU8[$b + 8 >> 0];
    $add38$i = HEAPU8[$b + 9 >> 0] << 8 | HEAPU8[$b + 10 >> 0];
    $25 = HEAP8[$b + 11 >> 0] | 0;
    $26 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$26 + 24 >> 2] = HEAPU8[$b + 5 >> 0] << 8 | HEAPU8[$b + 6 >> 0];
    HEAP32[$26 + 28 >> 2] = $add32$i;
    HEAP32[$26 + 32 >> 2] = $add38$i;
    HEAP32[$26 + 36 >> 2] = $25 & 255;
    HEAP32[$26 + 20 >> 2] = 78;
    FUNCTION_TABLE_vii[HEAP32[$26 + 4 >> 2] & 255]($cinfo, 1);
    HEAP32[$cinfo + 296 >> 2] = 1;
    HEAP8[$cinfo + 300 >> 0] = $25;
    break L23;
   }
   $28 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$28 + 20 >> 2] = 80;
   HEAP32[$28 + 24 >> 2] = $sub;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
   break;
  }
 default:
  {
   $31 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$31 + 20 >> 2] = 70;
   HEAP32[$31 + 24 >> 2] = $13;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
 } while (0);
 HEAP32[$0 >> 2] = $next_input_byte$2$lcssa;
 HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$2$lcssa;
 if (($sub48 | 0) <= 0) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$src >> 2] | 0) + 16 >> 2] & 255]($cinfo, $sub48);
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _ar2ReadFeatureSet($filename, $ext) {
 $filename = $filename | 0;
 $ext = $ext | 0;
 var $0 = 0, $1 = 0, $2 = 0, $buf = 0, $call12 = 0, $call2 = 0, $call3 = 0, $call46 = 0, $coord = 0, $featureSet$0 = 0, $i$0 = 0, $j$0 = 0, $l3$0 = 0, $num = 0, $num37 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640);
 $vararg_buffer29 = sp + 624 | 0;
 $vararg_buffer27 = sp + 616 | 0;
 $vararg_buffer25 = sp + 608 | 0;
 $vararg_buffer23 = sp + 600 | 0;
 $vararg_buffer21 = sp + 592 | 0;
 $vararg_buffer19 = sp + 584 | 0;
 $vararg_buffer17 = sp + 576 | 0;
 $vararg_buffer15 = sp + 568 | 0;
 $vararg_buffer13 = sp + 560 | 0;
 $vararg_buffer11 = sp + 552 | 0;
 $vararg_buffer9 = sp + 544 | 0;
 $vararg_buffer7 = sp + 536 | 0;
 $vararg_buffer5 = sp + 528 | 0;
 $vararg_buffer2 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 $buf = sp;
 HEAP32[$vararg_buffer >> 2] = $filename;
 HEAP32[$vararg_buffer + 4 >> 2] = $ext;
 _sprintf($buf, 21862, $vararg_buffer) | 0;
 $call2 = _fopen($buf, 21824) | 0;
 if (!$call2) {
  HEAP32[$vararg_buffer2 >> 2] = $filename;
  _arLog(0, 3, 21827, $vararg_buffer2);
  $retval$0 = 0;
 } else {
  $call3 = _malloc(8) | 0;
  if (!$call3) {
   _arLog(0, 3, 21902, $vararg_buffer5);
   _exit(1);
  }
  $num = $call3 + 4 | 0;
  L7 : do if ((_fread($num, 4, 1, $call2) | 0) == 1) {
   $0 = HEAP32[$num >> 2] | 0;
   $call12 = _malloc($0 * 20 | 0) | 0;
   HEAP32[$call3 >> 2] = $call12;
   if (!$call12) {
    _arLog(0, 3, 21902, $vararg_buffer9);
    _exit(1);
   }
   $i$0 = 0;
   L12 : while (1) {
    if (($i$0 | 0) >= ($0 | 0)) {
     $featureSet$0 = $call3;
     break L7;
    }
    if ((_fread($call12 + ($i$0 * 20 | 0) + 8 | 0, 4, 1, $call2) | 0) != 1) {
     label = 12;
     break;
    }
    if ((_fread($call12 + ($i$0 * 20 | 0) + 12 | 0, 4, 1, $call2) | 0) != 1) {
     label = 15;
     break;
    }
    if ((_fread($call12 + ($i$0 * 20 | 0) + 16 | 0, 4, 1, $call2) | 0) != 1) {
     label = 17;
     break;
    }
    $num37 = $call12 + ($i$0 * 20 | 0) + 4 | 0;
    if ((_fread($num37, 4, 1, $call2) | 0) != 1) {
     label = 19;
     break;
    }
    $1 = HEAP32[$num37 >> 2] | 0;
    $call46 = _malloc($1 * 20 | 0) | 0;
    $coord = $call12 + ($i$0 * 20 | 0) | 0;
    HEAP32[$coord >> 2] = $call46;
    if (!$call46) {
     label = 22;
     break;
    }
    $2 = $1;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($2 | 0)) break;
     if ((_fread((HEAP32[$coord >> 2] | 0) + ($j$0 * 20 | 0) | 0, 4, 1, $call2) | 0) != 1) {
      label = 25;
      break L12;
     }
     if ((_fread((HEAP32[$coord >> 2] | 0) + ($j$0 * 20 | 0) + 4 | 0, 4, 1, $call2) | 0) != 1) {
      label = 27;
      break L12;
     }
     if ((_fread((HEAP32[$coord >> 2] | 0) + ($j$0 * 20 | 0) + 8 | 0, 4, 1, $call2) | 0) != 1) {
      label = 29;
      break L12;
     }
     if ((_fread((HEAP32[$coord >> 2] | 0) + ($j$0 * 20 | 0) + 12 | 0, 4, 1, $call2) | 0) != 1) {
      label = 31;
      break L12;
     }
     if ((_fread((HEAP32[$coord >> 2] | 0) + ($j$0 * 20 | 0) + 16 | 0, 4, 1, $call2) | 0) != 1) {
      label = 34;
      break L12;
     }
     $2 = HEAP32[$num37 >> 2] | 0;
     $j$0 = $j$0 + 1 | 0;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   switch (label | 0) {
   case 12:
    {
     _arLog(0, 3, 21848, $vararg_buffer11);
     break;
    }
   case 15:
    {
     _arLog(0, 3, 21848, $vararg_buffer13);
     break;
    }
   case 17:
    {
     _arLog(0, 3, 21848, $vararg_buffer15);
     break;
    }
   case 19:
    {
     _arLog(0, 3, 21848, $vararg_buffer17);
     break;
    }
   case 22:
    {
     _arLog(0, 3, 21902, $vararg_buffer19);
     _exit(1);
     break;
    }
   case 25:
    {
     _arLog(0, 3, 21848, $vararg_buffer21);
     break;
    }
   case 27:
    {
     _arLog(0, 3, 21848, $vararg_buffer23);
     break;
    }
   case 29:
    {
     _arLog(0, 3, 21848, $vararg_buffer25);
     break;
    }
   case 31:
    {
     _arLog(0, 3, 21848, $vararg_buffer27);
     break;
    }
   case 34:
    {
     _arLog(0, 3, 21848, $vararg_buffer29);
     break;
    }
   }
   $l3$0 = 0;
   while (1) {
    if (($l3$0 | 0) == ($i$0 | 0)) break;
    _free(HEAP32[$call12 + ($l3$0 * 20 | 0) >> 2] | 0);
    $l3$0 = $l3$0 + 1 | 0;
   }
   _free($call12);
   label = 39;
  } else {
   _arLog(0, 3, 21848, $vararg_buffer7);
   label = 39;
  } while (0);
  if ((label | 0) == 39) {
   _free($call3);
   $featureSet$0 = 0;
  }
  _fclose($call2) | 0;
  $retval$0 = $featureSet$0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__213unordered_mapIi6arFsetNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn$i = 0, $0 = 0, $1 = 0, $11 = 0, $16 = 0, $17 = 0, $18 = 0, $23 = 0, $3 = 0, $4 = 0, $7 = 0.0, $9 = 0, $__bc$0$i = 0, $__chash$0$i = 0, $__chash$1$i = 0, $__h$i = 0, $__nd$0$i = 0, $__nd$1$i = 0, $__value_$i$i$i = 0, $__value_$i$i$i1$i$i = 0, $__value_$i$i$i37$pre$phi$iZZZZ2D = 0, $__value_$i$i$i88$i = 0, $add37$i = 0, $cmp$i = 0, $cond6$i$i = 0, $cond6$i64$i = 0, $cond6$i99$i = 0, $conv$i = 0.0, $conv44$i = 0, $ref$tmp2 = 0, $ref$tmp5 = 0, $sub$i$i = 0, $sub$i55$i = 0, $sub$i68$i = 0, $tobool$i57$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__h$i = sp + 4 | 0;
 $ref$tmp2 = sp;
 $ref$tmp5 = sp + 16 | 0;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 $0 = HEAP32[$__k >> 2] | 0;
 $__value_$i$i$i1$i$i = $this + 4 | 0;
 $1 = HEAP32[$__value_$i$i$i1$i$i >> 2] | 0;
 $cmp$i = ($1 | 0) == 0;
 L1 : do if (!$cmp$i) {
  $sub$i55$i = $1 + -1 | 0;
  $tobool$i57$i = ($sub$i55$i & $1 | 0) == 0;
  if (!$tobool$i57$i) if ($0 >>> 0 < $1 >>> 0) $cond6$i64$i = $0; else $cond6$i64$i = ($0 >>> 0) % ($1 >>> 0) | 0; else $cond6$i64$i = $sub$i55$i & $0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i64$i << 2) >> 2] | 0;
  if (!$3) {
   $__chash$0$i = $cond6$i64$i;
   label = 16;
  } else {
   $$pn$i = $3;
   while (1) {
    $__nd$0$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$__nd$0$i) {
     $__chash$0$i = $cond6$i64$i;
     label = 16;
     break L1;
    }
    $4 = HEAP32[$__nd$0$i + 4 >> 2] | 0;
    if (($4 | 0) != ($0 | 0)) {
     if (!$tobool$i57$i) if ($4 >>> 0 < $1 >>> 0) $cond6$i99$i = $4; else $cond6$i99$i = ($4 >>> 0) % ($1 >>> 0) | 0; else $cond6$i99$i = $4 & $sub$i55$i;
     if (($cond6$i99$i | 0) != ($cond6$i64$i | 0)) {
      $__chash$0$i = $cond6$i64$i;
      label = 16;
      break L1;
     }
    }
    if ((HEAP32[$__nd$0$i + 8 >> 2] | 0) == ($0 | 0)) {
     $__nd$1$i = $__nd$0$i;
     break;
    } else $$pn$i = $__nd$0$i;
   }
  }
 } else {
  $__chash$0$i = 0;
  label = 16;
 } while (0);
 if ((label | 0) == 16) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEmOT_DpOT0_($__h$i, $this, $0, 43964, $ref$tmp2, $ref$tmp5);
  $__value_$i$i$i88$i = $this + 12 | 0;
  $conv$i = +(((HEAP32[$__value_$i$i$i88$i >> 2] | 0) + 1 | 0) >>> 0);
  $7 = +HEAPF32[$this + 16 >> 2];
  do if ($cmp$i | $7 * +($1 >>> 0) < $conv$i) {
   $add37$i = $1 << 1 | ($1 >>> 0 < 3 | ($1 + -1 & $1 | 0) != 0) & 1;
   $conv44$i = ~~+Math_ceil(+($conv$i / $7)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEm($this, $add37$i >>> 0 < $conv44$i >>> 0 ? $conv44$i : $add37$i);
   $9 = HEAP32[$__value_$i$i$i1$i$i >> 2] | 0;
   $sub$i68$i = $9 + -1 | 0;
   if (!($sub$i68$i & $9)) {
    $__bc$0$i = $9;
    $__chash$1$i = $sub$i68$i & $0;
    break;
   }
   if ($0 >>> 0 < $9 >>> 0) {
    $__bc$0$i = $9;
    $__chash$1$i = $0;
   } else {
    $__bc$0$i = $9;
    $__chash$1$i = ($0 >>> 0) % ($9 >>> 0) | 0;
   }
  } else {
   $__bc$0$i = $1;
   $__chash$1$i = $__chash$0$i;
  } while (0);
  $11 = HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] | 0;
  if (!$11) {
   $__value_$i$i$i = $this + 8 | 0;
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$__value_$i$i$i >> 2];
   HEAP32[$__value_$i$i$i >> 2] = HEAP32[$__h$i >> 2];
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] = $__value_$i$i$i;
   $16 = HEAP32[$__h$i >> 2] | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (!$17) $__value_$i$i$i37$pre$phi$iZZZZ2D = $__h$i; else {
    $18 = HEAP32[$17 + 4 >> 2] | 0;
    $sub$i$i = $__bc$0$i + -1 | 0;
    if ($sub$i$i & $__bc$0$i) if ($18 >>> 0 < $__bc$0$i >>> 0) $cond6$i$i = $18; else $cond6$i$i = ($18 >>> 0) % ($__bc$0$i >>> 0) | 0; else $cond6$i$i = $18 & $sub$i$i;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i$i << 2) >> 2] = $16;
    $__value_$i$i$i37$pre$phi$iZZZZ2D = $__h$i;
   }
  } else {
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$11 >> 2];
   HEAP32[$11 >> 2] = HEAP32[$__h$i >> 2];
   $__value_$i$i$i37$pre$phi$iZZZZ2D = $__h$i;
  }
  $23 = HEAP32[$__value_$i$i$i37$pre$phi$iZZZZ2D >> 2] | 0;
  HEAP32[$__value_$i$i$i88$i >> 2] = (HEAP32[$__value_$i$i$i88$i >> 2] | 0) + 1;
  HEAP32[$__value_$i$i$i37$pre$phi$iZZZZ2D >> 2] = 0;
  $__nd$1$i = $23;
 }
 STACKTOP = sp;
 return $__nd$1$i + 12 | 0;
}

function _h2v2_merged_upsample($cinfo, $input_buf, $in_row_group_ctr, $output_buf) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $output_buf = $output_buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $col$0126 = 0, $conv = 0, $conv13 = 0, $conv21 = 0, $conv32 = 0, $conv44 = 0, $conv56 = 0, $conv68 = 0, $conv69 = 0, $conv76 = 0, $conv86 = 0, $inptr00$0$lcssa = 0, $inptr00$0122 = 0, $inptr01$0$lcssa = 0, $inptr01$0123 = 0, $inptr1$0$lcssa = 0, $inptr1$0124 = 0, $inptr2$0$lcssa = 0, $inptr2$0125 = 0, $mul = 0, $outptr0$0$lcssa = 0, $outptr0$0120 = 0, $outptr1$0$lcssa = 0, $outptr1$0121 = 0, $output_width = 0, $scevgep = 0, $scevgep135 = 0, $shr = 0, $shr18 = 0, $shr74 = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 $1 = HEAP32[$cinfo + 336 >> 2] | 0;
 $2 = HEAP32[$0 + 16 >> 2] | 0;
 $3 = HEAP32[$0 + 20 >> 2] | 0;
 $4 = HEAP32[$0 + 24 >> 2] | 0;
 $5 = HEAP32[$0 + 28 >> 2] | 0;
 $6 = HEAP32[$input_buf >> 2] | 0;
 $mul = $in_row_group_ctr << 1;
 $7 = HEAP32[$6 + ($mul << 2) >> 2] | 0;
 $8 = HEAP32[$6 + (($mul | 1) << 2) >> 2] | 0;
 $10 = HEAP32[(HEAP32[$input_buf + 4 >> 2] | 0) + ($in_row_group_ctr << 2) >> 2] | 0;
 $12 = HEAP32[(HEAP32[$input_buf + 8 >> 2] | 0) + ($in_row_group_ctr << 2) >> 2] | 0;
 $13 = HEAP32[$output_buf >> 2] | 0;
 $14 = HEAP32[$output_buf + 4 >> 2] | 0;
 $output_width = $cinfo + 112 | 0;
 $15 = HEAP32[$output_width >> 2] | 0;
 $shr = $15 >>> 1;
 if (!$shr) {
  $40 = $15;
  $inptr00$0$lcssa = $7;
  $inptr01$0$lcssa = $8;
  $inptr1$0$lcssa = $10;
  $inptr2$0$lcssa = $12;
  $outptr0$0$lcssa = $13;
  $outptr1$0$lcssa = $14;
 } else {
  $scevgep = $10 + $shr | 0;
  $16 = $15 & -2;
  $17 = $shr * 6 | 0;
  $scevgep135 = $8 + $16 | 0;
  $col$0126 = $shr;
  $inptr00$0122 = $7;
  $inptr01$0123 = $8;
  $inptr1$0124 = $10;
  $inptr2$0125 = $12;
  $outptr0$0120 = $13;
  $outptr1$0121 = $14;
  while (1) {
   $conv = HEAPU8[$inptr1$0124 >> 0] | 0;
   $conv13 = HEAPU8[$inptr2$0125 >> 0] | 0;
   $20 = HEAP32[$2 + ($conv13 << 2) >> 2] | 0;
   $shr18 = (HEAP32[$4 + ($conv13 << 2) >> 2] | 0) + (HEAP32[$5 + ($conv << 2) >> 2] | 0) >> 16;
   $23 = HEAP32[$3 + ($conv << 2) >> 2] | 0;
   $conv21 = HEAPU8[$inptr00$0122 >> 0] | 0;
   HEAP8[$outptr0$0120 >> 0] = HEAP8[$1 + ($20 + $conv21) >> 0] | 0;
   HEAP8[$outptr0$0120 + 1 >> 0] = HEAP8[$1 + ($shr18 + $conv21) >> 0] | 0;
   HEAP8[$outptr0$0120 + 2 >> 0] = HEAP8[$1 + ($23 + $conv21) >> 0] | 0;
   $conv32 = HEAPU8[$inptr00$0122 + 1 >> 0] | 0;
   HEAP8[$outptr0$0120 + 3 >> 0] = HEAP8[$1 + ($20 + $conv32) >> 0] | 0;
   HEAP8[$outptr0$0120 + 4 >> 0] = HEAP8[$1 + ($shr18 + $conv32) >> 0] | 0;
   HEAP8[$outptr0$0120 + 5 >> 0] = HEAP8[$1 + ($23 + $conv32) >> 0] | 0;
   $conv44 = HEAPU8[$inptr01$0123 >> 0] | 0;
   HEAP8[$outptr1$0121 >> 0] = HEAP8[$1 + ($20 + $conv44) >> 0] | 0;
   HEAP8[$outptr1$0121 + 1 >> 0] = HEAP8[$1 + ($shr18 + $conv44) >> 0] | 0;
   HEAP8[$outptr1$0121 + 2 >> 0] = HEAP8[$1 + ($23 + $conv44) >> 0] | 0;
   $conv56 = HEAPU8[$inptr01$0123 + 1 >> 0] | 0;
   HEAP8[$outptr1$0121 + 3 >> 0] = HEAP8[$1 + ($20 + $conv56) >> 0] | 0;
   HEAP8[$outptr1$0121 + 4 >> 0] = HEAP8[$1 + ($shr18 + $conv56) >> 0] | 0;
   HEAP8[$outptr1$0121 + 5 >> 0] = HEAP8[$1 + ($23 + $conv56) >> 0] | 0;
   $col$0126 = $col$0126 + -1 | 0;
   if (!$col$0126) break; else {
    $inptr00$0122 = $inptr00$0122 + 2 | 0;
    $inptr01$0123 = $inptr01$0123 + 2 | 0;
    $inptr1$0124 = $inptr1$0124 + 1 | 0;
    $inptr2$0125 = $inptr2$0125 + 1 | 0;
    $outptr0$0120 = $outptr0$0120 + 6 | 0;
    $outptr1$0121 = $outptr1$0121 + 6 | 0;
   }
  }
  $40 = HEAP32[$output_width >> 2] | 0;
  $inptr00$0$lcssa = $7 + $16 | 0;
  $inptr01$0$lcssa = $scevgep135;
  $inptr1$0$lcssa = $scevgep;
  $inptr2$0$lcssa = $12 + $shr | 0;
  $outptr0$0$lcssa = $13 + $17 | 0;
  $outptr1$0$lcssa = $14 + $17 | 0;
 }
 if (!($40 & 1)) return;
 $conv68 = HEAPU8[$inptr1$0$lcssa >> 0] | 0;
 $conv69 = HEAPU8[$inptr2$0$lcssa >> 0] | 0;
 $43 = HEAP32[$2 + ($conv69 << 2) >> 2] | 0;
 $shr74 = (HEAP32[$4 + ($conv69 << 2) >> 2] | 0) + (HEAP32[$5 + ($conv68 << 2) >> 2] | 0) >> 16;
 $46 = HEAP32[$3 + ($conv68 << 2) >> 2] | 0;
 $conv76 = HEAPU8[$inptr00$0$lcssa >> 0] | 0;
 HEAP8[$outptr0$0$lcssa >> 0] = HEAP8[$1 + ($43 + $conv76) >> 0] | 0;
 HEAP8[$outptr0$0$lcssa + 1 >> 0] = HEAP8[$1 + ($shr74 + $conv76) >> 0] | 0;
 HEAP8[$outptr0$0$lcssa + 2 >> 0] = HEAP8[$1 + ($46 + $conv76) >> 0] | 0;
 $conv86 = HEAPU8[$inptr01$0$lcssa >> 0] | 0;
 HEAP8[$outptr1$0$lcssa >> 0] = HEAP8[$1 + ($43 + $conv86) >> 0] | 0;
 HEAP8[$outptr1$0$lcssa + 1 >> 0] = HEAP8[$1 + ($shr74 + $conv86) >> 0] | 0;
 HEAP8[$outptr1$0$lcssa + 2 >> 0] = HEAP8[$1 + ($46 + $conv86) >> 0] | 0;
 return;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $add$ptr202$sink = 0, $and161 = 0, $and167 = 0, $and171 = 0, $conv14 = 0, $conv146 = 0, $conv149 = 0, $conv163 = 0, $conv36 = 0, $conv82 = 0, $incdec$ptr201 = 0, $or = 0, $or97 = 0, $retval$8 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast154 = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if ($mode & 4) {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  $sub$ptr$lhs$cast = $frm_end;
  if (((($sub$ptr$lhs$cast - $0 | 0) > 2 ? (HEAP8[$0 >> 0] | 0) == -17 : 0) ? (HEAP8[$0 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[$0 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[$frm_nxt >> 2] = $0 + 3;
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
 } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $frm_end;
 $sub$ptr$lhs$cast154 = $to_end;
 L9 : while (1) {
  $4 = HEAP32[$frm_nxt >> 2] | 0;
  if ($4 >>> 0 >= $frm_end >>> 0) {
   $retval$8 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt >> 2] | 0;
  if ($5 >>> 0 >= $to_end >>> 0) {
   $retval$8 = 1;
   break;
  }
  $6 = HEAP8[$4 >> 0] | 0;
  $conv14 = $6 & 255;
  if ($conv14 >>> 0 > $Maxcode >>> 0) {
   $retval$8 = 2;
   break;
  }
  do if ($6 << 24 >> 24 > -1) {
   HEAP16[$5 >> 1] = $6 & 255;
   $add$ptr202$sink = $4 + 1 | 0;
  } else {
   if (($6 & 255) < 194) {
    $retval$8 = 2;
    break L9;
   }
   if (($6 & 255) < 224) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 2) {
     $retval$8 = 1;
     break L9;
    }
    $conv36 = HEAPU8[$4 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L9;
    }
    $or = $conv36 & 63 | $conv14 << 6 & 1984;
    if ($or >>> 0 > $Maxcode >>> 0) {
     $retval$8 = 2;
     break L9;
    }
    HEAP16[$5 >> 1] = $or;
    $add$ptr202$sink = $4 + 2 | 0;
    break;
   }
   if (($6 & 255) < 240) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 3) {
     $retval$8 = 1;
     break L9;
    }
    $8 = HEAP8[$4 + 1 >> 0] | 0;
    $9 = HEAP8[$4 + 2 >> 0] | 0;
    switch ($6 << 24 >> 24) {
    case -32:
     {
      if (($8 & -32) << 24 >> 24 != -96) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($8 & -32) << 24 >> 24 != -128) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($8 & -64) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L9;
     }
    }
    $conv82 = $9 & 255;
    if (($conv82 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L9;
    }
    $or97 = ($8 & 63) << 6 | $conv14 << 12 | $conv82 & 63;
    if (($or97 & 65535) >>> 0 > $Maxcode >>> 0) {
     $retval$8 = 2;
     break L9;
    }
    HEAP16[$5 >> 1] = $or97;
    $add$ptr202$sink = $4 + 3 | 0;
    break;
   }
   if (($6 & 255) >= 245) {
    $retval$8 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 4) {
    $retval$8 = 1;
    break L9;
   }
   $14 = HEAP8[$4 + 1 >> 0] | 0;
   $15 = HEAP8[$4 + 2 >> 0] | 0;
   $16 = HEAP8[$4 + 3 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case -16:
    {
     if (($14 + 112 & 255) >= 48) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($14 & -16) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($14 & -64) << 24 >> 24 != -128) {
     $retval$8 = 2;
     break L9;
    }
   }
   $conv146 = $15 & 255;
   if (($conv146 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L9;
   }
   $conv149 = $16 & 255;
   if (($conv149 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast154 - $5 | 0) < 4) {
    $retval$8 = 1;
    break L9;
   }
   $and161 = $conv14 & 7;
   $conv163 = $14 & 255;
   $and167 = $conv146 << 6;
   $and171 = $conv149 & 63;
   if (($conv163 << 12 & 258048 | $and161 << 18 | $and167 & 4032 | $and171) >>> 0 > $Maxcode >>> 0) {
    $retval$8 = 2;
    break L9;
   }
   HEAP16[$5 >> 1] = $conv163 << 2 & 60 | $conv146 >>> 4 & 3 | (($conv163 >>> 4 & 3 | $and161 << 2) << 6) + 16320 | 55296;
   $incdec$ptr201 = $5 + 2 | 0;
   HEAP32[$to_nxt >> 2] = $incdec$ptr201;
   HEAP16[$incdec$ptr201 >> 1] = $and171 | $and167 & 960 | 56320;
   $add$ptr202$sink = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[$frm_nxt >> 2] = $add$ptr202$sink;
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 2;
 }
 return $retval$8 | 0;
}

function _start_pass_1_quant($cinfo, $is_pre_scan) {
 $cinfo = $cinfo | 0;
 $is_pre_scan = $is_pre_scan | 0;
 var $0 = 0, $10 = 0, $12 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $8 = 0, $9 = 0, $call$i = 0, $call$i$i = 0, $color_quantize = 0, $cond$i$i = 0, $cquantize1 = 0, $i$011$i = 0, $i$025$i = 0, $i$041 = 0, $inc$i = 0, $j$016$i$i = 0, $j$023$i = 0, $k$015$i$i = 0, $mem$i = 0, $mem$i$i = 0, $mul = 0, $mul$i = 0, $mul$i$i = 0, $mul7$i$i = 0, $odither$1$i = 0, $out_color_components$i30 = 0, $out_color_components26$phi$trans$insert = 0, $out_color_components26$pre$phiZ2D = 0, $out_color_components5 = 0, $output_width$i = 0, $output_width$pre$phiZ2D = 0, $sub6$i$i = 0, label = 0;
 $cquantize1 = $cinfo + 484 | 0;
 $0 = HEAP32[$cquantize1 >> 2] | 0;
 HEAP32[$cinfo + 136 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$cinfo + 132 >> 2] = HEAP32[$0 + 20 >> 2];
 switch (HEAP32[$cinfo + 88 >> 2] | 0) {
 case 0:
  {
   $color_quantize = $0 + 4 | 0;
   if ((HEAP32[$cinfo + 120 >> 2] | 0) == 3) {
    HEAP32[$color_quantize >> 2] = 22;
    return;
   } else {
    HEAP32[$color_quantize >> 2] = 23;
    return;
   }
   break;
  }
 case 1:
  {
   $out_color_components5 = $cinfo + 120 | 0;
   HEAP32[$0 + 4 >> 2] = (HEAP32[$out_color_components5 >> 2] | 0) == 3 ? 24 : 25;
   HEAP32[$0 + 48 >> 2] = 0;
   if (!(HEAP32[$0 + 28 >> 2] | 0)) _create_colorindex($cinfo);
   if (HEAP32[$0 + 52 >> 2] | 0) return;
   $8 = HEAP32[$cquantize1 >> 2] | 0;
   $9 = HEAP32[$out_color_components5 >> 2] | 0;
   if (($9 | 0) <= 0) return;
   $mem$i$i = $cinfo + 4 | 0;
   $29 = $9;
   $i$025$i = 0;
   while (1) {
    $10 = HEAP32[$8 + 32 + ($i$025$i << 2) >> 2] | 0;
    L22 : do if ($i$025$i) {
     $j$023$i = 0;
     while (1) {
      if (($10 | 0) == (HEAP32[$8 + 32 + ($j$023$i << 2) >> 2] | 0)) break;
      $inc$i = $j$023$i + 1 | 0;
      if ($inc$i >>> 0 < $i$025$i >>> 0) $j$023$i = $inc$i; else {
       label = 15;
       break L22;
      }
     }
     $12 = HEAP32[$8 + 52 + ($j$023$i << 2) >> 2] | 0;
     if ($12) {
      $16 = $29;
      $odither$1$i = $12;
     } else label = 15;
    } else label = 15; while (0);
    if ((label | 0) == 15) {
     label = 0;
     $call$i$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem$i$i >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
     $mul$i$i = ($10 << 9) + -512 | 0;
     $j$016$i$i = 0;
     do {
      $k$015$i$i = 0;
      do {
       $sub6$i$i = 255 - ((HEAPU8[3408 + ($j$016$i$i << 4) + $k$015$i$i >> 0] | 0) << 1) | 0;
       $mul7$i$i = $sub6$i$i * 255 | 0;
       if (($sub6$i$i | 0) < 0) $cond$i$i = 0 - ((0 - $mul7$i$i | 0) / ($mul$i$i | 0) | 0) | 0; else $cond$i$i = ($mul7$i$i | 0) / ($mul$i$i | 0) | 0;
       HEAP32[$call$i$i + ($j$016$i$i << 6) + ($k$015$i$i << 2) >> 2] = $cond$i$i;
       $k$015$i$i = $k$015$i$i + 1 | 0;
      } while (($k$015$i$i | 0) != 16);
      $j$016$i$i = $j$016$i$i + 1 | 0;
     } while (($j$016$i$i | 0) != 16);
     $16 = HEAP32[$out_color_components5 >> 2] | 0;
     $odither$1$i = $call$i$i;
    }
    HEAP32[$8 + 52 + ($i$025$i << 2) >> 2] = $odither$1$i;
    $i$025$i = $i$025$i + 1 | 0;
    if (($i$025$i | 0) >= ($16 | 0)) break; else $29 = $16;
   }
   return;
  }
 case 2:
  {
   HEAP32[$0 + 4 >> 2] = 26;
   HEAP32[$0 + 84 >> 2] = 0;
   if (!(HEAP32[$0 + 68 >> 2] | 0)) {
    $output_width$i = $cinfo + 112 | 0;
    $mul$i = (HEAP32[$output_width$i >> 2] << 1) + 4 | 0;
    $out_color_components$i30 = $cinfo + 120 | 0;
    if ((HEAP32[$out_color_components$i30 >> 2] | 0) <= 0) return;
    $mem$i = $cinfo + 4 | 0;
    $i$011$i = 0;
    do {
     $call$i = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem$i >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, $mul$i) | 0;
     HEAP32[$0 + 68 + ($i$011$i << 2) >> 2] = $call$i;
     $i$011$i = $i$011$i + 1 | 0;
     $22 = HEAP32[$out_color_components$i30 >> 2] | 0;
    } while (($i$011$i | 0) < ($22 | 0));
    $24 = $22;
    $out_color_components26$pre$phiZ2D = $out_color_components$i30;
    $output_width$pre$phiZ2D = $output_width$i;
   } else {
    $out_color_components26$phi$trans$insert = $cinfo + 120 | 0;
    $24 = HEAP32[$out_color_components26$phi$trans$insert >> 2] | 0;
    $out_color_components26$pre$phiZ2D = $out_color_components26$phi$trans$insert;
    $output_width$pre$phiZ2D = $cinfo + 112 | 0;
   }
   $mul = (HEAP32[$output_width$pre$phiZ2D >> 2] << 1) + 4 | 0;
   if (($24 | 0) <= 0) return;
   $i$041 = 0;
   do {
    _memset(HEAP32[$0 + 68 + ($i$041 << 2) >> 2] | 0, 0, $mul | 0) | 0;
    $i$041 = $i$041 + 1 | 0;
   } while (($i$041 | 0) < (HEAP32[$out_color_components26$pre$phiZ2D >> 2] | 0));
   return;
  }
 default:
  {
   $27 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$27 + 20 >> 2] = 49;
   FUNCTION_TABLE_vi[HEAP32[$27 >> 2] & 255]($cinfo);
   return;
  }
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($this) {
 $this = $this | 0;
 var $Field = 0, $Init = 0, $call18 = 0, $call19 = 0, $call25 = 0, $call36 = 0, $call37 = 0, $call4 = 0, $call42 = 0, $call48 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Field = sp + 8 | 0;
 $Init = sp + 4 | 0;
 $ref$tmp = sp;
 L1 : do if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 100) switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call4) | 0;
   HEAP32[$Field >> 2] = $call5;
   if (!$call5) $retval$1 = 0; else {
    $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call4) | 0;
    HEAP32[$Init >> 2] = $call9;
    if (!$call9) $retval$0 = 0; else {
     HEAP8[$ref$tmp >> 0] = 0;
     $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
    }
    $retval$1 = $retval$0;
   }
   $retval$7 = $retval$1;
   break L1;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call18) | 0;
   HEAP32[$Field >> 2] = $call19;
   if (!$call19) $retval$3 = 0; else {
    $call25 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call18) | 0;
    HEAP32[$Init >> 2] = $call25;
    if (!$call25) $retval$2 = 0; else {
     HEAP8[$ref$tmp >> 0] = 1;
     $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
    }
    $retval$3 = $retval$2;
   }
   $retval$7 = $retval$3;
   break L1;
   break;
  }
 case 88:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call36 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36) | 0;
   HEAP32[$Field >> 2] = $call37;
   if (!$call37) $retval$6 = 0; else {
    $call42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36) | 0;
    HEAP32[$Init >> 2] = $call42;
    if (!$call42) $retval$5 = 0; else {
     $call48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call36) | 0;
     HEAP32[$ref$tmp >> 2] = $call48;
     if (!$call48) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
     $retval$5 = $retval$4;
    }
    $retval$6 = $retval$5;
   }
   $retval$7 = $retval$6;
   break L1;
   break;
  }
 default:
  {
   label = 20;
   break L1;
  }
 } else label = 20; while (0);
 if ((label | 0) == 20) $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _jpeg_consume_input($cinfo) {
 $cinfo = $cinfo | 0;
 var $$sink20 = 0, $$sink21 = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp$i = 0, $global_state = 0, $inputctl = 0, $inputctl3$pre$phiZ2D = 0, $retcode$0 = 0;
 $global_state = $cinfo + 20 | 0;
 $0 = HEAP32[$global_state >> 2] | 0;
 switch ($0 | 0) {
 case 200:
  {
   $inputctl = $cinfo + 460 | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$inputctl >> 2] | 0) + 4 >> 2] & 255]($cinfo);
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 24 >> 2] | 0) + 8 >> 2] & 255]($cinfo);
   HEAP32[$global_state >> 2] = 201;
   $inputctl3$pre$phiZ2D = $inputctl;
   break;
  }
 case 201:
  {
   $inputctl3$pre$phiZ2D = $cinfo + 460 | 0;
   break;
  }
 case 210:
 case 208:
 case 207:
 case 206:
 case 205:
 case 204:
 case 203:
  {
   $retcode$0 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$cinfo + 460 >> 2] >> 2] & 127]($cinfo) | 0;
   return $retcode$0 | 0;
  }
 case 202:
  {
   $retcode$0 = 1;
   return $retcode$0 | 0;
  }
 default:
  {
   $28 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$28 + 20 >> 2] = 21;
   HEAP32[$28 + 24 >> 2] = $0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   $retcode$0 = 0;
   return $retcode$0 | 0;
  }
 }
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$inputctl3$pre$phiZ2D >> 2] >> 2] & 127]($cinfo) | 0;
 if (($call | 0) != 1) {
  $retcode$0 = $call;
  return $retcode$0 | 0;
 }
 $7 = HEAP32[$cinfo + 36 >> 2] | 0;
 L13 : do switch ($7 | 0) {
 case 1:
  {
   $$sink20 = $7;
   $$sink21 = $7;
   break;
  }
 case 3:
  {
   $8 = HEAP32[$cinfo + 216 >> 2] | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = HEAP32[$8 + 88 >> 2] | 0;
   $11 = HEAP32[$8 + 176 >> 2] | 0;
   $cmp$i = ($9 | 0) == 1;
   if (!($cmp$i & ($10 | 0) == 2 & ($11 | 0) == 3)) if (!($cmp$i & ($10 | 0) == 34 & ($11 | 0) == 35)) if (!(($9 | 0) == 82 & ($10 | 0) == 71 & ($11 | 0) == 66)) if (!(($9 | 0) == 114 & ($10 | 0) == 103 & ($11 | 0) == 98)) if (!(HEAP32[$cinfo + 284 >> 2] | 0)) {
    if (!(HEAP32[$cinfo + 296 >> 2] | 0)) {
     $18 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$18 + 24 >> 2] = $9;
     HEAP32[$18 + 28 >> 2] = $10;
     HEAP32[$18 + 32 >> 2] = $11;
     HEAP32[$18 + 20 >> 2] = 113;
     FUNCTION_TABLE_vii[HEAP32[$18 + 4 >> 2] & 255]($cinfo, 1);
     $$sink20 = 2;
     $$sink21 = 3;
     break L13;
    }
    $14 = HEAP8[$cinfo + 300 >> 0] | 0;
    switch ($14 << 24 >> 24) {
    case 0:
     {
      $$sink20 = 2;
      $$sink21 = 2;
      break L13;
      break;
     }
    case 1:
     {
      $$sink20 = 2;
      $$sink21 = 3;
      break L13;
      break;
     }
    default:
     {
      $15 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$15 + 20 >> 2] = 116;
      HEAP32[$15 + 24 >> 2] = $14 & 255;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
      $$sink20 = 2;
      $$sink21 = 3;
      break L13;
     }
    }
   } else {
    $$sink20 = 2;
    $$sink21 = 3;
   } else {
    $$sink20 = 2;
    $$sink21 = 6;
   } else {
    $$sink20 = 2;
    $$sink21 = 2;
   } else {
    $$sink20 = 2;
    $$sink21 = 7;
   } else {
    $$sink20 = 2;
    $$sink21 = 3;
   }
   break;
  }
 case 4:
  {
   if (!(HEAP32[$cinfo + 296 >> 2] | 0)) {
    $$sink20 = 4;
    $$sink21 = 4;
   } else {
    $21 = HEAP8[$cinfo + 300 >> 0] | 0;
    switch ($21 << 24 >> 24) {
    case 0:
     {
      $$sink20 = 4;
      $$sink21 = 4;
      break L13;
      break;
     }
    case 2:
     {
      $$sink20 = 4;
      $$sink21 = 5;
      break L13;
      break;
     }
    default:
     {
      $22 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$22 + 20 >> 2] = 116;
      HEAP32[$22 + 24 >> 2] = $21 & 255;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
      $$sink20 = 4;
      $$sink21 = 5;
      break L13;
     }
    }
   }
   break;
  }
 default:
  {
   $$sink20 = 0;
   $$sink21 = 0;
  }
 } while (0);
 HEAP32[$cinfo + 40 >> 2] = $$sink21;
 HEAP32[$cinfo + 44 >> 2] = $$sink20;
 $25 = HEAP32[$cinfo + 428 >> 2] | 0;
 HEAP32[$cinfo + 48 >> 2] = $25;
 HEAP32[$cinfo + 52 >> 2] = $25;
 HEAPF64[$cinfo + 56 >> 3] = 1.0;
 HEAP32[$cinfo + 64 >> 2] = 0;
 HEAP32[$cinfo + 68 >> 2] = 0;
 HEAP32[$cinfo + 72 >> 2] = 0;
 HEAP32[$cinfo + 76 >> 2] = 1;
 HEAP32[$cinfo + 80 >> 2] = 1;
 HEAP32[$cinfo + 84 >> 2] = 0;
 HEAP32[$cinfo + 88 >> 2] = 2;
 HEAP32[$cinfo + 92 >> 2] = 1;
 HEAP32[$cinfo + 96 >> 2] = 256;
 HEAP32[$cinfo + 136 >> 2] = 0;
 HEAP32[$cinfo + 100 >> 2] = 0;
 HEAP32[$cinfo + 104 >> 2] = 0;
 HEAP32[$cinfo + 108 >> 2] = 0;
 HEAP32[$global_state >> 2] = 202;
 $retcode$0 = 1;
 return $retcode$0 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $__l = 0, $add$ptr31 = 0, $call$i = 0, $call$i$i = 0, $call$i$i59 = 0, $call$i$i64 = 0, $call$i60 = 0, $call$i65 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr43 = 0, $retval$1$ph = 0, $retval$2 = 0, $save_state = 0, $storemerge = 0, $sub$ptr$lhs$cast$le = 0, $sub$ptr$lhs$cast7 = 0, $to$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $save_state = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP8[$fend$0 >> 0] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 1 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $20 = $frm$addr$0;
   label = 33;
   break;
  }
  $1 = $st;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $save_state;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbsnrtowcs($to$addr$0, $frm_nxt, $fend$1 - $frm$addr$0 | 0, $sub$ptr$lhs$cast7 - $to$addr$0 >> 2, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  if (($call$i | 0) == -1) {
   label = 10;
   break;
  }
  $add$ptr31 = (HEAP32[$to_nxt >> 2] | 0) + ($call$i << 2) | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr31;
  if (($add$ptr31 | 0) == ($to_end | 0)) {
   label = 30;
   break;
  }
  $$pre = HEAP32[$frm_nxt >> 2] | 0;
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $21 = $add$ptr31;
   $22 = $$pre;
   $fend$4$ph = $frm_end;
  } else {
   $call$i$i64 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i65 = _mbrtowc($add$ptr31, $$pre, 1, $st) | 0;
   if ($call$i$i64 | 0) ___uselocale($call$i$i64) | 0;
   if ($call$i65 | 0) {
    $retval$1$ph = 2;
    label = 29;
    break;
   }
   HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
   $incdec$ptr43 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr43;
   $fend$2 = $incdec$ptr43;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP8[$fend$2 >> 0] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 1 | 0;
   }
   $21 = HEAP32[$to_nxt >> 2] | 0;
   $22 = $incdec$ptr43;
   $fend$4$ph = $fend$2$lcssa;
  }
  $fend$1 = $fend$4$ph;
  $frm$addr$0 = $22;
  $to$addr$0 = $21;
 }
 do if ((label | 0) == 10) {
  $sub$ptr$lhs$cast$le = $fend$1;
  $frm$addr$1 = $frm$addr$0;
  $storemerge = $to$addr$0;
  L29 : while (1) {
   HEAP32[$to_nxt >> 2] = $storemerge;
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    label = 19;
    break;
   }
   $call$i$i59 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i60 = _mbrtowc($storemerge, $frm$addr$1, $sub$ptr$lhs$cast$le - $frm$addr$1 | 0, $save_state) | 0;
   if ($call$i$i59 | 0) ___uselocale($call$i$i59) | 0;
   switch ($call$i60 | 0) {
   case -1:
    {
     label = 15;
     break L29;
     break;
    }
   case -2:
    {
     label = 16;
     break L29;
     break;
    }
   case 0:
    {
     $$sink = 1;
     break;
    }
   default:
    $$sink = $call$i60;
   }
   $frm$addr$1 = $frm$addr$1 + $$sink | 0;
   $storemerge = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 15) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 2;
   label = 29;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 1;
   label = 29;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = ($frm$addr$1 | 0) != ($frm_end | 0) & 1;
   label = 29;
   break;
  }
 } else if ((label | 0) == 30) {
  $20 = HEAP32[$frm_nxt >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 29) $retval$2 = $retval$1$ph; else if ((label | 0) == 33) $retval$2 = ($20 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $13 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i$i = 0, $call$i$i56 = 0, $call$i$i61 = 0, $call$i57 = 0, $call$i62 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph69 = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr51 = 0, $n$0 = 0, $p$0 = 0, $retval$1 = 0, $retval$3$ph = 0, $retval$4 = 0, $save_state = 0, $sub$ptr$lhs$cast7 = 0, $tmp = 0, $to$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP32[$fend$0 >> 2] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 4 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 L6 : while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $24 = $frm$addr$0;
   label = 36;
   break;
  }
  $1 = $st;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $save_state;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _wcsnrtombs($to$addr$0, $frm_nxt, $fend$1 - $frm$addr$0 >> 2, $sub$ptr$lhs$cast7 - $to$addr$0 | 0, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -1:
   {
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $retval$3$ph = 1;
    label = 33;
    break L6;
    break;
   }
  default:
   {}
  }
  $add$ptr27 = (HEAP32[$to_nxt >> 2] | 0) + $call$i | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr27;
  if (($add$ptr27 | 0) == ($to_end | 0)) {
   label = 34;
   break;
  }
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $25 = $add$ptr27;
   $26 = HEAP32[$frm_nxt >> 2] | 0;
   $fend$5$ph69 = $frm_end;
  } else {
   $call$i$i61 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i62 = _wcrtomb($tmp, 0, $st) | 0;
   if ($call$i$i61 | 0) ___uselocale($call$i$i61) | 0;
   if (($call$i62 | 0) == -1) {
    $retval$1 = 2;
    label = 32;
    break;
   }
   if ($call$i62 >>> 0 > ($sub$ptr$lhs$cast7 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $retval$1 = 1;
    label = 32;
    break;
   }
   $n$0 = $call$i62;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) break;
    $21 = HEAP8[$p$0 >> 0] | 0;
    $22 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $22 + 1;
    HEAP8[$22 >> 0] = $21;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
   $incdec$ptr51 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr51;
   $fend$2 = $incdec$ptr51;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP32[$fend$2 >> 2] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 4 | 0;
   }
   $25 = HEAP32[$to_nxt >> 2] | 0;
   $26 = $incdec$ptr51;
   $fend$5$ph69 = $fend$2$lcssa;
  }
  $fend$1 = $fend$5$ph69;
  $frm$addr$0 = $26;
  $to$addr$0 = $25;
 }
 if ((label | 0) == 10) {
  HEAP32[$to_nxt >> 2] = $to$addr$0;
  $15 = $to$addr$0;
  $frm$addr$1 = $frm$addr$0;
  while (1) {
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) break;
   $13 = HEAP32[$frm$addr$1 >> 2] | 0;
   $call$i$i56 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i57 = _wcrtomb($15, $13, $save_state) | 0;
   if ($call$i$i56 | 0) ___uselocale($call$i$i56) | 0;
   if (($call$i57 | 0) == -1) break;
   $add$ptr = (HEAP32[$to_nxt >> 2] | 0) + $call$i57 | 0;
   HEAP32[$to_nxt >> 2] = $add$ptr;
   $15 = $add$ptr;
   $frm$addr$1 = $frm$addr$1 + 4 | 0;
  }
  HEAP32[$frm_nxt >> 2] = $frm$addr$1;
  $retval$3$ph = 2;
  label = 33;
 } else if ((label | 0) == 32) {
  $retval$3$ph = $retval$1;
  label = 33;
 } else if ((label | 0) == 34) {
  $24 = HEAP32[$frm_nxt >> 2] | 0;
  label = 36;
 }
 if ((label | 0) == 33) $retval$4 = $retval$3$ph; else if ((label | 0) == 36) $retval$4 = ($24 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($this) {
 $this = $this | 0;
 var $Names = 0, $Params = 0, $SwapParams = 0, $agg$tmp = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call12 = 0, $call14 = 0, $retval$0 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $Params = sp;
 $SwapParams = sp + 8 | 0;
 $agg$tmp9 = sp + 16 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32214);
 HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 32217);
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($Params);
   __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SwapParams, $this + 362 | 0, 1);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 32220);
   HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   do if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0)) {
    $Names = $this + 8 | 0;
    $call12 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
    while (1) {
     $call14 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$agg$tmp9$byval_copy >> 2] = $call14;
     if (!$call14) {
      label = 11;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp9$byval_copy);
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 10;
      break;
     }
    }
    if ((label | 0) == 10) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params, $this, $call12);
     label = 12;
     break;
    } else if ((label | 0) == 11) {
     $retval$4 = 0;
     break;
    }
   } else label = 12; while (0);
   if ((label | 0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp9$byval_copy, $this, 0);
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Params, $agg$tmp9$byval_copy) | 0; else $retval$3 = 0;
    $retval$4 = $retval$3;
   }
   __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SwapParams);
   $retval$5 = $retval$4;
  } else $retval$5 = 0;
 } else {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp9$byval_copy, $this, 0);
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp9$byval_copy) | 0; else $retval$0 = 0;
  $retval$5 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $1 = 0, $__bn$i37 = 0, $__buf$i36 = 0, $__i$0$i$i = 0, $__i$0$i$i21 = 0, $__mb$i35 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i51 = 0, $__r$0$i = 0, $__r$0$i40 = 0, $__wb$addr$0$i = 0, $__wn$i = 0, $add$ptr = 0, $add$ptr$i38 = 0, $add$ptr14 = 0, $add$ptr5$i = 0, $call$i = 0, $call$i46 = 0, $call8 = 0, $cond$i$i$i1663 = 0, $cond$i$i$i33 = 0, $sub$ptr$lhs$cast$i = 0, $temp$lvalue = 0, $temp$lvalue9 = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $__mb$i35 = sp + 168 | 0;
 $__buf$i36 = sp;
 $__bn$i37 = sp + 164 | 0;
 $__wn$i = sp + 160 | 0;
 $__ndflt = sp + 128 | 0;
 $temp$lvalue = sp + 152 | 0;
 $temp$lvalue9 = sp + 144 | 0;
 HEAP32[$__ndflt >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$temp$lvalue + 4 >> 2] = 0;
 HEAP32[$temp$lvalue >> 2] = 20764;
 $1 = HEAP8[$__dflt + 8 + 3 >> 0] | 0;
 $tobool$i$i$i$i = $1 << 24 >> 24 < 0;
 $cond$i$i$i1663 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i1663 + (($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $1 & 255) << 2) | 0;
 $add$ptr$i38 = $__buf$i36 + 32 | 0;
 $__r$0$i40 = 0;
 $__wb$addr$0$i = $cond$i$i$i1663;
 while (1) {
  if (!(($__r$0$i40 | 0) != 2 & $__wb$addr$0$i >>> 0 < $add$ptr >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $__wb$addr$0$i;
  $call$i46 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue >> 2] | 0) + 12 >> 2] & 15]($temp$lvalue, $__mb$i35, $__wb$addr$0$i, $add$ptr, $__wn$i, $__buf$i36, $add$ptr$i38, $__bn$i37) | 0;
  if (($call$i46 | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__wb$addr$0$i | 0)) {
   label = 8;
   break;
  }
  $__p$0$i51 = $__buf$i36;
  while (1) {
   if ($__p$0$i51 >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i51 >> 0] | 0);
   $__p$0$i51 = $__p$0$i51 + 1 | 0;
  }
  $__r$0$i40 = $call$i46;
  $__wb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
 }
 if ((label | 0) == 8) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev($temp$lvalue);
 $cond$i$i$i33 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $call8 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, $cond$i$i$i33) | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i21 = 0;
 while (1) {
  if (($__i$0$i$i21 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i21 << 2) >> 2] = 0;
  $__i$0$i$i21 = $__i$0$i$i21 + 1 | 0;
 }
 HEAP32[$temp$lvalue9 + 4 >> 2] = 0;
 HEAP32[$temp$lvalue9 >> 2] = 20812;
 $add$ptr14 = $cond$i$i$i33 + (_strlen($call8) | 0) | 0;
 $sub$ptr$lhs$cast$i = $add$ptr14;
 $add$ptr5$i = $__buf$i36 + 128 | 0;
 $__nb$addr$0$i = $cond$i$i$i33;
 $__r$0$i = 0;
 while (1) {
  if (!(($__r$0$i | 0) != 2 & $__nb$addr$0$i >>> 0 < $add$ptr14 >>> 0)) {
   label = 23;
   break;
  }
  HEAP32[$__wn$i >> 2] = $__nb$addr$0$i;
  $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue9 >> 2] | 0) + 16 >> 2] & 15]($temp$lvalue9, $__mb$i35, $__nb$addr$0$i, ($sub$ptr$lhs$cast$i - $__nb$addr$0$i | 0) > 32 ? $__nb$addr$0$i + 32 | 0 : $add$ptr14, $__wn$i, $__buf$i36, $add$ptr5$i, $__bn$i37) | 0;
  if (($call$i | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__nb$addr$0$i | 0)) {
   label = 19;
   break;
  }
  $__p$0$i = $__buf$i36;
  while (1) {
   if ($__p$0$i >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i >> 2] | 0);
   $__p$0$i = $__p$0$i + 4 | 0;
  }
  $__nb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i = $call$i;
 }
 if ((label | 0) == 19) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((label | 0) == 23) {
  __ZNSt3__26locale5facetD2Ev($temp$lvalue9);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($this) {
 $this = $this | 0;
 var $ElemType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call15 = 0, $call24 = 0, $call25 = 0, $call33 = 0, $call43 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $ElemType = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32945);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
  if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -49 & 255) < 9) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp$byval_copy, $this, 0);
   do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 112) | 0) {
     $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
     break;
    }
    $call15 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$ElemType >> 2] = $call15;
    if (!$call15) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $ElemType, $agg$tmp$byval_copy) | 0;
    $retval$1 = $retval$0;
   } else $retval$1 = 0; while (0);
   $retval$5 = $retval$1;
   break;
  }
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
   $call43 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call43;
   if (!$call43) $retval$4 = 0; else {
    __ZN12_GLOBAL__N_110StringViewC2Ev($ElemType);
    $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $ElemType) | 0;
   }
   $retval$5 = $retval$4;
   break;
  }
  $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call25 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call24) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call25;
  if (($call25 | 0) != 0 ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0 : 0) {
   $call33 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call24) | 0;
   HEAP32[$ElemType >> 2] = $call33;
   if (!$call33) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ElemType, $agg$tmp$byval_copy) | 0;
   $retval$3 = $retval$2;
  } else $retval$3 = 0;
  $retval$5 = $retval$3;
 } else $retval$5 = 0; while (0);
 STACKTOP = sp;
 return $retval$5 | 0;
}

function _jpeg_idct_3x3($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$ptr = 0, $add$ptr29 = 0, $add$ptr29$1 = 0, $add$ptr29$2 = 0, $add35 = 0, $add35$1 = 0, $add35$2 = 0, $add7 = 0, $add7$1 = 0, $add7$2 = 0, $arrayidx20 = 0, $mul13 = 0, $mul13$1 = 0, $mul13$2 = 0, $mul39 = 0, $mul39$1 = 0, $mul39$2 = 0, $mul6 = 0, $mul6$1 = 0, $mul6$2 = 0, $shl32 = 0, $shl32$1 = 0, $shl32$2 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr17$2 = 0, $shr19$1 = 0, $shr19$2 = 0, $sub37 = 0, $sub37$1 = 0, $sub37$2 = 0, $sub8 = 0, $sub8$1 = 0, $sub8$2 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add = Math_imul(HEAP16[$coef_block >> 1] << 13, HEAP32[$1 >> 2] | 0) | 0 | 1024;
 $mul6 = Math_imul((HEAP16[$coef_block + 32 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 64 >> 2] | 0) | 0;
 $add7 = $mul6 + $add | 0;
 $sub8 = (Math_imul($mul6, -2) | 0) + $add | 0;
 $mul13 = Math_imul((HEAP16[$coef_block + 16 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 32 >> 2] | 0) | 0;
 $shr = $mul13 + $add7 >> 11;
 HEAP32[$workspace >> 2] = $shr;
 HEAP32[$workspace + 24 >> 2] = $add7 - $mul13 >> 11;
 $arrayidx20 = $workspace + 12 | 0;
 HEAP32[$arrayidx20 >> 2] = $sub8 >> 11;
 $add$1 = Math_imul(HEAP16[$coef_block + 2 >> 1] << 13, HEAP32[$1 + 4 >> 2] | 0) | 0 | 1024;
 $mul6$1 = Math_imul((HEAP16[$coef_block + 34 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 68 >> 2] | 0) | 0;
 $add7$1 = $mul6$1 + $add$1 | 0;
 $sub8$1 = (Math_imul($mul6$1, -2) | 0) + $add$1 | 0;
 $mul13$1 = Math_imul((HEAP16[$coef_block + 18 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 36 >> 2] | 0) | 0;
 $shr$1 = $mul13$1 + $add7$1 >> 11;
 HEAP32[$workspace + 4 >> 2] = $shr$1;
 HEAP32[$workspace + 28 >> 2] = $add7$1 - $mul13$1 >> 11;
 $shr19$1 = $sub8$1 >> 11;
 HEAP32[$workspace + 16 >> 2] = $shr19$1;
 $add$2 = Math_imul(HEAP16[$coef_block + 4 >> 1] << 13, HEAP32[$1 + 8 >> 2] | 0) | 0 | 1024;
 $mul6$2 = Math_imul((HEAP16[$coef_block + 36 >> 1] | 0) * 5793 | 0, HEAP32[$1 + 72 >> 2] | 0) | 0;
 $add7$2 = $mul6$2 + $add$2 | 0;
 $sub8$2 = (Math_imul($mul6$2, -2) | 0) + $add$2 | 0;
 $mul13$2 = Math_imul((HEAP16[$coef_block + 20 >> 1] | 0) * 10033 | 0, HEAP32[$1 + 40 >> 2] | 0) | 0;
 $shr$2 = $mul13$2 + $add7$2 >> 11;
 HEAP32[$workspace + 8 >> 2] = $shr$2;
 $shr17$2 = $add7$2 - $mul13$2 >> 11;
 HEAP32[$workspace + 32 >> 2] = $shr17$2;
 $shr19$2 = $sub8$2 >> 11;
 HEAP32[$workspace + 20 >> 2] = $shr19$2;
 $add$ptr = $0 + -384 | 0;
 $add$ptr29 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $shl32 = ($shr << 13) + 134348800 | 0;
 $add35 = $shl32 + ($shr$2 * 5793 | 0) | 0;
 $sub37 = (Math_imul($shr$2, -11586) | 0) + $shl32 | 0;
 $mul39 = $shr$1 * 10033 | 0;
 HEAP8[$add$ptr29 >> 0] = HEAP8[$add$ptr + (($add35 + $mul39 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 2 >> 0] = HEAP8[$add$ptr + (($add35 - $mul39 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29 + 1 >> 0] = HEAP8[$add$ptr + ($sub37 >>> 18 & 1023) >> 0] | 0;
 $add$ptr29$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $shl32$1 = (HEAP32[$arrayidx20 >> 2] << 13) + 134348800 | 0;
 $add35$1 = $shl32$1 + ($shr19$2 * 5793 | 0) | 0;
 $sub37$1 = (Math_imul($shr19$2, -11586) | 0) + $shl32$1 | 0;
 $mul39$1 = $shr19$1 * 10033 | 0;
 HEAP8[$add$ptr29$1 >> 0] = HEAP8[$add$ptr + (($add35$1 + $mul39$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 2 >> 0] = HEAP8[$add$ptr + (($add35$1 - $mul39$1 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$1 + 1 >> 0] = HEAP8[$add$ptr + ($sub37$1 >>> 18 & 1023) >> 0] | 0;
 $add$ptr29$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $shl32$2 = (HEAP32[$workspace + 24 >> 2] << 13) + 134348800 | 0;
 $add35$2 = $shl32$2 + ($shr17$2 * 5793 | 0) | 0;
 $sub37$2 = (Math_imul($shr17$2, -11586) | 0) + $shl32$2 | 0;
 $mul39$2 = (HEAP32[$workspace + 28 >> 2] | 0) * 10033 | 0;
 HEAP8[$add$ptr29$2 >> 0] = HEAP8[$add$ptr + (($add35$2 + $mul39$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 2 >> 0] = HEAP8[$add$ptr + (($add35$2 - $mul39$2 | 0) >>> 18 & 1023) >> 0] | 0;
 HEAP8[$add$ptr29$2 + 1 >> 0] = HEAP8[$add$ptr + ($sub37$2 >>> 18 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($this) {
 $this = $this | 0;
 var $Proto = 0, $Qual = 0, $SaveFirst = 0, $SaveLast = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call12 = 0, $call21 = 0, $call29 = 0, $call31 = 0, $call37 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp$byval_copy = sp + 48 | 0;
 $Qual = sp + 40 | 0;
 $agg$tmp = sp + 32 | 0;
 $Proto = sp;
 $SaveFirst = sp + 20 | 0;
 $SaveLast = sp + 8 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 85) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Qual, $this);
  do if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Qual) | 0) $retval$3 = 0; else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33099);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   if (!(__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Qual, $agg$tmp$byval_copy) | 0)) {
    $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = $call21;
    if (!$call21) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Qual) | 0;
    $retval$3 = $retval$2;
    break;
   }
   __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp$byval_copy, $Qual, 9);
   __ZN12_GLOBAL__N_110StringViewC2Ev($Proto);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveFirst, $this, __ZNK12_GLOBAL__N_110StringView5beginEv($agg$tmp$byval_copy) | 0);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveLast, $this + 4 | 0, __ZNK12_GLOBAL__N_110StringView3endEv($agg$tmp$byval_copy) | 0);
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Proto, $this);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveLast);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveFirst);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Proto) | 0) $retval$1 = 0; else {
    $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$SaveFirst >> 2] = $call12;
    if (!$call12) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $SaveFirst, $Proto) | 0;
    $retval$1 = $retval$0;
   }
   $retval$3 = $retval$1;
  } while (0);
  $retval$5 = $retval$3;
 } else {
  $call29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call29;
  $call31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Qual >> 2] = $call31;
  if ($call31) if (!$call29) $retval$4 = $call31; else {
   $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this, $Qual, $agg$tmp$byval_copy) | 0;
   HEAP32[$Qual >> 2] = $call37;
   $retval$4 = $call37;
  } else $retval$4 = 0;
  $retval$5 = $retval$4;
 }
 STACKTOP = sp;
 return $retval$5 | 0;
}

function _next_marker($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $16 = 0, $18 = 0, $19 = 0, $bytes_in_buffer$0 = 0, $bytes_in_buffer$1 = 0, $bytes_in_buffer$2 = 0, $bytes_in_buffer$256 = 0, $bytes_in_buffer$259 = 0, $bytes_in_buffer$3 = 0, $bytes_in_buffer$4 = 0, $bytes_in_buffer$4$ph = 0, $bytes_in_buffer$5 = 0, $bytes_in_buffer2 = 0, $conv43$le$le = 0, $discarded_bytes = 0, $discarded_bytes59 = 0, $fill_input_buffer = 0, $marker = 0, $next_input_byte$0 = 0, $next_input_byte$1 = 0, $next_input_byte$2 = 0, $next_input_byte$257 = 0, $next_input_byte$260 = 0, $next_input_byte$3 = 0, $next_input_byte$4 = 0, $next_input_byte$4$ph = 0, $next_input_byte$5 = 0, $retval$0 = 0, label = 0;
 $0 = HEAP32[$cinfo + 24 >> 2] | 0;
 $bytes_in_buffer2 = $0 + 4 | 0;
 $fill_input_buffer = $0 + 12 | 0;
 $marker = $cinfo + 464 | 0;
 $bytes_in_buffer$0 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
 $next_input_byte$0 = HEAP32[$0 >> 2] | 0;
 L1 : while (1) {
  if (!$bytes_in_buffer$0) {
   if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer >> 2] & 127]($cinfo) | 0)) {
    $retval$0 = 0;
    label = 21;
    break;
   }
   $bytes_in_buffer$1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
   $next_input_byte$1 = HEAP32[$0 >> 2] | 0;
  } else {
   $bytes_in_buffer$1 = $bytes_in_buffer$0;
   $next_input_byte$1 = $next_input_byte$0;
  }
  $bytes_in_buffer$256 = $bytes_in_buffer$1 + -1 | 0;
  $next_input_byte$257 = $next_input_byte$1 + 1 | 0;
  if ((HEAP8[$next_input_byte$1 >> 0] | 0) == -1) {
   $bytes_in_buffer$4$ph = $bytes_in_buffer$256;
   $next_input_byte$4$ph = $next_input_byte$257;
  } else {
   $bytes_in_buffer$259 = $bytes_in_buffer$256;
   $next_input_byte$260 = $next_input_byte$257;
   while (1) {
    $discarded_bytes = (HEAP32[$marker >> 2] | 0) + 24 | 0;
    HEAP32[$discarded_bytes >> 2] = (HEAP32[$discarded_bytes >> 2] | 0) + 1;
    HEAP32[$0 >> 2] = $next_input_byte$260;
    HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$259;
    if (!$bytes_in_buffer$259) {
     if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer >> 2] & 127]($cinfo) | 0)) {
      $retval$0 = 0;
      label = 21;
      break L1;
     }
     $bytes_in_buffer$3 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
     $next_input_byte$3 = HEAP32[$0 >> 2] | 0;
    } else {
     $bytes_in_buffer$3 = $bytes_in_buffer$259;
     $next_input_byte$3 = $next_input_byte$260;
    }
    $bytes_in_buffer$2 = $bytes_in_buffer$3 + -1 | 0;
    $next_input_byte$2 = $next_input_byte$3 + 1 | 0;
    if ((HEAP8[$next_input_byte$3 >> 0] | 0) == -1) {
     $bytes_in_buffer$4$ph = $bytes_in_buffer$2;
     $next_input_byte$4$ph = $next_input_byte$2;
     break;
    } else {
     $bytes_in_buffer$259 = $bytes_in_buffer$2;
     $next_input_byte$260 = $next_input_byte$2;
    }
   }
  }
  $bytes_in_buffer$4 = $bytes_in_buffer$4$ph;
  $next_input_byte$4 = $next_input_byte$4$ph;
  do {
   if (!$bytes_in_buffer$4) {
    if (!(FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer >> 2] & 127]($cinfo) | 0)) {
     $retval$0 = 0;
     label = 21;
     break L1;
    }
    $bytes_in_buffer$5 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
    $next_input_byte$5 = HEAP32[$0 >> 2] | 0;
   } else {
    $bytes_in_buffer$5 = $bytes_in_buffer$4;
    $next_input_byte$5 = $next_input_byte$4;
   }
   $bytes_in_buffer$4 = $bytes_in_buffer$5 + -1 | 0;
   $next_input_byte$4 = $next_input_byte$5 + 1 | 0;
   $16 = HEAP8[$next_input_byte$5 >> 0] | 0;
  } while ($16 << 24 >> 24 == -1);
  $discarded_bytes59 = (HEAP32[$marker >> 2] | 0) + 24 | 0;
  $18 = HEAP32[$discarded_bytes59 >> 2] | 0;
  if ($16 << 24 >> 24) {
   label = 18;
   break;
  }
  HEAP32[$discarded_bytes59 >> 2] = $18 + 2;
  HEAP32[$0 >> 2] = $next_input_byte$4;
  HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$4;
  $bytes_in_buffer$0 = $bytes_in_buffer$4;
  $next_input_byte$0 = $next_input_byte$4;
 }
 if ((label | 0) == 18) {
  $conv43$le$le = $16 & 255;
  if ($18 | 0) {
   $19 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$19 + 20 >> 2] = 119;
   HEAP32[$19 + 24 >> 2] = $18;
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $conv43$le$le;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
   HEAP32[(HEAP32[$marker >> 2] | 0) + 24 >> 2] = 0;
  }
  HEAP32[$cinfo + 440 >> 2] = $conv43$le$le;
  HEAP32[$0 >> 2] = $next_input_byte$4;
  HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$4;
  $retval$0 = 1;
  return $retval$0 | 0;
 } else if ((label | 0) == 21) return $retval$0 | 0;
 return 0;
}

function _ar2ReadImageSet($filename) {
 $filename = $filename | 0;
 var $0 = 0, $5 = 0, $arrayidx67 = 0, $arrayidx85 = 0, $call2 = 0, $call20 = 0, $call24 = 0, $call29 = 0, $call4 = 0, $call7 = 0, $call74 = 0, $dpi = 0, $i$0 = 0, $k1$0 = 0, $k1$1 = 0, $mul19 = 0, $num = 0, $retval$0 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer19 = sp + 64 | 0;
 $vararg_buffer17 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $dpi = sp + 80 | 0;
 $call2 = _malloc((_strlen($filename) | 0) + 6 | 0) | 0;
 if (!$call2) {
  _arLog(0, 3, 21902, sp);
  _exit(1);
 }
 HEAP32[$vararg_buffer1 >> 2] = $filename;
 HEAP32[$vararg_buffer1 + 4 >> 2] = 21595;
 _sprintf($call2, 21590, $vararg_buffer1) | 0;
 $call4 = _fopen($call2, 21824) | 0;
 _free($call2);
 L4 : do if (!$call4) {
  HEAP32[$vararg_buffer4 >> 2] = $filename;
  HEAP32[$vararg_buffer4 + 4 >> 2] = 21595;
  _arLog(0, 3, 21601, $vararg_buffer4);
  $retval$0 = 0;
 } else {
  $call7 = _malloc(8) | 0;
  if (!$call7) {
   _arLog(0, 3, 21902, $vararg_buffer8);
   _exit(1);
  }
  $num = $call7 + 4 | 0;
  if ((_fread($num, 4, 1, $call4) | 0) == 1 ? ($0 = HEAP32[$num >> 2] | 0, ($0 | 0) >= 1) : 0) {
   HEAP32[$vararg_buffer12 >> 2] = $0;
   _arLog(0, 1, 21674, $vararg_buffer12);
   $mul19 = $0 << 2;
   $call20 = _malloc($mul19) | 0;
   HEAP32[$call7 >> 2] = $call20;
   if (!$call20) {
    _arLog(0, 3, 21902, $vararg_buffer15);
    _exit(1);
   }
   $call24 = _malloc(16) | 0;
   HEAP32[$call20 >> 2] = $call24;
   if (!$call24) {
    _arLog(0, 3, 21902, $vararg_buffer17);
    _exit(1);
   }
   $call29 = _ar2ReadJpegImage2($call4) | 0;
   if (!$call29) {
    HEAP32[$vararg_buffer19 >> 2] = $filename;
    HEAP32[$vararg_buffer19 + 4 >> 2] = 21595;
    _arLog(0, 2, 21704, $vararg_buffer19);
    _free(HEAP32[$call20 >> 2] | 0);
    _free($call20);
    _free($call7);
    _rewind($call4);
    $retval$0 = _ar2ReadImageSetOld($call4) | 0;
    break;
   }
   if ((HEAP32[$call29 + 4 >> 2] | 0) != 1) {
    HEAP32[$vararg_buffer23 >> 2] = $filename;
    HEAP32[$vararg_buffer23 + 4 >> 2] = 21595;
    _arLog(0, 2, 21704, $vararg_buffer23);
    _free(HEAP32[$call20 >> 2] | 0);
    _free($call20);
    _free($call7);
    _free($call29);
    _fclose($call4) | 0;
    $retval$0 = 0;
    break;
   }
   $5 = HEAP32[$call20 >> 2] | 0;
   HEAP32[$5 + 4 >> 2] = HEAP32[$call29 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$call29 + 12 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[$call29 + 16 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$call29 >> 2];
   _free($call29);
   _fseek($call4, 4 - $mul19 | 0, 2) | 0;
   $i$0 = 1;
   while (1) {
    if (($i$0 | 0) >= ($0 | 0)) {
     label = 29;
     break;
    }
    if ((_fread($dpi, 4, 1, $call4) | 0) != 1) {
     label = 21;
     break;
    }
    $call74 = _ar2GenImageLayer2(HEAP32[$call20 >> 2] | 0, +HEAPF32[$dpi >> 2]) | 0;
    HEAP32[$call20 + ($i$0 << 2) >> 2] = $call74;
    if (!$call74) {
     label = 25;
     break;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   L30 : do if ((label | 0) == 21) {
    $k1$0 = 0;
    while (1) {
     if (($k1$0 | 0) == ($i$0 | 0)) break L30;
     $arrayidx67 = $call20 + ($k1$0 << 2) | 0;
     _free(HEAP32[HEAP32[$arrayidx67 >> 2] >> 2] | 0);
     _free(HEAP32[$arrayidx67 >> 2] | 0);
     $k1$0 = $k1$0 + 1 | 0;
    }
   } else if ((label | 0) == 25) {
    $k1$1 = 0;
    while (1) {
     if (($k1$1 | 0) == ($i$0 | 0)) break L30;
     $arrayidx85 = $call20 + ($k1$1 << 2) | 0;
     _free(HEAP32[HEAP32[$arrayidx85 >> 2] >> 2] | 0);
     _free(HEAP32[$arrayidx85 >> 2] | 0);
     $k1$1 = $k1$1 + 1 | 0;
    }
   } else if ((label | 0) == 29) {
    _fclose($call4) | 0;
    $retval$0 = $call7;
    break L4;
   } while (0);
   _free($call20);
  } else _arLog(0, 3, 21649, $vararg_buffer10);
  _free($call7);
  _fclose($call4) | 0;
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _minv($ap, $dimen, $rowa) {
 $ap = $ap | 0;
 $dimen = $dimen | 0;
 $rowa = $rowa | 0;
 var $10 = 0.0, $17 = 0.0, $3 = 0.0, $4 = 0, $6 = 0.0, $8 = 0.0, $add$ptr = 0, $add$ptr36 = 0, $add$ptr49 = 0, $add$ptr53 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx75 = 0, $cmp9 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $indvars$iv = 0, $indvars$iv110 = 0, $ip$0 = 0, $ip$1 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $n$0 = 0, $n$1 = 0, $n$2 = 0, $nos = 0, $p$0 = 0.0, $retval$0 = 0, $scevgep = 0, $wap$0 = 0, $wap$1 = 0, $wap$2 = 0, $wap$3 = 0, $wap$4 = 0, $wbp$0 = 0, $wbp$1 = 0, $wbp$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2e3 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2e3);
 $nos = sp;
 L1 : do if (($dimen | 0) > 500) $retval$0 = 0; else {
  switch ($dimen | 0) {
  case 0:
   {
    $retval$0 = 0;
    break L1;
    break;
   }
  case 1:
   {
    HEAPF64[$ap >> 3] = 1.0 / +HEAPF64[$ap >> 3];
    $retval$0 = $ap;
    break L1;
    break;
   }
  default:
   {}
  }
  $n$0 = 0;
  while (1) {
   if (($n$0 | 0) >= ($dimen | 0)) break;
   HEAP32[$nos + ($n$0 << 2) >> 2] = $n$0;
   $n$0 = $n$0 + 1 | 0;
  }
  $scevgep = $ap + ($dimen + -1 << 3) | 0;
  $indvars$iv = $scevgep;
  $n$1 = 0;
  while (1) {
   if (($n$1 | 0) >= ($dimen | 0)) break;
   $add$ptr = $ap + ((Math_imul($n$1, $rowa) | 0) << 3) | 0;
   $i$0 = $n$1;
   $ip$0 = -1;
   $p$0 = 0.0;
   $wap$0 = $add$ptr;
   while (1) {
    if (($i$0 | 0) == ($dimen | 0)) break;
    $3 = +Math_abs(+(+HEAPF64[$wap$0 >> 3]));
    $cmp9 = $p$0 < $3;
    $ip$1 = $cmp9 ? $i$0 : $ip$0;
    $i$0 = $i$0 + 1 | 0;
    $ip$0 = $ip$1;
    $p$0 = $cmp9 ? $3 : $p$0;
    $wap$0 = $wap$0 + ($rowa << 3) | 0;
   }
   if (($ip$0 | 0) == -1 | $p$0 <= 1.0e-10) {
    $retval$0 = 0;
    break L1;
   }
   $arrayidx20 = $nos + ($ip$0 << 2) | 0;
   $4 = HEAP32[$arrayidx20 >> 2] | 0;
   $arrayidx21 = $nos + ($n$1 << 2) | 0;
   HEAP32[$arrayidx20 >> 2] = HEAP32[$arrayidx21 >> 2];
   HEAP32[$arrayidx21 >> 2] = $4;
   $j$0 = 0;
   $wap$1 = $ap + ((Math_imul($ip$0, $rowa) | 0) << 3) | 0;
   $wbp$0 = $add$ptr;
   while (1) {
    if (($j$0 | 0) == ($dimen | 0)) break;
    $6 = +HEAPF64[$wap$1 >> 3];
    HEAPF64[$wap$1 >> 3] = +HEAPF64[$wbp$0 >> 3];
    HEAPF64[$wbp$0 >> 3] = $6;
    $j$0 = $j$0 + 1 | 0;
    $wap$1 = $wap$1 + 8 | 0;
    $wbp$0 = $wbp$0 + 8 | 0;
   }
   $8 = +HEAPF64[$add$ptr >> 3];
   $j$1 = 1;
   $wap$2 = $add$ptr;
   while (1) {
    if (($j$1 | 0) == ($dimen | 0)) break;
    $add$ptr36 = $wap$2 + 8 | 0;
    HEAPF64[$wap$2 >> 3] = +HEAPF64[$add$ptr36 >> 3] / $8;
    $j$1 = $j$1 + 1 | 0;
    $wap$2 = $add$ptr36;
   }
   HEAPF64[$indvars$iv >> 3] = 1.0 / $8;
   $i$1 = 0;
   $indvars$iv110 = $scevgep;
   while (1) {
    if (($i$1 | 0) == ($dimen | 0)) break;
    if (($i$1 | 0) != ($n$1 | 0)) {
     $add$ptr49 = $ap + ((Math_imul($i$1, $rowa) | 0) << 3) | 0;
     $10 = +HEAPF64[$add$ptr49 >> 3];
     $j$2 = 1;
     $wap$3 = $add$ptr49;
     $wbp$1 = $add$ptr;
     while (1) {
      if (($j$2 | 0) == ($dimen | 0)) break;
      $add$ptr53 = $wap$3 + 8 | 0;
      HEAPF64[$wap$3 >> 3] = +HEAPF64[$add$ptr53 >> 3] - $10 * +HEAPF64[$wbp$1 >> 3];
      $j$2 = $j$2 + 1 | 0;
      $wap$3 = $add$ptr53;
      $wbp$1 = $wbp$1 + 8 | 0;
     }
     HEAPF64[$indvars$iv110 >> 3] = -($10 * +HEAPF64[$indvars$iv >> 3]);
    }
    $i$1 = $i$1 + 1 | 0;
    $indvars$iv110 = $indvars$iv110 + ($rowa << 3) | 0;
   }
   $indvars$iv = $indvars$iv + ($rowa << 3) | 0;
   $n$1 = $n$1 + 1 | 0;
  }
  $n$2 = 0;
  while (1) {
   if (($n$2 | 0) >= ($dimen | 0)) {
    $retval$0 = $ap;
    break L1;
   }
   $j$3 = $n$2;
   while (1) {
    $arrayidx75 = $nos + ($j$3 << 2) | 0;
    if (($j$3 | 0) >= ($dimen | 0)) break;
    if ((HEAP32[$arrayidx75 >> 2] | 0) == ($n$2 | 0)) break;
    $j$3 = $j$3 + 1 | 0;
   }
   HEAP32[$arrayidx75 >> 2] = HEAP32[$nos + ($n$2 << 2) >> 2];
   $i$2 = 0;
   $wap$4 = $ap + ($j$3 << 3) | 0;
   $wbp$2 = $ap + ($n$2 << 3) | 0;
   while (1) {
    if (($i$2 | 0) >= ($dimen | 0)) break;
    $17 = +HEAPF64[$wap$4 >> 3];
    HEAPF64[$wap$4 >> 3] = +HEAPF64[$wbp$2 >> 3];
    HEAPF64[$wbp$2 >> 3] = $17;
    $i$2 = $i$2 + 1 | 0;
    $wap$4 = $wap$4 + ($rowa << 3) | 0;
    $wbp$2 = $wbp$2 + ($rowa << 3) | 0;
   }
   $n$2 = $n$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $S = 0, $TA = 0, $call19 = 0, $call20 = 0, $call31 = 0, $call40 = 0, $call41 = 0, $call52 = 0, $cmp30 = 0, $cmp51 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $S = sp + 4 | 0;
 $TA = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 78:
  {
   $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   break;
  }
 case 90:
  {
   $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   break;
  }
 case 83:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 116) label = 13; else {
    $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call20 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19) | 0;
    HEAP32[$S >> 2] = $call20;
    if (($call20 | 0) != 0 ? (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73 : 0) {
     $cmp30 = ($State | 0) != 0;
     $call31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call19, $cmp30) | 0;
     HEAP32[$TA >> 2] = $call31;
     if (!$call31) $retval$0 = 0; else {
      if ($cmp30) HEAP8[$State + 1 >> 0] = 1;
      $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $S, $TA) | 0;
     }
     $retval$1 = $retval$0;
    } else $retval$1 = 0;
    $retval$4 = $retval$1;
   }
   break;
  }
 default:
  label = 13;
 }
 if ((label | 0) == 13) {
  $call40 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call41 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($call40, $State) | 0;
  HEAP32[$S >> 2] = $call41;
  if ($call41) if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $S);
   $cmp51 = ($State | 0) != 0;
   $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call40, $cmp51) | 0;
   HEAP32[$TA >> 2] = $call52;
   if (!$call52) $retval$2 = 0; else {
    if ($cmp51) HEAP8[$State + 1 >> 0] = 1;
    $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $S, $TA) | 0;
   }
   $retval$3 = $retval$2;
  } else $retval$3 = $call41; else $retval$3 = 0;
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _ar2ReadImageSetOld($fp) {
 $fp = $fp | 0;
 var $0 = 0, $13 = 0, $17 = 0, $21 = 0, $arrayidx24 = 0, $call = 0, $call102 = 0, $call119 = 0, $call14 = 0, $call8 = 0, $i$0 = 0, $i$1 = 0, $inc149 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $k$4 = 0, $k$5 = 0, $k$6 = 0, $k$7 = 0, $num = 0, $retval$0 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $call = _malloc(8) | 0;
 if (!$call) {
  _arLog(0, 3, 21902, sp);
  _exit(1);
 }
 $num = $call + 4 | 0;
 L4 : do if ((_fread($num, 4, 1, $fp) | 0) == 1 ? ($0 = HEAP32[$num >> 2] | 0, ($0 | 0) >= 1) : 0) {
  $call8 = _malloc($0 << 2) | 0;
  HEAP32[$call >> 2] = $call8;
  if (!$call8) {
   _arLog(0, 3, 21902, $vararg_buffer3);
   _exit(1);
  }
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) break;
   $call14 = _malloc(16) | 0;
   HEAP32[$call8 + ($i$0 << 2) >> 2] = $call14;
   if (!$call14) {
    label = 12;
    break;
   } else $i$0 = $i$0 + 1 | 0;
  }
  if ((label | 0) == 12) {
   _arLog(0, 3, 21902, $vararg_buffer5);
   _exit(1);
  }
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= ($0 | 0)) {
    label = 44;
    break;
   }
   $arrayidx24 = $call8 + ($i$1 << 2) | 0;
   if ((_fread((HEAP32[$arrayidx24 >> 2] | 0) + 4 | 0, 4, 1, $fp) | 0) != 1) {
    label = 15;
    break;
   }
   if ((_fread((HEAP32[$arrayidx24 >> 2] | 0) + 8 | 0, 4, 1, $fp) | 0) != 1) {
    label = 22;
    break;
   }
   if ((_fread((HEAP32[$arrayidx24 >> 2] | 0) + 12 | 0, 4, 1, $fp) | 0) != 1) {
    label = 29;
    break;
   }
   $13 = HEAP32[$arrayidx24 >> 2] | 0;
   $call102 = _malloc(Math_imul(HEAP32[$13 + 8 >> 2] | 0, HEAP32[$13 + 4 >> 2] | 0) | 0) | 0;
   HEAP32[HEAP32[$arrayidx24 >> 2] >> 2] = $call102;
   if (!$call102) {
    label = 36;
    break;
   }
   $17 = HEAP32[$arrayidx24 >> 2] | 0;
   $call119 = _fread(HEAP32[$17 >> 2] | 0, 1, Math_imul(HEAP32[$17 + 8 >> 2] | 0, HEAP32[$17 + 4 >> 2] | 0) | 0, $fp) | 0;
   $21 = HEAP32[$arrayidx24 >> 2] | 0;
   $inc149 = $i$1 + 1 | 0;
   if (($call119 | 0) == (Math_imul(HEAP32[$21 + 8 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0)) $i$1 = $inc149; else {
    label = 38;
    break;
   }
  }
  L23 : do if ((label | 0) == 15) {
   $k$0 = 0;
   while (1) {
    if (($k$0 | 0) == ($i$1 | 0)) break;
    _free(HEAP32[HEAP32[$call8 + ($k$0 << 2) >> 2] >> 2] | 0);
    $k$0 = $k$0 + 1 | 0;
   }
   $k$1 = 0;
   while (1) {
    if (($k$1 | 0) == ($0 | 0)) break L23;
    _free(HEAP32[$call8 + ($k$1 << 2) >> 2] | 0);
    $k$1 = $k$1 + 1 | 0;
   }
  } else if ((label | 0) == 22) {
   $k$2 = 0;
   while (1) {
    if (($k$2 | 0) == ($i$1 | 0)) break;
    _free(HEAP32[HEAP32[$call8 + ($k$2 << 2) >> 2] >> 2] | 0);
    $k$2 = $k$2 + 1 | 0;
   }
   $k$3 = 0;
   while (1) {
    if (($k$3 | 0) == ($0 | 0)) break L23;
    _free(HEAP32[$call8 + ($k$3 << 2) >> 2] | 0);
    $k$3 = $k$3 + 1 | 0;
   }
  } else if ((label | 0) == 29) {
   $k$4 = 0;
   while (1) {
    if (($k$4 | 0) == ($i$1 | 0)) break;
    _free(HEAP32[HEAP32[$call8 + ($k$4 << 2) >> 2] >> 2] | 0);
    $k$4 = $k$4 + 1 | 0;
   }
   $k$5 = 0;
   while (1) {
    if (($k$5 | 0) == ($0 | 0)) break L23;
    _free(HEAP32[$call8 + ($k$5 << 2) >> 2] | 0);
    $k$5 = $k$5 + 1 | 0;
   }
  } else if ((label | 0) == 36) {
   _arLog(0, 3, 21902, $vararg_buffer7);
   _exit(1);
  } else if ((label | 0) == 38) {
   $k$6 = 0;
   while (1) {
    if (($k$6 | 0) == ($inc149 | 0)) break;
    _free(HEAP32[HEAP32[$call8 + ($k$6 << 2) >> 2] >> 2] | 0);
    $k$6 = $k$6 + 1 | 0;
   }
   $k$7 = 0;
   while (1) {
    if (($k$7 | 0) == ($0 | 0)) break L23;
    _free(HEAP32[$call8 + ($k$7 << 2) >> 2] | 0);
    $k$7 = $k$7 + 1 | 0;
   }
  } else if ((label | 0) == 44) {
   _fclose($fp) | 0;
   $retval$0 = $call;
   break L4;
  } while (0);
  _free($call8);
  label = 46;
 } else label = 5; while (0);
 if ((label | 0) == 5) {
  _arLog(0, 3, 21649, $vararg_buffer1);
  label = 46;
 }
 if ((label | 0) == 46) {
  _free($call);
  _fclose($fp) | 0;
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $12 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $4 = 0, $7 = 0, $__loc = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i19 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432);
 $agg$tmp$byval_copy = sp + 424 | 0;
 $__wbuf = sp;
 $__wb = sp + 416 | 0;
 $__wn = sp + 408 | 0;
 $__loc = sp + 400 | 0;
 $__neg = sp + 428 | 0;
 $agg$tmp = sp + 404 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 197;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 HEAP32[$agg$tmp >> 2] = $2;
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $4 = $2;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  $__size_$i1$i = $__v + 8 + 3 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   $7 = HEAP32[$__v >> 2] | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $agg$tmp$byval_copy);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   HEAP32[$agg$tmp$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__v, $agg$tmp$byval_copy);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, 45) | 0);
  $call$i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($call$i, 48) | 0;
  $12 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $12 + -4 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP32[$__w$0 >> 2] | 0) != ($call$i19 | 0)) break;
   $__w$0 = $__w$0 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($__v, $__w$0, $12) | 0;
 }
 $14 = HEAP32[$__b >> 2] | 0;
 do if ($14) {
  $15 = HEAP32[$14 + 12 >> 2] | 0;
  if (($15 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$15 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $27 = 1;
   break;
  } else {
   $27 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $27 = 1; while (0);
 do if ($2) {
  $19 = HEAP32[$4 + 12 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($27) break; else {
   label = 27;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  }
 } else label = 25; while (0);
 if ((label | 0) == 25 ? $27 : 0) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $25 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($25 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($25);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $6 = 0, $__loc = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i18 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $agg$tmp$byval_copy = sp + 120 | 0;
 $__wbuf = sp;
 $__wb = sp + 112 | 0;
 $__wn = sp + 108 | 0;
 $__loc = sp + 100 | 0;
 $__neg = sp + 124 | 0;
 $agg$tmp = sp + 104 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 197;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 HEAP32[$agg$tmp >> 2] = $2;
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $4 = $2;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  $__size_$i1$i = $__v + 11 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   $6 = HEAP32[$__v >> 2] | 0;
   HEAP8[$agg$tmp$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $agg$tmp$byval_copy);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   HEAP8[$agg$tmp$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__v, $agg$tmp$byval_copy);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, 45) | 0);
  $call$i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i, 48) | 0;
  $11 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $11 + -1 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP8[$__w$0 >> 0] | 0) != $call$i18 << 24 >> 24) break;
   $__w$0 = $__w$0 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($__v, $__w$0, $11) | 0;
 }
 $13 = HEAP32[$__b >> 2] | 0;
 do if ($13) {
  $14 = HEAP32[$13 + 12 >> 2] | 0;
  if (($14 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $26 = 1;
   break;
  } else {
   $26 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $26 = 1; while (0);
 do if ($2) {
  $18 = HEAP32[$4 + 12 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$18 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($26) break; else {
   label = 27;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  }
 } else label = 25; while (0);
 if ((label | 0) == 25 ? $26 : 0) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $24 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($24 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($24);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre64 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $add101 = 0, $and85 = 0, $arrayidx = 0, $conv = 0, $conv73 = 0, $incdec$ptr168 = 0, $retval$4 = 0, $sub$ptr$lhs$cast67 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre64 = $to_end;
 if ($mode & 2) if (($$pre64 - $to | 0) < 3) $retval$4 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $0 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $0 + 1;
  HEAP8[$0 >> 0] = -69;
  $1 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = -65;
  label = 4;
 } else label = 4;
 L4 : do if ((label | 0) == 4) {
  $sub$ptr$lhs$cast67 = $frm_end;
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($2 >>> 0 >= $frm_end >>> 0) {
    $retval$4 = 0;
    break L4;
   }
   $3 = HEAP16[$2 >> 1] | 0;
   $conv = $3 & 65535;
   if ($conv >>> 0 > $Maxcode >>> 0) {
    $retval$4 = 2;
    break L4;
   }
   do if (($3 & 65535) < 128) {
    $4 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre64 - $4 | 0) < 1) {
     $retval$4 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $4 + 1;
    HEAP8[$4 >> 0] = $3;
   } else {
    if (($3 & 65535) < 2048) {
     $5 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $5 | 0) < 2) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $5 + 1;
     HEAP8[$5 >> 0] = $conv >>> 6 | 192;
     $7 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($3 & 65535) < 55296) {
     $8 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $8 | 0) < 3) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $8 + 1;
     HEAP8[$8 >> 0] = $conv >>> 12 | 224;
     $11 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $conv >>> 6 & 63 | 128;
     $12 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($3 & 65535) >= 56320) {
     if (($3 & 65535) < 57344) {
      $retval$4 = 2;
      break L4;
     }
     $23 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $23 | 0) < 3) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $23 + 1;
     HEAP8[$23 >> 0] = $conv >>> 12 | 224;
     $26 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $conv >>> 6 & 63 | 128;
     $27 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($sub$ptr$lhs$cast67 - $2 | 0) < 4) {
     $retval$4 = 1;
     break L4;
    }
    $arrayidx = $2 + 2 | 0;
    $conv73 = HEAPU16[$arrayidx >> 1] | 0;
    if (($conv73 & 64512 | 0) != 56320) {
     $retval$4 = 2;
     break L4;
    }
    if (($$pre64 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $retval$4 = 1;
     break L4;
    }
    $and85 = $conv & 960;
    if ((($and85 << 10) + 65536 | $conv << 10 & 64512 | $conv73 & 1023) >>> 0 > $Maxcode >>> 0) {
     $retval$4 = 2;
     break L4;
    }
    HEAP32[$frm_nxt >> 2] = $arrayidx;
    $add101 = ($and85 >>> 6) + 1 | 0;
    $17 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $add101 >>> 2 | 240;
    $19 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $19 + 1;
    HEAP8[$19 >> 0] = $conv >>> 2 & 15 | $add101 << 4 & 48 | 128;
    $21 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $conv << 4 & 48 | $conv73 >>> 6 & 15 | 128;
    $22 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $22 + 1;
    HEAP8[$22 >> 0] = $conv73 & 63 | 128;
   } while (0);
   $incdec$ptr168 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr168;
   $2 = $incdec$ptr168;
  }
 } while (0);
 return $retval$4 | 0;
}

function _ar2ReadMarkerSet($filename, $ext, $pattHandle) {
 $filename = $filename | 0;
 $ext = $ext | 0;
 $pattHandle = $pattHandle | 0;
 var $0 = 0, $1 = 0, $4 = 0, $9 = 0, $buf = 0, $buf1 = 0, $call2 = 0, $call22 = 0, $call3 = 0, $call42 = 0, $i$0 = 0, $j$0 = 0, $markerSet$0 = 0, $namebuf = 0, $num = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1088);
 $vararg_buffer15 = sp + 1072 | 0;
 $vararg_buffer12 = sp + 1064 | 0;
 $vararg_buffer9 = sp + 1056 | 0;
 $vararg_buffer7 = sp + 1048 | 0;
 $vararg_buffer4 = sp + 1040 | 0;
 $vararg_buffer2 = sp + 1032 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $buf = sp + 768 | 0;
 $buf1 = sp + 512 | 0;
 $namebuf = sp;
 HEAP32[$vararg_buffer >> 2] = $filename;
 HEAP32[$vararg_buffer + 4 >> 2] = $ext;
 _sprintf($namebuf, 21862, $vararg_buffer) | 0;
 $call2 = _fopen($namebuf, 21868) | 0;
 if (!$call2) $retval$0 = 0; else {
  $call3 = _malloc(8) | 0;
  if (!$call3) {
   _arLog(0, 3, 21902, $vararg_buffer2);
   _exit(1);
  }
  L6 : do if (_get_buff($buf, $call2) | 0) {
   $num = $call3 + 4 | 0;
   HEAP32[$vararg_buffer4 >> 2] = $num;
   if ((_sscanf($buf, 21919, $vararg_buffer4) | 0) != 1) {
    _free($call3);
    $markerSet$0 = 0;
    break;
   }
   $0 = HEAP32[$num >> 2] | 0;
   if (($0 | 0) < 1) {
    _free($call3);
    $markerSet$0 = 0;
    break;
   }
   $call22 = _malloc($0 * 56 | 0) | 0;
   HEAP32[$call3 >> 2] = $call22;
   if (!$call22) {
    _arLog(0, 3, 21902, $vararg_buffer7);
    _exit(1);
   }
   $1 = $0;
   $i$0 = 0;
   L18 : while (1) {
    if (($i$0 | 0) >= ($1 | 0)) {
     $markerSet$0 = $call3;
     break L6;
    }
    if (!(_get_buff($buf, $call2) | 0)) {
     label = 15;
     break;
    }
    HEAP32[$vararg_buffer9 >> 2] = $buf1;
    if ((_sscanf($buf, 21946, $vararg_buffer9) | 0) != 1) {
     label = 17;
     break;
    }
    $call42 = _arPattLoad($pattHandle, $buf1) | 0;
    $4 = HEAP32[$call3 >> 2] | 0;
    HEAP32[$4 + ($i$0 * 56 | 0) + 4 >> 2] = $call42;
    if (($call42 | 0) < 0) {
     label = 19;
     break;
    }
    if (!(_get_buff($buf, $call2) | 0)) {
     label = 21;
     break;
    }
    HEAP32[$vararg_buffer12 >> 2] = (HEAP32[$call3 >> 2] | 0) + ($i$0 * 56 | 0);
    if ((_sscanf($buf, 21821, $vararg_buffer12) | 0) != 1) {
     label = 24;
     break;
    }
    $j$0 = 0;
    while (1) {
     if ($j$0 >>> 0 >= 3) break;
     if (!(_get_buff($buf, $call2) | 0)) {
      label = 27;
      break L18;
     }
     $9 = HEAP32[$call3 >> 2] | 0;
     HEAP32[$vararg_buffer15 >> 2] = $9 + ($i$0 * 56 | 0) + 8 + ($j$0 << 4);
     HEAP32[$vararg_buffer15 + 4 >> 2] = $9 + ($i$0 * 56 | 0) + 8 + ($j$0 << 4) + 4;
     HEAP32[$vararg_buffer15 + 8 >> 2] = $9 + ($i$0 * 56 | 0) + 8 + ($j$0 << 4) + 8;
     HEAP32[$vararg_buffer15 + 12 >> 2] = $9 + ($i$0 * 56 | 0) + 8 + ($j$0 << 4) + 12;
     if ((_sscanf($buf, 22112, $vararg_buffer15) | 0) == 4) $j$0 = $j$0 + 1 | 0; else {
      label = 29;
      break L18;
     }
    }
    $1 = HEAP32[$num >> 2] | 0;
    $i$0 = $i$0 + 1 | 0;
   }
   if ((label | 0) == 15) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 17) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 19) {
    _free($4);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 21) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 24) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 27) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   } else if ((label | 0) == 29) {
    _free(HEAP32[$call3 >> 2] | 0);
    _free($call3);
    $markerSet$0 = 0;
    break;
   }
  } else {
   _free($call3);
   $markerSet$0 = 0;
  } while (0);
  _fclose($call2) | 0;
  $retval$0 = $markerSet$0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$sink = 0, $0 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $conv14 = 0, $conv142 = 0, $conv145 = 0, $conv36 = 0, $conv80 = 0, $or = 0, $or164 = 0, $or164$sink = 0, $or95 = 0, $retval$9 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if ($mode & 4) {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  $sub$ptr$lhs$cast = $frm_end;
  if (((($sub$ptr$lhs$cast - $0 | 0) > 2 ? (HEAP8[$0 >> 0] | 0) == -17 : 0) ? (HEAP8[$0 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[$0 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[$frm_nxt >> 2] = $0 + 3;
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
 } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $frm_end;
 L9 : while (1) {
  $4 = HEAP32[$frm_nxt >> 2] | 0;
  if ($4 >>> 0 >= $frm_end >>> 0) {
   $retval$9 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt >> 2] | 0;
  if ($5 >>> 0 >= $to_end >>> 0) {
   $retval$9 = 1;
   break;
  }
  $6 = HEAP8[$4 >> 0] | 0;
  $conv14 = $6 & 255;
  do if ($6 << 24 >> 24 > -1) if ($conv14 >>> 0 > $Maxcode >>> 0) {
   $retval$9 = 2;
   break L9;
  } else {
   $$sink = 1;
   $or164$sink = $conv14;
  } else {
   if (($6 & 255) < 194) {
    $retval$9 = 2;
    break L9;
   }
   if (($6 & 255) < 224) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 2) {
     $retval$9 = 1;
     break L9;
    }
    $conv36 = HEAPU8[$4 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L9;
    }
    $or = $conv36 & 63 | $conv14 << 6 & 1984;
    if ($or >>> 0 > $Maxcode >>> 0) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 2;
     $or164$sink = $or;
     break;
    }
   }
   if (($6 & 255) < 240) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 3) {
     $retval$9 = 1;
     break L9;
    }
    $8 = HEAP8[$4 + 1 >> 0] | 0;
    $9 = HEAP8[$4 + 2 >> 0] | 0;
    switch ($6 << 24 >> 24) {
    case -32:
     {
      if (($8 & -32) << 24 >> 24 != -96) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($8 & -32) << 24 >> 24 != -128) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($8 & -64) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L9;
     }
    }
    $conv80 = $9 & 255;
    if (($conv80 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L9;
    }
    $or95 = ($8 & 63) << 6 | $conv14 << 12 & 61440 | $conv80 & 63;
    if ($or95 >>> 0 > $Maxcode >>> 0) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 3;
     $or164$sink = $or95;
     break;
    }
   }
   if (($6 & 255) >= 245) {
    $retval$9 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 4) {
    $retval$9 = 1;
    break L9;
   }
   $14 = HEAP8[$4 + 1 >> 0] | 0;
   $15 = HEAP8[$4 + 2 >> 0] | 0;
   $16 = HEAP8[$4 + 3 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case -16:
    {
     if (($14 + 112 & 255) >= 48) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($14 & -16) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($14 & -64) << 24 >> 24 != -128) {
     $retval$9 = 2;
     break L9;
    }
   }
   $conv142 = $15 & 255;
   if (($conv142 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L9;
   }
   $conv145 = $16 & 255;
   if (($conv145 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L9;
   }
   $or164 = ($14 & 63) << 12 | $conv14 << 18 & 1835008 | $conv142 << 6 & 4032 | $conv145 & 63;
   if ($or164 >>> 0 > $Maxcode >>> 0) {
    $retval$9 = 2;
    break L9;
   } else {
    $$sink = 4;
    $or164$sink = $or164;
   }
  } while (0);
  HEAP32[$5 >> 2] = $or164$sink;
  HEAP32[$frm_nxt >> 2] = $4 + $$sink;
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
 }
 return $retval$9 | 0;
}

function _arith_decode($cinfo, $st) {
 $cinfo = $cinfo | 0;
 $st = $st | 0;
 var $$lcssa68 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $7 = 0, $a = 0, $add = 0, $and46 = 0, $and66 = 0, $bytes_in_buffer$i = 0, $bytes_in_buffer$i52 = 0, $c = 0, $c35$pre$phiZ2D = 0, $conv = 0, $conv$i = 0, $ct = 0, $data$0 = 0, $data$0$ph = 0, $dec = 0, $inc = 0, $shl25 = 0, $shl34 = 0, $shr = 0, $shr30 = 0, $shr79 = 0, $src1$i = 0, $sub = 0, $sv$0 = 0, $unread_marker = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $a = $0 + 16 | 0;
 $1 = HEAP32[$a >> 2] | 0;
 $ct = $0 + 20 | 0;
 if (($1 | 0) < 32768) {
  $unread_marker = $cinfo + 440 | 0;
  $src1$i = $cinfo + 24 | 0;
  $c = $0 + 12 | 0;
  $2 = HEAP32[$ct >> 2] | 0;
  while (1) {
   $dec = $2 + -1 | 0;
   HEAP32[$ct >> 2] = $dec;
   if (($2 | 0) < 1) {
    if (!(HEAP32[$unread_marker >> 2] | 0)) {
     $4 = HEAP32[$src1$i >> 2] | 0;
     $bytes_in_buffer$i = $4 + 4 | 0;
     if ((HEAP32[$bytes_in_buffer$i >> 2] | 0) == 0 ? (FUNCTION_TABLE_ii[HEAP32[$4 + 12 >> 2] & 127]($cinfo) | 0) == 0 : 0) {
      $7 = HEAP32[$cinfo >> 2] | 0;
      HEAP32[$7 + 20 >> 2] = 25;
      FUNCTION_TABLE_vi[HEAP32[$7 >> 2] & 255]($cinfo);
     }
     HEAP32[$bytes_in_buffer$i >> 2] = (HEAP32[$bytes_in_buffer$i >> 2] | 0) + -1;
     $10 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $10 + 1;
     $11 = HEAP8[$10 >> 0] | 0;
     $conv$i = $11 & 255;
     L13 : do if ($11 << 24 >> 24 == -1) {
      L15 : while (1) {
       $12 = HEAP32[$src1$i >> 2] | 0;
       $bytes_in_buffer$i52 = $12 + 4 | 0;
       if ((HEAP32[$bytes_in_buffer$i52 >> 2] | 0) == 0 ? (FUNCTION_TABLE_ii[HEAP32[$12 + 12 >> 2] & 127]($cinfo) | 0) == 0 : 0) {
        $15 = HEAP32[$cinfo >> 2] | 0;
        HEAP32[$15 + 20 >> 2] = 25;
        FUNCTION_TABLE_vi[HEAP32[$15 >> 2] & 255]($cinfo);
       }
       HEAP32[$bytes_in_buffer$i52 >> 2] = (HEAP32[$bytes_in_buffer$i52 >> 2] | 0) + -1;
       $18 = HEAP32[$12 >> 2] | 0;
       HEAP32[$12 >> 2] = $18 + 1;
       $19 = HEAP8[$18 >> 0] | 0;
       switch ($19 << 24 >> 24) {
       case 0:
        {
         $data$0$ph = 255;
         break L13;
         break;
        }
       case -1:
        break;
       default:
        break L15;
       }
      }
      HEAP32[$unread_marker >> 2] = $19 & 255;
      $data$0$ph = 0;
     } else $data$0$ph = $conv$i; while (0);
     $21 = HEAP32[$ct >> 2] | 0;
     $data$0 = $data$0$ph;
    } else {
     $21 = $dec;
     $data$0 = 0;
    }
    HEAP32[$c >> 2] = HEAP32[$c >> 2] << 8 | $data$0;
    $add = $21 + 8 | 0;
    HEAP32[$ct >> 2] = $add;
    if (($21 | 0) < -8) {
     $inc = $21 + 9 | 0;
     HEAP32[$ct >> 2] = $inc;
     if (!$inc) {
      HEAP32[$a >> 2] = 32768;
      $27 = 0;
     } else $27 = $inc;
    } else $27 = $add;
   } else $27 = $dec;
   $shl25 = HEAP32[$a >> 2] << 1;
   HEAP32[$a >> 2] = $shl25;
   if (($shl25 | 0) < 32768) $2 = $27; else {
    $$lcssa68 = $shl25;
    $25 = $27;
    $c35$pre$phiZ2D = $c;
    break;
   }
  }
 } else {
  $$lcssa68 = $1;
  $25 = HEAP32[$ct >> 2] | 0;
  $c35$pre$phiZ2D = $0 + 12 | 0;
 }
 $conv = HEAPU8[$st >> 0] | 0;
 $24 = HEAP32[1840 + (($conv & 127) << 2) >> 2] | 0;
 $shr = $24 >> 8;
 $shr30 = $24 >> 16;
 $sub = $$lcssa68 - $shr30 | 0;
 HEAP32[$a >> 2] = $sub;
 $shl34 = $sub << $25;
 $26 = HEAP32[$c35$pre$phiZ2D >> 2] | 0;
 if (($26 | 0) >= ($shl34 | 0)) {
  HEAP32[$c35$pre$phiZ2D >> 2] = $26 - $shl34;
  HEAP32[$a >> 2] = $shr30;
  $and46 = $conv & 128;
  if (($sub | 0) < ($shr30 | 0)) {
   HEAP8[$st >> 0] = $and46 ^ $shr;
   $sv$0 = $conv;
   $shr79 = $sv$0 >> 7;
   return $shr79 | 0;
  } else {
   HEAP8[$st >> 0] = $and46 ^ $24;
   $sv$0 = $conv ^ 128;
   $shr79 = $sv$0 >> 7;
   return $shr79 | 0;
  }
 }
 if (($sub | 0) >= 32768) {
  $sv$0 = $conv;
  $shr79 = $sv$0 >> 7;
  return $shr79 | 0;
 }
 $and66 = $conv & 128;
 if (($sub | 0) < ($shr30 | 0)) {
  HEAP8[$st >> 0] = $and66 ^ $24;
  $sv$0 = $conv ^ 128;
  $shr79 = $sv$0 >> 7;
  return $shr79 | 0;
 } else {
  HEAP8[$st >> 0] = $and66 ^ $shr;
  $sv$0 = $conv;
  $shr79 = $sv$0 >> 7;
  return $shr79 | 0;
 }
 return 0;
}

function _create_colorindex($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $7 = 0, $8 = 0, $arrayidx29$us = 0, $arrayidx7$us = 0, $blksize$059 = 0, $blksize$059$us = 0, $call = 0, $cmp = 0, $colorindex = 0, $conv = 0, $conv$us = 0, $div = 0, $div$i48 = 0, $div$i48$us = 0, $div$us = 0, $i$058 = 0, $i$058$us = 0, $inc = 0, $inc$us = 0, $inc37 = 0, $inc37$us = 0, $j$053 = 0, $j$053$us = 0, $j$156$us = 0, $k$054 = 0, $k$054$us = 0, $k$1$lcssa = 0, $k$1$lcssa$us = 0, $mul3$i = 0, $mul3$i$us = 0, $out_color_components = 0, $sub = 0, $sub$us = 0, $val$055 = 0, $val$055$us = 0, $val$1$lcssa = 0, $val$1$lcssa$us = 0, $val$151 = 0, $val$151$us = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $cmp = (HEAP32[$cinfo + 88 >> 2] | 0) == 1;
 HEAP32[$0 + 28 >> 2] = $cmp & 1;
 $out_color_components = $cinfo + 120 | 0;
 $call = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$cinfo + 4 >> 2] | 0) + 8 >> 2] & 15]($cinfo, 1, $cmp ? 766 : 256, HEAP32[$out_color_components >> 2] | 0) | 0;
 $colorindex = $0 + 24 | 0;
 HEAP32[$colorindex >> 2] = $call;
 $5 = HEAP32[$0 + 20 >> 2] | 0;
 if ((HEAP32[$out_color_components >> 2] | 0) <= 0) return;
 if (!$cmp) {
  $16 = $call;
  $blksize$059 = $5;
  $i$058 = 0;
  while (1) {
   $15 = HEAP32[$0 + 32 + ($i$058 << 2) >> 2] | 0;
   $div = ($blksize$059 | 0) / ($15 | 0) | 0;
   $17 = HEAP32[$16 + ($i$058 << 2) >> 2] | 0;
   $sub = $15 + -1 | 0;
   $mul3$i = $sub << 1;
   $j$053 = 0;
   $k$054 = ($15 + 254 | 0) / ($mul3$i | 0) | 0;
   $val$055 = 0;
   while (1) {
    if (($j$053 | 0) > ($k$054 | 0)) {
     $val$151 = $val$055;
     while (1) {
      $inc = $val$151 + 1 | 0;
      $div$i48 = ((($inc << 1 | 1) * 255 | 0) + $sub | 0) / ($mul3$i | 0) | 0;
      if (($j$053 | 0) > ($div$i48 | 0)) $val$151 = $inc; else {
       $k$1$lcssa = $div$i48;
       $val$1$lcssa = $inc;
       break;
      }
     }
    } else {
     $k$1$lcssa = $k$054;
     $val$1$lcssa = $val$055;
    }
    $conv = (Math_imul($val$1$lcssa, $div) | 0) & 255;
    HEAP8[$17 + $j$053 >> 0] = $conv;
    $j$053 = $j$053 + 1 | 0;
    if (($j$053 | 0) == 256) break; else {
     $k$054 = $k$1$lcssa;
     $val$055 = $val$1$lcssa;
    }
   }
   $inc37 = $i$058 + 1 | 0;
   if (($inc37 | 0) >= (HEAP32[$out_color_components >> 2] | 0)) break;
   $16 = HEAP32[$colorindex >> 2] | 0;
   $blksize$059 = $div;
   $i$058 = $inc37;
  }
  return;
 }
 $8 = $call;
 $blksize$059$us = $5;
 $i$058$us = 0;
 while (1) {
  $7 = HEAP32[$0 + 32 + ($i$058$us << 2) >> 2] | 0;
  $div$us = ($blksize$059$us | 0) / ($7 | 0) | 0;
  $arrayidx7$us = $8 + ($i$058$us << 2) | 0;
  HEAP32[$arrayidx7$us >> 2] = (HEAP32[$arrayidx7$us >> 2] | 0) + 255;
  $11 = HEAP32[(HEAP32[$colorindex >> 2] | 0) + ($i$058$us << 2) >> 2] | 0;
  $sub$us = $7 + -1 | 0;
  $mul3$i$us = $sub$us << 1;
  $j$053$us = 0;
  $k$054$us = ($7 + 254 | 0) / ($mul3$i$us | 0) | 0;
  $val$055$us = 0;
  while (1) {
   if (($j$053$us | 0) > ($k$054$us | 0)) {
    $val$151$us = $val$055$us;
    while (1) {
     $inc$us = $val$151$us + 1 | 0;
     $div$i48$us = ((($inc$us << 1 | 1) * 255 | 0) + $sub$us | 0) / ($mul3$i$us | 0) | 0;
     if (($j$053$us | 0) > ($div$i48$us | 0)) $val$151$us = $inc$us; else {
      $k$1$lcssa$us = $div$i48$us;
      $val$1$lcssa$us = $inc$us;
      break;
     }
    }
   } else {
    $k$1$lcssa$us = $k$054$us;
    $val$1$lcssa$us = $val$055$us;
   }
   $conv$us = (Math_imul($val$1$lcssa$us, $div$us) | 0) & 255;
   HEAP8[$11 + $j$053$us >> 0] = $conv$us;
   $j$053$us = $j$053$us + 1 | 0;
   if (($j$053$us | 0) == 256) break; else {
    $k$054$us = $k$1$lcssa$us;
    $val$055$us = $val$1$lcssa$us;
   }
  }
  $arrayidx29$us = $11 + 255 | 0;
  $j$156$us = 1;
  do {
   HEAP8[$11 + (0 - $j$156$us) >> 0] = HEAP8[$11 >> 0] | 0;
   HEAP8[$11 + ($j$156$us + 255) >> 0] = HEAP8[$arrayidx29$us >> 0] | 0;
   $j$156$us = $j$156$us + 1 | 0;
  } while (($j$156$us | 0) != 256);
  $inc37$us = $i$058$us + 1 | 0;
  if (($inc37$us | 0) >= (HEAP32[$out_color_components >> 2] | 0)) break;
  $8 = HEAP32[$colorindex >> 2] | 0;
  $blksize$059$us = $div$us;
  $i$058$us = $inc37$us;
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $$pre$phiZ2D = 0, $Names = 0, $Result$1 = 0, $Result$113 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call16 = 0, $call17 = 0, $call18 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 do if ($call << 24 >> 24 != 85) {
  if (($call + -49 & 255) < 9) {
   $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   label = 12;
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32153);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0)) {
   $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   label = 12;
   break;
  }
  $Names = $this + 8 | 0;
  $call16 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   $call17 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call17) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call18;
   if (!$call18) {
    label = 10;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp$byval_copy);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 9;
    break;
   }
  }
  if ((label | 0) == 9) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp$byval_copy, $this, $call16);
   $$pre$phiZ2D = $call17;
   $Result$113 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
   label = 14;
   break;
  } else if ((label | 0) == 10) {
   $retval$2 = 0;
   break;
  }
 } else {
  $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  label = 12;
 } while (0);
 if ((label | 0) == 12) if (!$Result$1) $retval$2 = 0; else {
  $$pre$phiZ2D = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $Result$113 = $Result$1;
  label = 14;
 }
 if ((label | 0) == 14) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($$pre$phiZ2D, $Result$113) | 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _decode_mcu_DC_refine_64($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $$in = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $23 = 0, $26 = 0, $28 = 0, $4 = 0, $bits_left$0$lcssa = 0, $bits_left$036 = 0, $bits_left$1 = 0, $bits_left$i$i = 0, $bits_left13 = 0, $bits_left22 = 0, $blkn$034 = 0, $blocks_in_MCU = 0, $br_state = 0, $bytes_in_buffer10 = 0, $ci$014$i = 0, $comps_in_scan$i = 0, $discarded_bytes$i$i = 0, $get_buffer$0$lcssa = 0, $get_buffer$035 = 0, $get_buffer$1 = 0, $get_buffer11 = 0, $get_buffer21 = 0, $restart_interval = 0, $restarts_to_go = 0, $restarts_to_go40 = 0, $retval$0 = 0, $shl = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $br_state = sp;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0 ? ($restarts_to_go = $0 + 44 | 0, (HEAP32[$restarts_to_go >> 2] | 0) == 0) : 0) {
  $bits_left$i$i = $0 + 16 | 0;
  $4 = HEAP32[$cinfo + 464 >> 2] | 0;
  $discarded_bytes$i$i = $4 + 24 | 0;
  HEAP32[$discarded_bytes$i$i >> 2] = (HEAP32[$discarded_bytes$i$i >> 2] | 0) + ((HEAP32[$bits_left$i$i >> 2] | 0) / 8 | 0);
  HEAP32[$bits_left$i$i >> 2] = 0;
  if (!(FUNCTION_TABLE_ii[HEAP32[$4 + 8 >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $comps_in_scan$i = $cinfo + 340 | 0;
  if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
   $ci$014$i = 0;
   do {
    HEAP32[$0 + 24 + ($ci$014$i << 2) >> 2] = 0;
    $ci$014$i = $ci$014$i + 1 | 0;
   } while (($ci$014$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$restarts_to_go >> 2] = HEAP32[$restart_interval >> 2];
  if (!(HEAP32[$cinfo + 440 >> 2] | 0)) HEAP32[$0 + 40 >> 2] = 0;
 }
 HEAP32[$br_state + 16 >> 2] = $cinfo;
 $src = $cinfo + 24 | 0;
 $11 = HEAP32[$src >> 2] | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$br_state >> 2] = $12;
 $14 = HEAP32[$11 + 4 >> 2] | 0;
 $bytes_in_buffer10 = $br_state + 4 | 0;
 HEAP32[$bytes_in_buffer10 >> 2] = $14;
 $get_buffer11 = $0 + 12 | 0;
 $15 = HEAP32[$get_buffer11 >> 2] | 0;
 $bits_left13 = $0 + 16 | 0;
 $16 = HEAP32[$bits_left13 >> 2] | 0;
 $shl = 1 << HEAP32[$cinfo + 424 >> 2];
 $blocks_in_MCU = $cinfo + 368 | 0;
 do if ((HEAP32[$blocks_in_MCU >> 2] | 0) > 0) {
  $get_buffer21 = $br_state + 8 | 0;
  $bits_left22 = $br_state + 12 | 0;
  $bits_left$036 = $16;
  $blkn$034 = 0;
  $get_buffer$035 = $15;
  while (1) {
   if (($bits_left$036 | 0) < 1) {
    if (!(_jpeg_fill_bit_buffer($br_state, $get_buffer$035, $bits_left$036, 1) | 0)) {
     $retval$0 = 0;
     label = 19;
     break;
    }
    $bits_left$1 = HEAP32[$bits_left22 >> 2] | 0;
    $get_buffer$1 = HEAP32[$get_buffer21 >> 2] | 0;
   } else {
    $bits_left$1 = $bits_left$036;
    $get_buffer$1 = $get_buffer$035;
   }
   $bits_left$036 = $bits_left$1 + -1 | 0;
   if (1 << $bits_left$036 & $get_buffer$1 | 0) {
    $23 = HEAP32[$MCU_data + ($blkn$034 << 2) >> 2] | 0;
    HEAP16[$23 >> 1] = $shl | (HEAPU16[$23 >> 1] | 0);
   }
   $blkn$034 = $blkn$034 + 1 | 0;
   if (($blkn$034 | 0) >= (HEAP32[$blocks_in_MCU >> 2] | 0)) {
    label = 17;
    break;
   } else $get_buffer$035 = $get_buffer$1;
  }
  if ((label | 0) == 17) {
   $$in = HEAP32[$src >> 2] | 0;
   $26 = HEAP32[$br_state >> 2] | 0;
   $28 = HEAP32[$bytes_in_buffer10 >> 2] | 0;
   $bits_left$0$lcssa = $bits_left$036;
   $get_buffer$0$lcssa = $get_buffer$1;
   break;
  } else if ((label | 0) == 19) {
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } else {
  $$in = $11;
  $26 = $12;
  $28 = $14;
  $bits_left$0$lcssa = $16;
  $get_buffer$0$lcssa = $15;
 } while (0);
 HEAP32[$$in >> 2] = $26;
 HEAP32[$$in + 4 >> 2] = $28;
 HEAP32[$get_buffer11 >> 2] = $get_buffer$0$lcssa;
 HEAP32[$bits_left13 >> 2] = $bits_left$0$lcssa;
 $restarts_to_go40 = $0 + 44 | 0;
 HEAP32[$restarts_to_go40 >> 2] = (HEAP32[$restarts_to_go40 >> 2] | 0) + -1;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($this) {
 $this = $this | 0;
 var $Arg10 = 0, $Names = 0, $call12 = 0, $call29 = 0, $call3 = 0, $call32 = 0, $call4 = 0, $call8 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Arg10 = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 88:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (!$call3) $retval$5 = 0; else {
    $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    STACKTOP = sp;
    return ($call4 ? $call3 : 0) | 0;
   }
   break;
  }
 case 74:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $Names = $this + 8 | 0;
   $call8 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 9;
     break;
    }
    $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$Arg10 >> 2] = $call12;
    if (!$call12) {
     label = 8;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Arg10);
   }
   if ((label | 0) == 8) {
    $retval$5 = 0;
    break L1;
   } else if ((label | 0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Arg10, $this, $call8);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $Arg10) | 0;
    break L1;
   }
   break;
  }
 case 76:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 != 90) {
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
   }
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (!$call29) $retval$5 = 0; else {
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    $retval$5 = $call32 ? $call29 : 0;
   }
   break;
  }
 default:
  $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$5 | 0;
}

function _jpeg_start_decompress($cinfo) {
 $cinfo = $cinfo | 0;
 var $$pre34$i = 0, $$pre34$i33 = 0, $0 = 0, $12 = 0, $15 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $4 = 0, $40 = 0, $8 = 0, $call = 0, $global_state = 0, $inc = 0, $inputctl = 0, $main$i = 0, $output_height$i = 0, $output_scanline4$i = 0, $pass_counter = 0, $pass_limit = 0, $progress = 0, $progress$i = 0, $retval$2 = 0, $total_iMCU_rows = 0, label = 0;
 $global_state = $cinfo + 20 | 0;
 $0 = HEAP32[$global_state >> 2] | 0;
 L1 : do switch ($0 | 0) {
 case 202:
  {
   _jinit_master_decompress($cinfo);
   if (!(HEAP32[$cinfo + 64 >> 2] | 0)) {
    HEAP32[$global_state >> 2] = 203;
    label = 6;
    break L1;
   }
   HEAP32[$global_state >> 2] = 207;
   $retval$2 = 1;
   return $retval$2 | 0;
  }
 case 203:
  {
   label = 6;
   break;
  }
 case 204:
  {
   $$pre34$i33 = $cinfo + 444 | 0;
   break;
  }
 default:
  {
   $15 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$15 + 20 >> 2] = 21;
   HEAP32[$15 + 24 >> 2] = $0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   label = 17;
  }
 } while (0);
 if ((label | 0) == 6) {
  $inputctl = $cinfo + 460 | 0;
  L11 : do if (HEAP32[(HEAP32[$inputctl >> 2] | 0) + 16 >> 2] | 0) {
   $progress = $cinfo + 8 | 0;
   $total_iMCU_rows = $cinfo + 332 | 0;
   $4 = HEAP32[$progress >> 2] | 0;
   L13 : while (1) {
    if ($4 | 0) FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($cinfo);
    $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$inputctl >> 2] >> 2] & 127]($cinfo) | 0;
    switch ($call | 0) {
    case 2:
     {
      break L11;
      break;
     }
    case 0:
     {
      $retval$2 = $call;
      break L13;
      break;
     }
    default:
     {}
    }
    $8 = HEAP32[$progress >> 2] | 0;
    if (($call | 2 | 0) == 3 & ($8 | 0) != 0 ? ($pass_counter = $8 + 4 | 0, $inc = (HEAP32[$pass_counter >> 2] | 0) + 1 | 0, HEAP32[$pass_counter >> 2] = $inc, $pass_limit = $8 + 8 | 0, $12 = HEAP32[$pass_limit >> 2] | 0, ($inc | 0) >= ($12 | 0)) : 0) HEAP32[$pass_limit >> 2] = (HEAP32[$total_iMCU_rows >> 2] | 0) + $12;
    $4 = $8;
   }
   return $retval$2 | 0;
  } while (0);
  HEAP32[$cinfo + 152 >> 2] = HEAP32[$cinfo + 144 >> 2];
  label = 17;
 }
 if ((label | 0) == 17) {
  $$pre34$i = $cinfo + 444 | 0;
  if ((HEAP32[$global_state >> 2] | 0) == 204) $$pre34$i33 = $$pre34$i; else {
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$$pre34$i >> 2] >> 2] & 255]($cinfo);
   HEAP32[$cinfo + 140 >> 2] = 0;
   HEAP32[$global_state >> 2] = 204;
   $$pre34$i33 = $$pre34$i;
  }
 }
 $20 = HEAP32[$$pre34$i33 >> 2] | 0;
 L29 : do if (HEAP32[$20 + 8 >> 2] | 0) {
  $output_scanline4$i = $cinfo + 140 | 0;
  $output_height$i = $cinfo + 116 | 0;
  $progress$i = $cinfo + 8 | 0;
  $main$i = $cinfo + 448 | 0;
  $23 = HEAP32[$output_scanline4$i >> 2] | 0;
  $40 = $20;
  L31 : while (1) {
   $22 = HEAP32[$output_height$i >> 2] | 0;
   if ($23 >>> 0 < $22 >>> 0) {
    $27 = $23;
    $28 = $22;
    do {
     $26 = HEAP32[$progress$i >> 2] | 0;
     if (!$26) $32 = $27; else {
      HEAP32[$26 + 4 >> 2] = $27;
      HEAP32[$26 + 8 >> 2] = $28;
      FUNCTION_TABLE_vi[HEAP32[$26 >> 2] & 255]($cinfo);
      $32 = HEAP32[$output_scanline4$i >> 2] | 0;
     }
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$main$i >> 2] | 0) + 4 >> 2] & 31]($cinfo, 0, $output_scanline4$i, 0);
     $27 = HEAP32[$output_scanline4$i >> 2] | 0;
     if (($27 | 0) == ($32 | 0)) {
      $retval$2 = 0;
      break L31;
     }
     $28 = HEAP32[$output_height$i >> 2] | 0;
    } while ($27 >>> 0 < $28 >>> 0);
    $33 = HEAP32[$$pre34$i33 >> 2] | 0;
   } else $33 = $40;
   FUNCTION_TABLE_vi[HEAP32[$33 + 4 >> 2] & 255]($cinfo);
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$$pre34$i33 >> 2] >> 2] & 255]($cinfo);
   HEAP32[$output_scanline4$i >> 2] = 0;
   $40 = HEAP32[$$pre34$i33 >> 2] | 0;
   if (!(HEAP32[$40 + 8 >> 2] | 0)) break L29; else $23 = 0;
  }
  return $retval$2 | 0;
 } while (0);
 HEAP32[$global_state >> 2] = (HEAP32[$cinfo + 68 >> 2] | 0) == 0 ? 205 : 206;
 $retval$2 = 1;
 return $retval$2 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i27 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i48 = 0, label = 0;
 $__tab_$i = $__ct + 8 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if ($0) {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $33 = 1;
    break;
   } else {
    $33 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $33 = 1; while (0);
  $5 = HEAP32[$__e >> 2] | 0;
  do if ($5) {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($33) {
    $34 = $5;
    break;
   } else {
    $27 = $5;
    break L1;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   }
  } else label = 15; while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($33) {
    $27 = 0;
    break;
   } else $34 = 0;
  }
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
  if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
   $27 = $34;
   break;
  }
  if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $27 = $34;
   break;
  }
  $17 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i6 = $17 + 12 | 0;
  $18 = HEAP32[$__ninp_$i$i6 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 40 >> 2] & 127]($17) | 0; else {
   HEAP32[$__ninp_$i$i6 >> 2] = $18 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$18 >> 0] | 0) | 0;
  }
 }
 $22 = HEAP32[$__b >> 2] | 0;
 do if ($22) {
  $23 = HEAP32[$22 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i27, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $35 = 1;
   break;
  } else {
   $35 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $35 = 1; while (0);
 do if ($27) {
  $28 = HEAP32[$27 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i13$i$i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i13$i$i48 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i48, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($35) break; else {
   label = 41;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 39;
   break;
  }
 } else label = 39; while (0);
 if ((label | 0) == 39 ? $35 : 0) label = 41;
 if ((label | 0) == 41) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if ($0) {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $34 = 1; while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if ($5) {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($34) {
   $28 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  }
 } else label = 14; while (0);
 if ((label | 0) == 14) if ($34) label = 16; else {
  $28 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $18 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $18 + 12 | 0;
  $19 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] & 127]($18) | 0; else {
   HEAP32[$__ninp_$i$i7 >> 2] = $19 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
  }
  $23 = HEAP32[$__b >> 2] | 0;
  do if ($23) {
   $24 = HEAP32[$23 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 127]($23) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $35 = 1;
    break;
   } else {
    $35 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $35 = 1; while (0);
  do if ($28) {
   $29 = HEAP32[$28 + 12 >> 2] | 0;
   if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$29 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($35) break L22; else break; else {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   }
  } else label = 38; while (0);
  if ((label | 0) == 38 ? !$35 : 0) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if ($0) {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $34 = 1; while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if ($5) {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($34) {
   $28 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  }
 } else label = 14; while (0);
 if ((label | 0) == 14) if ($34) label = 16; else {
  $28 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $retval$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $18 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $18 + 12 | 0;
  $19 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] & 127]($18) | 0; else {
   HEAP32[$__ninp_$i$i7 >> 2] = $19 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$19 >> 0] | 0) | 0;
  }
  $23 = HEAP32[$__b >> 2] | 0;
  do if ($23) {
   $24 = HEAP32[$23 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 127]($23) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $35 = 1;
    break;
   } else {
    $35 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $35 = 1; while (0);
  do if ($28) {
   $29 = HEAP32[$28 + 12 >> 2] | 0;
   if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$29 >> 0] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) if ($35) break L22; else break; else {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   }
  } else label = 38; while (0);
  if ((label | 0) == 38 ? !$35 : 0) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $$pre$phiZ2D = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $Init19 = 0, $OperatorName = 0, $OperatorName15 = 0, $PrintPack = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp17 = 0, $agg$tmp23 = 0, $agg$tmp7 = 0, $agg$tmp9 = 0, $tmpcast17$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $tmpcast17$byval_copy = sp + 56 | 0;
 $PrintPack = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp7 = sp + 48 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp14 = sp + 8 | 0;
 $agg$tmp17 = sp + 40 | 0;
 $agg$tmp23 = sp;
 HEAP32[$PrintPack >> 2] = $S;
 HEAP32[$PrintPack + 4 >> 2] = $this;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 40);
 if (!(HEAP8[$this + 24 >> 0] | 0)) {
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  $OperatorName15 = $this + 16 | 0;
  $23 = $OperatorName15;
  $28 = HEAP32[$23 + 4 >> 2] | 0;
  $29 = $agg$tmp14;
  HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$29 + 4 >> 2] = $28;
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp14 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 31835);
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  $Init19 = $this + 12 | 0;
  if (HEAP32[$Init19 >> 2] | 0) {
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $34 = $OperatorName15;
   $39 = HEAP32[$34 + 4 >> 2] | 0;
   $40 = $agg$tmp23;
   HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$40 + 4 >> 2] = $39;
   HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Init19 >> 2] | 0, $S);
  }
 } else {
  $2 = HEAP32[$this + 12 >> 2] | 0;
  if (!$2) $$pre$phiZ2D = $this + 16 | 0; else {
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2, $S);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $OperatorName = $this + 16 | 0;
   $3 = $OperatorName;
   $8 = HEAP32[$3 + 4 >> 2] | 0;
   $9 = $agg$tmp;
   HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $$pre$phiZ2D = $OperatorName;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 31830);
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  $13 = $$pre$phiZ2D;
  $18 = HEAP32[$13 + 4 >> 2] | 0;
  $19 = $agg$tmp9;
  HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$19 + 4 >> 2] = $18;
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
 STACKTOP = sp;
 return;
}

function _decompress_data($cinfo, $output_buf) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 var $0 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $3 = 0, $31 = 0, $DCT_h_scaled_size = 0, $DCT_v_scaled_size = 0, $block_num$054 = 0, $block_row$058 = 0, $block_rows$0 = 0, $buffer_ptr$055 = 0, $call12 = 0, $ci$061 = 0, $compptr$063 = 0, $idct = 0, $inc41 = 0, $input_iMCU_row = 0, $input_scan_number = 0, $inputctl = 0, $mem = 0, $mul = 0, $num_components = 0, $output_col$056 = 0, $output_iMCU_row = 0, $output_ptr$059 = 0, $output_scan_number = 0, $rem = 0, $retval$0 = 0, $sub = 0, $total_iMCU_rows = 0, $v_samp_factor = 0, $width_in_blocks = 0, label = 0;
 $0 = HEAP32[$cinfo + 452 >> 2] | 0;
 $total_iMCU_rows = $cinfo + 332 | 0;
 $sub = (HEAP32[$total_iMCU_rows >> 2] | 0) + -1 | 0;
 $input_scan_number = $cinfo + 144 | 0;
 $output_scan_number = $cinfo + 152 | 0;
 $inputctl = $cinfo + 460 | 0;
 $input_iMCU_row = $cinfo + 148 | 0;
 $output_iMCU_row = $cinfo + 156 | 0;
 while (1) {
  $2 = HEAP32[$input_scan_number >> 2] | 0;
  $3 = HEAP32[$output_scan_number >> 2] | 0;
  if (($2 | 0) >= ($3 | 0)) {
   if (($2 | 0) != ($3 | 0)) break;
   if ((HEAP32[$input_iMCU_row >> 2] | 0) >>> 0 > (HEAP32[$output_iMCU_row >> 2] | 0) >>> 0) break;
  }
  if (!(FUNCTION_TABLE_ii[HEAP32[HEAP32[$inputctl >> 2] >> 2] & 127]($cinfo) | 0)) {
   $retval$0 = 0;
   label = 20;
   break;
  }
 }
 if ((label | 0) == 20) return $retval$0 | 0;
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) > 0) {
  $mem = $cinfo + 4 | 0;
  $idct = $cinfo + 472 | 0;
  $ci$061 = 0;
  $compptr$063 = HEAP32[$cinfo + 216 >> 2] | 0;
  while (1) {
   if (HEAP32[$compptr$063 + 52 >> 2] | 0) {
    $v_samp_factor = $compptr$063 + 12 | 0;
    $15 = HEAP32[$v_samp_factor >> 2] | 0;
    $mul = Math_imul($15, HEAP32[$output_iMCU_row >> 2] | 0) | 0;
    $call12 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 32 >> 2] & 31]($cinfo, HEAP32[$0 + 72 + ($ci$061 << 2) >> 2] | 0, $mul, $15, 0) | 0;
    if ((HEAP32[$output_iMCU_row >> 2] | 0) >>> 0 < $sub >>> 0) $block_rows$0 = HEAP32[$v_samp_factor >> 2] | 0; else {
     $19 = HEAP32[$v_samp_factor >> 2] | 0;
     $rem = ((HEAP32[$compptr$063 + 32 >> 2] | 0) >>> 0) % ($19 >>> 0) | 0;
     $block_rows$0 = ($rem | 0) == 0 ? $19 : $rem;
    }
    $21 = HEAP32[(HEAP32[$idct >> 2] | 0) + 4 + ($ci$061 << 2) >> 2] | 0;
    if (($block_rows$0 | 0) > 0) {
     $width_in_blocks = $compptr$063 + 28 | 0;
     $DCT_v_scaled_size = $compptr$063 + 40 | 0;
     $DCT_h_scaled_size = $compptr$063 + 36 | 0;
     $23 = HEAP32[$width_in_blocks >> 2] | 0;
     $block_row$058 = 0;
     $output_ptr$059 = HEAP32[$output_buf + ($ci$061 << 2) >> 2] | 0;
     while (1) {
      if (!$23) $31 = 0; else {
       $block_num$054 = 0;
       $buffer_ptr$055 = HEAP32[$call12 + ($block_row$058 << 2) >> 2] | 0;
       $output_col$056 = 0;
       while (1) {
        FUNCTION_TABLE_viiiii[$21 & 63]($cinfo, $compptr$063, $buffer_ptr$055, $output_ptr$059, $output_col$056);
        $block_num$054 = $block_num$054 + 1 | 0;
        $26 = HEAP32[$width_in_blocks >> 2] | 0;
        if ($block_num$054 >>> 0 >= $26 >>> 0) {
         $31 = $26;
         break;
        } else {
         $buffer_ptr$055 = $buffer_ptr$055 + 128 | 0;
         $output_col$056 = (HEAP32[$DCT_h_scaled_size >> 2] | 0) + $output_col$056 | 0;
        }
       }
      }
      $block_row$058 = $block_row$058 + 1 | 0;
      if (($block_row$058 | 0) == ($block_rows$0 | 0)) break; else {
       $23 = $31;
       $output_ptr$059 = $output_ptr$059 + (HEAP32[$DCT_v_scaled_size >> 2] << 2) | 0;
      }
     }
    }
   }
   $ci$061 = $ci$061 + 1 | 0;
   if (($ci$061 | 0) >= (HEAP32[$num_components >> 2] | 0)) break; else $compptr$063 = $compptr$063 + 88 | 0;
  }
 }
 $inc41 = (HEAP32[$output_iMCU_row >> 2] | 0) + 1 | 0;
 HEAP32[$output_iMCU_row >> 2] = $inc41;
 $retval$0 = $inc41 >>> 0 < (HEAP32[$total_iMCU_rows >> 2] | 0) >>> 0 ? 3 : 4;
 return $retval$0 | 0;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i56$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr20 = 0, $call = 0, $call29 = 0, $call62 = 0, $call73 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (HEAP8[$__last_consumed_is_next_ >> 0] | 0) {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   $call = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP32[$__last_consumed_ >> 2] = $call;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 } else {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) $retval$10 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr20 = $__1buf + 1 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr20, $__inxt) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $call29 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call29 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call29;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0; else if ((label | 0) == 17) {
     $retval$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 19;
   } else {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$3 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($__consume) {
     $call73 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0;
     HEAP32[$this + 48 >> 2] = $call73;
    } else {
     $__i56$0 = $__nread$3;
     do {
      if (($__i56$0 | 0) <= 0) break L23;
      $__i56$0 = $__i56$0 + -1 | 0;
      $call62 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__extbuf + $__i56$0 >> 0] | 0) | 0;
     } while ((_ungetc($call62, HEAP32[$__file_ >> 2] | 0) | 0) != -1);
     $retval$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    $retval$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function _jpeg_idct_6x6($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $18 = 0, $19 = 0, $20 = 0, $add = 0, $add$ptr = 0, $add$ptr63 = 0, $add14 = 0, $add32 = 0, $add35 = 0, $add69 = 0, $add7 = 0, $add74 = 0, $add83 = 0, $add86 = 0, $ctr$0123 = 0, $ctr$1119 = 0, $inptr$0120 = 0, $mul13 = 0, $mul19 = 0, $mul23 = 0, $mul27 = 0, $mul29 = 0, $mul6 = 0, $mul68 = 0, $mul73 = 0, $mul80 = 0, $quantptr$0121 = 0, $shl38 = 0, $shl66 = 0, $shl89 = 0, $shr = 0, $sub15 = 0, $sub71 = 0, $sub75 = 0, $workspace = 0, $wsptr$0122 = 0, $wsptr$1118 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $ctr$0123 = 0;
 $inptr$0120 = $coef_block;
 $quantptr$0121 = HEAP32[$compptr + 84 >> 2] | 0;
 $wsptr$0122 = $workspace;
 while (1) {
  $add = Math_imul(HEAP16[$inptr$0120 >> 1] << 13, HEAP32[$quantptr$0121 >> 2] | 0) | 0 | 1024;
  $mul6 = Math_imul((HEAP16[$inptr$0120 + 64 >> 1] | 0) * 5793 | 0, HEAP32[$quantptr$0121 + 128 >> 2] | 0) | 0;
  $add7 = $mul6 + $add | 0;
  $shr = (Math_imul($mul6, -2) | 0) + $add >> 11;
  $mul13 = Math_imul((HEAP16[$inptr$0120 + 32 >> 1] | 0) * 10033 | 0, HEAP32[$quantptr$0121 + 64 >> 2] | 0) | 0;
  $add14 = $mul13 + $add7 | 0;
  $sub15 = $add7 - $mul13 | 0;
  $mul19 = Math_imul(HEAP32[$quantptr$0121 + 32 >> 2] | 0, HEAP16[$inptr$0120 + 16 >> 1] | 0) | 0;
  $mul23 = Math_imul(HEAP32[$quantptr$0121 + 96 >> 2] | 0, HEAP16[$inptr$0120 + 48 >> 1] | 0) | 0;
  $mul27 = Math_imul(HEAP32[$quantptr$0121 + 160 >> 2] | 0, HEAP16[$inptr$0120 + 80 >> 1] | 0) | 0;
  $mul29 = ($mul27 + $mul19 | 0) * 2998 | 0;
  $add32 = $mul29 + ($mul23 + $mul19 << 13) | 0;
  $add35 = $mul29 + ($mul27 - $mul23 << 13) | 0;
  $shl38 = $mul19 - $mul23 - $mul27 << 2;
  HEAP32[$wsptr$0122 >> 2] = $add32 + $add14 >> 11;
  HEAP32[$wsptr$0122 + 120 >> 2] = $add14 - $add32 >> 11;
  HEAP32[$wsptr$0122 + 24 >> 2] = $shl38 + $shr;
  HEAP32[$wsptr$0122 + 96 >> 2] = $shr - $shl38;
  HEAP32[$wsptr$0122 + 48 >> 2] = $add35 + $sub15 >> 11;
  HEAP32[$wsptr$0122 + 72 >> 2] = $sub15 - $add35 >> 11;
  $ctr$0123 = $ctr$0123 + 1 | 0;
  if (($ctr$0123 | 0) == 6) break; else {
   $inptr$0120 = $inptr$0120 + 2 | 0;
   $quantptr$0121 = $quantptr$0121 + 4 | 0;
   $wsptr$0122 = $wsptr$0122 + 4 | 0;
  }
 }
 $add$ptr = $0 + -384 | 0;
 $ctr$1119 = 0;
 $wsptr$1118 = $workspace;
 while (1) {
  $add$ptr63 = (HEAP32[$output_buf + ($ctr$1119 << 2) >> 2] | 0) + $output_col | 0;
  $shl66 = (HEAP32[$wsptr$1118 >> 2] << 13) + 134348800 | 0;
  $mul68 = (HEAP32[$wsptr$1118 + 16 >> 2] | 0) * 5793 | 0;
  $add69 = $shl66 + $mul68 | 0;
  $sub71 = $shl66 - $mul68 - $mul68 | 0;
  $mul73 = (HEAP32[$wsptr$1118 + 8 >> 2] | 0) * 10033 | 0;
  $add74 = $add69 + $mul73 | 0;
  $sub75 = $add69 - $mul73 | 0;
  $18 = HEAP32[$wsptr$1118 + 4 >> 2] | 0;
  $19 = HEAP32[$wsptr$1118 + 12 >> 2] | 0;
  $20 = HEAP32[$wsptr$1118 + 20 >> 2] | 0;
  $mul80 = ($20 + $18 | 0) * 2998 | 0;
  $add83 = $mul80 + ($19 + $18 << 13) | 0;
  $add86 = $mul80 + ($20 - $19 << 13) | 0;
  $shl89 = $18 - $19 - $20 << 13;
  HEAP8[$add$ptr63 >> 0] = HEAP8[$add$ptr + (($add83 + $add74 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 5 >> 0] = HEAP8[$add$ptr + (($add74 - $add83 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 1 >> 0] = HEAP8[$add$ptr + (($shl89 + $sub71 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 4 >> 0] = HEAP8[$add$ptr + (($sub71 - $shl89 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 2 >> 0] = HEAP8[$add$ptr + (($add86 + $sub75 | 0) >>> 18 & 1023) >> 0] | 0;
  HEAP8[$add$ptr63 + 3 >> 0] = HEAP8[$add$ptr + (($sub75 - $add86 | 0) >>> 18 & 1023) >> 0] | 0;
  $ctr$1119 = $ctr$1119 + 1 | 0;
  if (($ctr$1119 | 0) == 6) break; else $wsptr$1118 = $wsptr$1118 + 24 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i58$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr21 = 0, $call = 0, $call30 = 0, $call65 = 0, $call76 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (HEAP8[$__last_consumed_is_next_ >> 0] | 0) {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   $call = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP32[$__last_consumed_ >> 2] = $call;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 } else {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) $retval$10 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr21 = $__1buf + 4 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr21, $__inxt) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $call30 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call30 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call30;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0]; else if ((label | 0) == 17) {
     $retval$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 19;
   } else {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
    $__nread$3 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($__consume) {
     $call76 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0;
     HEAP32[$this + 48 >> 2] = $call76;
    } else {
     $__i58$0 = $__nread$3;
     do {
      if (($__i58$0 | 0) <= 0) break L23;
      $__i58$0 = $__i58$0 + -1 | 0;
      $call65 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$__extbuf + $__i58$0 >> 0] | 0) | 0;
     } while ((_ungetc($call65, HEAP32[$__file_ >> 2] | 0) | 0) != -1);
     $retval$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    $retval$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and58 = 0, $retval$2 = 0, $sub$ptr$sub31 = 0;
 L1 : do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (HEAP8[$__in_units >> 0] | 0) {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if ((($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0) != 0 ? ($4 = HEAP32[$__g_end >> 2] | 0, ($4 - $__g | 0) < 160) : 0) {
   $5 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $4 + 4;
   HEAP32[$4 >> 2] = $5;
   $retval$2 = 0;
  } else $retval$2 = 0;
 } else $retval$2 = -1; else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? ($6 = HEAP8[$__grouping + 11 >> 0] | 0, ($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) : 0) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $retval$2 = -1;
    break;
   }
   $9 = HEAP32[$__g_end >> 2] | 0;
   if (($9 - $__g | 0) >= 160) {
    $retval$2 = 0;
    break;
   }
   $10 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $9 + 4;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$__dc >> 2] = 0;
   $retval$2 = 0;
   break;
  }
  $add$ptr = $__atoms + 32 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub31 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub31 | 0) > 31) $retval$2 = -1; else {
   $12 = HEAP8[10896 + $sub$ptr$sub31 >> 0] | 0;
   switch ($sub$ptr$sub31 | 0) {
   case 24:
   case 25:
    {
     $13 = HEAP32[$__a_end >> 2] | 0;
     if (($13 | 0) != ($__a | 0) ? (HEAP8[$13 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127) : 0) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $13 + 1;
     HEAP8[$13 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     $18 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $18 + 1;
     HEAP8[$18 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $and58 = $12 & 95;
     if (((($and58 | 0) == (HEAP8[$__exp >> 0] | 0) ? (HEAP8[$__exp >> 0] = $and58 | 128, HEAP8[$__in_units >> 0] | 0) : 0) ? (HEAP8[$__in_units >> 0] = 0, $22 = HEAP8[$__grouping + 11 >> 0] | 0, ($22 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $22 & 255) | 0) : 0) ? ($24 = HEAP32[$__g_end >> 2] | 0, ($24 - $__g | 0) < 160) : 0) {
      $25 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $24 + 4;
      HEAP32[$24 >> 2] = $25;
     }
     $26 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $12;
     if (($sub$ptr$sub31 | 0) > 21) {
      $retval$2 = 0;
      break L1;
     }
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
     $retval$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $__ninp_$i$i5 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i47 = 0, label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if ($0) {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $32 = 1;
    break;
   } else {
    $32 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } else $32 = 1; while (0);
  $5 = HEAP32[$__e >> 2] | 0;
  do if ($5) {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($32) {
    $33 = $5;
    break;
   } else {
    $26 = $5;
    break L1;
   } else {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   }
  } else label = 15; while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($32) {
    $26 = 0;
    break;
   } else $33 = 0;
  }
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i) | 0)) {
   $26 = $33;
   break;
  }
  $16 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i5 = $16 + 12 | 0;
  $17 = HEAP32[$__ninp_$i$i5 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] & 127]($16) | 0; else {
   HEAP32[$__ninp_$i$i5 >> 2] = $17 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  }
 }
 $21 = HEAP32[$__b >> 2] | 0;
 do if ($21) {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } else $34 = 1; while (0);
 do if ($26) {
  $27 = HEAP32[$26 + 12 >> 2] | 0;
  if (($27 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $retval$0$i$i13$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $retval$0$i$i13$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i47, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) if ($34) break; else {
   label = 40;
   break;
  } else {
   HEAP32[$__e >> 2] = 0;
   label = 38;
   break;
  }
 } else label = 38; while (0);
 if ((label | 0) == 38 ? $34 : 0) label = 40;
 if ((label | 0) == 40) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function _jpeg_idct_2x4($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr37 = 0, $add$ptr37$1 = 0, $add$ptr37$2 = 0, $add$ptr37$3 = 0, $add18 = 0, $add18$1 = 0, $add21 = 0, $add21$1 = 0, $add25 = 0, $add25$1 = 0, $add39 = 0, $add39$1 = 0, $add39$2 = 0, $add39$3 = 0, $mul = 0, $mul$1 = 0, $mul10 = 0, $mul10$1 = 0, $mul14 = 0, $mul14$1 = 0, $mul16 = 0, $mul16$1 = 0, $mul5 = 0, $mul5$1 = 0, $shl = 0, $shl$1 = 0, $shl6 = 0, $shl6$1 = 0, $sub20 = 0, $sub20$1 = 0, $sub23$1 = 0, $sub27 = 0, $sub27$1 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $mul = Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0;
 $mul5 = Math_imul(HEAP32[$1 + 64 >> 2] | 0, HEAP16[$coef_block + 32 >> 1] | 0) | 0;
 $shl = $mul5 + $mul << 13;
 $shl6 = $mul - $mul5 << 13;
 $mul10 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $mul14 = Math_imul(HEAP32[$1 + 96 >> 2] | 0, HEAP16[$coef_block + 48 >> 1] | 0) | 0;
 $mul16 = ($mul14 + $mul10 | 0) * 4433 | 0;
 $add18 = $mul16 + ($mul10 * 6270 | 0) | 0;
 $sub20 = $mul16 + (Math_imul($mul14, -15137) | 0) | 0;
 $add21 = $add18 + $shl | 0;
 HEAP32[$workspace >> 2] = $add21;
 HEAP32[$workspace + 24 >> 2] = $shl - $add18;
 $add25 = $sub20 + $shl6 | 0;
 HEAP32[$workspace + 8 >> 2] = $add25;
 $sub27 = $shl6 - $sub20 | 0;
 HEAP32[$workspace + 16 >> 2] = $sub27;
 $mul$1 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 $mul5$1 = Math_imul(HEAP32[$1 + 68 >> 2] | 0, HEAP16[$coef_block + 34 >> 1] | 0) | 0;
 $shl$1 = $mul5$1 + $mul$1 << 13;
 $shl6$1 = $mul$1 - $mul5$1 << 13;
 $mul10$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $mul14$1 = Math_imul(HEAP32[$1 + 100 >> 2] | 0, HEAP16[$coef_block + 50 >> 1] | 0) | 0;
 $mul16$1 = ($mul14$1 + $mul10$1 | 0) * 4433 | 0;
 $add18$1 = $mul16$1 + ($mul10$1 * 6270 | 0) | 0;
 $sub20$1 = $mul16$1 + (Math_imul($mul14$1, -15137) | 0) | 0;
 $add21$1 = $add18$1 + $shl$1 | 0;
 HEAP32[$workspace + 4 >> 2] = $add21$1;
 $sub23$1 = $shl$1 - $add18$1 | 0;
 HEAP32[$workspace + 28 >> 2] = $sub23$1;
 $add25$1 = $sub20$1 + $shl6$1 | 0;
 HEAP32[$workspace + 12 >> 2] = $add25$1;
 $sub27$1 = $shl6$1 - $sub20$1 | 0;
 HEAP32[$workspace + 20 >> 2] = $sub27$1;
 $add$ptr = $0 + -384 | 0;
 $add$ptr37 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $add39 = $add21 + 33587200 | 0;
 HEAP8[$add$ptr37 >> 0] = HEAP8[$add$ptr + (($add39 + $add21$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr37 + 1 >> 0] = HEAP8[$add$ptr + (($add39 - $add21$1 | 0) >>> 16 & 1023) >> 0] | 0;
 $add$ptr37$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $add39$1 = $add25 + 33587200 | 0;
 HEAP8[$add$ptr37$1 >> 0] = HEAP8[$add$ptr + (($add39$1 + $add25$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr37$1 + 1 >> 0] = HEAP8[$add$ptr + (($add39$1 - $add25$1 | 0) >>> 16 & 1023) >> 0] | 0;
 $add$ptr37$2 = (HEAP32[$output_buf + 8 >> 2] | 0) + $output_col | 0;
 $add39$2 = $sub27 + 33587200 | 0;
 HEAP8[$add$ptr37$2 >> 0] = HEAP8[$add$ptr + (($add39$2 + $sub27$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr37$2 + 1 >> 0] = HEAP8[$add$ptr + (($add39$2 - $sub27$1 | 0) >>> 16 & 1023) >> 0] | 0;
 $add$ptr37$3 = (HEAP32[$output_buf + 12 >> 2] | 0) + $output_col | 0;
 $add39$3 = (HEAP32[$workspace + 24 >> 2] | 0) + 33587200 | 0;
 HEAP8[$add$ptr37$3 >> 0] = HEAP8[$add$ptr + (($add39$3 + $sub23$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr37$3 + 1 >> 0] = HEAP8[$add$ptr + (($add39$3 - $sub23$1 | 0) >>> 16 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($this, $TagTemplates) {
 $this = $this | 0;
 $TagTemplates = $TagTemplates | 0;
 var $Arg = 0, $Names = 0, $OldParams = 0, $TableEntry = 0, $TemplateParams = 0, $call11 = 0, $call21 = 0, $call32 = 0, $call4 = 0, $ref$tmp = 0, $retval$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $OldParams = sp + 16 | 0;
 $Arg = sp + 12 | 0;
 $TableEntry = sp + 8 | 0;
 $ref$tmp = sp;
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 73) | 0) {
  $TemplateParams = $this + 288 | 0;
  if ($TagTemplates) __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($TemplateParams);
  $Names = $this + 8 | 0;
  $call4 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 16;
    break;
   }
   if ($TagTemplates) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($OldParams, $TemplateParams);
    $call11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$Arg >> 2] = $call11;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($TemplateParams, $OldParams);
    if (!$call11) {
     label = 12;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Arg);
    HEAP32[$TableEntry >> 2] = $call11;
    if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call11) | 0) << 24 >> 24 == 28) {
     __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($ref$tmp, $call11);
     $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
     HEAP32[$TableEntry >> 2] = $call21;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($TemplateParams, $TableEntry);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
   } else {
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$OldParams >> 2] = $call32;
    if (!$call32) {
     label = 15;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $OldParams);
   }
  }
  if ((label | 0) == 12) {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
   $retval$6 = 0;
   break;
  } else if ((label | 0) == 15) {
   $retval$6 = 0;
   break;
  } else if ((label | 0) == 16) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($OldParams, $this, $call4);
   $retval$6 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $OldParams) | 0;
   break;
  }
 } else $retval$6 = 0; while (0);
 STACKTOP = sp;
 return $retval$6 | 0;
}

function _int_upsample($cinfo, $compptr, $input_data, $output_data_ptr) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $input_data = $input_data | 0;
 $output_data_ptr = $output_data_ptr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $add$ptr$us = 0, $add$ptr$us60 = 0, $cmp1131 = 0, $cmp1428 = 0, $conv = 0, $conv6 = 0, $h$029$us$us = 0, $h$029$us$us101 = 0, $inptr$033$us$us = 0, $inptr$033$us$us90 = 0, $inrow$035$us = 0, $inrow$035$us57 = 0, $max_v_samp_factor = 0, $outptr$032$us$us = 0, $outptr$032$us$us91 = 0, $outptr$130$us$us = 0, $outptr$130$us$us100 = 0, $output_width = 0, $outrow$036 = 0, $outrow$036$us = 0, $outrow$036$us56 = 0, $sub = 0, label = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 $1 = HEAP32[$output_data_ptr >> 2] | 0;
 $2 = HEAP32[$compptr + 4 >> 2] | 0;
 $3 = HEAP8[$0 + 140 + $2 >> 0] | 0;
 $conv = $3 & 255;
 $4 = HEAP8[$0 + 150 + $2 >> 0] | 0;
 $conv6 = $4 & 255;
 $max_v_samp_factor = $cinfo + 320 | 0;
 $5 = HEAP32[$max_v_samp_factor >> 2] | 0;
 if (($5 | 0) <= 0) return;
 $output_width = $cinfo + 112 | 0;
 $cmp1428 = $3 << 24 >> 24 != 0;
 $sub = $conv6 + -1 | 0;
 if (($4 & 255) > 1) {
  $9 = ($3 << 24 >> 24 == 0 ? ~$conv : -2) + $conv + 2 | 0;
  $inrow$035$us = 0;
  $outrow$036$us = 0;
  while (1) {
   $10 = HEAP32[$1 + ($outrow$036$us << 2) >> 2] | 0;
   $11 = HEAP32[$output_width >> 2] | 0;
   $add$ptr$us = $10 + $11 | 0;
   if (($11 | 0) > 0) {
    if (!$cmp1428) break;
    $inptr$033$us$us = HEAP32[$input_data + ($inrow$035$us << 2) >> 2] | 0;
    $outptr$032$us$us = $10;
    while (1) {
     _memset($outptr$032$us$us | 0, HEAP8[$inptr$033$us$us >> 0] | 0, $9 | 0) | 0;
     $h$029$us$us = $conv;
     $outptr$130$us$us = $outptr$032$us$us;
     while (1) {
      $outptr$130$us$us = $outptr$130$us$us + 1 | 0;
      if (($h$029$us$us | 0) <= 1) break; else $h$029$us$us = $h$029$us$us + -1 | 0;
     }
     if ($outptr$130$us$us >>> 0 < $add$ptr$us >>> 0) {
      $inptr$033$us$us = $inptr$033$us$us + 1 | 0;
      $outptr$032$us$us = $outptr$130$us$us;
     } else break;
    }
    $12 = HEAP32[$output_width >> 2] | 0;
   } else $12 = $11;
   _jcopy_sample_rows($1, $outrow$036$us, $1, $outrow$036$us + 1 | 0, $sub, $12);
   $outrow$036$us = $outrow$036$us + $conv6 | 0;
   if (($outrow$036$us | 0) >= (HEAP32[$max_v_samp_factor >> 2] | 0)) {
    label = 27;
    break;
   } else $inrow$035$us = $inrow$035$us + 1 | 0;
  }
  if ((label | 0) == 27) return;
  while (1) {}
 }
 if (!$cmp1428) {
  $cmp1131 = (HEAP32[$output_width >> 2] | 0) > 0;
  $outrow$036 = 0;
  while (1) {
   if ($cmp1131) break;
   $outrow$036 = $outrow$036 + $conv6 | 0;
   if (($outrow$036 | 0) >= ($5 | 0)) {
    label = 27;
    break;
   }
  }
  if ((label | 0) == 27) return;
  while (1) {}
 }
 $inrow$035$us57 = 0;
 $outrow$036$us56 = 0;
 while (1) {
  $16 = HEAP32[$1 + ($outrow$036$us56 << 2) >> 2] | 0;
  $17 = HEAP32[$output_width >> 2] | 0;
  $add$ptr$us60 = $16 + $17 | 0;
  if (($17 | 0) > 0) {
   $inptr$033$us$us90 = HEAP32[$input_data + ($inrow$035$us57 << 2) >> 2] | 0;
   $outptr$032$us$us91 = $16;
   while (1) {
    _memset($outptr$032$us$us91 | 0, HEAP8[$inptr$033$us$us90 >> 0] | 0, $conv | 0) | 0;
    $h$029$us$us101 = $conv;
    $outptr$130$us$us100 = $outptr$032$us$us91;
    while (1) {
     $outptr$130$us$us100 = $outptr$130$us$us100 + 1 | 0;
     if (($h$029$us$us101 | 0) <= 1) break; else $h$029$us$us101 = $h$029$us$us101 + -1 | 0;
    }
    if ($outptr$130$us$us100 >>> 0 < $add$ptr$us60 >>> 0) {
     $inptr$033$us$us90 = $inptr$033$us$us90 + 1 | 0;
     $outptr$032$us$us91 = $outptr$130$us$us100;
    } else break;
   }
  }
  $outrow$036$us56 = $outrow$036$us56 + $conv6 | 0;
  if (($outrow$036$us56 | 0) >= (HEAP32[$max_v_samp_factor >> 2] | 0)) break; else $inrow$035$us57 = $inrow$035$us57 + 1 | 0;
 }
 return;
}

function _jinit_d_main_controller($cinfo, $need_full_buffer) {
 $cinfo = $cinfo | 0;
 $need_full_buffer = $need_full_buffer | 0;
 var $13 = 0, $15 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $9 = 0, $add$i = 0, $add$ptr16$i = 0, $arrayidx6$i = 0, $buffer = 0, $call = 0, $call$i = 0, $call19 = 0, $ci$034 = 0, $ci$034$i = 0, $compptr$033$i = 0, $compptr$035 = 0, $div = 0, $div$i = 0, $inc = 0, $main = 0, $mem = 0, $min_DCT_v_scaled_size = 0, $mul12$i = 0, $mul17 = 0, $mul18 = 0, $mul8$i = 0, $ngroups$0 = 0, $num_components$i = 0, $num_components$phi$trans$insert = 0, $num_components$pre$phiZ2D = 0, $xbuffer$i = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 80) | 0;
 $main = $cinfo + 448 | 0;
 HEAP32[$main >> 2] = $call;
 HEAP32[$call >> 2] = 129;
 if ($need_full_buffer | 0) {
  $2 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$2 + 20 >> 2] = 3;
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($cinfo);
 }
 $min_DCT_v_scaled_size = $cinfo + 328 | 0;
 $6 = HEAP32[$min_DCT_v_scaled_size >> 2] | 0;
 if (!(HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[$call + 52 >> 2] = $6;
  $num_components$phi$trans$insert = $cinfo + 36 | 0;
  $25 = HEAP32[$num_components$phi$trans$insert >> 2] | 0;
  $36 = $6;
  $ngroups$0 = $6;
  $num_components$pre$phiZ2D = $num_components$phi$trans$insert;
 } else {
  if (($6 | 0) < 2) {
   $7 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$7 + 20 >> 2] = 48;
   FUNCTION_TABLE_vi[HEAP32[$7 >> 2] & 255]($cinfo);
   $15 = HEAP32[$min_DCT_v_scaled_size >> 2] | 0;
  } else $15 = $6;
  $9 = HEAP32[$main >> 2] | 0;
  $num_components$i = $cinfo + 36 | 0;
  $call$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, HEAP32[$num_components$i >> 2] << 3) | 0;
  $xbuffer$i = $9 + 60 | 0;
  HEAP32[$xbuffer$i >> 2] = $call$i;
  $13 = HEAP32[$num_components$i >> 2] | 0;
  $arrayidx6$i = $9 + 64 | 0;
  HEAP32[$arrayidx6$i >> 2] = $call$i + ($13 << 2);
  if (($13 | 0) > 0) {
   $add$i = $15 + 4 | 0;
   $ci$034$i = 0;
   $compptr$033$i = HEAP32[$cinfo + 216 >> 2] | 0;
   while (1) {
    $mul8$i = Math_imul(HEAP32[$compptr$033$i + 40 >> 2] | 0, HEAP32[$compptr$033$i + 12 >> 2] | 0) | 0;
    $div$i = ($mul8$i | 0) / (HEAP32[$min_DCT_v_scaled_size >> 2] | 0) | 0;
    $mul12$i = Math_imul($div$i, $add$i) | 0;
    $add$ptr16$i = (FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, $mul12$i << 3) | 0) + ($div$i << 2) | 0;
    HEAP32[(HEAP32[$xbuffer$i >> 2] | 0) + ($ci$034$i << 2) >> 2] = $add$ptr16$i;
    HEAP32[(HEAP32[$arrayidx6$i >> 2] | 0) + ($ci$034$i << 2) >> 2] = $add$ptr16$i + ($mul12$i << 2);
    $ci$034$i = $ci$034$i + 1 | 0;
    $23 = HEAP32[$num_components$i >> 2] | 0;
    if (($ci$034$i | 0) >= ($23 | 0)) {
     $35 = $23;
     break;
    } else $compptr$033$i = $compptr$033$i + 88 | 0;
   }
  } else $35 = $13;
  $24 = HEAP32[$min_DCT_v_scaled_size >> 2] | 0;
  $25 = $35;
  $36 = $24;
  $ngroups$0 = $24 + 2 | 0;
  $num_components$pre$phiZ2D = $num_components$i;
 }
 if (($25 | 0) <= 0) return;
 $buffer = $call + 8 | 0;
 $29 = $36;
 $ci$034 = 0;
 $compptr$035 = HEAP32[$cinfo + 216 >> 2] | 0;
 while (1) {
  $div = (Math_imul(HEAP32[$compptr$035 + 40 >> 2] | 0, HEAP32[$compptr$035 + 12 >> 2] | 0) | 0) / ($29 | 0) | 0;
  $mul17 = Math_imul(HEAP32[$compptr$035 + 36 >> 2] | 0, HEAP32[$compptr$035 + 28 >> 2] | 0) | 0;
  $mul18 = Math_imul($div, $ngroups$0) | 0;
  $call19 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 8 >> 2] & 15]($cinfo, 1, $mul17, $mul18) | 0;
  HEAP32[$buffer + ($ci$034 << 2) >> 2] = $call19;
  $inc = $ci$034 + 1 | 0;
  if (($inc | 0) >= (HEAP32[$num_components$pre$phiZ2D >> 2] | 0)) break;
  $29 = HEAP32[$min_DCT_v_scaled_size >> 2] | 0;
  $ci$034 = $inc;
  $compptr$035 = $compptr$035 + 88 | 0;
 }
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and55 = 0, $retval$2 = 0, $sub$ptr$sub28 = 0;
 L1 : do if (($__ct | 0) == ($__decimal_point | 0)) if (HEAP8[$__in_units >> 0] | 0) {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if ((($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0) != 0 ? ($4 = HEAP32[$__g_end >> 2] | 0, ($4 - $__g | 0) < 160) : 0) {
   $5 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $4 + 4;
   HEAP32[$4 >> 2] = $5;
   $retval$2 = 0;
  } else $retval$2 = 0;
 } else $retval$2 = -1; else {
  if (($__ct | 0) == ($__thousands_sep | 0) ? ($6 = HEAP8[$__grouping + 11 >> 0] | 0, ($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) : 0) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $retval$2 = -1;
    break;
   }
   $9 = HEAP32[$__g_end >> 2] | 0;
   if (($9 - $__g | 0) >= 160) {
    $retval$2 = 0;
    break;
   }
   $10 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $9 + 4;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$__dc >> 2] = 0;
   $retval$2 = 0;
   break;
  }
  $add$ptr = $__atoms + 128 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub28 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub28 | 0) <= 124) {
   $12 = HEAP8[10896 + ($sub$ptr$sub28 >> 2) >> 0] | 0;
   $13 = $sub$ptr$sub28 + -88 | 0;
   switch ($13 >>> 2 | $13 << 30 | 0) {
   case 2:
   case 3:
    {
     $17 = HEAP32[$__a_end >> 2] | 0;
     if (($17 | 0) != ($__a | 0) ? (HEAP8[$17 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127) : 0) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $17 + 1;
     HEAP8[$17 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     HEAP8[$__exp >> 0] = 80;
     break;
    }
   default:
    {
     $and55 = $12 & 95;
     if (((($and55 | 0) == (HEAP8[$__exp >> 0] | 0) ? (HEAP8[$__exp >> 0] = $and55 | 128, HEAP8[$__in_units >> 0] | 0) : 0) ? (HEAP8[$__in_units >> 0] = 0, $25 = HEAP8[$__grouping + 11 >> 0] | 0, ($25 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $25 & 255) | 0) : 0) ? ($27 = HEAP32[$__g_end >> 2] | 0, ($27 - $__g | 0) < 160) : 0) {
      $28 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $27 + 4;
      HEAP32[$27 >> 2] = $28;
     }
    }
   }
   $29 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $29 + 1;
   HEAP8[$29 >> 0] = $12;
   if (($sub$ptr$sub28 | 0) > 84) $retval$2 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $retval$2 = 0;
   }
  } else $retval$2 = -1;
 } while (0);
 return $retval$2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $Encoding = 0, $StringLitName = 0, $call11 = 0, $call2 = 0, $call22 = 0, $call3 = 0, $call30 = 0, $call36 = 0, $call9 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Encoding = sp + 8 | 0;
 $StringLitName = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 90) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2) | 0;
  HEAP32[$Encoding >> 2] = $call3;
  do if (($call3 | 0) != 0 ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0 : 0) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 115) | 0) {
    $call9 = __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
    HEAP32[$this >> 2] = $call9;
    $call11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 32349) | 0;
    HEAP32[$StringLitName >> 2] = $call11;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    break;
   }
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 100) | 0)) {
    $call30 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2, $State) | 0;
    HEAP32[$StringLitName >> 2] = $call30;
    if (!$call30) $retval$2 = 0; else {
     $call36 = __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
     HEAP32[$this >> 2] = $call36;
     $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    }
    $retval$3 = $retval$2;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($StringLitName, $this, 1);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    $call22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2, $State) | 0;
    HEAP32[$StringLitName >> 2] = $call22;
    if (!$call22) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    $retval$3 = $retval$1;
   } else $retval$3 = 0;
  } else $retval$3 = 0; while (0);
  $retval$4 = $retval$3;
 } else $retval$4 = 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _start_output_pass($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $11 = 0, $18 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $5 = 0, $arrayidx59$1$i = 0, $arrayidx59$2$i = 0, $arrayidx59$3$i = 0, $arrayidx59$4$i = 0, $arrayidx59$i = 0, $call$i = 0, $ci$037$i = 0, $coef_bits2$i = 0, $coef_bits_latch$040$i = 0, $coef_bits_latch3$i = 0, $compptr$038$i = 0, $decompress_smooth_data$sink = 0, $num_components$i = 0, $num_components9$pre$phi$iZ2D = 0, $output_iMCU_row = 0, $smoothing_useful$039$i = 0, label = 0;
 $0 = HEAP32[$cinfo + 452 >> 2] | 0;
 if (!(HEAP32[$0 + 16 >> 2] | 0)) {
  $output_iMCU_row = $cinfo + 156 | 0;
  HEAP32[$output_iMCU_row >> 2] = 0;
  return;
 }
 L4 : do if (((HEAP32[$cinfo + 80 >> 2] | 0) != 0 ? (HEAP32[$cinfo + 224 >> 2] | 0) != 0 : 0) ? ($coef_bits2$i = $cinfo + 160 | 0, (HEAP32[$coef_bits2$i >> 2] | 0) != 0) : 0) {
  $coef_bits_latch3$i = $0 + 112 | 0;
  $5 = HEAP32[$coef_bits_latch3$i >> 2] | 0;
  if (!$5) {
   $num_components$i = $cinfo + 36 | 0;
   $call$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 1, (HEAP32[$num_components$i >> 2] | 0) * 24 | 0) | 0;
   HEAP32[$coef_bits_latch3$i >> 2] = $call$i;
   $36 = $call$i;
   $num_components9$pre$phi$iZ2D = $num_components$i;
  } else {
   $36 = $5;
   $num_components9$pre$phi$iZ2D = $cinfo + 36 | 0;
  }
  if ((HEAP32[$num_components9$pre$phi$iZ2D >> 2] | 0) > 0) {
   $ci$037$i = 0;
   $coef_bits_latch$040$i = $36;
   $compptr$038$i = HEAP32[$cinfo + 216 >> 2] | 0;
   $smoothing_useful$039$i = 0;
   while (1) {
    $11 = HEAP32[$compptr$038$i + 80 >> 2] | 0;
    if (!$11) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 + 2 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 + 16 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 + 32 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 + 18 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    if (!(HEAP16[$11 + 4 >> 1] | 0)) {
     label = 20;
     break L4;
    }
    $18 = HEAP32[$coef_bits2$i >> 2] | 0;
    if ((HEAP32[$18 + ($ci$037$i << 8) >> 2] | 0) < 0) {
     label = 20;
     break L4;
    }
    $arrayidx59$i = $18 + ($ci$037$i << 8) + 4 | 0;
    HEAP32[$coef_bits_latch$040$i + 4 >> 2] = HEAP32[$arrayidx59$i >> 2];
    $21 = HEAP32[$arrayidx59$i >> 2] | 0;
    $arrayidx59$1$i = $18 + ($ci$037$i << 8) + 8 | 0;
    HEAP32[$coef_bits_latch$040$i + 8 >> 2] = HEAP32[$arrayidx59$1$i >> 2];
    $24 = HEAP32[$arrayidx59$1$i >> 2] | $21;
    $arrayidx59$2$i = $18 + ($ci$037$i << 8) + 12 | 0;
    HEAP32[$coef_bits_latch$040$i + 12 >> 2] = HEAP32[$arrayidx59$2$i >> 2];
    $27 = $24 | HEAP32[$arrayidx59$2$i >> 2];
    $arrayidx59$3$i = $18 + ($ci$037$i << 8) + 16 | 0;
    HEAP32[$coef_bits_latch$040$i + 16 >> 2] = HEAP32[$arrayidx59$3$i >> 2];
    $30 = $27 | HEAP32[$arrayidx59$3$i >> 2];
    $arrayidx59$4$i = $18 + ($ci$037$i << 8) + 20 | 0;
    HEAP32[$coef_bits_latch$040$i + 20 >> 2] = HEAP32[$arrayidx59$4$i >> 2];
    $smoothing_useful$039$i = ($30 | HEAP32[$arrayidx59$4$i >> 2] | 0) == 0 ? $smoothing_useful$039$i : 1;
    $ci$037$i = $ci$037$i + 1 | 0;
    if (($ci$037$i | 0) >= (HEAP32[$num_components9$pre$phi$iZ2D >> 2] | 0)) break; else {
     $coef_bits_latch$040$i = $coef_bits_latch$040$i + 24 | 0;
     $compptr$038$i = $compptr$038$i + 88 | 0;
    }
   }
   if ($smoothing_useful$039$i) $decompress_smooth_data$sink = 45; else label = 20;
  } else label = 20;
 } else label = 20; while (0);
 if ((label | 0) == 20) $decompress_smooth_data$sink = 43;
 HEAP32[$0 + 12 >> 2] = $decompress_smooth_data$sink;
 $output_iMCU_row = $cinfo + 156 | 0;
 HEAP32[$output_iMCU_row >> 2] = 0;
 return;
}

function _quantize_fs_dither($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx5 = 0, $belowerr$079 = 0, $bpreverr$077 = 0, $ci$083 = 0, $ci$083$us = 0, $cmp1973 = 0, $cmp382 = 0, $col$078 = 0, $colorindex = 0, $conv27 = 0, $conv29 = 0, $cur$080 = 0, $dir$0 = 0, $dirnc$0 = 0, $errorptr$0 = 0, $errorptr$176 = 0, $input_ptr$0 = 0, $input_ptr$175 = 0, $mul7 = 0, $on_odd_row = 0, $output_ptr$0 = 0, $output_ptr$174 = 0, $row$085 = 0, $sub = 0, $sub11 = 0, $sub37 = 0, $sv_colormap = 0, $tobool$us = 0, $errorptr$176$looptemp = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $1 = HEAP32[$cinfo + 120 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 $3 = HEAP32[$cinfo + 336 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $cmp382 = ($1 | 0) > 0;
 $on_odd_row = $0 + 84 | 0;
 $colorindex = $0 + 24 | 0;
 $sv_colormap = $0 + 16 | 0;
 $cmp1973 = ($2 | 0) == 0;
 $sub = $2 + -1 | 0;
 $mul7 = Math_imul($sub, $1) | 0;
 $sub11 = 0 - $1 | 0;
 $add = $2 + 1 | 0;
 $row$085 = 0;
 do {
  $arrayidx = $output_buf + ($row$085 << 2) | 0;
  _memset(HEAP32[$arrayidx >> 2] | 0, 0, $2 | 0) | 0;
  L6 : do if ($cmp382) {
   $arrayidx5 = $input_buf + ($row$085 << 2) | 0;
   if ($cmp1973) {
    $tobool$us = (HEAP32[$on_odd_row >> 2] | 0) == 0;
    $ci$083$us = 0;
    while (1) {
     $5 = HEAP32[$0 + 68 + ($ci$083$us << 2) >> 2] | 0;
     HEAP16[($tobool$us ? $5 : $5 + ($add << 1) | 0) >> 1] = 0;
     $ci$083$us = $ci$083$us + 1 | 0;
     if (($ci$083$us | 0) == ($1 | 0)) break L6;
    }
   }
   $ci$083 = 0;
   do {
    $add$ptr = (HEAP32[$arrayidx5 >> 2] | 0) + $ci$083 | 0;
    $7 = HEAP32[$arrayidx >> 2] | 0;
    if (!(HEAP32[$on_odd_row >> 2] | 0)) {
     $dir$0 = 1;
     $dirnc$0 = $1;
     $errorptr$0 = HEAP32[$0 + 68 + ($ci$083 << 2) >> 2] | 0;
     $input_ptr$0 = $add$ptr;
     $output_ptr$0 = $7;
    } else {
     $dir$0 = -1;
     $dirnc$0 = $sub11;
     $errorptr$0 = (HEAP32[$0 + 68 + ($ci$083 << 2) >> 2] | 0) + ($add << 1) | 0;
     $input_ptr$0 = $add$ptr + $mul7 | 0;
     $output_ptr$0 = $7 + $sub | 0;
    }
    $12 = HEAP32[(HEAP32[$colorindex >> 2] | 0) + ($ci$083 << 2) >> 2] | 0;
    $14 = HEAP32[(HEAP32[$sv_colormap >> 2] | 0) + ($ci$083 << 2) >> 2] | 0;
    $15 = Math_imul($2, $dir$0) | 0;
    $belowerr$079 = 0;
    $bpreverr$077 = 0;
    $col$078 = $2;
    $cur$080 = 0;
    $errorptr$176 = $errorptr$0;
    $input_ptr$175 = $input_ptr$0;
    $output_ptr$174 = $output_ptr$0;
    while (1) {
     $errorptr$176$looptemp = $errorptr$176;
     $errorptr$176 = $errorptr$176 + ($dir$0 << 1) | 0;
     $conv27 = HEAPU8[$3 + (($cur$080 + 8 + (HEAP16[$errorptr$176 >> 1] | 0) >> 4) + (HEAPU8[$input_ptr$175 >> 0] | 0)) >> 0] | 0;
     $conv29 = HEAPU8[$12 + $conv27 >> 0] | 0;
     HEAP8[$output_ptr$174 >> 0] = (HEAPU8[$output_ptr$174 >> 0] | 0) + $conv29;
     $sub37 = $conv27 - (HEAPU8[$14 + $conv29 >> 0] | 0) | 0;
     HEAP16[$errorptr$176$looptemp >> 1] = ($sub37 * 3 | 0) + $bpreverr$077;
     $bpreverr$077 = ($sub37 * 5 | 0) + $belowerr$079 | 0;
     $col$078 = $col$078 + -1 | 0;
     if (!$col$078) break; else {
      $belowerr$079 = $sub37;
      $cur$080 = $sub37 * 7 | 0;
      $input_ptr$175 = $input_ptr$175 + $dirnc$0 | 0;
      $output_ptr$174 = $output_ptr$174 + $dir$0 | 0;
     }
    }
    HEAP16[$errorptr$0 + ($15 << 1) >> 1] = $bpreverr$077;
    $ci$083 = $ci$083 + 1 | 0;
   } while (($ci$083 | 0) != ($1 | 0));
  } while (0);
  HEAP32[$on_odd_row >> 2] = (HEAP32[$on_odd_row >> 2] | 0) == 0 & 1;
  $row$085 = $row$085 + 1 | 0;
 } while (($row$085 | 0) != ($num_rows | 0));
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $or2438 = 0, $or37 = 0, $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $__flags = $this + 8 | 0;
   $search_done = $info + 54 | 0;
   $12 = $5;
   $9 = $4;
   $found_any_static_type$0 = $or2438;
   $found_our_static_ptr$0 = $or37;
   $p$0 = $this + 24 | 0;
   while (1) {
    $7 = $found_any_static_type$0 & 1;
    $8 = $found_our_static_ptr$0 & 1;
    if (HEAP8[$search_done >> 0] | 0) {
     $found_any_static_type$1$off0$in = $7;
     $found_our_static_ptr$1$off0$in = $8;
     break L4;
    }
    if (!($9 << 24 >> 24)) {
     if ($12 << 24 >> 24 ? (HEAP32[$__flags >> 2] & 1 | 0) == 0 : 0) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     if (!(HEAP32[$__flags >> 2] & 2)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $9 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
    $or5850 = $9 | $8;
    $12 = HEAP8[$found_any_static_type5 >> 0] | 0;
    $or6651 = $12 | $7;
    $p$0 = $p$0 + 8 | 0;
    if ($p$0 >>> 0 >= $add$ptr >>> 0) {
     $found_any_static_type$1$off0$in = $or6651;
     $found_our_static_ptr$1$off0$in = $or5850;
     break;
    } else {
     $found_any_static_type$0 = $or6651;
     $found_our_static_ptr$0 = $or5850;
    }
   }
  } else {
   $found_any_static_type$1$off0$in = $or2438;
   $found_our_static_ptr$1$off0$in = $or37;
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $found_any_static_type$1$off0$in << 24 >> 24 != 0 & 1;
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($this) {
 $this = $this | 0;
 var $Names = 0, $SaveTemp = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call12 = 0, $call2 = 0, $call23 = 0, $call3 = 0, $call8 = 0, $ref$tmp = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $SaveTemp = sp + 8 | 0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31525);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemp, $this + 360 | 0, 0);
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call3;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemp);
  do if ($call3) {
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) {
    $call23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2) | 0;
    HEAP32[$SaveTemp >> 2] = $call23;
    if (!$call23) $retval$3 = 0; else {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($ref$tmp, $this, $SaveTemp, $SaveTemp + 4 | 0);
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $ref$tmp) | 0;
    }
    $retval$4 = $retval$3;
    break;
   }
   $Names = $this + 8 | 0;
   $call8 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 9;
     break;
    }
    $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2) | 0;
    HEAP32[$SaveTemp >> 2] = $call12;
    if (!$call12) {
     label = 7;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $SaveTemp);
   }
   if ((label | 0) == 7) {
    $retval$4 = 0;
    break;
   } else if ((label | 0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($SaveTemp, $this, $call8);
    $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $SaveTemp) | 0;
    break;
   }
  } else $retval$4 = 0; while (0);
  $retval$5 = $retval$4;
 } else $retval$5 = 0;
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $agg$tmp = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 36157, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 do if (($8 | 0) != ($__nar | 0)) {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } else {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $agg$tmp = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 43974, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 do if (($8 | 0) != ($__nar | 0)) {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } else {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0, $d$addr$3 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $s$addr$0$lcssa = 0, $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub19 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  $tobool349 = ($n | 0) != 0;
  if ($tobool349 & ($0 & 3 | 0) != 0) {
   $d$addr$051 = $d;
   $n$addr$053 = $n;
   $s$addr$052 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$052 >> 0] | 0;
    HEAP8[$d$addr$051 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $d$addr$3 = $d$addr$051;
     $n$addr$4 = $n$addr$053;
     break L1;
    }
    $dec = $n$addr$053 + -1 | 0;
    $incdec$ptr = $s$addr$052 + 1 | 0;
    $incdec$ptr5 = $d$addr$051 + 1 | 0;
    $tobool3 = ($dec | 0) != 0;
    if ($tobool3 & ($incdec$ptr & 3 | 0) != 0) {
     $d$addr$051 = $incdec$ptr5;
     $n$addr$053 = $dec;
     $s$addr$052 = $incdec$ptr;
    } else {
     $d$addr$0$lcssa = $incdec$ptr5;
     $n$addr$0$lcssa = $dec;
     $s$addr$0$lcssa = $incdec$ptr;
     $tobool3$lcssa = $tobool3;
     break;
    }
   }
  } else {
   $d$addr$0$lcssa = $d;
   $n$addr$0$lcssa = $n;
   $s$addr$0$lcssa = $s;
   $tobool3$lcssa = $tobool349;
  }
  if ($tobool3$lcssa) if (!(HEAP8[$s$addr$0$lcssa >> 0] | 0)) {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = $n$addr$0$lcssa;
  } else {
   L11 : do if ($n$addr$0$lcssa >>> 0 > 3) {
    $n$addr$138 = $n$addr$0$lcssa;
    $wd$039 = $d$addr$0$lcssa;
    $ws$040 = $s$addr$0$lcssa;
    while (1) {
     $6 = HEAP32[$ws$040 >> 2] | 0;
     if (($6 & -2139062144 ^ -2139062144) & $6 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$138;
      $wd$0$lcssa = $wd$039;
      $ws$0$lcssa = $ws$040;
      break L11;
     }
     HEAP32[$wd$039 >> 2] = $6;
     $sub19 = $n$addr$138 + -4 | 0;
     $incdec$ptr20 = $ws$040 + 4 | 0;
     $incdec$ptr21 = $wd$039 + 4 | 0;
     if ($sub19 >>> 0 > 3) {
      $n$addr$138 = $sub19;
      $wd$039 = $incdec$ptr21;
      $ws$040 = $incdec$ptr20;
     } else {
      $n$addr$1$lcssa = $sub19;
      $wd$0$lcssa = $incdec$ptr21;
      $ws$0$lcssa = $incdec$ptr20;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa;
    $wd$0$lcssa = $d$addr$0$lcssa;
    $ws$0$lcssa = $s$addr$0$lcssa;
   } while (0);
   $d$addr$1 = $wd$0$lcssa;
   $n$addr$2 = $n$addr$1$lcssa;
   $s$addr$1 = $ws$0$lcssa;
   label = 13;
  } else {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = 0;
  }
 } else {
  $d$addr$1 = $d;
  $n$addr$2 = $n;
  $s$addr$1 = $s;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$n$addr$2) {
  $d$addr$3 = $d$addr$1;
  $n$addr$4 = 0;
 } else {
  $d$addr$231 = $d$addr$1;
  $n$addr$333 = $n$addr$2;
  $s$addr$232 = $s$addr$1;
  while (1) {
   $7 = HEAP8[$s$addr$232 >> 0] | 0;
   HEAP8[$d$addr$231 >> 0] = $7;
   if (!($7 << 24 >> 24)) {
    $d$addr$3 = $d$addr$231;
    $n$addr$4 = $n$addr$333;
    break L17;
   }
   $n$addr$333 = $n$addr$333 + -1 | 0;
   $incdec$ptr34 = $d$addr$231 + 1 | 0;
   if (!$n$addr$333) {
    $d$addr$3 = $incdec$ptr34;
    $n$addr$4 = 0;
    break;
   } else {
    $d$addr$231 = $incdec$ptr34;
    $s$addr$232 = $s$addr$232 + 1 | 0;
   }
  }
 } while (0);
 _memset($d$addr$3 | 0, 0, $n$addr$4 | 0) | 0;
 return $d$addr$3 | 0;
}

function _jpeg_idct_4x2($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $0 = 0, $1 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr16$1 = 0, $add18 = 0, $add18$1 = 0, $add28 = 0, $add28$1 = 0, $arrayidx7 = 0, $mul = 0, $mul$1 = 0, $mul$2 = 0, $mul$3 = 0, $mul26 = 0, $mul26$1 = 0, $mul5 = 0, $mul5$1 = 0, $mul5$2 = 0, $mul5$3 = 0, $shl = 0, $shl$1 = 0, $shl22 = 0, $shl22$1 = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0, $sub30 = 0, $sub30$1 = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $workspace = sp;
 $0 = HEAP32[$cinfo + 336 >> 2] | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $mul = Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0;
 $mul5 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $add = $mul5 + $mul | 0;
 HEAP32[$workspace >> 2] = $add;
 $arrayidx7 = $workspace + 16 | 0;
 HEAP32[$arrayidx7 >> 2] = $mul - $mul5;
 $mul$1 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 $mul5$1 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $add$1 = $mul5$1 + $mul$1 | 0;
 HEAP32[$workspace + 4 >> 2] = $add$1;
 $sub$1 = $mul$1 - $mul5$1 | 0;
 HEAP32[$workspace + 20 >> 2] = $sub$1;
 $mul$2 = Math_imul(HEAP32[$1 + 8 >> 2] | 0, HEAP16[$coef_block + 4 >> 1] | 0) | 0;
 $mul5$2 = Math_imul(HEAP32[$1 + 40 >> 2] | 0, HEAP16[$coef_block + 20 >> 1] | 0) | 0;
 $add$2 = $mul5$2 + $mul$2 | 0;
 HEAP32[$workspace + 8 >> 2] = $add$2;
 $sub$2 = $mul$2 - $mul5$2 | 0;
 HEAP32[$workspace + 24 >> 2] = $sub$2;
 $mul$3 = Math_imul(HEAP32[$1 + 12 >> 2] | 0, HEAP16[$coef_block + 6 >> 1] | 0) | 0;
 $mul5$3 = Math_imul(HEAP32[$1 + 44 >> 2] | 0, HEAP16[$coef_block + 22 >> 1] | 0) | 0;
 $add$3 = $mul5$3 + $mul$3 | 0;
 HEAP32[$workspace + 12 >> 2] = $add$3;
 $sub$3 = $mul$3 - $mul5$3 | 0;
 HEAP32[$workspace + 28 >> 2] = $sub$3;
 $add$ptr = $0 + -384 | 0;
 $add$ptr16 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $add18 = $add + 4100 | 0;
 $shl = $add18 + $add$2 << 13;
 $shl22 = $add18 - $add$2 << 13;
 $mul26 = ($add$3 + $add$1 | 0) * 4433 | 0;
 $add28 = $mul26 + ($add$1 * 6270 | 0) | 0;
 $sub30 = $mul26 + (Math_imul($add$3, -15137) | 0) | 0;
 HEAP8[$add$ptr16 >> 0] = HEAP8[$add$ptr + (($add28 + $shl | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16 + 3 >> 0] = HEAP8[$add$ptr + (($shl - $add28 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16 + 1 >> 0] = HEAP8[$add$ptr + (($sub30 + $shl22 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16 + 2 >> 0] = HEAP8[$add$ptr + (($shl22 - $sub30 | 0) >>> 16 & 1023) >> 0] | 0;
 $add$ptr16$1 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 $add18$1 = (HEAP32[$arrayidx7 >> 2] | 0) + 4100 | 0;
 $shl$1 = $add18$1 + $sub$2 << 13;
 $shl22$1 = $add18$1 - $sub$2 << 13;
 $mul26$1 = ($sub$3 + $sub$1 | 0) * 4433 | 0;
 $add28$1 = $mul26$1 + ($sub$1 * 6270 | 0) | 0;
 $sub30$1 = $mul26$1 + (Math_imul($sub$3, -15137) | 0) | 0;
 HEAP8[$add$ptr16$1 >> 0] = HEAP8[$add$ptr + (($add28$1 + $shl$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16$1 + 3 >> 0] = HEAP8[$add$ptr + (($shl$1 - $add28$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16$1 + 1 >> 0] = HEAP8[$add$ptr + (($sub30$1 + $shl22$1 | 0) >>> 16 & 1023) >> 0] | 0;
 HEAP8[$add$ptr16$1 + 2 >> 0] = HEAP8[$add$ptr + (($shl22$1 - $sub30$1 | 0) >>> 16 & 1023) >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $9 = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv7 = 0, $neg$0 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub63 = 0, $tobool115 = 0, $x$047 = 0, label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $cond = HEAPU8[$0 >> 0] | 0;
 } else $cond = ___shgetc($f) | 0;
 switch ($cond | 0) {
 case 43:
 case 45:
  {
   $conv7 = ($cond | 0) == 45 & 1;
   $3 = HEAP32[$rpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $3 + 1;
    $cond19 = HEAPU8[$3 >> 0] | 0;
   } else $cond19 = ___shgetc($f) | 0;
   $sub = $cond19 + -48 | 0;
   if (($pok | 0) != 0 & $sub >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
    $45 = -2147483648;
    $46 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    label = 14;
   } else {
    $c$0 = $cond19;
    $neg$0 = $conv7;
    $sub31$pre$phiZ2D = $sub;
    label = 12;
   }
   break;
  }
 default:
  {
   $c$0 = $cond;
   $neg$0 = 0;
   $sub31$pre$phiZ2D = $cond + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($sub31$pre$phiZ2D >>> 0 > 9) label = 14; else {
  $c$146 = $c$0;
  $x$047 = 0;
  while (1) {
   $x$047 = $c$146 + -48 + ($x$047 * 10 | 0) | 0;
   $9 = HEAP32[$rpos >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $9 + 1;
    $cond60 = HEAPU8[$9 >> 0] | 0;
   } else $cond60 = ___shgetc($f) | 0;
   $sub43 = $cond60 + -48 | 0;
   if (!($sub43 >>> 0 < 10 & ($x$047 | 0) < 214748364)) break; else $c$146 = $cond60;
  }
  $14 = (($x$047 | 0) < 0) << 31 >> 31;
  if ($sub43 >>> 0 < 10) {
   $15 = $x$047;
   $16 = $14;
   $c$241 = $cond60;
   while (1) {
    $17 = ___muldi3($15 | 0, $16 | 0, 10, 0) | 0;
    $18 = getTempRet0() | 0;
    $21 = _i64Add($c$241 | 0, (($c$241 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $15 = _i64Add($21 | 0, getTempRet0() | 0, $17 | 0, $18 | 0) | 0;
    $16 = getTempRet0() | 0;
    $25 = HEAP32[$rpos >> 2] | 0;
    if ($25 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $25 + 1;
     $cond87 = HEAPU8[$25 >> 0] | 0;
    } else $cond87 = ___shgetc($f) | 0;
    $sub63 = $cond87 + -48 | 0;
    if (!($sub63 >>> 0 < 10 & (($16 | 0) < 21474836 | ($16 | 0) == 21474836 & $15 >>> 0 < 2061584302))) break; else $c$241 = $cond87;
   }
   if ($sub63 >>> 0 < 10) {
    do {
     $34 = HEAP32[$rpos >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $34 + 1;
      $cond106 = HEAPU8[$34 >> 0] | 0;
     } else $cond106 = ___shgetc($f) | 0;
    } while (($cond106 + -48 | 0) >>> 0 < 10);
    $39 = $15;
    $40 = $16;
   } else {
    $39 = $15;
    $40 = $16;
   }
  } else {
   $39 = $x$047;
   $40 = $14;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $tobool115 = ($neg$0 | 0) == 0;
  $41 = _i64Subtract(0, 0, $39 | 0, $40 | 0) | 0;
  $42 = getTempRet0() | 0;
  $45 = $tobool115 ? $40 : $42;
  $46 = $tobool115 ? $39 : $41;
 }
 if ((label | 0) == 14) if (!(HEAP32[$shend >> 2] | 0)) {
  $45 = -2147483648;
  $46 = 0;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $45 = -2147483648;
  $46 = 0;
 }
 setTempRet0($45 | 0);
 return $46 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $agg$tmp = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 36157, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 if (($8 | 0) != ($__nar | 0)) {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 } else {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $agg$tmp = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 43974, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 if (($8 | 0) != ($__nar | 0)) {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 } else {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, $call = 0, $call$pn = 0, $call15 = 0, $call37 = 0, $n$addr$061 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0, $n$addr$270 = 0, $n$addr$3 = 0, $n$addr$465 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$071 = 0, $s$addr$1 = 0, $s$addr$266 = 0, $s$addr$3 = 0, $ws2$062 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $buf = sp;
 L1 : do if (!$s) {
  $0 = HEAP32[$ws >> 2] | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  if (!$1) $retval$0 = 0; else {
   $2 = $1;
   $n$addr$061 = 0;
   $ws2$062 = $0;
   while (1) {
    if ($2 >>> 0 > 127) {
     $call = _wcrtomb($buf, $2, 0) | 0;
     if (($call | 0) == -1) {
      $retval$0 = -1;
      break L1;
     } else $call$pn = $call;
    } else $call$pn = 1;
    $n$addr$1 = $call$pn + $n$addr$061 | 0;
    $ws2$062 = $ws2$062 + 4 | 0;
    $2 = HEAP32[$ws2$062 >> 2] | 0;
    if (!$2) {
     $retval$0 = $n$addr$1;
     break;
    } else $n$addr$061 = $n$addr$1;
   }
  }
 } else {
  L10 : do if ($n >>> 0 > 3) {
   $5 = HEAP32[$ws >> 2] | 0;
   $n$addr$270 = $n;
   $s$addr$071 = $s;
   while (1) {
    $4 = HEAP32[$5 >> 2] | 0;
    if (($4 + -1 | 0) >>> 0 > 126) {
     if (!$4) break;
     $call15 = _wcrtomb($s$addr$071, $4, 0) | 0;
     if (($call15 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     $6 = $5;
     $n$addr$3 = $n$addr$270 - $call15 | 0;
     $s$addr$1 = $s$addr$071 + $call15 | 0;
    } else {
     HEAP8[$s$addr$071 >> 0] = $4;
     $6 = HEAP32[$ws >> 2] | 0;
     $n$addr$3 = $n$addr$270 + -1 | 0;
     $s$addr$1 = $s$addr$071 + 1 | 0;
    }
    $5 = $6 + 4 | 0;
    HEAP32[$ws >> 2] = $5;
    if ($n$addr$3 >>> 0 <= 3) {
     $n$addr$2$lcssa = $n$addr$3;
     $s$addr$0$lcssa = $s$addr$1;
     break L10;
    } else {
     $n$addr$270 = $n$addr$3;
     $s$addr$071 = $s$addr$1;
    }
   }
   HEAP8[$s$addr$071 >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $retval$0 = $n - $n$addr$270 | 0;
   break L1;
  } else {
   $n$addr$2$lcssa = $n;
   $s$addr$0$lcssa = $s;
  } while (0);
  if ($n$addr$2$lcssa) {
   $8 = HEAP32[$ws >> 2] | 0;
   $n$addr$465 = $n$addr$2$lcssa;
   $s$addr$266 = $s$addr$0$lcssa;
   while (1) {
    $7 = HEAP32[$8 >> 2] | 0;
    if (($7 + -1 | 0) >>> 0 > 126) {
     if (!$7) {
      label = 20;
      break;
     }
     $call37 = _wcrtomb($buf, $7, 0) | 0;
     if (($call37 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     if ($n$addr$465 >>> 0 < $call37 >>> 0) {
      label = 23;
      break;
     }
     _wcrtomb($s$addr$266, HEAP32[$8 >> 2] | 0, 0) | 0;
     $10 = $8;
     $n$addr$5 = $n$addr$465 - $call37 | 0;
     $s$addr$3 = $s$addr$266 + $call37 | 0;
    } else {
     HEAP8[$s$addr$266 >> 0] = $7;
     $10 = HEAP32[$ws >> 2] | 0;
     $n$addr$5 = $n$addr$465 + -1 | 0;
     $s$addr$3 = $s$addr$266 + 1 | 0;
    }
    $8 = $10 + 4 | 0;
    HEAP32[$ws >> 2] = $8;
    if (!$n$addr$5) {
     $retval$0 = $n;
     break L1;
    } else {
     $n$addr$465 = $n$addr$5;
     $s$addr$266 = $s$addr$3;
    }
   }
   if ((label | 0) == 20) {
    HEAP8[$s$addr$266 >> 0] = 0;
    HEAP32[$ws >> 2] = 0;
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   } else if ((label | 0) == 23) {
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   }
  } else $retval$0 = $n;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _alloc_small($cinfo, $pool_id, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $sizeofobject = $sizeofobject | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $9 = 0, $add20 = 0, $add2059 = 0, $add31 = 0, $add31$lcssa = 0, $add3160 = 0, $add43$pre$phiZ2D = 0, $arrayidx12 = 0, $bytes_left62 = 0, $bytes_used56 = 0, $call = 0, $call$lcssa = 0, $call61 = 0, $cmp21 = 0, $hdr_ptr$0 = 0, $hdr_ptr$068 = 0, $hdr_ptr$070 = 0, $hdr_ptr$1 = 0, $prev_hdr_ptr$0$lcssa = 0, $rem = 0, $sizeofobject$addr$0 = 0, $slop$0 = 0, $slop$1 = 0, $slop$263 = 0, $sub26 = 0, $total_space_allocated = 0, label = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if ($sizeofobject >>> 0 > 999999984) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 56;
  HEAP32[$1 + 24 >> 2] = 1;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $rem = $sizeofobject & 7;
 $sizeofobject$addr$0 = (($rem | 0) == 0 ? 0 : 8 - $rem | 0) + $sizeofobject | 0;
 if ($pool_id >>> 0 > 1) {
  $5 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$5 + 20 >> 2] = 15;
  HEAP32[$5 + 24 >> 2] = $pool_id;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $arrayidx12 = $0 + 52 + ($pool_id << 2) | 0;
 $hdr_ptr$068 = HEAP32[$arrayidx12 >> 2] | 0;
 L7 : do if (!$hdr_ptr$068) {
  $prev_hdr_ptr$0$lcssa = 0;
  label = 9;
 } else {
  $hdr_ptr$070 = $hdr_ptr$068;
  while (1) {
   if ((HEAP32[$hdr_ptr$070 + 8 >> 2] | 0) >>> 0 >= $sizeofobject$addr$0 >>> 0) {
    $hdr_ptr$1 = $hdr_ptr$070;
    break L7;
   }
   $hdr_ptr$0 = HEAP32[$hdr_ptr$070 >> 2] | 0;
   if (!$hdr_ptr$0) {
    $prev_hdr_ptr$0$lcssa = $hdr_ptr$070;
    label = 9;
    break;
   } else $hdr_ptr$070 = $hdr_ptr$0;
  }
 } while (0);
 do if ((label | 0) == 9) {
  $cmp21 = ($prev_hdr_ptr$0$lcssa | 0) == 0;
  $slop$0 = HEAP32[($cmp21 ? 14636 : 14644) + ($pool_id << 2) >> 2] | 0;
  $sub26 = 999999984 - $sizeofobject$addr$0 | 0;
  $slop$1 = $slop$0 >>> 0 > $sub26 >>> 0 ? $sub26 : $slop$0;
  $add2059 = $slop$1 + $sizeofobject$addr$0 | 0;
  $add3160 = $add2059 + 16 | 0;
  $call61 = _jpeg_get_small($cinfo, $add3160) | 0;
  if (!$call61) {
   $slop$263 = $slop$1;
   do {
    if ($slop$263 >>> 0 < 100) {
     $9 = HEAP32[$cinfo >> 2] | 0;
     HEAP32[$9 + 20 >> 2] = 56;
     HEAP32[$9 + 24 >> 2] = 2;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
    }
    $slop$263 = $slop$263 >>> 1;
    $add20 = $slop$263 + $sizeofobject$addr$0 | 0;
    $add31 = $add20 + 16 | 0;
    $call = _jpeg_get_small($cinfo, $add31) | 0;
   } while (!($call | 0));
   $add31$lcssa = $add31;
   $add43$pre$phiZ2D = $add20;
   $call$lcssa = $call;
  } else {
   $add31$lcssa = $add3160;
   $add43$pre$phiZ2D = $add2059;
   $call$lcssa = $call61;
  }
  $total_space_allocated = $0 + 76 | 0;
  HEAP32[$total_space_allocated >> 2] = (HEAP32[$total_space_allocated >> 2] | 0) + $add31$lcssa;
  HEAP32[$call$lcssa >> 2] = 0;
  HEAP32[$call$lcssa + 4 >> 2] = 0;
  HEAP32[$call$lcssa + 8 >> 2] = $add43$pre$phiZ2D;
  if ($cmp21) {
   HEAP32[$arrayidx12 >> 2] = $call$lcssa;
   $hdr_ptr$1 = $call$lcssa;
   break;
  } else {
   HEAP32[$prev_hdr_ptr$0$lcssa >> 2] = $call$lcssa;
   $hdr_ptr$1 = $call$lcssa;
   break;
  }
 } while (0);
 $bytes_used56 = $hdr_ptr$1 + 4 | 0;
 $13 = HEAP32[$bytes_used56 >> 2] | 0;
 HEAP32[$bytes_used56 >> 2] = $13 + $sizeofobject$addr$0;
 $bytes_left62 = $hdr_ptr$1 + 8 | 0;
 HEAP32[$bytes_left62 >> 2] = (HEAP32[$bytes_left62 >> 2] | 0) - $sizeofobject$addr$0;
 return $hdr_ptr$1 + 16 + $13 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $CVQuals = 0, $ExceptionSpec = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp17 = 0, $agg$tmp2 = 0, $agg$tmp21 = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp27$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp4 = sp + 32 | 0;
 $agg$tmp10 = sp + 24 | 0;
 $agg$tmp17 = sp + 16 | 0;
 $agg$tmp21 = sp + 8 | 0;
 $agg$tmp27 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 255]($0, $S);
 $CVQuals = $this + 20 | 0;
 $2 = HEAP32[$CVQuals >> 2] | 0;
 if (!($2 & 1)) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 33109);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
  $3 = HEAP32[$CVQuals >> 2] | 0;
 }
 if (!($3 & 2)) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 33116);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
  $4 = HEAP32[$CVQuals >> 2] | 0;
 }
 if ($4 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 33126);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 }
 switch (HEAP8[$this + 24 >> 0] | 0) {
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 33311);
   HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
   HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 33314);
   HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
   HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
   break;
  }
 default:
  {}
 }
 $ExceptionSpec = $this + 28 | 0;
 if (HEAP32[$ExceptionSpec >> 2] | 0) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$ExceptionSpec >> 2] | 0, $S);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__28ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__fmtflags_$i$i = 0, $__fmtflags_$i$i22 = 0, $call$i$i = 0, $call$i$i13 = 0, $call$i$i14 = 0, $call$i$i15 = 0, $call$i$i16 = 0, $call$i$i17 = 0, $call$i$i18 = 0, $call$i$i20 = 0, $vbase$offset$ptr18 = 0, $vbase$offset$ptr23 = 0;
 $0 = HEAP32[3678] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(42672, $0, 42728);
 HEAP32[10498] = 18320;
 HEAP32[10500] = 18340;
 HEAP32[10499] = 0;
 __ZNSt3__28ios_base4initEPv(42e3, 42672);
 HEAP32[10518] = 0;
 $call$i$i = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[10519] = $call$i$i;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(42736, $0, 42792);
 HEAP32[10520] = 18368;
 HEAP32[10522] = 18388;
 HEAP32[10521] = 0;
 __ZNSt3__28ios_base4initEPv(42088, 42736);
 HEAP32[10540] = 0;
 $call$i$i13 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[10541] = $call$i$i13;
 $1 = HEAP32[3676] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(42800, $1, 42848);
 HEAP32[10542] = 18416;
 HEAP32[10543] = 18436;
 __ZNSt3__28ios_base4initEPv(42172, 42800);
 HEAP32[10561] = 0;
 $call$i$i14 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[10562] = $call$i$i14;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(42856, $1, 42904);
 HEAP32[10563] = 18464;
 HEAP32[10564] = 18484;
 __ZNSt3__28ios_base4initEPv(42256, 42856);
 HEAP32[10582] = 0;
 $call$i$i15 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[10583] = $call$i$i15;
 $2 = HEAP32[3679] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(42912, $2, 42960);
 HEAP32[10584] = 18416;
 HEAP32[10585] = 18436;
 __ZNSt3__28ios_base4initEPv(42340, 42912);
 HEAP32[10603] = 0;
 $call$i$i16 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[10604] = $call$i$i16;
 $3 = HEAP32[42336 + (HEAP32[(HEAP32[10584] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[10626] = 18416;
 HEAP32[10627] = 18436;
 __ZNSt3__28ios_base4initEPv(42508, $3);
 HEAP32[10645] = 0;
 $call$i$i17 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[10646] = $call$i$i17;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(42968, $2, 43016);
 HEAP32[10605] = 18464;
 HEAP32[10606] = 18484;
 __ZNSt3__28ios_base4initEPv(42424, 42968);
 HEAP32[10624] = 0;
 $call$i$i18 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[10625] = $call$i$i18;
 $4 = HEAP32[42420 + (HEAP32[(HEAP32[10605] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[10647] = 18464;
 HEAP32[10648] = 18484;
 __ZNSt3__28ios_base4initEPv(42592, $4);
 HEAP32[10666] = 0;
 $call$i$i20 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[10667] = $call$i$i20;
 HEAP32[41992 + (HEAP32[(HEAP32[10498] | 0) + -12 >> 2] | 0) + 72 >> 2] = 42168;
 HEAP32[42080 + (HEAP32[(HEAP32[10520] | 0) + -12 >> 2] | 0) + 72 >> 2] = 42252;
 $vbase$offset$ptr18 = (HEAP32[10584] | 0) + -12 | 0;
 $__fmtflags_$i$i = 42336 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i >> 2] = HEAP32[$__fmtflags_$i$i >> 2] | 8192;
 $vbase$offset$ptr23 = (HEAP32[10605] | 0) + -12 | 0;
 $__fmtflags_$i$i22 = 42420 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i22 >> 2] = HEAP32[$__fmtflags_$i$i22 >> 2] | 8192;
 HEAP32[42336 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 72 >> 2] = 42168;
 HEAP32[42420 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 72 >> 2] = 42252;
 return;
}

function _jinit_upsampler($cinfo) {
 $cinfo = $cinfo | 0;
 var $13 = 0, $14 = 0, $20 = 0, $23 = 0, $3 = 0, $call = 0, $call58 = 0, $call60 = 0, $ci$076 = 0, $cmp15 = 0, $cmp21 = 0, $color_buf = 0, $compptr$075 = 0, $div = 0, $div43 = 0, $div45 = 0, $div9 = 0, $h_expand = 0, $max_h_samp_factor = 0, $max_v_samp_factor = 0, $mem = 0, $methods = 0, $min_DCT_h_scaled_size = 0, $min_DCT_v_scaled_size = 0, $mul = 0, $mul8 = 0, $num_components = 0, $output_width = 0, $rowgroup_height = 0, $v_expand = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 160) | 0;
 HEAP32[$cinfo + 476 >> 2] = $call;
 HEAP32[$call >> 2] = 174;
 HEAP32[$call + 4 >> 2] = 3;
 HEAP32[$call + 8 >> 2] = 0;
 if (HEAP32[$cinfo + 308 >> 2] | 0) {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 26;
  FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($cinfo);
 }
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) <= 0) return;
 $min_DCT_h_scaled_size = $cinfo + 324 | 0;
 $min_DCT_v_scaled_size = $cinfo + 328 | 0;
 $max_h_samp_factor = $cinfo + 316 | 0;
 $max_v_samp_factor = $cinfo + 320 | 0;
 $rowgroup_height = $call + 100 | 0;
 $methods = $call + 52 | 0;
 $output_width = $cinfo + 112 | 0;
 $color_buf = $call + 12 | 0;
 $h_expand = $call + 140 | 0;
 $v_expand = $call + 150 | 0;
 $ci$076 = 0;
 $compptr$075 = HEAP32[$cinfo + 216 >> 2] | 0;
 while (1) {
  $mul = Math_imul(HEAP32[$compptr$075 + 36 >> 2] | 0, HEAP32[$compptr$075 + 8 >> 2] | 0) | 0;
  $div = ($mul | 0) / (HEAP32[$min_DCT_h_scaled_size >> 2] | 0) | 0;
  $mul8 = Math_imul(HEAP32[$compptr$075 + 40 >> 2] | 0, HEAP32[$compptr$075 + 12 >> 2] | 0) | 0;
  $div9 = ($mul8 | 0) / (HEAP32[$min_DCT_v_scaled_size >> 2] | 0) | 0;
  $13 = HEAP32[$max_h_samp_factor >> 2] | 0;
  $14 = HEAP32[$max_v_samp_factor >> 2] | 0;
  HEAP32[$rowgroup_height + ($ci$076 << 2) >> 2] = $div9;
  do if (!(HEAP32[$compptr$075 + 52 >> 2] | 0)) HEAP32[$methods + ($ci$076 << 2) >> 2] = 11; else {
   $cmp15 = ($div9 | 0) == ($14 | 0);
   if (($div | 0) == ($13 | 0) & $cmp15) {
    HEAP32[$methods + ($ci$076 << 2) >> 2] = 12;
    break;
   }
   $cmp21 = ($div << 1 | 0) == ($13 | 0);
   do if ($cmp21 & $cmp15) HEAP32[$methods + ($ci$076 << 2) >> 2] = 13; else {
    if ($cmp21 & ($div9 << 1 | 0) == ($14 | 0)) {
     HEAP32[$methods + ($ci$076 << 2) >> 2] = 14;
     break;
    }
    $div43 = ($13 | 0) / ($div | 0) | 0;
    if (($13 - (Math_imul($div43, $div) | 0) | 0) == 0 ? ($div45 = ($14 | 0) / ($div9 | 0) | 0, ($14 - (Math_imul($div45, $div9) | 0) | 0) == 0) : 0) {
     HEAP32[$methods + ($ci$076 << 2) >> 2] = 15;
     HEAP8[$h_expand + $ci$076 >> 0] = $div43;
     HEAP8[$v_expand + $ci$076 >> 0] = $div45;
     break;
    }
    $20 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$20 + 20 >> 2] = 39;
    FUNCTION_TABLE_vi[HEAP32[$20 >> 2] & 255]($cinfo);
   } while (0);
   $23 = HEAP32[(HEAP32[$mem >> 2] | 0) + 8 >> 2] | 0;
   $call58 = _jround_up(HEAP32[$output_width >> 2] | 0, HEAP32[$max_h_samp_factor >> 2] | 0) | 0;
   $call60 = FUNCTION_TABLE_iiiii[$23 & 15]($cinfo, 1, $call58, HEAP32[$max_v_samp_factor >> 2] | 0) | 0;
   HEAP32[$color_buf + ($ci$076 << 2) >> 2] = $call60;
  } while (0);
  $ci$076 = $ci$076 + 1 | 0;
  if (($ci$076 | 0) >= (HEAP32[$num_components >> 2] | 0)) break; else $compptr$075 = $compptr$075 + 88 | 0;
 }
 return;
}

function _h2v1_merged_upsample($cinfo, $input_buf, $in_row_group_ctr, $output_buf) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $output_buf = $output_buf | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $col$080 = 0, $conv = 0, $conv16 = 0, $conv27 = 0, $conv39 = 0, $conv40 = 0, $conv47 = 0, $conv9 = 0, $inptr0$0$lcssa = 0, $inptr0$077 = 0, $inptr1$0$lcssa = 0, $inptr1$078 = 0, $inptr2$0$lcssa = 0, $inptr2$079 = 0, $outptr$0$lcssa = 0, $outptr$076 = 0, $output_width = 0, $scevgep = 0, $shr = 0, $shr13 = 0, $shr45 = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 $1 = HEAP32[$cinfo + 336 >> 2] | 0;
 $2 = HEAP32[$0 + 16 >> 2] | 0;
 $3 = HEAP32[$0 + 20 >> 2] | 0;
 $4 = HEAP32[$0 + 24 >> 2] | 0;
 $5 = HEAP32[$0 + 28 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($in_row_group_ctr << 2) >> 2] | 0;
 $9 = HEAP32[(HEAP32[$input_buf + 4 >> 2] | 0) + ($in_row_group_ctr << 2) >> 2] | 0;
 $11 = HEAP32[(HEAP32[$input_buf + 8 >> 2] | 0) + ($in_row_group_ctr << 2) >> 2] | 0;
 $12 = HEAP32[$output_buf >> 2] | 0;
 $output_width = $cinfo + 112 | 0;
 $13 = HEAP32[$output_width >> 2] | 0;
 $shr = $13 >>> 1;
 if (!$shr) {
  $30 = $13;
  $inptr0$0$lcssa = $7;
  $inptr1$0$lcssa = $9;
  $inptr2$0$lcssa = $11;
  $outptr$0$lcssa = $12;
 } else {
  $scevgep = $9 + $shr | 0;
  $14 = $13 & -2;
  $15 = $shr * 6 | 0;
  $col$080 = $shr;
  $inptr0$077 = $7;
  $inptr1$078 = $9;
  $inptr2$079 = $11;
  $outptr$076 = $12;
  while (1) {
   $conv = HEAPU8[$inptr1$078 >> 0] | 0;
   $conv9 = HEAPU8[$inptr2$079 >> 0] | 0;
   $18 = HEAP32[$2 + ($conv9 << 2) >> 2] | 0;
   $shr13 = (HEAP32[$4 + ($conv9 << 2) >> 2] | 0) + (HEAP32[$5 + ($conv << 2) >> 2] | 0) >> 16;
   $21 = HEAP32[$3 + ($conv << 2) >> 2] | 0;
   $conv16 = HEAPU8[$inptr0$077 >> 0] | 0;
   HEAP8[$outptr$076 >> 0] = HEAP8[$1 + ($18 + $conv16) >> 0] | 0;
   HEAP8[$outptr$076 + 1 >> 0] = HEAP8[$1 + ($shr13 + $conv16) >> 0] | 0;
   HEAP8[$outptr$076 + 2 >> 0] = HEAP8[$1 + ($21 + $conv16) >> 0] | 0;
   $conv27 = HEAPU8[$inptr0$077 + 1 >> 0] | 0;
   HEAP8[$outptr$076 + 3 >> 0] = HEAP8[$1 + ($18 + $conv27) >> 0] | 0;
   HEAP8[$outptr$076 + 4 >> 0] = HEAP8[$1 + ($shr13 + $conv27) >> 0] | 0;
   HEAP8[$outptr$076 + 5 >> 0] = HEAP8[$1 + ($21 + $conv27) >> 0] | 0;
   $col$080 = $col$080 + -1 | 0;
   if (!$col$080) break; else {
    $inptr0$077 = $inptr0$077 + 2 | 0;
    $inptr1$078 = $inptr1$078 + 1 | 0;
    $inptr2$079 = $inptr2$079 + 1 | 0;
    $outptr$076 = $outptr$076 + 6 | 0;
   }
  }
  $30 = HEAP32[$output_width >> 2] | 0;
  $inptr0$0$lcssa = $7 + $14 | 0;
  $inptr1$0$lcssa = $scevgep;
  $inptr2$0$lcssa = $11 + $shr | 0;
  $outptr$0$lcssa = $12 + $15 | 0;
 }
 if (!($30 & 1)) return;
 $conv39 = HEAPU8[$inptr1$0$lcssa >> 0] | 0;
 $conv40 = HEAPU8[$inptr2$0$lcssa >> 0] | 0;
 $shr45 = (HEAP32[$4 + ($conv40 << 2) >> 2] | 0) + (HEAP32[$5 + ($conv39 << 2) >> 2] | 0) >> 16;
 $36 = HEAP32[$3 + ($conv39 << 2) >> 2] | 0;
 $conv47 = HEAPU8[$inptr0$0$lcssa >> 0] | 0;
 HEAP8[$outptr$0$lcssa >> 0] = HEAP8[$1 + ((HEAP32[$2 + ($conv40 << 2) >> 2] | 0) + $conv47) >> 0] | 0;
 HEAP8[$outptr$0$lcssa + 1 >> 0] = HEAP8[$1 + ($shr45 + $conv47) >> 0] | 0;
 HEAP8[$outptr$0$lcssa + 2 >> 0] = HEAP8[$1 + ($36 + $conv47) >> 0] | 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $CVQuals = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp2 = 0, $agg$tmp21 = 0, $agg$tmp25 = 0, $agg$tmp31 = 0, $agg$tmp31$byval_copy = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp31$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp7 = sp + 32 | 0;
 $agg$tmp14 = sp + 24 | 0;
 $agg$tmp21 = sp + 16 | 0;
 $agg$tmp25 = sp + 8 | 0;
 $agg$tmp31 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 16 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 255]($0, $S);
 $CVQuals = $this + 28 | 0;
 $2 = HEAP32[$CVQuals >> 2] | 0;
 if (!($2 & 1)) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 33109);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
  $3 = HEAP32[$CVQuals >> 2] | 0;
 }
 if (!($3 & 2)) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp14, 33116);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp14 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
  $4 = HEAP32[$CVQuals >> 2] | 0;
 }
 if ($4 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 33126);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 }
 switch (HEAP8[$this + 32 >> 0] | 0) {
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 33311);
   HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp25 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp31, 33314);
   HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp31 >> 2];
   HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp31 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
   break;
  }
 default:
  {}
 }
 $6 = HEAP32[$this + 24 >> 2] | 0;
 if ($6 | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($6, $S);
 STACKTOP = sp;
 return;
}

function _start_pass_2_quant($cinfo, $is_pre_scan) {
 $cinfo = $cinfo | 0;
 $is_pre_scan = $is_pre_scan | 0;
 var $0 = 0, $1 = 0, $14 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $call = 0, $dither_mode = 0, $fserrors = 0, $mul = 0, $needs_zeroed49 = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $1 = HEAP32[$0 + 24 >> 2] | 0;
 $dither_mode = $cinfo + 88 | 0;
 if (!(HEAP32[$dither_mode >> 2] | 0)) $3 = 0; else {
  HEAP32[$dither_mode >> 2] = 2;
  $3 = 2;
 }
 if (!$is_pre_scan) {
  HEAP32[$0 + 4 >> 2] = ($3 | 0) == 2 ? 20 : 21;
  HEAP32[$0 + 8 >> 2] = 183;
  $4 = HEAP32[$cinfo + 132 >> 2] | 0;
  if (($4 | 0) >= 1) {
   if (($4 | 0) > 256) {
    $8 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$8 + 20 >> 2] = 59;
    HEAP32[$8 + 24 >> 2] = 256;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
  } else {
   $5 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$5 + 20 >> 2] = 58;
   HEAP32[$5 + 24 >> 2] = 1;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
  if ((HEAP32[$dither_mode >> 2] | 0) == 2) {
   $mul = ((HEAP32[$cinfo + 112 >> 2] | 0) * 6 | 0) + 12 | 0;
   $fserrors = $0 + 32 | 0;
   $14 = HEAP32[$fserrors >> 2] | 0;
   if (!$14) {
    $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$cinfo + 4 >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, $mul) | 0;
    HEAP32[$fserrors >> 2] = $call;
    $17 = $call;
   } else $17 = $14;
   _memset($17 | 0, 0, $mul | 0) | 0;
   if (!(HEAP32[$0 + 40 >> 2] | 0)) _init_error_limit($cinfo);
   HEAP32[$0 + 36 >> 2] = 0;
  }
 } else {
  HEAP32[$0 + 4 >> 2] = 19;
  HEAP32[$0 + 8 >> 2] = 182;
  HEAP32[$0 + 28 >> 2] = 1;
 }
 $needs_zeroed49 = $0 + 28 | 0;
 if (!(HEAP32[$needs_zeroed49 >> 2] | 0)) return;
 _memset(HEAP32[$1 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 4 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 8 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 12 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 16 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 20 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 24 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 28 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 32 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 36 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 40 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 44 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 48 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 52 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 56 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 60 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 64 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 68 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 72 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 76 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 80 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 84 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 88 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 92 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 96 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 100 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 104 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 108 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 112 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 116 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 120 >> 2] | 0, 0, 4096) | 0;
 _memset(HEAP32[$1 + 124 >> 2] | 0, 0, 4096) | 0;
 HEAP32[$needs_zeroed49 >> 2] = 0;
 return;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$cast = 0, $0 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $add15 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$055 = 0, $cnt$1 = 0, $cnt$248 = 0, $cnt$3 = 0, $div = 0, $inc = 0, $n$addr$054 = 0, $n$addr$1 = 0, $n$addr$247 = 0, $s = 0, $spec$select = 0, $sub = 0, $tobool = 0, $wbuf = 0, $wn$addr$0 = 0, $wn$addr$153 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$446 = 0, $ws$0 = 0, $ws$140 = 0, $ws$156 = 0, $ws$2 = 0, $ws$349 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 $wbuf = sp;
 $s = sp + 1024 | 0;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $tobool = ($wcs | 0) != 0;
 $wn$addr$0 = $tobool ? $wn : 256;
 $ws$0 = $tobool ? $wcs : $wbuf;
 $$cast = $0;
 L1 : do if (($wn$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $9 = $$cast;
  $cnt$055 = 0;
  $n$addr$054 = $n;
  $wn$addr$153 = $wn$addr$0;
  $ws$156 = $ws$0;
  while (1) {
   $div = $n$addr$054 >>> 2;
   $cmp = $div >>> 0 >= $wn$addr$153 >>> 0;
   if (!($n$addr$054 >>> 0 > 131 | $cmp)) {
    $3 = $9;
    $cnt$1 = $cnt$055;
    $n$addr$1 = $n$addr$054;
    $wn$addr$3 = $wn$addr$153;
    $ws$140 = $ws$156;
    break L1;
   }
   $spec$select = $cmp ? $wn$addr$153 : $div;
   $sub = $n$addr$054 - $spec$select | 0;
   $call = _mbsrtowcs($ws$156, $s, $spec$select, $st) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($ws$156 | 0) == ($wbuf | 0);
   $wn$addr$2 = $wn$addr$153 - ($cmp11 ? 0 : $call) | 0;
   $ws$2 = $cmp11 ? $ws$156 : $ws$156 + ($call << 2) | 0;
   $add15 = $call + $cnt$055 | 0;
   $2 = HEAP32[$s >> 2] | 0;
   if (($wn$addr$2 | 0) != 0 & ($2 | 0) != 0) {
    $9 = $2;
    $cnt$055 = $add15;
    $n$addr$054 = $sub;
    $wn$addr$153 = $wn$addr$2;
    $ws$156 = $ws$2;
   } else {
    $3 = $2;
    $cnt$1 = $add15;
    $n$addr$1 = $sub;
    $wn$addr$3 = $wn$addr$2;
    $ws$140 = $ws$2;
    break L1;
   }
  }
  $3 = HEAP32[$s >> 2] | 0;
  $cnt$1 = -1;
  $n$addr$1 = $sub;
  $wn$addr$3 = 0;
  $ws$140 = $ws$156;
 } else {
  $3 = $$cast;
  $cnt$1 = 0;
  $n$addr$1 = $n;
  $wn$addr$3 = $wn$addr$0;
  $ws$140 = $ws$0;
 } while (0);
 L9 : do if (($3 | 0) != 0 ? ($wn$addr$3 | 0) != 0 & ($n$addr$1 | 0) != 0 : 0) {
  $5 = $3;
  $cnt$248 = $cnt$1;
  $n$addr$247 = $n$addr$1;
  $wn$addr$446 = $wn$addr$3;
  $ws$349 = $ws$140;
  while (1) {
   $call24 = _mbrtowc($ws$349, $5, $n$addr$247, $st) | 0;
   if (($call24 + 2 | 0) >>> 0 < 3) break;
   $5 = (HEAP32[$s >> 2] | 0) + $call24 | 0;
   HEAP32[$s >> 2] = $5;
   $n$addr$247 = $n$addr$247 - $call24 | 0;
   $wn$addr$446 = $wn$addr$446 + -1 | 0;
   $inc = $cnt$248 + 1 | 0;
   if (!(($wn$addr$446 | 0) != 0 & ($n$addr$247 | 0) != 0)) {
    $cnt$3 = $inc;
    break L9;
   } else {
    $cnt$248 = $inc;
    $ws$349 = $ws$349 + 4 | 0;
   }
  }
  switch ($call24 | 0) {
  case -1:
   {
    $cnt$3 = $call24;
    break L9;
    break;
   }
  case 0:
   {
    HEAP32[$s >> 2] = 0;
    $cnt$3 = $cnt$248;
    break L9;
    break;
   }
  default:
   {
    HEAP32[$st >> 2] = 0;
    $cnt$3 = $cnt$248;
    break L9;
   }
  }
 } else $cnt$3 = $cnt$1; while (0);
 if ($tobool) HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp21 = 0, $agg$tmp23 = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp25$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp15 = sp + 32 | 0;
 $agg$tmp18 = sp + 24 | 0;
 $agg$tmp21 = sp + 16 | 0;
 $agg$tmp23 = sp;
 $agg$tmp25 = sp + 8 | 0;
 $Pointee = $this + 8 | 0;
 $0 = HEAP32[$Pointee >> 2] | 0;
 do if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 10) if (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0) | 0) {
  $6 = HEAP32[$Pointee >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 29012);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  $7 = $6 + 12 | 0;
  $12 = HEAP32[$7 + 4 >> 2] | 0;
  $13 = $agg$tmp23;
  HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$13 + 4 >> 2] = $12;
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 29016);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp25 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  break;
 } else {
  $1 = HEAP32[$Pointee >> 2] | 0;
  label = 4;
  break;
 } else {
  $1 = $0;
  label = 4;
 } while (0);
 if ((label | 0) == 4) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 255]($1, $s);
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
   HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  }
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) : 0) {} else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 28941);
   HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 29010);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($this, $SoFar, $State) {
 $this = $this | 0;
 $SoFar = $SoFar | 0;
 $State = $State | 0;
 var $0 = 0, $1 = 0, $SSK = 0, $call3 = 0, $call46 = 0, $call8 = 0, $call9 = 0, $ref$tmp = 0, $retval$1 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SSK = sp;
 $ref$tmp = sp + 4 | 0;
 $0 = HEAP32[$SoFar >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 36 ? ($1 = HEAP32[$0 + 8 >> 2] | 0, HEAP32[$SSK >> 2] = $1, ($1 + -2 | 0) >>> 0 < 4) : 0) {
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $SSK) | 0;
  HEAP32[$SoFar >> 2] = $call3;
 }
 L7 : do if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 67) | 0)) if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 68) {
  $call46 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0;
  switch ($call46 << 24 >> 24) {
  case 53:
  case 50:
  case 49:
  case 48:
   break;
  default:
   {
    $retval$3 = 0;
    break L7;
   }
  }
  HEAP32[$SSK >> 2] = ($call46 << 24 >> 24) + -48;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
  if ($State | 0) HEAP8[$State >> 0] = 1;
  HEAP8[$ref$tmp >> 0] = 1;
  $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $SoFar, $ref$tmp, $SSK) | 0;
 } else $retval$3 = 0; else {
  $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 73) | 0;
  $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
  switch ($call9 << 24 >> 24) {
  case 53:
  case 51:
  case 50:
  case 49:
   break;
  default:
   {
    $retval$3 = 0;
    break L7;
   }
  }
  HEAP32[$SSK >> 2] = ($call9 << 24 >> 24) + -48;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
  if ($State | 0) HEAP8[$State >> 0] = 1;
  if ($call8 ? (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0) == 0 : 0) $retval$1 = 0; else {
   HEAP8[$ref$tmp >> 0] = 0;
   $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $SoFar, $ref$tmp, $SSK) | 0;
  }
  $retval$3 = $retval$1;
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $ExprList = 0, $InitList = 0, $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp2 = 0, $agg$tmp20 = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $agg$tmp6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp23$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp6 = sp + 32 | 0;
 $agg$tmp12 = sp + 24 | 0;
 $agg$tmp15 = sp + 16 | 0;
 $agg$tmp20 = sp + 8 | 0;
 $agg$tmp23 = sp;
 if (HEAP8[$this + 28 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30261);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 30273);
 HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 if (HEAP8[$this + 29 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 30277);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
 $ExprList = $this + 8 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($ExprList) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 28941);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($ExprList, $S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 28937);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 $InitList = $this + 20 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($InitList) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp20, 28941);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp20 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp20 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($InitList, $S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23, 28937);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $InfixOperator = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp12 = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp5 = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp18$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp3 = sp + 40 | 0;
 $agg$tmp5 = sp + 32 | 0;
 $agg$tmp7 = sp;
 $agg$tmp10 = sp + 24 | 0;
 $agg$tmp12 = sp + 16 | 0;
 $agg$tmp18 = sp + 8 | 0;
 $InfixOperator = $this + 12 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18$byval_copy, 29016);
 if (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $agg$tmp18$byval_copy) | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
  HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 28941);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 31684);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 $1 = $InfixOperator;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp7;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 31687);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 20 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 28937);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18$byval_copy, 29016);
 if (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $agg$tmp18$byval_copy) | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 28937);
  HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 }
 STACKTOP = sp;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($this) {
 $this = $this | 0;
 var $TA = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call12 = 0, $call13 = 0, $call21 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp10$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp10 = sp + 8 | 0;
 $TA = sp;
 do if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30730);
  HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp10$byval_copy) | 0) {
   $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 30733);
  HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
  HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp10$byval_copy) | 0;
  $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call12, 0) | 0;
  HEAP32[$agg$tmp10$byval_copy >> 2] = $call13;
  if ($call13) if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
   $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call12, 0) | 0;
   HEAP32[$TA >> 2] = $call21;
   if (!$call21) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $agg$tmp10$byval_copy, $TA) | 0;
   $retval$1 = $retval$0;
  } else $retval$1 = $call13; else $retval$1 = 0;
  $retval$2 = $retval$1;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $11 = 0, $16 = 0, $17 = 0, $21 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $Type = 0, $Value = 0, $agg$tmp = 0, $agg$tmp11 = 0, $agg$tmp13 = 0, $agg$tmp16 = 0, $agg$tmp24 = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $call8 = 0, $tmpcast7$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $tmpcast7$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp3 = sp + 16 | 0;
 $agg$tmp6 = sp + 40 | 0;
 $agg$tmp11 = sp + 32 | 0;
 $agg$tmp13 = sp + 24 | 0;
 $agg$tmp16 = sp + 8 | 0;
 $agg$tmp24 = sp;
 $Type = $this + 8 | 0;
 if ((__ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0) >>> 0 > 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  $0 = $Type;
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $6 = $agg$tmp3;
  HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 28937);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 $Value = $this + 16 | 0;
 $call8 = __ZNK12_GLOBAL__N_110StringViewixEm($Value) | 0;
 if ((HEAP8[$call8 >> 0] | 0) == 110) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 29528);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp11 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp13, $Value, 1);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp13 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 } else {
  $11 = $Value;
  $16 = HEAP32[$11 + 4 >> 2] | 0;
  $17 = $agg$tmp16;
  HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$17 + 4 >> 2] = $16;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp16 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 if ((__ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0) >>> 0 < 4) {
  $21 = $Type;
  $26 = HEAP32[$21 + 4 >> 2] | 0;
  $27 = $agg$tmp24;
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$27 + 4 >> 2] = $26;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp24 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEm($this, $__nbc) {
 $this = $this | 0;
 $__nbc = $__nbc | 0;
 var $0 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $__cp$0 = 0, $__i$0 = 0, $__np$0 = 0, $__phash$0$ph$ph = 0, $__pp$0$ph = 0, $__pp$0$ph$ph = 0, $__value_ = 0, $__value_$i$i = 0, $__value_$i$i$i = 0, $arrayidx$i62 = 0, $call$i$i$i = 0, $cond6$i = 0, $cond6$i76 = 0, $exception$i$i$i = 0, $sub$i67 = 0, $tobool$i69 = 0;
 $__value_$i$i$i = $this + 4 | 0;
 L1 : do if ($__nbc) {
  if ($__nbc >>> 0 > 1073741823) {
   $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22440);
   HEAP32[$exception$i$i$i >> 2] = 15092;
   ___cxa_throw($exception$i$i$i | 0, 11840, 6);
  }
  $call$i$i$i = __Znwm($__nbc << 2) | 0;
  $0 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  if ($0 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, HEAP32[$this + 4 >> 2] << 2);
  HEAP32[$__value_$i$i$i >> 2] = $__nbc;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) == ($__nbc | 0)) break;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__i$0 << 2) >> 2] = 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
  $__value_$i$i = $this + 8 | 0;
  $2 = HEAP32[$__value_$i$i >> 2] | 0;
  if ($2 | 0) {
   $4 = HEAP32[$2 + 4 >> 2] | 0;
   $sub$i67 = $__nbc + -1 | 0;
   $tobool$i69 = ($sub$i67 & $__nbc | 0) == 0;
   if (!$tobool$i69) if ($4 >>> 0 < $__nbc >>> 0) $cond6$i76 = $4; else $cond6$i76 = ($4 >>> 0) % ($__nbc >>> 0) | 0; else $cond6$i76 = $4 & $sub$i67;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i76 << 2) >> 2] = $__value_$i$i;
   $__phash$0$ph$ph = $cond6$i76;
   $__pp$0$ph$ph = $2;
   while (1) {
    $__pp$0$ph = $__pp$0$ph$ph;
    L25 : while (1) {
     while (1) {
      $__cp$0 = HEAP32[$__pp$0$ph >> 2] | 0;
      if (!$__cp$0) break L1;
      $6 = HEAP32[$__cp$0 + 4 >> 2] | 0;
      if (!$tobool$i69) if ($6 >>> 0 < $__nbc >>> 0) $cond6$i = $6; else $cond6$i = ($6 >>> 0) % ($__nbc >>> 0) | 0; else $cond6$i = $6 & $sub$i67;
      if (($cond6$i | 0) == ($__phash$0$ph$ph | 0)) break;
      $arrayidx$i62 = (HEAP32[$this >> 2] | 0) + ($cond6$i << 2) | 0;
      if (!(HEAP32[$arrayidx$i62 >> 2] | 0)) break L25;
      $__value_ = $__cp$0 + 8 | 0;
      $__np$0 = $__cp$0;
      while (1) {
       $9 = HEAP32[$__np$0 >> 2] | 0;
       if (!$9) break;
       if ((HEAP32[$__value_ >> 2] | 0) == (HEAP32[$9 + 8 >> 2] | 0)) $__np$0 = $9; else break;
      }
      HEAP32[$__pp$0$ph >> 2] = $9;
      HEAP32[$__np$0 >> 2] = HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2];
      HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2] = $__cp$0;
     }
     $__pp$0$ph = $__cp$0;
    }
    HEAP32[$arrayidx$i62 >> 2] = $__pp$0$ph;
    $__phash$0$ph$ph = $cond6$i;
    $__pp$0$ph$ph = $__cp$0;
   }
  }
 } else {
  $18 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = 0;
  if ($18 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($18, HEAP32[$this + 4 >> 2] << 2);
  HEAP32[$__value_$i$i$i >> 2] = 0;
 } while (0);
 return;
}

function _getIsetWidth($id, $datasetPathname) {
 $id = $id | 0;
 $datasetPathname = $datasetPathname | 0;
 var $10 = 0, $2 = 0, $3 = 0, $__size_$i$i$i$i = 0, $call1037 = 0, $call103840 = 0, $call22 = 0, $call7 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i42 = 0, $cond$i6$i = 0, $conv$i$i27 = 0, $id$addr = 0, $imageSet = 0, $retval$1 = 0, $tobool$i$i24 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer16 = sp + 56 | 0;
 $vararg_buffer14 = sp + 48 | 0;
 $vararg_buffer11 = sp + 40 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $id$addr = sp + 60 | 0;
 HEAP32[$id$addr >> 2] = $id;
 do if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(41812, $id$addr) | 0) {
  $call7 = __ZNSt3__213unordered_mapIi6arFsetNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(41812, $id$addr) | 0;
  $__size_$i$i$i$i = $datasetPathname + 11 | 0;
  if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$datasetPathname >> 2] | 0; else $cond$i$i$i = $datasetPathname;
  HEAP32[$vararg_buffer >> 2] = $cond$i$i$i;
  _arLog(0, 1, 22835, $vararg_buffer);
  $2 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
  $tobool$i$i24 = $2 << 24 >> 24 < 0;
  if ($tobool$i$i24) {
   $3 = HEAP32[$datasetPathname + 4 >> 2] | 0;
   $call1037 = __Znam($3 + 1 | 0) | 0;
   $call103840 = $call1037;
   $cond$i$i42 = HEAP32[$datasetPathname >> 2] | 0;
   $cond$i6$i = $3;
  } else {
   $conv$i$i27 = $2 & 255;
   $call103840 = __Znam($conv$i$i27 + 1 | 0) | 0;
   $cond$i$i42 = $datasetPathname;
   $cond$i6$i = $conv$i$i27;
  }
  if ($cond$i6$i | 0) _memmove($call103840 | 0, $cond$i$i42 | 0, $cond$i6$i | 0) | 0;
  if ($tobool$i$i24) $cond$i = HEAP32[$datasetPathname + 4 >> 2] | 0; else $cond$i = $2 & 255;
  HEAP8[$call103840 + $cond$i >> 0] = 0;
  HEAP32[$vararg_buffer1 >> 2] = $call103840;
  _arLog(0, 1, 22859, $vararg_buffer1);
  _arLog(0, 1, 22876, $vararg_buffer4);
  _arLog(0, 1, 22897, $vararg_buffer6);
  _ar2UtilRemoveExt($call103840) | 0;
  $call22 = _ar2ReadImageSet($call103840) | 0;
  $imageSet = $call7 + 28 | 0;
  HEAP32[$imageSet >> 2] = $call22;
  HEAP32[$vararg_buffer8 >> 2] = $call22;
  _arLog(0, 1, 22913, $vararg_buffer8);
  if (!(HEAP32[$imageSet >> 2] | 0)) {
   HEAP32[$vararg_buffer11 >> 2] = $call103840;
   _arLog(0, 3, 22931, $vararg_buffer11);
   _exit(0);
  } else {
   _arLog(0, 1, 22957, $vararg_buffer14);
   $10 = HEAP32[(HEAP32[HEAP32[HEAP32[$imageSet >> 2] >> 2] >> 2] | 0) + 4 >> 2] | 0;
   _arLog(0, 1, 22965, $vararg_buffer16);
   __ZdaPv($call103840);
   $retval$1 = $10;
   break;
  }
 } else $retval$1 = -1; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $5 = 0, $6 = 0, $conv14 = 0, $conv158 = 0, $conv162 = 0, $conv33 = 0, $conv87 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0;
 $$pre = $frm_end;
 if (((($mode & 4 | 0) != 0 ? ($$pre - $frm | 0) > 2 : 0) ? (HEAP8[$frm >> 0] | 0) == -17 : 0) ? (HEAP8[$frm + 1 >> 0] | 0) == -69 : 0) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm;
 $frm_nxt$1 = $frm_nxt$1$ph;
 $nchar16_t$0 = 0;
 L7 : while (1) {
  if (!($nchar16_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $3 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $3 & 255;
  if ($conv14 >>> 0 > $Maxcode >>> 0) break;
  do if ($3 << 24 >> 24 <= -1) {
   if (($3 & 255) < 194) break L7;
   if (($3 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L7;
    $conv33 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($conv33 & 192 | 0) != 128) break L7;
    if (($conv33 & 63 | $conv14 << 6 & 1984) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($3 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L7;
    $5 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $6 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($3 << 24 >> 24) {
    case -32:
     {
      if (($5 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($5 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($5 & -64) << 24 >> 24 != -128) break L7;
    }
    $conv87 = $6 & 255;
    if (($conv87 & 192 | 0) != 128) break L7;
    if ((($5 & 63) << 6 | $conv14 << 12 & 61440 | $conv87 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($3 & 255) >= 245) break L7;
   if (($mx - $nchar16_t$0 | 0) >>> 0 < 2 | ($$pre - $frm_nxt$1 | 0) < 4) break L7;
   $11 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $12 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $13 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case -16:
    {
     if (($11 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($11 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($11 & -64) << 24 >> 24 != -128) break L7;
   }
   $conv158 = $12 & 255;
   if (($conv158 & 192 | 0) != 128) break L7;
   $conv162 = $13 & 255;
   if (($conv162 & 192 | 0) != 128) break L7;
   if ((($11 & 63) << 12 | $conv14 << 18 & 1835008 | $conv158 << 6 & 4032 | $conv162 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
    $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
    $nchar16_t$2 = $nchar16_t$0 + 1 | 0;
   }
  } else {
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
   $nchar16_t$2 = $nchar16_t$0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar16_t$0 = $nchar16_t$2 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $call3 = 0, $frombool = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp2 = sp + 28 | 0;
 $agg$tmp9 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  $call3 = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp9$byval_copy, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $call3;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 43072) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 43080) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 255]($agg$tmp$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 255]($agg$tmp$byval_copy + 12 | 0, $call$i16);
  HEAP32[$agg$tmp9 >> 2] = HEAP32[$__e >> 2];
  $add$ptr = $agg$tmp$byval_copy + 24 | 0;
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  $frombool = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp9$byval_copy, $agg$tmp$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp$byval_copy | 0) & 1;
  HEAP8[$__v >> 0] = $frombool;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $call3 = 0, $frombool = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp2 = sp + 28 | 0;
 $agg$tmp9 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  $call3 = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp9$byval_copy, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $call3;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 43040) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 43056) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 255]($agg$tmp$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 255]($agg$tmp$byval_copy + 12 | 0, $call$i16);
  HEAP32[$agg$tmp9 >> 2] = HEAP32[$__e >> 2];
  $add$ptr = $agg$tmp$byval_copy + 24 | 0;
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  $frombool = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp9$byval_copy, $agg$tmp$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp$byval_copy | 0) & 1;
  HEAP8[$__v >> 0] = $frombool;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($this) {
 $this = $this | 0;
 var $agg$tmp = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp7$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp7 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31884);
 HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 31887);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0 ? (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0), !(__ZNK12_GLOBAL__N_110StringView5emptyEv($agg$tmp7$byval_copy) | 0)) : 0) ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 112) | 0 : 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp7$byval_copy) | 0; else $retval$1 = 0;
   $retval$2 = $retval$1;
  } else $retval$2 = 0;
 } else {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0);
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp7$byval_copy) | 0; else $retval$0 = 0;
  $retval$2 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _jinit_merged_upsampler($cinfo) {
 $cinfo = $cinfo | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $Cb_b_tab$i = 0, $Cr_g_tab$i = 0, $Cr_r_tab$i = 0, $add21$i = 0, $add21$i48 = 0, $call = 0, $call$i = 0, $call10 = 0, $call10$i = 0, $call4$i = 0, $call7$i = 0, $cmp15 = 0, $i$028$i = 0, $i$028$i36 = 0, $mem = 0, $mul = 0, $mul17$i = 0, $mul17$i45 = 0, $upsample1 = 0, $upsample6 = 0, $x$029$i = 0, $x$029$i35 = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 48) | 0;
 $upsample1 = $cinfo + 476 | 0;
 HEAP32[$upsample1 >> 2] = $call;
 HEAP32[$call >> 2] = 172;
 HEAP32[$call + 8 >> 2] = 0;
 $mul = Math_imul(HEAP32[$cinfo + 120 >> 2] | 0, HEAP32[$cinfo + 112 >> 2] | 0) | 0;
 HEAP32[$call + 40 >> 2] = $mul;
 $upsample6 = $call + 4 | 0;
 if ((HEAP32[$cinfo + 320 >> 2] | 0) == 2) {
  HEAP32[$upsample6 >> 2] = 1;
  HEAP32[$call + 12 >> 2] = 9;
  $call10 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, $mul) | 0;
  HEAP32[$call + 32 >> 2] = $call10;
  $10 = HEAP32[$upsample1 >> 2] | 0;
 } else {
  HEAP32[$upsample6 >> 2] = 2;
  HEAP32[$call + 12 >> 2] = 10;
  HEAP32[$call + 32 >> 2] = 0;
  $10 = $call;
 }
 $cmp15 = (HEAP32[$cinfo + 40 >> 2] | 0) == 7;
 $call$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
 $Cr_r_tab$i = $10 + 16 | 0;
 HEAP32[$Cr_r_tab$i >> 2] = $call$i;
 $call4$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
 $Cb_b_tab$i = $10 + 20 | 0;
 HEAP32[$Cb_b_tab$i >> 2] = $call4$i;
 $call7$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
 $Cr_g_tab$i = $10 + 24 | 0;
 HEAP32[$Cr_g_tab$i >> 2] = $call7$i;
 $call10$i = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 1024) | 0;
 HEAP32[$10 + 28 >> 2] = $call10$i;
 $17 = HEAP32[$Cr_r_tab$i >> 2] | 0;
 $18 = HEAP32[$Cb_b_tab$i >> 2] | 0;
 $19 = HEAP32[$Cr_g_tab$i >> 2] | 0;
 if ($cmp15) {
  $i$028$i = 0;
  $x$029$i = -128;
  while (1) {
   HEAP32[$17 + ($i$028$i << 2) >> 2] = ($x$029$i * 183763 | 0) + 32768 >> 16;
   HEAP32[$18 + ($i$028$i << 2) >> 2] = ($x$029$i * 232260 | 0) + 32768 >> 16;
   $mul17$i = Math_imul($x$029$i, -93603) | 0;
   HEAP32[$19 + ($i$028$i << 2) >> 2] = $mul17$i;
   $add21$i = (Math_imul($x$029$i, -45107) | 0) + 32768 | 0;
   HEAP32[$call10$i + ($i$028$i << 2) >> 2] = $add21$i;
   $i$028$i = $i$028$i + 1 | 0;
   if (($i$028$i | 0) == 256) break; else $x$029$i = $x$029$i + 1 | 0;
  }
  return;
 } else {
  $i$028$i36 = 0;
  $x$029$i35 = -128;
  while (1) {
   HEAP32[$17 + ($i$028$i36 << 2) >> 2] = ($x$029$i35 * 91881 | 0) + 32768 >> 16;
   HEAP32[$18 + ($i$028$i36 << 2) >> 2] = ($x$029$i35 * 116130 | 0) + 32768 >> 16;
   $mul17$i45 = Math_imul($x$029$i35, -46802) | 0;
   HEAP32[$19 + ($i$028$i36 << 2) >> 2] = $mul17$i45;
   $add21$i48 = (Math_imul($x$029$i35, -22553) | 0) + 32768 | 0;
   HEAP32[$call10$i + ($i$028$i36 << 2) >> 2] = $add21$i48;
   $i$028$i36 = $i$028$i36 + 1 | 0;
   if (($i$028$i36 | 0) == 256) break; else $x$029$i35 = $x$029$i35 + 1 | 0;
  }
  return;
 }
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp1 = 0, $retval$1 = 0, $sub$ptr$div19 = 0, $sub$ptr$sub18 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp1 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$cmp1 ? (HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0) : 0) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp1 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (($__ct | 0) == ($__thousands_sep | 0) ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 104 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub18 = $__first$addr$0$lcssa$i - $__atoms | 0;
  $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
  if (($sub$ptr$sub18 | 0) > 92) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$div19 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub18 | 0) >= 88) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[10896 + $sub$ptr$div19 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[10896 + $sub$ptr$div19 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i8 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43080) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 255]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 255]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 8 + 3 | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $7 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i2$i$i = $agg$tmp$byval_copy + 4 | 0;
  $10 = $7;
  $8 = $6;
  $__i$sroa$0$0 = $6 << 24 >> 24 < 0 ? $7 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i8 = $8 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i8 ? $10 : $agg$tmp$byval_copy) + (($tobool$i$i$i8 ? HEAP32[$__size_$i2$i$i >> 2] | 0 : $8 & 255) << 2) | 0)) break;
   $11 = HEAP32[$__i$sroa$0$0 >> 2] | 0;
   $12 = HEAP32[$__s >> 2] | 0;
   if ($12 | 0) {
    $__nout_$i$i = $12 + 24 | 0;
    $13 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($13 | 0) == (HEAP32[$12 + 28 >> 2] | 0)) {
     $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$15 & 63]($12, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $11;
     $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[$__s >> 2] = 0;
   }
   $10 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 4 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$cast = 0, $0 = 0, $10 = 0, $2 = 0, $3 = 0, $6 = 0, $add15 = 0, $add35 = 0, $buf = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$054 = 0, $cnt$1 = 0, $cnt$247 = 0, $cnt$3 = 0, $n$addr$0 = 0, $n$addr$152 = 0, $n$addr$2 = 0, $n$addr$3 = 0, $n$addr$445 = 0, $s$0 = 0, $s$139 = 0, $s$155 = 0, $s$2 = 0, $s$348 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$246 = 0, $ws = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $buf = sp;
 $ws = sp + 256 | 0;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $tobool = ($dst | 0) != 0;
 $n$addr$0 = $tobool ? $n : 256;
 $s$0 = $tobool ? $dst : $buf;
 $$cast = $0;
 L1 : do if (($n$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $10 = $$cast;
  $cnt$054 = 0;
  $n$addr$152 = $n$addr$0;
  $s$155 = $s$0;
  $wn$addr$053 = $wn;
  while (1) {
   $cmp = $wn$addr$053 >>> 0 >= $n$addr$152 >>> 0;
   if (!($cmp | $wn$addr$053 >>> 0 > 32)) {
    $3 = $10;
    $cnt$1 = $cnt$054;
    $n$addr$3 = $n$addr$152;
    $s$139 = $s$155;
    $wn$addr$1 = $wn$addr$053;
    break L1;
   }
   $spec$select = $cmp ? $n$addr$152 : $wn$addr$053;
   $sub = $wn$addr$053 - $spec$select | 0;
   $call = _wcsrtombs($s$155, $ws, $spec$select, 0) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($s$155 | 0) == ($buf | 0);
   $n$addr$2 = $n$addr$152 - ($cmp11 ? 0 : $call) | 0;
   $s$2 = $cmp11 ? $s$155 : $s$155 + $call | 0;
   $add15 = $call + $cnt$054 | 0;
   $2 = HEAP32[$ws >> 2] | 0;
   if (($n$addr$2 | 0) != 0 & ($2 | 0) != 0) {
    $10 = $2;
    $cnt$054 = $add15;
    $n$addr$152 = $n$addr$2;
    $s$155 = $s$2;
    $wn$addr$053 = $sub;
   } else {
    $3 = $2;
    $cnt$1 = $add15;
    $n$addr$3 = $n$addr$2;
    $s$139 = $s$2;
    $wn$addr$1 = $sub;
    break L1;
   }
  }
  $3 = HEAP32[$ws >> 2] | 0;
  $cnt$1 = -1;
  $n$addr$3 = 0;
  $s$139 = $s$155;
  $wn$addr$1 = $sub;
 } else {
  $3 = $$cast;
  $cnt$1 = 0;
  $n$addr$3 = $n$addr$0;
  $s$139 = $s$0;
  $wn$addr$1 = $wn;
 } while (0);
 L9 : do if (($3 | 0) != 0 ? ($n$addr$3 | 0) != 0 & ($wn$addr$1 | 0) != 0 : 0) {
  $6 = $3;
  $cnt$247 = $cnt$1;
  $n$addr$445 = $n$addr$3;
  $s$348 = $s$139;
  $wn$addr$246 = $wn$addr$1;
  while (1) {
   $call24 = _wcrtomb($s$348, HEAP32[$6 >> 2] | 0, 0) | 0;
   if (($call24 + 1 | 0) >>> 0 < 2) break;
   $6 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
   HEAP32[$ws >> 2] = $6;
   $wn$addr$246 = $wn$addr$246 + -1 | 0;
   $n$addr$445 = $n$addr$445 - $call24 | 0;
   $add35 = $call24 + $cnt$247 | 0;
   if (!(($n$addr$445 | 0) != 0 & ($wn$addr$246 | 0) != 0)) {
    $cnt$3 = $add35;
    break L9;
   } else {
    $cnt$247 = $add35;
    $s$348 = $s$348 + $call24 | 0;
   }
  }
  if (!$call24) {
   HEAP32[$ws >> 2] = 0;
   $cnt$3 = $cnt$247;
  } else $cnt$3 = -1;
 } else $cnt$3 = $cnt$1; while (0);
 if ($tobool) HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i9 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43056) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 255]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 255]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 11 | 0;
  $5 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $6 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i3$i$i = $agg$tmp$byval_copy + 4 | 0;
  $7 = $5;
  $9 = $6;
  $__i$sroa$0$0 = $5 << 24 >> 24 < 0 ? $6 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i9 = $7 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i9 ? $9 : $agg$tmp$byval_copy) + ($tobool$i$i$i9 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $7 & 255) | 0)) break;
   $10 = HEAP8[$__i$sroa$0$0 >> 0] | 0;
   $11 = HEAP32[$__s >> 2] | 0;
   if ($11 | 0) {
    $__nout_$i$i = $11 + 24 | 0;
    $12 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($12 | 0) == (HEAP32[$11 + 28 >> 2] | 0)) {
     $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$14 & 63]($11, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $10;
     $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$__s >> 2] = 0;
   }
   $7 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $9 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 1 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp2 = 0, $retval$1 = 0, $sub$ptr$sub25 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp2 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$cmp2 ? (HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24 : 0) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp2 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 26 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub25 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub25 | 0) > 23) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$sub25 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub25 | 0) >= 22) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[10896 + $sub$ptr$sub25 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[10896 + $sub$ptr$sub25 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $c$036 = 0, $c$2 = 0, $call71 = 0, $conv42 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $locale = 0, $n$addr$035 = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0, $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $dummy = sp;
 $spec$select = ($st | 0) == 0 ? 41932 : $st;
 $0 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$src) if (!$0) $retval$0 = 0; else label = 19; else {
  $spec$select32 = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $retval$0 = -2; else {
   if (!$0) {
    $1 = HEAP8[$src >> 0] | 0;
    if ($1 << 24 >> 24 > -1) {
     HEAP32[$spec$select32 >> 2] = $1 & 255;
     $retval$0 = $1 << 24 >> 24 != 0 & 1;
     break;
    }
    $locale = (___pthread_self_11() | 0) + 188 | 0;
    $4 = HEAP8[$src >> 0] | 0;
    if (!(HEAP32[HEAP32[$locale >> 2] >> 2] | 0)) {
     HEAP32[$spec$select32 >> 2] = $4 << 24 >> 24 & 57343;
     $retval$0 = 1;
     break;
    }
    $sub = ($4 & 255) + -194 | 0;
    if ($sub >>> 0 > 50) {
     label = 19;
     break;
    }
    $5 = HEAP32[3664 + ($sub << 2) >> 2] | 0;
    $dec = $n + -1 | 0;
    if (!$dec) $c$2 = $5; else {
     $c$036 = $5;
     $n$addr$035 = $dec;
     $s$037 = $src + 1 | 0;
     label = 11;
    }
   } else {
    $c$036 = $0;
    $n$addr$035 = $n;
    $s$037 = $src;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $conv42 = HEAPU8[$s$037 >> 0] | 0;
    $7 = $conv42 >>> 3;
    if (($7 + -16 | $7 + ($c$036 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $or5446 = $conv42 + -128 | $c$036 << 6;
    $dec5547 = $n$addr$035 + -1 | 0;
    if (($or5446 | 0) < 0) {
     $dec5551 = $dec5547;
     $or5450 = $or5446;
     $s$037$pn = $s$037;
     while (1) {
      $s$037$pn = $s$037$pn + 1 | 0;
      if (!$dec5551) {
       $c$2 = $or5450;
       break L14;
      }
      $8 = HEAP8[$s$037$pn >> 0] | 0;
      if (($8 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $or54 = ($8 & 255) + -128 | $or5450 << 6;
      $dec55 = $dec5551 + -1 | 0;
      if (($or54 | 0) >= 0) {
       $dec55$lcssa = $dec55;
       $or54$lcssa = $or54;
       break;
      } else {
       $dec5551 = $dec55;
       $or5450 = $or54;
      }
     }
    } else {
     $dec55$lcssa = $dec5547;
     $or54$lcssa = $or5446;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select32 >> 2] = $or54$lcssa;
    $retval$0 = $n - $dec55$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $c$2;
   $retval$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  $call71 = ___errno_location() | 0;
  HEAP32[$call71 >> 2] = 25;
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $5 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i6380 = 0, $cond$i32 = 0, $cond$i38 = 0, $cond$i72 = 0, $cond$i74 = 0, $scevgep84 = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $__temp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i32 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $cond$i74 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i32 = 10;
  $cond$i74 = $0 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i6380 = HEAP32[$this >> 2] | 0;
   $cond$i72 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i6380 = $this;
   $cond$i72 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i6380, $cond$i$i6380 + $cond$i72 | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $5 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i = $5 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $5 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__temp);
   break;
  }
  if (($cond$i32 - $cond$i74 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i32, $cond$i74 + $sub$ptr$sub$i$i - $cond$i32 | 0, $cond$i74, $cond$i74, 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i38 = HEAP32[$this >> 2] | 0; else $cond$i38 = $this;
  $scevgep84 = $__last + ($cond$i74 - $sub$ptr$rhs$cast$i$i) | 0;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i38 + $cond$i74 | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$__temp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i38 + $scevgep84 | 0, $__temp);
  $add20 = $cond$i74 + $sub$ptr$sub$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $incdec$ptr84 = 0, $retval$2 = 0, $sub$ptr$sub39 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre39 = $to_end;
 if ($mode & 2) if (($$pre39 - $to | 0) < 3) $retval$2 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $0 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $0 + 1;
  HEAP8[$0 >> 0] = -69;
  $1 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = -65;
  label = 4;
 } else label = 4;
 L4 : do if ((label | 0) == 4) {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($2 >>> 0 >= $frm_end >>> 0) {
    $retval$2 = 0;
    break L4;
   }
   $3 = HEAP32[$2 >> 2] | 0;
   if ($3 >>> 0 > $Maxcode >>> 0 | ($3 & -2048 | 0) == 55296) {
    $retval$2 = 2;
    break L4;
   }
   do if ($3 >>> 0 >= 128) {
    if ($3 >>> 0 < 2048) {
     $5 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre39 - $5 | 0) < 2) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $5 + 1;
     HEAP8[$5 >> 0] = $3 >>> 6 | 192;
     $6 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $6 + 1;
     HEAP8[$6 >> 0] = $3 & 63 | 128;
     break;
    }
    $7 = HEAP32[$to_nxt >> 2] | 0;
    $sub$ptr$sub39 = $$pre39 - $7 | 0;
    if ($3 >>> 0 < 65536) {
     if (($sub$ptr$sub39 | 0) < 3) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $3 >>> 12 | 224;
     $8 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $8 + 1;
     HEAP8[$8 >> 0] = $3 >>> 6 & 63 | 128;
     $9 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $9 + 1;
     HEAP8[$9 >> 0] = $3 & 63 | 128;
     break;
    } else {
     if (($sub$ptr$sub39 | 0) < 4) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $3 >>> 18 | 240;
     $10 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $10 + 1;
     HEAP8[$10 >> 0] = $3 >>> 12 & 63 | 128;
     $11 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $3 >>> 6 & 63 | 128;
     $12 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $3 & 63 | 128;
     break;
    }
   } else {
    $4 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre39 - $4 | 0) < 1) {
     $retval$2 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $4 + 1;
    HEAP8[$4 >> 0] = $3;
   } while (0);
   $incdec$ptr84 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr84;
   $2 = $incdec$ptr84;
  }
 } while (0);
 return $retval$2 | 0;
}

function _jpeg_huff_decode($state, $get_buffer, $bits_left, $htbl, $min_bits) {
 $state = $state | 0;
 $get_buffer = $get_buffer | 0;
 $bits_left = $bits_left | 0;
 $htbl = $htbl | 0;
 $min_bits = $min_bits | 0;
 var $7 = 0, $8 = 0, $and = 0, $bits_left$addr$0 = 0, $bits_left$addr$1$lcssa = 0, $bits_left$addr$142 = 0, $bits_left$addr$2 = 0, $bits_left14 = 0, $code$0$lcssa = 0, $code$045 = 0, $get_buffer$addr$0 = 0, $get_buffer$addr$1$lcssa = 0, $get_buffer$addr$143 = 0, $get_buffer$addr$2 = 0, $get_buffer13 = 0, $inc = 0, $l$0$lcssa = 0, $l$044 = 0, $or = 0, $retval$0 = 0, $shl = 0, $sub = 0, $sub16 = 0;
 do if (($bits_left | 0) < ($min_bits | 0)) if (!(_jpeg_fill_bit_buffer($state, $get_buffer, $bits_left, $min_bits) | 0)) {
  $retval$0 = -1;
  return $retval$0 | 0;
 } else {
  $bits_left$addr$0 = HEAP32[$state + 12 >> 2] | 0;
  $get_buffer$addr$0 = HEAP32[$state + 8 >> 2] | 0;
  break;
 } else {
  $bits_left$addr$0 = $bits_left;
  $get_buffer$addr$0 = $get_buffer;
 } while (0);
 $sub = $bits_left$addr$0 - $min_bits | 0;
 $and = $get_buffer$addr$0 >> $sub & HEAP32[3152 + ($min_bits << 2) >> 2];
 $get_buffer13 = $state + 8 | 0;
 $bits_left14 = $state + 12 | 0;
 L7 : do if (($and | 0) > (HEAP32[$htbl + ($min_bits << 2) >> 2] | 0)) {
  $bits_left$addr$142 = $sub;
  $code$045 = $and;
  $get_buffer$addr$143 = $get_buffer$addr$0;
  $l$044 = $min_bits;
  while (1) {
   $shl = $code$045 << 1;
   if (($bits_left$addr$142 | 0) < 1) {
    if (!(_jpeg_fill_bit_buffer($state, $get_buffer$addr$143, $bits_left$addr$142, 1) | 0)) {
     $retval$0 = -1;
     break;
    }
    $bits_left$addr$2 = HEAP32[$bits_left14 >> 2] | 0;
    $get_buffer$addr$2 = HEAP32[$get_buffer13 >> 2] | 0;
   } else {
    $bits_left$addr$2 = $bits_left$addr$142;
    $get_buffer$addr$2 = $get_buffer$addr$143;
   }
   $sub16 = $bits_left$addr$2 + -1 | 0;
   $or = $get_buffer$addr$2 >>> $sub16 & 1 | $shl;
   $inc = $l$044 + 1 | 0;
   if (($or | 0) > (HEAP32[$htbl + ($inc << 2) >> 2] | 0)) {
    $bits_left$addr$142 = $sub16;
    $code$045 = $or;
    $get_buffer$addr$143 = $get_buffer$addr$2;
    $l$044 = $inc;
   } else {
    $bits_left$addr$1$lcssa = $sub16;
    $code$0$lcssa = $or;
    $get_buffer$addr$1$lcssa = $get_buffer$addr$2;
    $l$0$lcssa = $inc;
    break L7;
   }
  }
  return $retval$0 | 0;
 } else {
  $bits_left$addr$1$lcssa = $sub;
  $code$0$lcssa = $and;
  $get_buffer$addr$1$lcssa = $get_buffer$addr$0;
  $l$0$lcssa = $min_bits;
 } while (0);
 HEAP32[$get_buffer13 >> 2] = $get_buffer$addr$1$lcssa;
 HEAP32[$bits_left14 >> 2] = $bits_left$addr$1$lcssa;
 if (($l$0$lcssa | 0) > 16) {
  $7 = HEAP32[$state + 16 >> 2] | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  HEAP32[$8 + 20 >> 2] = 121;
  FUNCTION_TABLE_vii[HEAP32[$8 + 4 >> 2] & 255]($7, -1);
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $retval$0 = HEAPU8[(HEAP32[$htbl + 72 + ($l$0$lcssa << 2) >> 2] | 0) + $code$0$lcssa + ((HEAP32[$htbl + 140 >> 2] | 0) + 17) >> 0] | 0;
  return $retval$0 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($this) {
 $this = $this | 0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call21 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $Dimension = sp;
 $agg$tmp = sp + 8 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 65) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($Dimension);
  if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp, $this, 0);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($Dimension, $agg$tmp$byval_copy);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) label = 8; else $retval$2 = 0;
  } else if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) {
   $call11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (($call11 | 0) != 0 ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0 : 0) {
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($Dimension, $call11);
    label = 8;
   } else $retval$2 = 0;
  } else label = 8;
  if ((label | 0) == 8) {
   $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call21;
   if (!$call21) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Dimension) | 0;
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else $retval$3 = 0;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $7 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i5874 = 0, $cond$i31 = 0, $cond$i36 = 0, $cond$i66 = 0, $cond$i68 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__temp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i31 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $cond$i68 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i31 = 1;
  $cond$i68 = $1 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i5874 = HEAP32[$this >> 2] | 0;
   $cond$i66 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i5874 = $this;
   $cond$i66 = $1 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__first, $cond$i$i5874, $cond$i$i5874 + ($cond$i66 << 2) | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $7 = HEAP8[$__temp + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $7 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__temp);
   break;
  }
  if (($cond$i31 - $cond$i68 | 0) >>> 0 < $sub$ptr$div$i$i >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $cond$i31, $cond$i68 + $sub$ptr$div$i$i - $cond$i31 | 0, $cond$i68, $cond$i68, 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i36 = HEAP32[$this >> 2] | 0; else $cond$i36 = $this;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i36 + ($cond$i68 << 2) | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 4 | 0;
   $__p$0 = $__p$0 + 4 | 0;
  }
  HEAP32[$__temp >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__temp);
  $add20 = $cond$i68 + $sub$ptr$div$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $5 = 0, $6 = 0, $conv14 = 0, $conv151 = 0, $conv155 = 0, $conv33 = 0, $conv85 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0;
 $$pre = $frm_end;
 if (((($mode & 4 | 0) != 0 ? ($$pre - $frm | 0) > 2 : 0) ? (HEAP8[$frm >> 0] | 0) == -17 : 0) ? (HEAP8[$frm + 1 >> 0] | 0) == -69 : 0) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm;
 $frm_nxt$1 = $frm_nxt$1$ph;
 $nchar32_t$0 = 0;
 L7 : while (1) {
  if (!($nchar32_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $3 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $3 & 255;
  do if ($3 << 24 >> 24 <= -1) {
   if (($3 & 255) < 194) break L7;
   if (($3 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L7;
    $conv33 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($conv33 & 192 | 0) != 128) break L7;
    if (($conv33 & 63 | $conv14 << 6 & 1984) >>> 0 > $Maxcode >>> 0) break L7;
    $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
    break;
   }
   if (($3 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L7;
    $5 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $6 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($3 << 24 >> 24) {
    case -32:
     {
      if (($5 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($5 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($5 & -64) << 24 >> 24 != -128) break L7;
    }
    $conv85 = $6 & 255;
    if (($conv85 & 192 | 0) != 128) break L7;
    if ((($5 & 63) << 6 | $conv14 << 12 & 61440 | $conv85 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     break;
    }
   }
   if (($3 & 255) >= 245) break L7;
   if (($$pre - $frm_nxt$1 | 0) < 4) break L7;
   $11 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $12 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $13 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case -16:
    {
     if (($11 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($11 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($11 & -64) << 24 >> 24 != -128) break L7;
   }
   $conv151 = $12 & 255;
   if (($conv151 & 192 | 0) != 128) break L7;
   $conv155 = $13 & 255;
   if (($conv155 & 192 | 0) != 128) break L7;
   if ((($11 & 63) << 12 | $conv14 << 18 & 1835008 | $conv151 << 6 & 4032 | $conv155 & 63) >>> 0 > $Maxcode >>> 0) break L7; else $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
  } else {
   if ($conv14 >>> 0 > $Maxcode >>> 0) break L7;
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar32_t$0 = $nchar32_t$0 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41296] | 0) == 0 ? ___cxa_guard_acquire(41296) | 0 : 0) {
  $arrayctor$cur = 40688;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 40976);
  ___cxa_guard_release(41296);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40688, 19448) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40700, 19480) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40712, 19516) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40724, 19540) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40736, 19564) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40748, 19580) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40760, 19600) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40772, 19620) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40784, 19648) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40796, 19688) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40808, 19720) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40820, 19756) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40832, 19792) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40844, 19808) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40856, 19824) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40868, 19840) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40880, 19564) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40892, 19856) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40904, 19872) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40916, 19888) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40928, 19904) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40940, 19920) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40952, 19936) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40964, 19952) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41216] | 0) == 0 ? ___cxa_guard_acquire(41216) | 0 : 0) {
  $arrayctor$cur = 40192;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 40480);
  ___cxa_guard_release(41216);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40192, 36432) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40204, 36440) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40216, 36449) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40228, 36455) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40240, 36461) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40252, 36465) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40264, 36470) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40276, 36475) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40288, 36482) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40300, 36492) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40312, 36500) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40324, 36509) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40336, 36518) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40348, 36522) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40360, 36526) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40372, 36530) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40384, 36461) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40396, 36534) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40408, 36538) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40420, 36542) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40432, 36546) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40444, 36550) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40456, 36554) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40468, 36558) | 0;
 return;
}

function _start_pass_main($cinfo, $pass_mode) {
 $cinfo = $cinfo | 0;
 $pass_mode = $pass_mode | 0;
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $9 = 0, $add$i = 0, $add19$i = 0, $add22$i = 0, $arrayidx$i = 0, $arrayidx4$i = 0, $ci$060$i = 0, $compptr$059$i = 0, $div$i = 0, $i$053$i = 0, $i$155$i = 0, $i$257$i = 0, $mul15$i = 0, $mul18$i = 0, $mul21$i = 0, $mul8$i = 0, $process_data = 0, $sub$i = 0;
 $0 = HEAP32[$cinfo + 448 >> 2] | 0;
 switch ($pass_mode | 0) {
 case 0:
  {
   $process_data = $0 + 4 | 0;
   if (!(HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$process_data >> 2] = 17;
    HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 52 >> 2];
    return;
   }
   HEAP32[$process_data >> 2] = 16;
   $3 = HEAP32[$cinfo + 328 >> 2] | 0;
   $4 = HEAP32[$cinfo + 36 >> 2] | 0;
   if (($4 | 0) > 0) {
    $arrayidx$i = $0 + 60 | 0;
    $arrayidx4$i = $0 + 64 | 0;
    $add$i = $3 + 2 | 0;
    $sub$i = $3 + -2 | 0;
    $ci$060$i = 0;
    $compptr$059$i = HEAP32[$cinfo + 216 >> 2] | 0;
    while (1) {
     $div$i = (Math_imul(HEAP32[$compptr$059$i + 40 >> 2] | 0, HEAP32[$compptr$059$i + 12 >> 2] | 0) | 0) / ($3 | 0) | 0;
     $9 = HEAP32[(HEAP32[$arrayidx$i >> 2] | 0) + ($ci$060$i << 2) >> 2] | 0;
     $11 = HEAP32[(HEAP32[$arrayidx4$i >> 2] | 0) + ($ci$060$i << 2) >> 2] | 0;
     $12 = HEAP32[$0 + 8 + ($ci$060$i << 2) >> 2] | 0;
     $mul8$i = Math_imul($div$i, $add$i) | 0;
     if (($mul8$i | 0) > 0) {
      $i$053$i = 0;
      do {
       $13 = HEAP32[$12 + ($i$053$i << 2) >> 2] | 0;
       HEAP32[$11 + ($i$053$i << 2) >> 2] = $13;
       HEAP32[$9 + ($i$053$i << 2) >> 2] = $13;
       $i$053$i = $i$053$i + 1 | 0;
      } while (($i$053$i | 0) != ($mul8$i | 0));
     }
     $mul15$i = $div$i << 1;
     if (($div$i | 0) > 0) {
      $mul18$i = Math_imul($div$i, $3) | 0;
      $mul21$i = Math_imul($div$i, $sub$i) | 0;
      $i$155$i = 0;
      do {
       $add19$i = $i$155$i + $mul18$i | 0;
       $add22$i = $i$155$i + $mul21$i | 0;
       HEAP32[$11 + ($add22$i << 2) >> 2] = HEAP32[$12 + ($add19$i << 2) >> 2];
       HEAP32[$11 + ($add19$i << 2) >> 2] = HEAP32[$12 + ($add22$i << 2) >> 2];
       $i$155$i = $i$155$i + 1 | 0;
      } while (($i$155$i | 0) < ($mul15$i | 0));
      $i$257$i = 0;
      do {
       HEAP32[$9 + ($i$257$i - $div$i << 2) >> 2] = HEAP32[$9 >> 2];
       $i$257$i = $i$257$i + 1 | 0;
      } while (($i$257$i | 0) != ($div$i | 0));
     }
     $ci$060$i = $ci$060$i + 1 | 0;
     if (($ci$060$i | 0) == ($4 | 0)) break; else $compptr$059$i = $compptr$059$i + 88 | 0;
    }
   }
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   return;
  }
 case 2:
  {
   HEAP32[$0 + 4 >> 2] = 18;
   return;
  }
 default:
  {
   $18 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$18 + 20 >> 2] = 3;
   FUNCTION_TABLE_vi[HEAP32[$18 >> 2] & 255]($cinfo);
   return;
  }
 }
}

function _decode_mcu_DC_refine($cinfo, $MCU_data) {
 $cinfo = $cinfo | 0;
 $MCU_data = $MCU_data | 0;
 var $0 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $5 = 0, $8 = 0, $Ah$i = 0, $Ss$i = 0, $arraydecay = 0, $blkn$016 = 0, $blocks_in_MCU = 0, $ci$032$i = 0, $comps_in_scan$i = 0, $lim_Se$i = 0, $progressive_mode$i = 0, $restart_interval = 0, $restarts_to_go = 0, $shl = 0, dest = 0, label = 0, stop = 0;
 $0 = HEAP32[$cinfo + 468 >> 2] | 0;
 $restart_interval = $cinfo + 280 | 0;
 if (HEAP32[$restart_interval >> 2] | 0) {
  $restarts_to_go = $0 + 56 | 0;
  $2 = HEAP32[$restarts_to_go >> 2] | 0;
  if (!$2) {
   if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$cinfo + 464 >> 2] | 0) + 8 >> 2] & 127]($cinfo) | 0)) {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 25;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
   }
   $comps_in_scan$i = $cinfo + 340 | 0;
   if ((HEAP32[$comps_in_scan$i >> 2] | 0) > 0) {
    $progressive_mode$i = $cinfo + 224 | 0;
    $Ss$i = $cinfo + 412 | 0;
    $lim_Se$i = $cinfo + 436 | 0;
    $Ah$i = $cinfo + 420 | 0;
    $ci$032$i = 0;
    do {
     $8 = HEAP32[$cinfo + 344 + ($ci$032$i << 2) >> 2] | 0;
     if (HEAP32[$progressive_mode$i >> 2] | 0) if (!(HEAP32[$Ss$i >> 2] | 0)) {
      if (!(HEAP32[$Ah$i >> 2] | 0)) label = 10;
     } else label = 13; else label = 10;
     do if ((label | 0) == 10) {
      label = 0;
      dest = HEAP32[$0 + 60 + (HEAP32[$8 + 20 >> 2] << 2) >> 2] | 0;
      stop = dest + 64 | 0;
      do {
       HEAP8[dest >> 0] = 0;
       dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$0 + 24 + ($ci$032$i << 2) >> 2] = 0;
      HEAP32[$0 + 40 + ($ci$032$i << 2) >> 2] = 0;
      if (!(HEAP32[$progressive_mode$i >> 2] | 0)) if (!(HEAP32[$lim_Se$i >> 2] | 0)) break; else {
       label = 13;
       break;
      } else if (!(HEAP32[$Ss$i >> 2] | 0)) break; else {
       label = 13;
       break;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      _memset(HEAP32[$0 + 124 + (HEAP32[$8 + 24 >> 2] << 2) >> 2] | 0, 0, 256) | 0;
     }
     $ci$032$i = $ci$032$i + 1 | 0;
    } while (($ci$032$i | 0) < (HEAP32[$comps_in_scan$i >> 2] | 0));
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = -16;
   $18 = HEAP32[$restart_interval >> 2] | 0;
   HEAP32[$restarts_to_go >> 2] = $18;
   $19 = $18;
  } else $19 = $2;
  HEAP32[$restarts_to_go >> 2] = $19 + -1;
 }
 $arraydecay = $0 + 188 | 0;
 $shl = 1 << HEAP32[$cinfo + 424 >> 2];
 $blocks_in_MCU = $cinfo + 368 | 0;
 if ((HEAP32[$blocks_in_MCU >> 2] | 0) <= 0) return 1;
 $blkn$016 = 0;
 do {
  if (_arith_decode($cinfo, $arraydecay) | 0) {
   $22 = HEAP32[$MCU_data + ($blkn$016 << 2) >> 2] | 0;
   HEAP16[$22 >> 1] = $shl | (HEAPU16[$22 >> 1] | 0);
  }
  $blkn$016 = $blkn$016 + 1 | 0;
 } while (($blkn$016 | 0) < (HEAP32[$blocks_in_MCU >> 2] | 0));
 return 1;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$in = 0, $1 = 0, $5 = 0, $8 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) if (!$n$addr$0$lcssa52) {
   label = 16;
   break;
  } else {
   $8 = $s$0$lcssa53;
   break;
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  L13 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
   $n$addr$133 = $n$addr$0$lcssa52;
   $w$034 = $s$0$lcssa53;
   while (1) {
    $xor = HEAP32[$w$034 >> 2] ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $$in = $w$034;
     $n$addr$1$lcssa55 = $n$addr$133;
     break L13;
    }
    $incdec$ptr21 = $w$034 + 4 | 0;
    $sub22 = $n$addr$133 + -4 | 0;
    if ($sub22 >>> 0 > 3) {
     $n$addr$133 = $sub22;
     $w$034 = $incdec$ptr21;
    } else {
     $n$addr$1$lcssa = $sub22;
     $w$0$lcssa = $incdec$ptr21;
     label = 11;
     break;
    }
   }
  } else {
   $n$addr$1$lcssa = $n$addr$0$lcssa52;
   $w$0$lcssa = $s$0$lcssa53;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
   label = 16;
   break;
  } else {
   $$in = $w$0$lcssa;
   $n$addr$1$lcssa55 = $n$addr$1$lcssa;
  }
  $n$addr$227 = $n$addr$1$lcssa55;
  $s$128 = $$in;
  while (1) {
   if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
    $8 = $s$128;
    break L8;
   }
   $n$addr$227 = $n$addr$227 + -1 | 0;
   if (!$n$addr$227) {
    label = 16;
    break;
   } else $s$128 = $s$128 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $8 = 0;
 return $8 | 0;
}

function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _free_pool($cinfo, $pool_id) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 var $$in5661 = 0, $$in5759 = 0, $0 = 0, $14 = 0, $2 = 0, $9 = 0, $add37 = 0, $add51 = 0, $arrayidx30 = 0, $arrayidx38 = 0, $b_s_open = 0, $b_s_open17 = 0, $bptr$062 = 0, $bptr$064 = 0, $sptr$065 = 0, $sptr$067 = 0, $total_space_allocated = 0, $total_space_allocated52 = 0, $virt_barray_list = 0, $virt_sarray_list = 0, $$in5661$looptemp = 0, $$in5759$looptemp = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if ($pool_id >>> 0 <= 1) {
  if (($pool_id | 0) == 1) {
   $virt_sarray_list = $0 + 68 | 0;
   $sptr$065 = HEAP32[$virt_sarray_list >> 2] | 0;
   if ($sptr$065 | 0) {
    $sptr$067 = $sptr$065;
    do {
     $b_s_open = $sptr$067 + 40 | 0;
     if (HEAP32[$b_s_open >> 2] | 0) {
      HEAP32[$b_s_open >> 2] = 0;
      FUNCTION_TABLE_vii[HEAP32[$sptr$067 + 56 >> 2] & 255]($cinfo, $sptr$067 + 48 | 0);
     }
     $sptr$067 = HEAP32[$sptr$067 + 44 >> 2] | 0;
    } while (($sptr$067 | 0) != 0);
   }
   HEAP32[$virt_sarray_list >> 2] = 0;
   $virt_barray_list = $0 + 72 | 0;
   $bptr$062 = HEAP32[$virt_barray_list >> 2] | 0;
   if ($bptr$062 | 0) {
    $bptr$064 = $bptr$062;
    do {
     $b_s_open17 = $bptr$064 + 40 | 0;
     if (HEAP32[$b_s_open17 >> 2] | 0) {
      HEAP32[$b_s_open17 >> 2] = 0;
      FUNCTION_TABLE_vii[HEAP32[$bptr$064 + 56 >> 2] & 255]($cinfo, $bptr$064 + 48 | 0);
     }
     $bptr$064 = HEAP32[$bptr$064 + 44 >> 2] | 0;
    } while (($bptr$064 | 0) != 0);
   }
   HEAP32[$virt_barray_list >> 2] = 0;
  }
 } else {
  $2 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$2 + 20 >> 2] = 15;
  HEAP32[$2 + 24 >> 2] = $pool_id;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $arrayidx30 = $0 + 60 + ($pool_id << 2) | 0;
 $9 = HEAP32[$arrayidx30 >> 2] | 0;
 HEAP32[$arrayidx30 >> 2] = 0;
 if ($9 | 0) {
  $total_space_allocated = $0 + 76 | 0;
  $$in5661 = $9;
  do {
   $$in5661$looptemp = $$in5661;
   $$in5661 = HEAP32[$$in5661 >> 2] | 0;
   $add37 = (HEAP32[$$in5661$looptemp + 4 >> 2] | 0) + 16 + (HEAP32[$$in5661$looptemp + 8 >> 2] | 0) | 0;
   _jpeg_free_large($cinfo, $$in5661$looptemp, $add37);
   HEAP32[$total_space_allocated >> 2] = (HEAP32[$total_space_allocated >> 2] | 0) - $add37;
  } while (($$in5661 | 0) != 0);
 }
 $arrayidx38 = $0 + 52 + ($pool_id << 2) | 0;
 $14 = HEAP32[$arrayidx38 >> 2] | 0;
 HEAP32[$arrayidx38 >> 2] = 0;
 if (!$14) return;
 $total_space_allocated52 = $0 + 76 | 0;
 $$in5759 = $14;
 do {
  $$in5759$looptemp = $$in5759;
  $$in5759 = HEAP32[$$in5759 >> 2] | 0;
  $add51 = (HEAP32[$$in5759$looptemp + 4 >> 2] | 0) + 16 + (HEAP32[$$in5759$looptemp + 8 >> 2] | 0) | 0;
  _jpeg_free_small($cinfo, $$in5759$looptemp, $add51);
  HEAP32[$total_space_allocated52 >> 2] = (HEAP32[$total_space_allocated52 >> 2] | 0) - $add51;
 } while (($$in5759 | 0) != 0);
 return;
}

function _loadNFTMarker($arc, $surfaceSetCount, $datasetPathname) {
 $arc = $arc | 0;
 $surfaceSetCount = $surfaceSetCount | 0;
 $datasetPathname = $datasetPathname | 0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $8 = 0, $arrayidx = 0, $call = 0, $dpi_NFT = 0, $height_NFT = 0, $num_F_points_NFT = 0, $num_F_set_NFT = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $width_NFT = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer19 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $datasetPathname;
 _arLog(0, 1, 22199, $vararg_buffer);
 $call = _ar2ReadSurfaceSet($datasetPathname, 22216, 0) | 0;
 $arrayidx = $arc + 32 + ($surfaceSetCount << 2) | 0;
 HEAP32[$arrayidx >> 2] = $call;
 if (!$call) {
  HEAP32[$vararg_buffer1 >> 2] = $datasetPathname;
  _arLog(0, 3, 22221, $vararg_buffer1);
  $$in = HEAP32[$arrayidx >> 2] | 0;
 } else $$in = $call;
 $0 = HEAP32[$$in >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$1 + 4 >> 2] | 0;
 $4 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 $width_NFT = $arc + 72 | 0;
 HEAP32[$width_NFT >> 2] = HEAP32[$4 + 4 >> 2];
 $height_NFT = $arc + 76 | 0;
 HEAP32[$height_NFT >> 2] = HEAP32[$4 + 8 >> 2];
 $dpi_NFT = $arc + 80 | 0;
 HEAP32[$dpi_NFT >> 2] = ~~+HEAPF32[$4 + 12 >> 2];
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 $num_F_set_NFT = $arc + 84 | 0;
 HEAP32[$num_F_set_NFT >> 2] = HEAP32[$8 + 4 >> 2];
 $num_F_points_NFT = $arc + 88 | 0;
 HEAP32[$num_F_points_NFT >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
 HEAP32[$arc + 16 >> 2] = HEAP32[HEAP32[HEAP32[HEAP32[HEAP32[$$in >> 2] >> 2] >> 2] >> 2] >> 2];
 HEAP32[$vararg_buffer4 >> 2] = $2;
 _arLog(0, 1, 22254, $vararg_buffer4);
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$width_NFT >> 2];
 _arLog(0, 1, 22280, $vararg_buffer7);
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$height_NFT >> 2];
 _arLog(0, 1, 22280, $vararg_buffer10);
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[$dpi_NFT >> 2];
 _arLog(0, 1, 22302, $vararg_buffer13);
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$num_F_set_NFT >> 2];
 _arLog(0, 1, 22322, $vararg_buffer16);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[$num_F_points_NFT >> 2];
 _arLog(0, 1, 22354, $vararg_buffer19);
 _arLog(0, 1, 22386, sp + 64 | 0);
 _arLog(0, 1, 22400, sp + 72 | 0);
 if (($surfaceSetCount | 0) == 10) _exit(-1); else {
  _arLog(0, 1, 22409, sp + 80 | 0);
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call13 = 0, $call2 = 0, $cleanup$dest$slot$0 = 0, $frombool = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  $frombool = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
  HEAP8[$__last_consumed_is_next_ >> 0] = $frombool;
  $retval$1 = $1;
 } else {
  if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   $call13 = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   HEAP32[$__ci >> 2] = $call13;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $__file_ = $this + 32 | 0;
    while (1) {
     $7 = HEAP32[$__enxt >> 2] | 0;
     if ($7 >>> 0 <= $__extbuf >>> 0) {
      $cleanup$dest$slot$0 = 1;
      $retval$0 = 0;
      break L9;
     }
     $incdec$ptr = $7 + -1 | 0;
     HEAP32[$__enxt >> 2] = $incdec$ptr;
     if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $cleanup$dest$slot$0 = 0;
    $retval$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if ($cleanup$dest$slot$0) $__last_consumed_33$pre$phiZ2D = $__last_consumed_12; else {
    $retval$1 = $retval$0;
    break;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0;
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call13 = 0, $call2 = 0, $cleanup$dest$slot$0 = 0, $frombool = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  $frombool = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
  HEAP8[$__last_consumed_is_next_ >> 0] = $frombool;
  $retval$1 = $1;
 } else {
  if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   $call13 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   HEAP8[$__ci >> 0] = $call13;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $__file_ = $this + 32 | 0;
    while (1) {
     $7 = HEAP32[$__enxt >> 2] | 0;
     if ($7 >>> 0 <= $__extbuf >>> 0) {
      $cleanup$dest$slot$0 = 1;
      $retval$0 = 0;
      break L9;
     }
     $incdec$ptr = $7 + -1 | 0;
     HEAP32[$__enxt >> 2] = $incdec$ptr;
     if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $cleanup$dest$slot$0 = 0;
    $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if ($cleanup$dest$slot$0) $__last_consumed_33$pre$phiZ2D = $__last_consumed_12; else {
    $retval$1 = $retval$0;
    break;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0;
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36162] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36163] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36164] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36165] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36166] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36167] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36168, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 24) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36162] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36163] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36164] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36165] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36166] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36167] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36168, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 24) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36162] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36163] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36164] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36165] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36166] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36167] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36168, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 21) << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36162] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36163] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36164] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36165] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36166] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36167] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36168, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = $and$lobit << 1 | 21;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($this) {
 $this = $this | 0;
 var $ElabSpef = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call14 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp7$byval_copy = sp + 32 | 0;
 $ElabSpef = sp;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp7 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($ElabSpef);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32001);
 HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 32011);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 32014);
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 32020);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 32023);
 } else __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 32004); while (0);
 $call14 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
 HEAP32[$agg$tmp7$byval_copy >> 2] = $call14;
 if ($call14) if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ElabSpef) | 0) $retval$0 = $call14; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $ElabSpef, $agg$tmp7$byval_copy) | 0; else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $dst_ptr_leading_to_static_ptr;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
 HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 7]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 63]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1 ? !((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1) : 0) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36159, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 44) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36159, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 44) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _ar2GenImageLayer2($src, $dpi) {
 $src = $src | 0;
 $dpi = +$dpi;
 var $1 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $add = 0, $add48 = 0, $add75 = 0, $call = 0, $call14 = 0, $call26 = 0, $call31 = 0, $call47 = 0, $call53 = 0, $call6 = 0, $call7 = 0, $co$0 = 0, $co$1 = 0, $dpi1 = 0, $ii$0 = 0, $iii$0 = 0, $jj$0 = 0, $jjj$0 = 0, $p1$0 = 0, $p2$0 = 0, $p2$1 = 0, $spec$select = 0, $spec$select58 = 0, $value$0 = 0, $value$1 = 0, $xsize = 0, $ysize = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $xsize = $src + 4 | 0;
 $dpi1 = $src + 12 | 0;
 $1 = +HEAPF32[$dpi1 >> 2];
 $call = _lroundf(+(HEAP32[$xsize >> 2] | 0) * $dpi / $1) | 0;
 $ysize = $src + 8 | 0;
 $call6 = _lroundf(+(HEAP32[$ysize >> 2] | 0) * $dpi / $1) | 0;
 $call7 = _malloc(16) | 0;
 if (!$call7) {
  _arLog(0, 3, 21902, sp);
  _exit(1);
 }
 HEAP32[$call7 + 4 >> 2] = $call;
 HEAP32[$call7 + 8 >> 2] = $call6;
 HEAPF32[$call7 + 12 >> 2] = $dpi;
 $call14 = _malloc(Math_imul($call6, $call) | 0) | 0;
 HEAP32[$call7 >> 2] = $call14;
 if (!$call14) {
  _arLog(0, 3, 21902, sp + 8 | 0);
  _exit(1);
 }
 $jj$0 = 0;
 $p2$0 = $call14;
 while (1) {
  if (($jj$0 | 0) >= ($call6 | 0)) break;
  $3 = +HEAPF32[$dpi1 >> 2];
  $call26 = _lroundf($3 * +($jj$0 | 0) / $dpi) | 0;
  $add = $jj$0 + 1 | 0;
  $call31 = _lroundf($3 * +($add | 0) / $dpi) | 0;
  $4 = HEAP32[$ysize >> 2] | 0;
  $spec$select = ($call31 | 0) > ($4 | 0) ? $4 : $call31;
  $ii$0 = 0;
  $p2$1 = $p2$0;
  while (1) {
   if (($ii$0 | 0) >= ($call | 0)) break;
   $5 = +HEAPF32[$dpi1 >> 2];
   $call47 = _lroundf($5 * +($ii$0 | 0) / $dpi) | 0;
   $add48 = $ii$0 + 1 | 0;
   $call53 = _lroundf($5 * +($add48 | 0) / $dpi) | 0;
   $6 = HEAP32[$xsize >> 2] | 0;
   $spec$select58 = ($call53 | 0) > ($6 | 0) ? $6 : $call53;
   $co$0 = 0;
   $jjj$0 = $call26;
   $value$0 = 0;
   while (1) {
    if (($jjj$0 | 0) >= ($spec$select | 0)) break;
    $co$1 = $co$0;
    $iii$0 = $call47;
    $p1$0 = (HEAP32[$src >> 2] | 0) + ((Math_imul($jjj$0, $6) | 0) + $call47) | 0;
    $value$1 = $value$0;
    while (1) {
     if (($iii$0 | 0) >= ($spec$select58 | 0)) break;
     $add75 = $value$1 + (HEAPU8[$p1$0 >> 0] | 0) | 0;
     $co$1 = $co$1 + 1 | 0;
     $iii$0 = $iii$0 + 1 | 0;
     $p1$0 = $p1$0 + 1 | 0;
     $value$1 = $add75;
    }
    $co$0 = $co$1;
    $jjj$0 = $jjj$0 + 1 | 0;
    $value$0 = $value$1;
   }
   HEAP8[$p2$1 >> 0] = ($value$0 | 0) / ($co$0 | 0) | 0;
   $ii$0 = $add48;
   $p2$1 = $p2$1 + 1 | 0;
  }
  $jj$0 = $add;
  $p2$0 = $p2$1;
 }
 STACKTOP = sp;
 return $call7 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36159, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($add << 1) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 36159, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($add << 1) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _fgets($s, $n, $f) {
 $s = $s | 0;
 $n = $n | 0;
 $f = $f | 0;
 var $2 = 0, $add$ptr = 0, $add$ptr36 = 0, $call12 = 0, $call50 = 0, $cond = 0, $cond26 = 0, $cond32 = 0, $cond5248 = 0, $conv = 0, $dec = 0, $incdec$ptr65 = 0, $mode = 0, $n$addr$053 = 0, $p$052 = 0, $p$1 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $s$addr$050 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub37 = 0, $tobool13 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $dec = $n + -1 | 0;
 if (($n | 0) < 2) {
  $mode = $f + 74 | 0;
  $conv = HEAP8[$mode >> 0] | 0;
  HEAP8[$mode >> 0] = $conv + 255 | $conv;
  if ($cond | 0) ___unlockfile($f);
  if (!$dec) {
   HEAP8[$s >> 0] = 0;
   $retval$0 = $s;
  } else $retval$0 = 0;
 } else {
  L11 : do if ($dec) {
   $rpos = $f + 4 | 0;
   $rend = $f + 8 | 0;
   $n$addr$053 = $dec;
   $p$052 = $s;
   while (1) {
    $2 = HEAP32[$rpos >> 2] | 0;
    $sub$ptr$rhs$cast = $2;
    $sub$ptr$sub = (HEAP32[$rend >> 2] | 0) - $sub$ptr$rhs$cast | 0;
    $call12 = _memchr($2, 10, $sub$ptr$sub) | 0;
    $tobool13 = ($call12 | 0) == 0;
    $cond26 = $tobool13 ? $sub$ptr$sub : 1 - $sub$ptr$rhs$cast + $call12 | 0;
    $cond32 = $cond26 >>> 0 < $n$addr$053 >>> 0 ? $cond26 : $n$addr$053;
    _memcpy($p$052 | 0, $2 | 0, $cond32 | 0) | 0;
    $add$ptr = (HEAP32[$rpos >> 2] | 0) + $cond32 | 0;
    HEAP32[$rpos >> 2] = $add$ptr;
    $add$ptr36 = $p$052 + $cond32 | 0;
    $sub37 = $n$addr$053 - $cond32 | 0;
    if (!($tobool13 & ($sub37 | 0) != 0)) {
     $p$1 = $add$ptr36;
     label = 17;
     break L11;
    }
    if ($add$ptr >>> 0 >= (HEAP32[$rend >> 2] | 0) >>> 0) {
     $call50 = ___uflow($f) | 0;
     if (($call50 | 0) < 0) break; else $cond5248 = $call50;
    } else {
     HEAP32[$rpos >> 2] = $add$ptr + 1;
     $cond5248 = HEAPU8[$add$ptr >> 0] | 0;
    }
    $incdec$ptr65 = $add$ptr36 + 1 | 0;
    HEAP8[$add$ptr36 >> 0] = $cond5248;
    $n$addr$053 = $sub37 + -1 | 0;
    if (($cond5248 & 255 | 0) == 10 | ($n$addr$053 | 0) == 0) {
     $p$1 = $incdec$ptr65;
     label = 17;
     break L11;
    } else $p$052 = $incdec$ptr65;
   }
   if (($add$ptr36 | 0) != ($s | 0) ? (HEAP32[$f >> 2] & 16 | 0) != 0 : 0) {
    $p$1 = $add$ptr36;
    label = 17;
   } else $s$addr$050 = 0;
  } else {
   $p$1 = $s;
   label = 17;
  } while (0);
  if ((label | 0) == 17) if (!$s) $s$addr$050 = 0; else {
   HEAP8[$p$1 >> 0] = 0;
   $s$addr$050 = $s;
  }
  if (!$cond) $retval$0 = $s$addr$050; else {
   ___unlockfile($f);
   $retval$0 = $s$addr$050;
  }
 }
 return $retval$0 | 0;
}

function _ycck_cmyk_convert($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $add$neg$us = 0, $arrayidx3 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $col$046$us = 0, $conv12$us = 0, $conv14$us = 0, $dec52$us$in = 0, $input_row$addr$051$us = 0, $outptr$047$us = 0, $output_buf$addr$050$us = 0, $dec52$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 480 >> 2] | 0;
 $1 = HEAP32[$cinfo + 112 >> 2] | 0;
 $2 = HEAP32[$cinfo + 336 >> 2] | 0;
 $3 = HEAP32[$0 + 8 >> 2] | 0;
 $4 = HEAP32[$0 + 12 >> 2] | 0;
 $5 = HEAP32[$0 + 16 >> 2] | 0;
 $6 = HEAP32[$0 + 20 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx3 = $input_buf + 4 | 0;
 $arrayidx5 = $input_buf + 8 | 0;
 $arrayidx7 = $input_buf + 12 | 0;
 if (!$1) return;
 $dec52$us$in = $num_rows;
 $input_row$addr$051$us = $input_row;
 $output_buf$addr$050$us = $output_buf;
 while (1) {
  $dec52$us$in$looptemp = $dec52$us$in;
  $dec52$us$in = $dec52$us$in + -1 | 0;
  $8 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$051$us << 2) >> 2] | 0;
  $10 = HEAP32[(HEAP32[$arrayidx3 >> 2] | 0) + ($input_row$addr$051$us << 2) >> 2] | 0;
  $12 = HEAP32[(HEAP32[$arrayidx5 >> 2] | 0) + ($input_row$addr$051$us << 2) >> 2] | 0;
  $14 = HEAP32[(HEAP32[$arrayidx7 >> 2] | 0) + ($input_row$addr$051$us << 2) >> 2] | 0;
  $input_row$addr$051$us = $input_row$addr$051$us + 1 | 0;
  $col$046$us = 0;
  $outptr$047$us = HEAP32[$output_buf$addr$050$us >> 2] | 0;
  while (1) {
   $conv12$us = HEAPU8[$10 + $col$046$us >> 0] | 0;
   $conv14$us = HEAPU8[$12 + $col$046$us >> 0] | 0;
   $add$neg$us = ~HEAP8[$8 + $col$046$us >> 0] & 255;
   HEAP8[$outptr$047$us >> 0] = HEAP8[$2 + ($add$neg$us - (HEAP32[$3 + ($conv14$us << 2) >> 2] | 0)) >> 0] | 0;
   HEAP8[$outptr$047$us + 1 >> 0] = HEAP8[$2 + ($add$neg$us - ((HEAP32[$5 + ($conv14$us << 2) >> 2] | 0) + (HEAP32[$6 + ($conv12$us << 2) >> 2] | 0) >> 16)) >> 0] | 0;
   HEAP8[$outptr$047$us + 2 >> 0] = HEAP8[$2 + ($add$neg$us - (HEAP32[$4 + ($conv12$us << 2) >> 2] | 0)) >> 0] | 0;
   HEAP8[$outptr$047$us + 3 >> 0] = HEAP8[$14 + $col$046$us >> 0] | 0;
   $col$046$us = $col$046$us + 1 | 0;
   if (($col$046$us | 0) == ($1 | 0)) break; else $outptr$047$us = $outptr$047$us + 4 | 0;
  }
  if (($dec52$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$050$us = $output_buf$addr$050$us + 4 | 0;
 }
 return;
}

function _jinit_d_coef_controller($cinfo, $need_full_buffer) {
 $cinfo = $cinfo | 0;
 $need_full_buffer = $need_full_buffer | 0;
 var $4 = 0, $7 = 0, $call = 0, $call15 = 0, $call6 = 0, $call8 = 0, $call9 = 0, $ci$044 = 0, $compptr$043 = 0, $mem = 0, $num_components = 0, $progressive_mode = 0, $spec$select = 0, $v_samp_factor = 0, $whole_image = 0, $whole_image12$pre$phiZ2D = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 116) | 0;
 HEAP32[$cinfo + 452 >> 2] = $call;
 HEAP32[$call >> 2] = 180;
 HEAP32[$call + 8 >> 2] = 181;
 HEAP32[$call + 112 >> 2] = 0;
 if (!$need_full_buffer) {
  $call15 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, 1280) | 0;
  HEAP32[$call + 32 >> 2] = $call15;
  HEAP32[$call + 36 >> 2] = $call15 + 128;
  HEAP32[$call + 40 >> 2] = $call15 + 256;
  HEAP32[$call + 44 >> 2] = $call15 + 384;
  HEAP32[$call + 48 >> 2] = $call15 + 512;
  HEAP32[$call + 52 >> 2] = $call15 + 640;
  HEAP32[$call + 56 >> 2] = $call15 + 768;
  HEAP32[$call + 60 >> 2] = $call15 + 896;
  HEAP32[$call + 64 >> 2] = $call15 + 1024;
  HEAP32[$call + 68 >> 2] = $call15 + 1152;
  if (!(HEAP32[$cinfo + 436 >> 2] | 0)) _memset($call15 | 0, 0, 1280) | 0;
  HEAP32[$call + 4 >> 2] = 67;
  HEAP32[$call + 12 >> 2] = 44;
  HEAP32[$call + 16 >> 2] = 0;
  return;
 }
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) > 0) {
  $progressive_mode = $cinfo + 224 | 0;
  $whole_image = $call + 72 | 0;
  $ci$044 = 0;
  $compptr$043 = HEAP32[$cinfo + 216 >> 2] | 0;
  while (1) {
   $v_samp_factor = $compptr$043 + 12 | 0;
   $4 = HEAP32[$v_samp_factor >> 2] | 0;
   $spec$select = (HEAP32[$progressive_mode >> 2] | 0) == 0 ? $4 : $4 * 3 | 0;
   $7 = HEAP32[(HEAP32[$mem >> 2] | 0) + 20 >> 2] | 0;
   $call6 = _jround_up(HEAP32[$compptr$043 + 28 >> 2] | 0, HEAP32[$compptr$043 + 8 >> 2] | 0) | 0;
   $call8 = _jround_up(HEAP32[$compptr$043 + 32 >> 2] | 0, HEAP32[$v_samp_factor >> 2] | 0) | 0;
   $call9 = FUNCTION_TABLE_iiiiiii[$7 & 63]($cinfo, 1, 1, $call6, $call8, $spec$select) | 0;
   HEAP32[$whole_image + ($ci$044 << 2) >> 2] = $call9;
   $ci$044 = $ci$044 + 1 | 0;
   if (($ci$044 | 0) >= (HEAP32[$num_components >> 2] | 0)) {
    $whole_image12$pre$phiZ2D = $whole_image;
    break;
   } else $compptr$043 = $compptr$043 + 88 | 0;
  }
 } else $whole_image12$pre$phiZ2D = $call + 72 | 0;
 HEAP32[$call + 4 >> 2] = 66;
 HEAP32[$call + 12 >> 2] = 43;
 HEAP32[$call + 16 >> 2] = $whole_image12$pre$phiZ2D;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp15$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp3 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp12 = sp + 8 | 0;
 $agg$tmp15 = sp;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28731);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 28746);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 32505);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 32576);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 32626);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 32676);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function _sep_upsample($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $add$ptr = 0, $add24 = 0, $ci$041 = 0, $compptr$042 = 0, $max_v_samp_factor = 0, $next_row_out = 0, $num_components = 0, $num_rows$1 = 0, $rows_to_go = 0, $spec$select = 0, $sub = 0, $sub13 = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 $next_row_out = $0 + 92 | 0;
 $1 = HEAP32[$next_row_out >> 2] | 0;
 $max_v_samp_factor = $cinfo + 320 | 0;
 $2 = HEAP32[$max_v_samp_factor >> 2] | 0;
 if (($1 | 0) < ($2 | 0)) {
  $10 = $2;
  $11 = $1;
 } else {
  $num_components = $cinfo + 36 | 0;
  if ((HEAP32[$num_components >> 2] | 0) > 0) {
   $ci$041 = 0;
   $compptr$042 = HEAP32[$cinfo + 216 >> 2] | 0;
   while (1) {
    $add$ptr = (HEAP32[$input_buf + ($ci$041 << 2) >> 2] | 0) + ((Math_imul(HEAP32[$0 + 100 + ($ci$041 << 2) >> 2] | 0, HEAP32[$in_row_group_ctr >> 2] | 0) | 0) << 2) | 0;
    FUNCTION_TABLE_viiii[HEAP32[$0 + 52 + ($ci$041 << 2) >> 2] & 31]($cinfo, $compptr$042, $add$ptr, $0 + 12 + ($ci$041 << 2) | 0);
    $ci$041 = $ci$041 + 1 | 0;
    if (($ci$041 | 0) >= (HEAP32[$num_components >> 2] | 0)) break; else $compptr$042 = $compptr$042 + 88 | 0;
   }
   $$pre = HEAP32[$max_v_samp_factor >> 2] | 0;
  } else $$pre = $2;
  HEAP32[$next_row_out >> 2] = 0;
  $10 = $$pre;
  $11 = 0;
 }
 $sub = $10 - $11 | 0;
 $rows_to_go = $0 + 96 | 0;
 $12 = HEAP32[$rows_to_go >> 2] | 0;
 $spec$select = $sub >>> 0 > $12 >>> 0 ? $12 : $sub;
 $13 = HEAP32[$out_row_ctr >> 2] | 0;
 $sub13 = $out_rows_avail - $13 | 0;
 $num_rows$1 = $spec$select >>> 0 > $sub13 >>> 0 ? $sub13 : $spec$select;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$cinfo + 480 >> 2] | 0) + 4 >> 2] & 63]($cinfo, $0 + 12 | 0, $11, $output_buf + ($13 << 2) | 0, $num_rows$1);
 HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + $num_rows$1;
 HEAP32[$rows_to_go >> 2] = (HEAP32[$rows_to_go >> 2] | 0) - $num_rows$1;
 $add24 = (HEAP32[$next_row_out >> 2] | 0) + $num_rows$1 | 0;
 HEAP32[$next_row_out >> 2] = $add24;
 if (($add24 | 0) < (HEAP32[$max_v_samp_factor >> 2] | 0)) return;
 HEAP32[$in_row_group_ctr >> 2] = (HEAP32[$in_row_group_ctr >> 2] | 0) + 1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp15$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp3 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp12 = sp + 8 | 0;
 $agg$tmp15 = sp;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28731);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 28746);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 34152);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 28764);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 28777);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 28790);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($this, $Data_) {
 $this = $this | 0;
 $Data_ = $Data_ | 0;
 var $0 = 0, $5 = 0, $6 = 0, $ArrayCache = 0, $Data = 0, $FunctionCache = 0, $RHSComponentCache = 0, $__first$addr$0$i = 0, $__first$addr$0$i1 = 0, $__first$addr$0$i8 = 0, $call = 0, $call10 = 0, $call17 = 0, $call19 = 0, $call4 = 0, $call8 = 0, label = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 27, 1, 1, 1);
 HEAP32[$this >> 2] = 15532;
 $Data = $this + 8 | 0;
 $0 = $Data_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $Data;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $RHSComponentCache = $this + 5 | 0;
 HEAP8[$RHSComponentCache >> 0] = 2;
 $FunctionCache = $this + 7 | 0;
 HEAP8[$FunctionCache >> 0] = 2;
 $ArrayCache = $this + 6 | 0;
 HEAP8[$ArrayCache >> 0] = 2;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call4 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i = $call;
 while (1) {
  if (($__first$addr$0$i | 0) == ($call4 | 0)) {
   label = 4;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_(HEAP32[$__first$addr$0$i >> 2] | 0) | 0) $__first$addr$0$i = $__first$addr$0$i + 4 | 0; else break;
 }
 if ((label | 0) == 4) HEAP8[$ArrayCache >> 0] = 1;
 $call8 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call10 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i1 = $call8;
 while (1) {
  if (($__first$addr$0$i1 | 0) == ($call10 | 0)) {
   label = 8;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_(HEAP32[$__first$addr$0$i1 >> 2] | 0) | 0) $__first$addr$0$i1 = $__first$addr$0$i1 + 4 | 0; else break;
 }
 if ((label | 0) == 8) HEAP8[$FunctionCache >> 0] = 1;
 $call17 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call19 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i8 = $call17;
 while (1) {
  if (($__first$addr$0$i8 | 0) == ($call19 | 0)) {
   label = 12;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_(HEAP32[$__first$addr$0$i8 >> 2] | 0) | 0) $__first$addr$0$i8 = $__first$addr$0$i8 + 4 | 0; else break;
 }
 if ((label | 0) == 12) HEAP8[$RHSComponentCache >> 0] = 1;
 return;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $1 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $retval$sroa$0$2 = 0, $sub$ptr$div = 0, $sub$ptr$div31 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$div = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast >> 2;
  $__width_$i = $__iob + 12 | 0;
  $1 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($1 | 0) > ($sub$ptr$div | 0) ? $1 - $sub$ptr$div | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
  if (($sub$ptr$sub6 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $sub$ptr$div7) | 0) != ($sub$ptr$div7 | 0) : 0) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   HEAP32[$__sp >> 2] = 0;
   HEAP32[$__sp + 4 >> 2] = 0;
   HEAP32[$__sp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp + 8 + 3 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    $retval$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $sub$ptr$sub30 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  $sub$ptr$div31 = $sub$ptr$sub30 >> 2;
  if (($sub$ptr$sub30 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $sub$ptr$div31) | 0) != ($sub$ptr$div31 | 0) : 0) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $tobool19 = 0;
 L1 : do if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0)) {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0) ? ($dst_ptr_not_leading_to_static_ptr = $info + 20 | 0, (HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) : 0) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $is_dst_type_derived_from_static_type = $info + 44 | 0;
   do if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
    $found_our_static_ptr = $info + 52 | 0;
    HEAP8[$found_our_static_ptr >> 0] = 0;
    $found_any_static_type = $info + 53 | 0;
    HEAP8[$found_any_static_type >> 0] = 0;
    $5 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 7]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (HEAP8[$found_any_static_type >> 0] | 0) {
     $tobool19 = (HEAP8[$found_our_static_ptr >> 0] | 0) == 0;
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
     if ($tobool19) break; else break L1;
    } else {
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
     break;
    }
   } while (0);
   HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
   $number_to_dst_ptr = $info + 40 | 0;
   HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
   if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
   if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } else __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); while (0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($this) {
 $this = $this | 0;
 var $3 = 0, $Index = 0, $TemplateParams = 0, $call16 = 0, $call25 = 0, $inc = 0, $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Index = sp + 4 | 0;
 $ref$tmp = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 84) | 0) {
  HEAP32[$Index >> 2] = 0;
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Index) | 0) ? ($inc = (HEAP32[$Index >> 2] | 0) + 1 | 0, HEAP32[$Index >> 2] = $inc, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) : 0) {
   $3 = $inc;
   label = 5;
  } else $retval$1 = 0; else {
   $3 = 0;
   label = 5;
  }
  do if ((label | 0) == 5) {
   if (HEAP8[$this + 362 >> 0] | 0) {
    $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 28546) | 0;
    break;
   }
   if (HEAP8[$this + 361 >> 0] | 0) {
    $call16 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this, $Index) | 0;
    HEAP32[$ref$tmp >> 2] = $call16;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this + 332 | 0, $ref$tmp);
    $retval$1 = $call16;
    break;
   }
   $TemplateParams = $this + 288 | 0;
   if ($3 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams) | 0) >>> 0) {
    $call25 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams, $3) | 0;
    $retval$1 = HEAP32[$call25 >> 2] | 0;
   } else $retval$1 = 0;
  } while (0);
  $retval$2 = $retval$1;
 } else $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function ___embind_register_native_and_builtin_types() {
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvvE3getEv() | 0, 34041);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbvE3getEv() | 0, 34046, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(34051);
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(34056);
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(34068);
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(34082);
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(34088);
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(34103);
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(34107);
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(34120);
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(34125);
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(34139);
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(34145);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() | 0, 34152);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() | 0, 34164);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() | 0, 4, 34197);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() | 0, 34210);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(34226);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(34256);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(34293);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(34332);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(34363);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(34403);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(34432);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(34470);
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(34500);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(34539);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(34571);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(34604);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(34637);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(34671);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(34704);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(34738);
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(34769);
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(34801);
 return;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__ig$0 = 0, $__last$addr$0$i$i = 0, $__r$0 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr3 = 0, $cond$i$i30 = 0, $conv$i$i = 0, $conv$i$i26$pre$phiZZZ2D = 0, $incdec$ptr$i$i = 0, $or$cond32 = 0, $sub$ptr$lhs$cast = 0, $tobool$i$i$i = 0, label = 0;
 $__size_$i$i = $__grouping + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $__size_$i3$i = $__grouping + 4 | 0;
 $1 = HEAP32[$__size_$i3$i >> 2] | 0;
 $conv$i$i = $0 & 255;
 do if (($0 << 24 >> 24 < 0 ? $1 : $conv$i$i) | 0) {
  if (($__g | 0) == ($__g_end | 0)) {
   $4 = $0;
   $6 = $1;
   $conv$i$i26$pre$phiZZZ2D = $conv$i$i;
  } else {
   $__first$addr$0$i$i = $__g;
   $__last$addr$0$i$i = $__g_end;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -4 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
    $2 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
    HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i >> 2];
    HEAP32[$incdec$ptr$i$i >> 2] = $2;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
   $$pre = HEAP8[$__size_$i$i >> 0] | 0;
   $4 = $$pre;
   $6 = HEAP32[$__size_$i3$i >> 2] | 0;
   $conv$i$i26$pre$phiZZZ2D = $$pre & 255;
  }
  $tobool$i$i$i = $4 << 24 >> 24 < 0;
  $cond$i$i30 = $tobool$i$i$i ? HEAP32[$__grouping >> 2] | 0 : $__grouping;
  $add$ptr3 = $__g_end + -4 | 0;
  $sub$ptr$lhs$cast = $cond$i$i30 + ($tobool$i$i$i ? $6 : $conv$i$i26$pre$phiZZZ2D) | 0;
  $__ig$0 = $cond$i$i30;
  $__r$0 = $__g;
  while (1) {
   $7 = HEAP8[$__ig$0 >> 0] | 0;
   $or$cond32 = $7 << 24 >> 24 > 0 & $7 << 24 >> 24 != 127;
   if ($__r$0 >>> 0 >= $add$ptr3 >>> 0) break;
   if ($or$cond32 ? (HEAP32[$__r$0 >> 2] | 0) != ($7 << 24 >> 24 | 0) : 0) {
    label = 11;
    break;
   }
   $__ig$0 = ($sub$ptr$lhs$cast - $__ig$0 | 0) > 1 ? $__ig$0 + 1 | 0 : $__ig$0;
   $__r$0 = $__r$0 + 4 | 0;
  }
  if ((label | 0) == 11) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if ($or$cond32 ? ((HEAP32[$add$ptr3 >> 2] | 0) + -1 | 0) >>> 0 >= $7 << 24 >> 24 >>> 0 : 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $call3 = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (!(__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0)) {
  $call3 = __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) | 0;
  HEAP32[$__1buf >> 2] = $call3;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $retval$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 4 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 8;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 14;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $retval$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } else label = 15; while (0);
 if ((label | 0) == 15) $retval$4 = __ZNSt3__211char_traitsIwE7not_eofEj($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $call3 = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) {
  $call3 = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
  HEAP8[$__1buf >> 0] = $call3;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $retval$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 1 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 8;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 14;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $retval$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } else label = 15; while (0);
 if ((label | 0) == 15) $retval$4 = __ZNSt3__211char_traitsIcE7not_eofEi($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $1 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $retval$sroa$0$2 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub29 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
  $__width_$i = $__iob + 12 | 0;
  $1 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($1 | 0) > ($sub$ptr$sub | 0) ? $1 - $sub$ptr$sub | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  if (($sub$ptr$sub6 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $sub$ptr$sub6) | 0) != ($sub$ptr$sub6 | 0) : 0) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   HEAP32[$__sp >> 2] = 0;
   HEAP32[$__sp + 4 >> 2] = 0;
   HEAP32[$__sp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp + 11 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    $retval$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $sub$ptr$sub29 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  if (($sub$ptr$sub29 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $sub$ptr$sub29) | 0) != ($sub$ptr$sub29 | 0) : 0) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function _prepare_for_output_pass($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $15 = 0, $36 = 0, $37 = 0, $add = 0, $is_dummy_pass = 0, $quantize_colors = 0, $total_passes = 0;
 $0 = HEAP32[$cinfo + 444 >> 2] | 0;
 $is_dummy_pass = $0 + 8 | 0;
 if (!(HEAP32[$is_dummy_pass >> 2] | 0)) {
  $quantize_colors = $cinfo + 84 | 0;
  do if (HEAP32[$quantize_colors >> 2] | 0 ? (HEAP32[$cinfo + 136 >> 2] | 0) == 0 : 0) {
   if (HEAP32[$cinfo + 92 >> 2] | 0 ? HEAP32[$cinfo + 108 >> 2] | 0 : 0) {
    HEAP32[$cinfo + 484 >> 2] = HEAP32[$0 + 24 >> 2];
    HEAP32[$is_dummy_pass >> 2] = 1;
    break;
   }
   if (!(HEAP32[$cinfo + 100 >> 2] | 0)) {
    $15 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$15 + 20 >> 2] = 47;
    FUNCTION_TABLE_vi[HEAP32[$15 >> 2] & 255]($cinfo);
    break;
   } else {
    HEAP32[$cinfo + 484 >> 2] = HEAP32[$0 + 20 >> 2];
    break;
   }
  } while (0);
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo + 472 >> 2] >> 2] & 255]($cinfo);
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 452 >> 2] | 0) + 8 >> 2] & 255]($cinfo);
  if (!(HEAP32[$cinfo + 68 >> 2] | 0)) {
   if (!(HEAP32[$0 + 16 >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo + 480 >> 2] >> 2] & 255]($cinfo);
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo + 476 >> 2] >> 2] & 255]($cinfo);
   if (HEAP32[$quantize_colors >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 484 >> 2] >> 2] & 255]($cinfo, HEAP32[$is_dummy_pass >> 2] | 0);
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 456 >> 2] >> 2] & 255]($cinfo, (HEAP32[$is_dummy_pass >> 2] | 0) == 0 ? 0 : 3);
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 448 >> 2] >> 2] & 255]($cinfo, 0);
  }
 } else {
  HEAP32[$is_dummy_pass >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 484 >> 2] >> 2] & 255]($cinfo, 0);
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 456 >> 2] >> 2] & 255]($cinfo, 2);
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$cinfo + 448 >> 2] >> 2] & 255]($cinfo, 2);
 }
 $36 = HEAP32[$cinfo + 8 >> 2] | 0;
 if (!$36) return;
 $37 = HEAP32[$0 + 12 >> 2] | 0;
 HEAP32[$36 + 12 >> 2] = $37;
 $add = ((HEAP32[$is_dummy_pass >> 2] | 0) == 0 ? 1 : 2) + $37 | 0;
 $total_passes = $36 + 16 | 0;
 HEAP32[$total_passes >> 2] = $add;
 if (!(HEAP32[$cinfo + 64 >> 2] | 0)) return;
 if (HEAP32[(HEAP32[$cinfo + 460 >> 2] | 0) + 20 >> 2] | 0) return;
 HEAP32[$total_passes >> 2] = ((HEAP32[$cinfo + 108 >> 2] | 0) == 0 ? 1 : 2) + $add;
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1 = 0, $d$addr$224 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1 = 0, $s$addr$225 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $d$addr$0$lcssa = $d;
   $s$addr$0$lcssa = $s;
  } else {
   $d$addr$037 = $d;
   $s$addr$038 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$038 >> 0] | 0;
    HEAP8[$d$addr$037 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $retval$0 = $d$addr$037;
     break L1;
    }
    $incdec$ptr = $s$addr$038 + 1 | 0;
    $incdec$ptr5 = $d$addr$037 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $d$addr$0$lcssa = $incdec$ptr5;
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else {
     $d$addr$037 = $incdec$ptr5;
     $s$addr$038 = $incdec$ptr;
    }
   }
  }
  $6 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  if (!(($6 & -2139062144 ^ -2139062144) & $6 + -16843009)) {
   $7 = $6;
   $wd$031 = $d$addr$0$lcssa;
   $ws$032 = $s$addr$0$lcssa;
   while (1) {
    $incdec$ptr11 = $ws$032 + 4 | 0;
    $incdec$ptr12 = $wd$031 + 4 | 0;
    HEAP32[$wd$031 >> 2] = $7;
    $7 = HEAP32[$incdec$ptr11 >> 2] | 0;
    if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
     $wd$0$lcssa = $incdec$ptr12;
     $ws$0$lcssa = $incdec$ptr11;
     break;
    } else {
     $wd$031 = $incdec$ptr12;
     $ws$032 = $incdec$ptr11;
    }
   }
  } else {
   $wd$0$lcssa = $d$addr$0$lcssa;
   $ws$0$lcssa = $s$addr$0$lcssa;
  }
  $d$addr$1 = $wd$0$lcssa;
  $s$addr$1 = $ws$0$lcssa;
  label = 10;
 } else {
  $d$addr$1 = $d;
  $s$addr$1 = $s;
  label = 10;
 } while (0);
 if ((label | 0) == 10) {
  $9 = HEAP8[$s$addr$1 >> 0] | 0;
  HEAP8[$d$addr$1 >> 0] = $9;
  if (!($9 << 24 >> 24)) $retval$0 = $d$addr$1; else {
   $d$addr$224 = $d$addr$1;
   $s$addr$225 = $s$addr$1;
   while (1) {
    $s$addr$225 = $s$addr$225 + 1 | 0;
    $incdec$ptr20 = $d$addr$224 + 1 | 0;
    $10 = HEAP8[$s$addr$225 >> 0] | 0;
    HEAP8[$incdec$ptr20 >> 0] = $10;
    if (!($10 << 24 >> 24)) {
     $retval$0 = $incdec$ptr20;
     break;
    } else $d$addr$224 = $incdec$ptr20;
   }
  }
 }
 return $retval$0 | 0;
}

function _format_message($cinfo, $buffer) {
 $cinfo = $cinfo | 0;
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $incdec$ptr = 0, $msgptr$0 = 0, $msgtext$0 = 0, $msgtext$0$in = 0, $msgtext$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$cinfo >> 2] | 0;
 $1 = HEAP32[$0 + 20 >> 2] | 0;
 if (($1 | 0) > 0 ? ($1 | 0) <= (HEAP32[$0 + 116 >> 2] | 0) : 0) {
  $msgtext$0$in = (HEAP32[$0 + 112 >> 2] | 0) + ($1 << 2) | 0;
  label = 8;
 } else {
  $4 = HEAP32[$0 + 120 >> 2] | 0;
  if ((($4 | 0) != 0 ? ($5 = HEAP32[$0 + 124 >> 2] | 0, ($1 | 0) >= ($5 | 0)) : 0) ? ($1 | 0) <= (HEAP32[$0 + 128 >> 2] | 0) : 0) {
   $msgtext$0$in = $4 + ($1 - $5 << 2) | 0;
   label = 8;
  } else label = 9;
 }
 if ((label | 0) == 8) {
  $msgtext$0 = HEAP32[$msgtext$0$in >> 2] | 0;
  if (!$msgtext$0) label = 9; else $msgtext$1 = $msgtext$0;
 }
 if ((label | 0) == 9) {
  HEAP32[$0 + 24 >> 2] = $1;
  $msgtext$1 = HEAP32[HEAP32[$0 + 112 >> 2] >> 2] | 0;
 }
 $msgptr$0 = $msgtext$1;
 L14 : while (1) {
  $incdec$ptr = $msgptr$0 + 1 | 0;
  switch (HEAP8[$msgptr$0 >> 0] | 0) {
  case 0:
   {
    break L14;
    break;
   }
  case 37:
   {
    label = 12;
    break L14;
    break;
   }
  default:
   $msgptr$0 = $incdec$ptr;
  }
 }
 if ((label | 0) == 12 ? (HEAP8[$incdec$ptr >> 0] | 0) == 115 : 0) {
  HEAP32[$vararg_buffer >> 2] = $0 + 24;
  _sprintf($buffer, $msgtext$1, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 $12 = HEAP32[$0 + 28 >> 2] | 0;
 $13 = HEAP32[$0 + 32 >> 2] | 0;
 $14 = HEAP32[$0 + 36 >> 2] | 0;
 $15 = HEAP32[$0 + 40 >> 2] | 0;
 $16 = HEAP32[$0 + 44 >> 2] | 0;
 $17 = HEAP32[$0 + 48 >> 2] | 0;
 $18 = HEAP32[$0 + 52 >> 2] | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$vararg_buffer1 + 4 >> 2] = $12;
 HEAP32[$vararg_buffer1 + 8 >> 2] = $13;
 HEAP32[$vararg_buffer1 + 12 >> 2] = $14;
 HEAP32[$vararg_buffer1 + 16 >> 2] = $15;
 HEAP32[$vararg_buffer1 + 20 >> 2] = $16;
 HEAP32[$vararg_buffer1 + 24 >> 2] = $17;
 HEAP32[$vararg_buffer1 + 28 >> 2] = $18;
 _sprintf($buffer, $msgtext$1, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return;
}

function _quantize_ord_dither($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $arrayidx$us = 0, $arrayidx6$us = 0, $ci$041$us45 = 0, $cmp1235 = 0, $col$038$us51 = 0, $col_index$036$us53 = 0, $colorindex = 0, $input_ptr$039$us50 = 0, $output_ptr$037$us52 = 0, $row$043 = 0, $row$043$us = 0, $row_index2 = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $1 = HEAP32[$cinfo + 120 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $row_index2 = $0 + 48 | 0;
 $colorindex = $0 + 24 | 0;
 $cmp1235 = ($2 | 0) == 0;
 if (($1 | 0) <= 0) {
  $row$043 = 0;
  do {
   _memset(HEAP32[$output_buf + ($row$043 << 2) >> 2] | 0, 0, $2 | 0) | 0;
   HEAP32[$row_index2 >> 2] = (HEAP32[$row_index2 >> 2] | 0) + 1 & 15;
   $row$043 = $row$043 + 1 | 0;
  } while (($row$043 | 0) != ($num_rows | 0));
  return;
 }
 $row$043$us = 0;
 do {
  $arrayidx$us = $output_buf + ($row$043$us << 2) | 0;
  _memset(HEAP32[$arrayidx$us >> 2] | 0, 0, $2 | 0) | 0;
  $4 = HEAP32[$row_index2 >> 2] | 0;
  $arrayidx6$us = $input_buf + ($row$043$us << 2) | 0;
  if (!$cmp1235) {
   $ci$041$us45 = 0;
   do {
    $8 = HEAP32[(HEAP32[$colorindex >> 2] | 0) + ($ci$041$us45 << 2) >> 2] | 0;
    $9 = HEAP32[$0 + 52 + ($ci$041$us45 << 2) >> 2] | 0;
    $col$038$us51 = $2;
    $col_index$036$us53 = 0;
    $input_ptr$039$us50 = (HEAP32[$arrayidx6$us >> 2] | 0) + $ci$041$us45 | 0;
    $output_ptr$037$us52 = HEAP32[$arrayidx$us >> 2] | 0;
    while (1) {
     HEAP8[$output_ptr$037$us52 >> 0] = (HEAPU8[$output_ptr$037$us52 >> 0] | 0) + (HEAPU8[$8 + ((HEAP32[$9 + ($4 << 6) + ($col_index$036$us53 << 2) >> 2] | 0) + (HEAPU8[$input_ptr$039$us50 >> 0] | 0)) >> 0] | 0);
     $col$038$us51 = $col$038$us51 + -1 | 0;
     if (!$col$038$us51) break; else {
      $col_index$036$us53 = $col_index$036$us53 + 1 & 15;
      $input_ptr$039$us50 = $input_ptr$039$us50 + $1 | 0;
      $output_ptr$037$us52 = $output_ptr$037$us52 + 1 | 0;
     }
    }
    $ci$041$us45 = $ci$041$us45 + 1 | 0;
   } while (($ci$041$us45 | 0) != ($1 | 0));
  }
  HEAP32[$row_index2 >> 2] = $4 + 1 & 15;
  $row$043$us = $row$043$us + 1 | 0;
 } while (($row$043$us | 0) != ($num_rows | 0));
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $retval$0 = 0, $rpos33$phi$trans$insert = 0, $shcnt30 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0;
 $shlim = $f + 112 | 0;
 $0 = $shlim;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (!(($2 | 0) == 0 & ($5 | 0) == 0) ? ($9 = $f + 120 | 0, $14 = HEAP32[$9 + 4 >> 2] | 0, !(($14 | 0) < ($5 | 0) | (($14 | 0) == ($5 | 0) ? (HEAP32[$9 >> 2] | 0) >>> 0 < $2 >>> 0 : 0))) : 0) label = 4; else {
  $call = ___uflow($f) | 0;
  if (($call | 0) >= 0) {
   $20 = $shlim;
   $22 = HEAP32[$20 >> 2] | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!(($22 | 0) == 0 & ($25 | 0) == 0)) {
    $30 = HEAP32[$f + 4 >> 2] | 0;
    $sub$ptr$sub = $$pre - $30 | 0;
    $32 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
    $33 = $f + 120 | 0;
    $39 = _i64Subtract($22 | 0, $25 | 0, HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
    $40 = getTempRet0() | 0;
    $46 = $$pre;
    if (($40 | 0) > ($32 | 0) | ($40 | 0) == ($32 | 0) & $39 >>> 0 > $sub$ptr$sub >>> 0) {
     $66 = $46;
     label = 9;
    } else {
     HEAP32[$f + 104 >> 2] = $30 + ($39 + -1);
     $47 = $46;
    }
   } else {
    $66 = $$pre;
    label = 9;
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 104 >> 2] = $$pre;
    $47 = $66;
   }
   $rpos33$phi$trans$insert = $f + 4 | 0;
   if (!$47) $64 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0; else {
    $48 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0;
    $add = $47 + 1 - $48 | 0;
    $shcnt30 = $f + 120 | 0;
    $51 = $shcnt30;
    $57 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, $add | 0, (($add | 0) < 0) << 31 >> 31 | 0) | 0;
    $58 = getTempRet0() | 0;
    $59 = $shcnt30;
    HEAP32[$59 >> 2] = $57;
    HEAP32[$59 + 4 >> 2] = $58;
    $64 = $48;
   }
   $arrayidx = $64 + -1 | 0;
   if (($call | 0) == (HEAPU8[$arrayidx >> 0] | 0 | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  } else label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 104 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _ycc_rgb_convert($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $arrayidx3 = 0, $arrayidx5 = 0, $col$040$us = 0, $conv$us = 0, $conv10$us = 0, $conv12$us = 0, $dec46$us$in = 0, $input_row$addr$045$us = 0, $outptr$041$us = 0, $output_buf$addr$044$us = 0, $dec46$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 480 >> 2] | 0;
 $1 = HEAP32[$cinfo + 112 >> 2] | 0;
 $2 = HEAP32[$cinfo + 336 >> 2] | 0;
 $3 = HEAP32[$0 + 8 >> 2] | 0;
 $4 = HEAP32[$0 + 12 >> 2] | 0;
 $5 = HEAP32[$0 + 16 >> 2] | 0;
 $6 = HEAP32[$0 + 20 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx3 = $input_buf + 4 | 0;
 $arrayidx5 = $input_buf + 8 | 0;
 if (!$1) return;
 $dec46$us$in = $num_rows;
 $input_row$addr$045$us = $input_row;
 $output_buf$addr$044$us = $output_buf;
 while (1) {
  $dec46$us$in$looptemp = $dec46$us$in;
  $dec46$us$in = $dec46$us$in + -1 | 0;
  $8 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$045$us << 2) >> 2] | 0;
  $10 = HEAP32[(HEAP32[$arrayidx3 >> 2] | 0) + ($input_row$addr$045$us << 2) >> 2] | 0;
  $12 = HEAP32[(HEAP32[$arrayidx5 >> 2] | 0) + ($input_row$addr$045$us << 2) >> 2] | 0;
  $input_row$addr$045$us = $input_row$addr$045$us + 1 | 0;
  $col$040$us = 0;
  $outptr$041$us = HEAP32[$output_buf$addr$044$us >> 2] | 0;
  while (1) {
   $conv$us = HEAPU8[$8 + $col$040$us >> 0] | 0;
   $conv10$us = HEAPU8[$10 + $col$040$us >> 0] | 0;
   $conv12$us = HEAPU8[$12 + $col$040$us >> 0] | 0;
   HEAP8[$outptr$041$us >> 0] = HEAP8[$2 + ((HEAP32[$3 + ($conv12$us << 2) >> 2] | 0) + $conv$us) >> 0] | 0;
   HEAP8[$outptr$041$us + 1 >> 0] = HEAP8[$2 + (((HEAP32[$5 + ($conv12$us << 2) >> 2] | 0) + (HEAP32[$6 + ($conv10$us << 2) >> 2] | 0) >> 16) + $conv$us) >> 0] | 0;
   HEAP8[$outptr$041$us + 2 >> 0] = HEAP8[$2 + ((HEAP32[$4 + ($conv10$us << 2) >> 2] | 0) + $conv$us) >> 0] | 0;
   $col$040$us = $col$040$us + 1 | 0;
   if (($col$040$us | 0) == ($1 | 0)) break; else $outptr$041$us = $outptr$041$us + 3 | 0;
  }
  if (($dec46$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$044$us = $output_buf$addr$044$us + 4 | 0;
 }
 return;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $0 = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__wb$addr$0$i = 0, $add$ptr = 0, $add$ptr14 = 0, $call8 = 0, $cond$i$i$i25 = 0, $cond$i$i$i4149 = 0, $tobool$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__ndflt = sp;
 HEAP32[$__ndflt >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $0 = HEAP8[$__dflt + 11 >> 0] | 0;
 $tobool$i$i$i$i = $0 << 24 >> 24 < 0;
 $cond$i$i$i4149 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i4149 + ($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $0 & 255) | 0;
 $__wb$addr$0$i = $cond$i$i$i4149;
 while (1) {
  if ($__wb$addr$0$i >>> 0 >= $add$ptr >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__wb$addr$0$i >> 0] | 0);
  $__wb$addr$0$i = $__wb$addr$0$i + 1 | 0;
 }
 $cond$i$i$i25 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $call8 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, $cond$i$i$i25) | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $add$ptr14 = $cond$i$i$i25 + (_strlen($call8) | 0) | 0;
 $__nb$addr$0$i = $cond$i$i$i25;
 while (1) {
  if ($__nb$addr$0$i >>> 0 >= $add$ptr14 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$__nb$addr$0$i >> 0] | 0);
  $__nb$addr$0$i = $__nb$addr$0$i + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add15 = 0, $add1545 = 0, $add40 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp49 = sp;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add15 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add15 >>> 0 > 1073741823) _abort(); else $add1545 = $add15;
 } else $add1545 = 1073741807;
 $call$i$i$i = __Znwm($add1545 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) + ($__n_add << 2) | 0, $cond$i + ($__n_copy << 2) + ($__n_del << 2) | 0, $sub29) | 0;
 $add40 = $__old_cap + 1 | 0;
 if (($add40 | 0) != 2) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add40 << 2);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1545 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP32[$ref$tmp49 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($call$i$i$i + ($add48 << 2) | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp$byval_copy = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $num = sp;
 $agg$tmp = sp + 48 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 16) {
  $scevgep = $0 + 8 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 16) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$num >> 2] = 0;
  HEAP32[$num + 4 >> 2] = 0;
  HEAP32[$num + 8 >> 2] = 0;
  HEAP32[$num + 12 >> 2] = 0;
  HEAP32[$num + 16 >> 2] = 0;
  HEAP32[$num + 20 >> 2] = 0;
  HEAP32[$num + 24 >> 2] = 0;
  HEAP32[$num + 28 >> 2] = 0;
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF64[$0 >> 3];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 32, 29365, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call5 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32087);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp2$byval_copy) | 0) ? (__ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 32091), HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2], HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2], !(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp2$byval_copy) | 0)) : 0) $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0; else {
  $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
  HEAP32[$agg$tmp2$byval_copy >> 2] = $call5;
  if (!$call5) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp2$byval_copy) | 0;
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _post_process_2pass($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $0 = 0, $1 = 0, $14 = 0, $17 = 0, $8 = 0, $9 = 0, $add17 = 0, $call = 0, $next_row = 0, $num_rows$1 = 0, $spec$select = 0, $starting_row = 0, $starting_row8$pre$phiZ2D = 0, $strip_height = 0, $strip_height2$pre$phiZ2D = 0, $sub = 0, $sub4 = 0, $sub9 = 0;
 $0 = HEAP32[$cinfo + 456 >> 2] | 0;
 $next_row = $0 + 24 | 0;
 $1 = HEAP32[$next_row >> 2] | 0;
 if (!$1) {
  $starting_row = $0 + 20 | 0;
  $strip_height = $0 + 16 | 0;
  $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$cinfo + 4 >> 2] | 0) + 28 >> 2] & 31]($cinfo, HEAP32[$0 + 8 >> 2] | 0, HEAP32[$starting_row >> 2] | 0, HEAP32[$strip_height >> 2] | 0, 0) | 0;
  HEAP32[$0 + 12 >> 2] = $call;
  $14 = $call;
  $8 = HEAP32[$next_row >> 2] | 0;
  $starting_row8$pre$phiZ2D = $starting_row;
  $strip_height2$pre$phiZ2D = $strip_height;
 } else {
  $14 = HEAP32[$0 + 12 >> 2] | 0;
  $8 = $1;
  $starting_row8$pre$phiZ2D = $0 + 20 | 0;
  $strip_height2$pre$phiZ2D = $0 + 16 | 0;
 }
 $sub = (HEAP32[$strip_height2$pre$phiZ2D >> 2] | 0) - $8 | 0;
 $9 = HEAP32[$out_row_ctr >> 2] | 0;
 $sub4 = $out_rows_avail - $9 | 0;
 $spec$select = $sub >>> 0 > $sub4 >>> 0 ? $sub4 : $sub;
 $sub9 = (HEAP32[$cinfo + 116 >> 2] | 0) - (HEAP32[$starting_row8$pre$phiZ2D >> 2] | 0) | 0;
 $num_rows$1 = $spec$select >>> 0 > $sub9 >>> 0 ? $sub9 : $spec$select;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 4 >> 2] & 31]($cinfo, $14 + ($8 << 2) | 0, $output_buf + ($9 << 2) | 0, $num_rows$1);
 HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + $num_rows$1;
 $add17 = (HEAP32[$next_row >> 2] | 0) + $num_rows$1 | 0;
 HEAP32[$next_row >> 2] = $add17;
 $17 = HEAP32[$strip_height2$pre$phiZ2D >> 2] | 0;
 if ($add17 >>> 0 < $17 >>> 0) return;
 HEAP32[$starting_row8$pre$phiZ2D >> 2] = (HEAP32[$starting_row8$pre$phiZ2D >> 2] | 0) + $17;
 HEAP32[$next_row >> 2] = 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp17$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp3 = sp + 16 | 0;
 $agg$tmp7 = sp + 8 | 0;
 $agg$tmp17 = sp;
 if ((__ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0) << 24 >> 24 != 93) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 32898);
 HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
 HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 $Dimension = $this + 12 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension) | 0)) {
  if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension) | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension) | 0, $S);
 } else {
  __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp7, $Dimension);
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 28587);
 HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
 HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 255]($0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp15$byval_copy = sp + 40 | 0;
 $SavePrinting = sp + 24 | 0;
 $Collapsed = sp + 8 | 0;
 $agg$tmp = sp + 32 | 0;
 $agg$tmp12 = sp + 16 | 0;
 $agg$tmp15 = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed, $this, $s);
  $1 = HEAP32[$Collapsed + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 255]($1, $s);
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp15$byval_copy);
  }
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1, $s) | 0) : 0) {} else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 28941);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp15$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, (HEAP32[$Collapsed >> 2] | 0) == 0 ? 28943 : 28945);
  HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
  HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp15$byval_copy);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp$byval_copy = sp + 24 | 0;
 $0 = sp + 40 | 0;
 $num = sp;
 $agg$tmp = sp + 32 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 8) {
  $scevgep = $0 + 4 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 8) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$num >> 2] = 0;
  HEAP32[$num + 4 >> 2] = 0;
  HEAP32[$num + 8 >> 2] = 0;
  HEAP32[$num + 12 >> 2] = 0;
  HEAP32[$num + 16 >> 2] = 0;
  HEAP32[$num + 20 >> 2] = 0;
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF32[$0 >> 2];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 24, 29424, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp$byval_copy = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $num = sp;
 $agg$tmp = sp + 56 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 20) {
  $scevgep = $0 + 8 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 20) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep + 2 | 0;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  dest = $num;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF64[$0 >> 3];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 40, 29304, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Child = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $I$0 = 0, $SavePackIdx = 0, $SavePackMax = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp10$byval_copy = sp + 48 | 0;
 $SavePackIdx = sp + 32 | 0;
 $SavePackMax = sp + 8 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp10 = sp;
 $CurrentPackIndex = $S + 12 | 0;
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackIdx, $CurrentPackIndex);
 $CurrentPackMax = $S + 16 | 0;
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackMax, $CurrentPackMax);
 $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
 $Child = $this + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Child >> 2] | 0, $S);
 $1 = HEAP32[$CurrentPackMax >> 2] | 0;
 L1 : do switch ($1 | 0) {
 case -1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28483);
   HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp10$byval_copy);
   break;
  }
 case 0:
  {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
   break;
  }
 default:
  {
   $I$0 = 1;
   while (1) {
    if ($I$0 >>> 0 >= $1 >>> 0) break L1;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 29125);
    HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
    HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp10$byval_copy);
    HEAP32[$CurrentPackIndex >> 2] = $I$0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Child >> 2] | 0, $S);
    $I$0 = $I$0 + 1 | 0;
   }
  }
 } while (0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackMax);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackIdx);
 STACKTOP = sp;
 return;
}

function _quantize3_ord_dither($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $$pre48 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $col$042 = 0, $col_index$041 = 0, $input_ptr$043 = 0, $output_ptr$040 = 0, $row$045 = 0, $row$045$us = 0, $row_index7 = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $1 = HEAP32[$0 + 24 >> 2] | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 $4 = HEAP32[$1 + 8 >> 2] | 0;
 $5 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $row_index7 = $0 + 48 | 0;
 $arrayidx10 = $0 + 52 | 0;
 $arrayidx13 = $0 + 56 | 0;
 $arrayidx17 = $0 + 60 | 0;
 $$pre48 = HEAP32[$row_index7 >> 2] | 0;
 if (!$5) {
  $6 = $$pre48;
  $row$045$us = 0;
  do {
   $6 = $6 + 1 & 15;
   $row$045$us = $row$045$us + 1 | 0;
  } while (($row$045$us | 0) != ($num_rows | 0));
  HEAP32[$row_index7 >> 2] = $6;
  return;
 }
 $13 = $$pre48;
 $row$045 = 0;
 do {
  $9 = HEAP32[$arrayidx10 >> 2] | 0;
  $10 = HEAP32[$arrayidx13 >> 2] | 0;
  $11 = HEAP32[$arrayidx17 >> 2] | 0;
  $col$042 = $5;
  $col_index$041 = 0;
  $input_ptr$043 = HEAP32[$input_buf + ($row$045 << 2) >> 2] | 0;
  $output_ptr$040 = HEAP32[$output_buf + ($row$045 << 2) >> 2] | 0;
  while (1) {
   HEAP8[$output_ptr$040 >> 0] = (HEAPU8[$3 + ((HEAP32[$10 + ($13 << 6) + ($col_index$041 << 2) >> 2] | 0) + (HEAPU8[$input_ptr$043 + 1 >> 0] | 0)) >> 0] | 0) + (HEAPU8[$2 + ((HEAP32[$9 + ($13 << 6) + ($col_index$041 << 2) >> 2] | 0) + (HEAPU8[$input_ptr$043 >> 0] | 0)) >> 0] | 0) + (HEAPU8[$4 + ((HEAP32[$11 + ($13 << 6) + ($col_index$041 << 2) >> 2] | 0) + (HEAPU8[$input_ptr$043 + 2 >> 0] | 0)) >> 0] | 0);
   $col$042 = $col$042 + -1 | 0;
   if (!$col$042) break; else {
    $col_index$041 = $col_index$041 + 1 & 15;
    $input_ptr$043 = $input_ptr$043 + 3 | 0;
    $output_ptr$040 = $output_ptr$040 + 1 | 0;
   }
  }
  $13 = $13 + 1 & 15;
  HEAP32[$row_index7 >> 2] = $13;
  $row$045 = $row$045 + 1 | 0;
 } while (($row$045 | 0) != ($num_rows | 0));
 return;
}

function _post_process_prepass($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $buffer = 0, $buffer4$phi$trans$insert = 0, $buffer4$pre$phiZ2D = 0, $call = 0, $next_row = 0, $starting_row18 = 0, $strip_height = 0, $strip_height6$pre$phiZ2D = 0, $sub = 0;
 $0 = HEAP32[$cinfo + 456 >> 2] | 0;
 $next_row = $0 + 24 | 0;
 $1 = HEAP32[$next_row >> 2] | 0;
 if (!$1) {
  $strip_height = $0 + 16 | 0;
  $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$cinfo + 4 >> 2] | 0) + 28 >> 2] & 31]($cinfo, HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$strip_height >> 2] | 0, 1) | 0;
  $buffer = $0 + 12 | 0;
  HEAP32[$buffer >> 2] = $call;
  $10 = $call;
  $12 = HEAP32[$next_row >> 2] | 0;
  $buffer4$pre$phiZ2D = $buffer;
  $strip_height6$pre$phiZ2D = $strip_height;
 } else {
  $buffer4$phi$trans$insert = $0 + 12 | 0;
  $10 = HEAP32[$buffer4$phi$trans$insert >> 2] | 0;
  $12 = $1;
  $buffer4$pre$phiZ2D = $buffer4$phi$trans$insert;
  $strip_height6$pre$phiZ2D = $0 + 16 | 0;
 }
 FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 4 >> 2] & 7]($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $10, $next_row, HEAP32[$strip_height6$pre$phiZ2D >> 2] | 0);
 $11 = HEAP32[$next_row >> 2] | 0;
 if ($11 >>> 0 > $12 >>> 0) {
  $sub = $11 - $12 | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 4 >> 2] & 31]($cinfo, (HEAP32[$buffer4$pre$phiZ2D >> 2] | 0) + ($12 << 2) | 0, 0, $sub);
  HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + $sub;
  $18 = HEAP32[$next_row >> 2] | 0;
 } else $18 = $11;
 $17 = HEAP32[$strip_height6$pre$phiZ2D >> 2] | 0;
 if ($18 >>> 0 < $17 >>> 0) return;
 $starting_row18 = $0 + 20 | 0;
 HEAP32[$starting_row18 >> 2] = (HEAP32[$starting_row18 >> 2] | 0) + $17;
 HEAP32[$next_row >> 2] = 0;
 return;
}

function _jinit_2pass_quantizer($cinfo) {
 $cinfo = $cinfo | 0;
 var $11 = 0, $12 = 0, $15 = 0, $3 = 0, $call = 0, $call10 = 0, $call35 = 0, $call48 = 0, $call7 = 0, $dither_mode = 0, $fserrors = 0, $histogram = 0, $i$051 = 0, $mem = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 44) | 0;
 HEAP32[$cinfo + 484 >> 2] = $call;
 HEAP32[$call >> 2] = 127;
 HEAP32[$call + 12 >> 2] = 171;
 $fserrors = $call + 32 | 0;
 HEAP32[$fserrors >> 2] = 0;
 HEAP32[$call + 40 >> 2] = 0;
 if ((HEAP32[$cinfo + 120 >> 2] | 0) != 3) {
  $3 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$3 + 20 >> 2] = 48;
  FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($cinfo);
 }
 $call7 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 128) | 0;
 $histogram = $call + 24 | 0;
 HEAP32[$histogram >> 2] = $call7;
 $i$051 = 0;
 do {
  $call10 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, 4096) | 0;
  HEAP32[(HEAP32[$histogram >> 2] | 0) + ($i$051 << 2) >> 2] = $call10;
  $i$051 = $i$051 + 1 | 0;
 } while (($i$051 | 0) != 32);
 HEAP32[$call + 28 >> 2] = 1;
 if (!(HEAP32[$cinfo + 108 >> 2] | 0)) HEAP32[$call + 16 >> 2] = 0; else {
  $11 = HEAP32[$cinfo + 96 >> 2] | 0;
  if (($11 | 0) >= 8) {
   if (($11 | 0) > 256) {
    $15 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$15 + 20 >> 2] = 59;
    HEAP32[$15 + 24 >> 2] = 256;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   }
  } else {
   $12 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$12 + 20 >> 2] = 58;
   HEAP32[$12 + 24 >> 2] = 8;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  }
  $call35 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 8 >> 2] & 15]($cinfo, 1, $11, 3) | 0;
  HEAP32[$call + 16 >> 2] = $call35;
  HEAP32[$call + 20 >> 2] = $11;
 }
 $dither_mode = $cinfo + 88 | 0;
 if (!(HEAP32[$dither_mode >> 2] | 0)) return;
 HEAP32[$dither_mode >> 2] = 2;
 $call48 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$mem >> 2] | 0) + 4 >> 2] & 31]($cinfo, 1, ((HEAP32[$cinfo + 112 >> 2] | 0) * 6 | 0) + 12 | 0) | 0;
 HEAP32[$fserrors >> 2] = $call48;
 _init_error_limit($cinfo);
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($this, $Other) {
 $this = $this | 0;
 $Other = $Other | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $Cap23 = 0, $Cap24 = 0, $Last21 = 0, $Last22 = 0, $add$ptr = 0, $call = 0, $call2 = 0, $call4 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other) | 0;
 $call2 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0;
 do if (!$call) if ($call2) {
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$Other + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$Other + 8 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
  break;
 } else {
  $6 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$Other >> 2] = $6;
  $Last21 = $this + 4 | 0;
  $Last22 = $Other + 4 | 0;
  $8 = HEAP32[$Last21 >> 2] | 0;
  HEAP32[$Last21 >> 2] = HEAP32[$Last22 >> 2];
  HEAP32[$Last22 >> 2] = $8;
  $Cap23 = $this + 8 | 0;
  $Cap24 = $Other + 8 | 0;
  $10 = HEAP32[$Cap23 >> 2] | 0;
  HEAP32[$Cap23 >> 2] = HEAP32[$Cap24 >> 2];
  HEAP32[$Cap24 >> 2] = $10;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
  break;
 } else {
  if (!$call2) {
   _free(HEAP32[$this >> 2] | 0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this);
  }
  $call4 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other) | 0;
  $sub$ptr$sub$i$i = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other) | 0) - $call4 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove(HEAP32[$this >> 2] | 0, $call4 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $2 = HEAP32[$this >> 2] | 0;
  $add$ptr = $2 + ((__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other) | 0) << 2) | 0;
  HEAP32[$this + 4 >> 2] = $add$ptr;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $add = 0, $add40 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp49 = sp;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond40 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond40 = -17;
 $call$i$i$i = __Znwm($cond40) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub29) | 0;
 $add40 = $__old_cap + 1 | 0;
 if (($add40 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add40);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond40 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP8[$ref$tmp49 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + $add48 | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function _merged_2v_upsample($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $$pre27 = 0, $0 = 0, $6 = 0, $7 = 0, $num_rows$1 = 0, $phitmp = 0, $rows_to_go = 0, $spare_full = 0, $spec$select = 0, $sub = 0, $work_ptrs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $work_ptrs = sp;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 $spare_full = $0 + 36 | 0;
 if (!(HEAP32[$spare_full >> 2] | 0)) {
  $rows_to_go = $0 + 44 | 0;
  $6 = HEAP32[$rows_to_go >> 2] | 0;
  $spec$select = $6 >>> 0 < 2 ? $6 : 2;
  $7 = HEAP32[$out_row_ctr >> 2] | 0;
  $sub = $out_rows_avail - $7 | 0;
  $num_rows$1 = $spec$select >>> 0 > $sub >>> 0 ? $sub : $spec$select;
  HEAP32[$work_ptrs >> 2] = HEAP32[$output_buf + ($7 << 2) >> 2];
  if ($num_rows$1 >>> 0 > 1) HEAP32[$work_ptrs + 4 >> 2] = HEAP32[$output_buf + ($7 + 1 << 2) >> 2]; else {
   HEAP32[$work_ptrs + 4 >> 2] = HEAP32[$0 + 32 >> 2];
   HEAP32[$spare_full >> 2] = 1;
  }
  FUNCTION_TABLE_viiii[HEAP32[$0 + 12 >> 2] & 31]($cinfo, $input_buf, HEAP32[$in_row_group_ctr >> 2] | 0, $work_ptrs);
  $phitmp = (HEAP32[$spare_full >> 2] | 0) == 0;
  HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + $num_rows$1;
  HEAP32[$rows_to_go >> 2] = (HEAP32[$rows_to_go >> 2] | 0) - $num_rows$1;
  if (!$phitmp) {
   STACKTOP = sp;
   return;
  }
 } else {
  _jcopy_sample_rows($0 + 32 | 0, 0, $output_buf + (HEAP32[$out_row_ctr >> 2] << 2) | 0, 0, 1, HEAP32[$0 + 40 >> 2] | 0);
  HEAP32[$spare_full >> 2] = 0;
  $$pre27 = $0 + 44 | 0;
  HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + 1;
  HEAP32[$$pre27 >> 2] = (HEAP32[$$pre27 >> 2] | 0) + -1;
 }
 HEAP32[$in_row_group_ctr >> 2] = (HEAP32[$in_row_group_ctr >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $cmp26 = 0, $cnt$0 = 0, $fd = 0, $iov$0 = 0, $iov$1 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovs = 0, $num = 0, $rem$0 = 0, $retval$1$ph = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iovs = sp;
 $num = sp + 16 | 0;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $fd = $f + 60 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $sub$ptr$sub + $len | 0;
 while (1) {
  if (!(___wasi_syscall_ret(___wasi_fd_write(HEAP32[$fd >> 2] | 0, $iov$0 | 0, $iovcnt$0 | 0, $num | 0) | 0) | 0)) $3 = HEAP32[$num >> 2] | 0; else {
   HEAP32[$num >> 2] = -1;
   $3 = -1;
  }
  if (($rem$0 | 0) == ($3 | 0)) {
   label = 6;
   break;
  }
  if (($3 | 0) < 0) {
   label = 8;
   break;
  }
  $9 = HEAP32[$iov$0 + 4 >> 2] | 0;
  $cmp26 = $3 >>> 0 > $9 >>> 0;
  $iov$1 = $cmp26 ? $iov$0 + 8 | 0 : $iov$0;
  $cnt$0 = $3 - ($cmp26 ? $9 : 0) | 0;
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
  $iov_len38 = $iov$1 + 4 | 0;
  HEAP32[$iov_len38 >> 2] = (HEAP32[$iov_len38 >> 2] | 0) - $cnt$0;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$0 + ($cmp26 << 31 >> 31) | 0;
  $rem$0 = $rem$0 - $3 | 0;
 }
 if ((label | 0) == 6) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$1$ph = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0 | 0) == 2) $retval$1$ph = 0; else $retval$1$ph = $len - (HEAP32[$iov$0 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$1$ph | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $1 = 0, $3 = 0, $4 = 0, $call1 = 0, $call18 = 0, $call2 = 0, $or24 = 0, $retval$0 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $wsz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $wsz = sp + 40 | 0;
 if (_strchr(27813, HEAP8[$mode >> 0] | 0) | 0) {
  $call2 = _malloc(1176) | 0;
  if (!$call2) $retval$0 = 0; else {
   _memset($call2 | 0, 0, 144) | 0;
   $tobool8 = (_strchr($mode, 43) | 0) == 0;
   $1 = HEAP8[$mode >> 0] | 0;
   if ($tobool8) HEAP32[$call2 >> 2] = $1 << 24 >> 24 == 114 ? 8 : 4;
   if ($1 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 3;
    $call18 = ___syscall221(221, $vararg_buffer | 0) | 0;
    if (!($call18 & 1024)) {
     HEAP32[$vararg_buffer2 >> 2] = $fd;
     HEAP32[$vararg_buffer2 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer2 + 8 >> 2] = $call18 | 1024;
     ___syscall221(221, $vararg_buffer2 | 0) | 0;
    }
    $or24 = HEAP32[$call2 >> 2] | 128;
    HEAP32[$call2 >> 2] = $or24;
    $4 = $or24;
   } else $4 = HEAP32[$call2 >> 2] | 0;
   HEAP32[$call2 + 60 >> 2] = $fd;
   HEAP32[$call2 + 44 >> 2] = $call2 + 152;
   HEAP32[$call2 + 48 >> 2] = 1024;
   $3 = $call2 + 75 | 0;
   HEAP8[$3 >> 0] = -1;
   if (($4 & 8 | 0) == 0 ? (HEAP32[$vararg_buffer7 >> 2] = $fd, HEAP32[$vararg_buffer7 + 4 >> 2] = 21523, HEAP32[$vararg_buffer7 + 8 >> 2] = $wsz, (___syscall54(54, $vararg_buffer7 | 0) | 0) == 0) : 0) HEAP8[$3 >> 0] = 10;
   HEAP32[$call2 + 32 >> 2] = 2;
   HEAP32[$call2 + 36 >> 2] = 1;
   HEAP32[$call2 + 40 >> 2] = 2;
   HEAP32[$call2 + 12 >> 2] = 2;
   if (!(HEAP32[10466] | 0)) HEAP32[$call2 + 76 >> 2] = -1;
   ___ofl_add($call2) | 0;
   $retval$0 = $call2;
  }
 } else {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 28;
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _jinit_memory_mgr($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $5 = 0, $call = 0, $call33 = 0, $call4 = 0, $ch = 0, $max_memory_to_use = 0, $max_to_use = 0, $mem1 = 0, $mul = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $max_to_use = sp + 8 | 0;
 $ch = sp + 12 | 0;
 $mem1 = $cinfo + 4 | 0;
 HEAP32[$mem1 >> 2] = 0;
 $call = _jpeg_mem_init($cinfo) | 0;
 HEAP32[$max_to_use >> 2] = $call;
 $call4 = _jpeg_get_small($cinfo, 84) | 0;
 if (!$call4) {
  _jpeg_mem_term($cinfo);
  $0 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$0 + 20 >> 2] = 56;
  HEAP32[$0 + 24 >> 2] = 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 HEAP32[$call4 >> 2] = 28;
 HEAP32[$call4 + 4 >> 2] = 29;
 HEAP32[$call4 + 8 >> 2] = 8;
 HEAP32[$call4 + 12 >> 2] = 9;
 HEAP32[$call4 + 16 >> 2] = 39;
 HEAP32[$call4 + 20 >> 2] = 40;
 HEAP32[$call4 + 24 >> 2] = 187;
 HEAP32[$call4 + 28 >> 2] = 21;
 HEAP32[$call4 + 32 >> 2] = 22;
 HEAP32[$call4 + 36 >> 2] = 131;
 HEAP32[$call4 + 40 >> 2] = 188;
 HEAP32[$call4 + 48 >> 2] = 1e9;
 $max_memory_to_use = $call4 + 44 | 0;
 HEAP32[$max_memory_to_use >> 2] = $call;
 HEAP32[$call4 + 56 >> 2] = 0;
 HEAP32[$call4 + 64 >> 2] = 0;
 HEAP32[$call4 + 52 >> 2] = 0;
 HEAP32[$call4 + 60 >> 2] = 0;
 HEAP32[$call4 + 68 >> 2] = 0;
 HEAP32[$call4 + 72 >> 2] = 0;
 HEAP32[$call4 + 76 >> 2] = 84;
 HEAP32[$mem1 >> 2] = $call4;
 $call33 = _getenv(27686) | 0;
 if (!$call33) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$ch >> 0] = 120;
 HEAP32[$vararg_buffer >> 2] = $max_to_use;
 HEAP32[$vararg_buffer + 4 >> 2] = $ch;
 if ((_sscanf($call33, 27694, $vararg_buffer) | 0) > 0) {
  switch (HEAP8[$ch >> 0] | 0) {
  case 77:
  case 109:
   {
    $mul = (HEAP32[$max_to_use >> 2] | 0) * 1e3 | 0;
    HEAP32[$max_to_use >> 2] = $mul;
    $5 = $mul;
    break;
   }
  default:
   $5 = HEAP32[$max_to_use >> 2] | 0;
  }
  HEAP32[$max_memory_to_use >> 2] = $5 * 1e3;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $__o = 0, $add$ptr = 0, $add$ptr13 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $agg$tmp$byval_copy = sp + 184 | 0;
 $__fmt = sp + 192 | 0;
 $__nar = sp + 160 | 0;
 $__o = sp;
 $agg$tmp = sp + 188 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36151] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36152] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36153] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36154] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36155] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36156] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $agg$tmp$byval_copy) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, $__iob) | 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nar, $add$ptr, $__o) | 0;
 $add$ptr13 = $__o + ($call3 << 2) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call21 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__o, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $__o + ($call6 - $__nar << 2) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $0 = 0, $3 = 0, $4 = 0, $8 = 0, $call82 = 0, $conv38 = 0, $dummy = 0, $incdec$ptr = 0, $locale = 0, $or51 = 0, $or66 = 0, $retval$0 = 0, $spec$select = 0, $sub = 0, $sub57 = 0, $sub72 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $dummy = sp;
 L1 : do if (!$src) $retval$0 = 0; else {
  do if ($n | 0) {
   $spec$select = ($wc | 0) == 0 ? $dummy : $wc;
   $0 = HEAP8[$src >> 0] | 0;
   if ($0 << 24 >> 24 > -1) {
    HEAP32[$spec$select >> 2] = $0 & 255;
    $retval$0 = $0 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $locale = (___pthread_self_3() | 0) + 188 | 0;
   $3 = HEAP8[$src >> 0] | 0;
   if (!(HEAP32[HEAP32[$locale >> 2] >> 2] | 0)) {
    HEAP32[$spec$select >> 2] = $3 << 24 >> 24 & 57343;
    $retval$0 = 1;
    break L1;
   }
   $sub = ($3 & 255) + -194 | 0;
   if ($sub >>> 0 <= 50) {
    $incdec$ptr = $src + 1 | 0;
    $4 = HEAP32[3664 + ($sub << 2) >> 2] | 0;
    if ($n >>> 0 < 4 ? $4 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0 : 0) break;
    $conv38 = HEAPU8[$incdec$ptr >> 0] | 0;
    $8 = $conv38 >>> 3;
    if (($8 + -16 | $8 + ($4 >> 26)) >>> 0 <= 7) {
     $or51 = $conv38 + -128 | $4 << 6;
     if (($or51 | 0) >= 0) {
      HEAP32[$spec$select >> 2] = $or51;
      $retval$0 = 2;
      break L1;
     }
     $sub57 = (HEAPU8[$src + 2 >> 0] | 0) + -128 | 0;
     if ($sub57 >>> 0 <= 63) {
      $or66 = $sub57 | $or51 << 6;
      if (($or66 | 0) >= 0) {
       HEAP32[$spec$select >> 2] = $or66;
       $retval$0 = 3;
       break L1;
      }
      $sub72 = (HEAPU8[$src + 3 >> 0] | 0) + -128 | 0;
      if ($sub72 >>> 0 <= 63) {
       HEAP32[$spec$select >> 2] = $sub72 | $or66 << 6;
       $retval$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  $call82 = ___errno_location() | 0;
  HEAP32[$call82 >> 2] = 25;
  $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call4$i$i$i = 0, $retval$0$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $__nar = sp;
 $__ne = sp + 400 | 0;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
  if (!$agg$tmp1$sroa$0$0$i) $agg$tmp1$sroa$0$1$i = 0; else {
   $__nout_$i$i$i$i = $agg$tmp1$sroa$0$0$i + 24 | 0;
   $5 = HEAP32[$__nout_$i$i$i$i >> 2] | 0;
   if (($5 | 0) == (HEAP32[$agg$tmp1$sroa$0$0$i + 28 >> 2] | 0)) {
    $7 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
    $retval$0$i$i$i$i = FUNCTION_TABLE_iii[$7 & 63]($agg$tmp1$sroa$0$0$i, $call$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i >> 2] = $5 + 4;
    HEAP32[$5 >> 2] = $4;
    $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
   }
   $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   $agg$tmp1$sroa$0$1$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
  }
  $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
  $agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call4$i$i$i = 0, $retval$0$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__nar = sp;
 $__ne = sp + 100 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
  if (!$agg$tmp1$sroa$0$0$i) $agg$tmp1$sroa$0$1$i = 0; else {
   $__nout_$i$i$i$i = $agg$tmp1$sroa$0$0$i + 24 | 0;
   $5 = HEAP32[$__nout_$i$i$i$i >> 2] | 0;
   if (($5 | 0) == (HEAP32[$agg$tmp1$sroa$0$0$i + 28 >> 2] | 0)) {
    $7 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
    $retval$0$i$i$i$i = FUNCTION_TABLE_iii[$7 & 63]($agg$tmp1$sroa$0$0$i, $call$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $4;
    $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
   }
   $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   $agg$tmp1$sroa$0$1$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
  }
  $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
  $agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($this) {
 $this = $this | 0;
 var $TP = 0, $call12 = 0, $call3 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $TP = sp;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 84:
  {
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$TP >> 2] = $call3;
   if (!$call3) $retval$0 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $TP);
    $retval$0 = $call3;
   }
   $retval$2 = $retval$0;
   break;
  }
 case 68:
  {
   $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$TP >> 2] = $call12;
   if (!$call12) $retval$1 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $TP);
    $retval$1 = $call12;
   }
   $retval$2 = $retval$1;
   break;
  }
 default:
  $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $__o = 0, $add$ptr = 0, $add$ptr13 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $agg$tmp$byval_copy = sp + 72 | 0;
 $__fmt = sp + 80 | 0;
 $__nar = sp + 48 | 0;
 $__o = sp;
 $agg$tmp = sp + 76 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[36151] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[36152] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[36153] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[36154] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[36155] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[36156] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $agg$tmp$byval_copy) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, $__iob) | 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nar, $add$ptr, $__o) | 0;
 $add$ptr13 = $__o + $call3 | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call21 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__o, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $__o + ($call6 - $__nar) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function ___mo_lookup($p, $size, $s) {
 $p = $p | 0;
 $size = $size | 0;
 $s = $s | 0;
 var $add = 0, $add16 = 0, $add42 = 0, $b$0 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp71 = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul15 = 0, $n$0 = 0, $retval$4 = 0, $sub = 0, $sub5 = 0;
 $sub = (HEAP32[$p >> 2] | 0) + 1794895138 | 0;
 $call = _swapc(HEAP32[$p + 8 >> 2] | 0, $sub) | 0;
 $call2 = _swapc(HEAP32[$p + 12 >> 2] | 0, $sub) | 0;
 $call4 = _swapc(HEAP32[$p + 16 >> 2] | 0, $sub) | 0;
 L1 : do if (($call >>> 0 < $size >>> 2 >>> 0 ? ($sub5 = $size - ($call << 2) | 0, $call2 >>> 0 < $sub5 >>> 0 & $call4 >>> 0 < $sub5 >>> 0) : 0) ? (($call4 | $call2) & 3 | 0) == 0 : 0) {
  $div12 = $call2 >>> 2;
  $div13 = $call4 >>> 2;
  $b$0 = 0;
  $n$0 = $call;
  while (1) {
   $div14 = $n$0 >>> 1;
   $add = $b$0 + $div14 | 0;
   $mul15 = $add << 1;
   $add16 = $mul15 + $div12 | 0;
   $call18 = _swapc(HEAP32[$p + ($add16 << 2) >> 2] | 0, $sub) | 0;
   $call25 = _swapc(HEAP32[$p + ($add16 + 1 << 2) >> 2] | 0, $sub) | 0;
   if (!($call25 >>> 0 < $size >>> 0 & $call18 >>> 0 < ($size - $call25 | 0) >>> 0)) {
    $retval$4 = 0;
    break L1;
   }
   if (HEAP8[$p + ($call25 + $call18) >> 0] | 0) {
    $retval$4 = 0;
    break L1;
   }
   $call36 = _strcmp($s, $p + $call25 | 0) | 0;
   if (!$call36) break;
   $cmp71 = ($call36 | 0) < 0;
   if (($n$0 | 0) == 1) {
    $retval$4 = 0;
    break L1;
   }
   $b$0 = $cmp71 ? $b$0 : $add;
   $n$0 = $cmp71 ? $div14 : $n$0 - $div14 | 0;
  }
  $add42 = $mul15 + $div13 | 0;
  $call44 = _swapc(HEAP32[$p + ($add42 << 2) >> 2] | 0, $sub) | 0;
  $call51 = _swapc(HEAP32[$p + ($add42 + 1 << 2) >> 2] | 0, $sub) | 0;
  if ($call51 >>> 0 < $size >>> 0 & $call44 >>> 0 < ($size - $call51 | 0) >>> 0) $retval$4 = (HEAP8[$p + ($call51 + $call44) >> 0] | 0) == 0 ? $p + $call51 | 0 : 0; else $retval$4 = 0;
 } else $retval$4 = 0; while (0);
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) {
 $this = $this | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $ref$tmp = 0, $ref$tmp10 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp10 = sp;
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 104) | 0)) if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
  if (!(__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0 : 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp10, $this, 1);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp10) | 0) $$ph = 1; else $$ph = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) ^ 1;
   $1 = $$ph;
  } else $1 = 1;
  $retval$0 = $1;
 } else $retval$0 = 1; else {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
  if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) $0 = 1; else $0 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) ^ 1;
  $retval$0 = $0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__2L11init_wweeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41312] | 0) == 0 ? ___cxa_guard_acquire(41312) | 0 : 0) {
  $arrayctor$cur = 40976;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 41144);
  ___cxa_guard_release(41312);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40976, 19968) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40988, 19996) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41e3, 20024) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41012, 20056) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41024, 20096) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41036, 20132) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41048, 20160) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41060, 20196) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41072, 20212) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41084, 20228) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41096, 20244) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41108, 20260) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41120, 20276) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(41132, 20292) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41232] | 0) == 0 ? ___cxa_guard_acquire(41232) | 0 : 0) {
  $arrayctor$cur = 40480;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 40648);
  ___cxa_guard_release(41232);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40480, 36562) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40492, 36569) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40504, 36576) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40516, 36584) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40528, 36594) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40540, 36603) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40552, 36610) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40564, 36619) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40576, 36623) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40588, 36627) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40600, 36631) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40612, 36635) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40624, 36639) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40636, 36643) | 0;
 return;
}

function _alloc_barray($cinfo, $pool_id, $blocksperrow, $numrows) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $blocksperrow = $blocksperrow | 0;
 $numrows = $numrows | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call13 = 0, $currow$039 = 0, $currow$1$lcssa = 0, $currow$134 = 0, $div = 0, $div$numrows = 0, $i$035 = 0, $mul = 0, $rowsperchunk$138 = 0, $sub = 0, $umax = 0, $workspace$036 = 0, $rowsperchunk$138$looptemp = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 $mul = $blocksperrow << 7;
 $div = 999999984 / ($mul >>> 0) | 0;
 if ($mul >>> 0 > 999999984) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 72;
  FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($cinfo);
 }
 $div$numrows = ($div | 0) < ($numrows | 0) ? $div : $numrows;
 HEAP32[$0 + 80 >> 2] = $div$numrows;
 $call = _alloc_small($cinfo, $pool_id, $numrows << 2) | 0;
 if (!$numrows) return $call | 0;
 $3 = ~$numrows;
 $currow$039 = 0;
 $rowsperchunk$138 = $div$numrows;
 while (1) {
  $sub = $numrows - $currow$039 | 0;
  $rowsperchunk$138$looptemp = $rowsperchunk$138;
  $rowsperchunk$138 = $rowsperchunk$138 >>> 0 < $sub >>> 0 ? $rowsperchunk$138 : $sub;
  $call13 = _alloc_large($cinfo, $pool_id, Math_imul($mul, $rowsperchunk$138) | 0) | 0;
  if (!$rowsperchunk$138) $currow$1$lcssa = $currow$039; else {
   $4 = $currow$039 + $3 | 0;
   $5 = ~$rowsperchunk$138$looptemp;
   $umax = $4 >>> 0 > $5 >>> 0 ? $4 : $5;
   $currow$134 = $currow$039;
   $i$035 = $rowsperchunk$138;
   $workspace$036 = $call13;
   while (1) {
    HEAP32[$call + ($currow$134 << 2) >> 2] = $workspace$036;
    $i$035 = $i$035 + -1 | 0;
    if (!$i$035) break; else {
     $currow$134 = $currow$134 + 1 | 0;
     $workspace$036 = $workspace$036 + ($blocksperrow << 7) | 0;
    }
   }
   $currow$1$lcssa = $currow$039 + -1 - $umax | 0;
  }
  if ($currow$1$lcssa >>> 0 >= $numrows >>> 0) break; else $currow$039 = $currow$1$lcssa;
 }
 return $call | 0;
}

function _jpeg_resync_to_restart($cinfo, $desired) {
 $cinfo = $cinfo | 0;
 $desired = $desired | 0;
 var $0 = 0, $1 = 0, $8 = 0, $action$0 = 0, $add11 = 0, $add16 = 0, $add21 = 0, $add26 = 0, $cmp = 0, $marker$0$ph = 0, $or$cond30 = 0, $retval$0 = 0, $spec$select29 = 0, $unread_marker = 0, label = 0;
 $unread_marker = $cinfo + 440 | 0;
 $0 = HEAP32[$unread_marker >> 2] | 0;
 $1 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$1 + 20 >> 2] = 124;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $desired;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, -1);
 $add11 = $desired + 1 & 7 | 208;
 $add16 = $desired + 2 & 7 | 208;
 $add21 = $desired + 7 & 7 | 208;
 $add26 = $desired + 6 & 7 | 208;
 $marker$0$ph = $0;
 L1 : while (1) {
  $cmp = ($marker$0$ph | 0) < 192;
  $or$cond30 = ($marker$0$ph & -8 | 0) != 208 | ($marker$0$ph | 0) == ($add11 | 0) | ($marker$0$ph | 0) == ($add16 | 0);
  $spec$select29 = ($marker$0$ph | 0) == ($add21 | 0) | ($marker$0$ph | 0) == ($add26 | 0) ? 2 : 1;
  L3 : while (1) {
   $action$0 = $cmp ? 2 : $or$cond30 ? 3 : $spec$select29;
   $8 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$8 + 20 >> 2] = 99;
   HEAP32[$8 + 24 >> 2] = $marker$0$ph;
   HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $action$0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 4);
   switch ($action$0 & 3) {
   case 1:
    {
     label = 4;
     break L1;
     break;
    }
   case 3:
    {
     $retval$0 = 1;
     label = 7;
     break L1;
     break;
    }
   case 2:
    {
     break L3;
     break;
    }
   default:
    {}
   }
  }
  if (!(_next_marker($cinfo) | 0)) {
   $retval$0 = 0;
   label = 7;
   break;
  }
  $marker$0$ph = HEAP32[$unread_marker >> 2] | 0;
 }
 if ((label | 0) == 4) {
  HEAP32[$unread_marker >> 2] = 0;
  $retval$0 = 1;
  return $retval$0 | 0;
 } else if ((label | 0) == 7) return $retval$0 | 0;
 return 0;
}

function _alloc_sarray($cinfo, $pool_id, $samplesperrow, $numrows) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $samplesperrow = $samplesperrow | 0;
 $numrows = $numrows | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call13 = 0, $currow$039 = 0, $currow$1$lcssa = 0, $currow$134 = 0, $div = 0, $div$numrows = 0, $i$035 = 0, $rowsperchunk$138 = 0, $sub = 0, $umax = 0, $workspace$036 = 0, $rowsperchunk$138$looptemp = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 $div = 999999984 / ($samplesperrow >>> 0) | 0;
 if ($samplesperrow >>> 0 > 999999984) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 72;
  FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($cinfo);
 }
 $div$numrows = ($div | 0) < ($numrows | 0) ? $div : $numrows;
 HEAP32[$0 + 80 >> 2] = $div$numrows;
 $call = _alloc_small($cinfo, $pool_id, $numrows << 2) | 0;
 if (!$numrows) return $call | 0;
 $3 = ~$numrows;
 $currow$039 = 0;
 $rowsperchunk$138 = $div$numrows;
 while (1) {
  $sub = $numrows - $currow$039 | 0;
  $rowsperchunk$138$looptemp = $rowsperchunk$138;
  $rowsperchunk$138 = $rowsperchunk$138 >>> 0 < $sub >>> 0 ? $rowsperchunk$138 : $sub;
  $call13 = _alloc_large($cinfo, $pool_id, Math_imul($rowsperchunk$138, $samplesperrow) | 0) | 0;
  if (!$rowsperchunk$138) $currow$1$lcssa = $currow$039; else {
   $4 = $currow$039 + $3 | 0;
   $5 = ~$rowsperchunk$138$looptemp;
   $umax = $4 >>> 0 > $5 >>> 0 ? $4 : $5;
   $currow$134 = $currow$039;
   $i$035 = $rowsperchunk$138;
   $workspace$036 = $call13;
   while (1) {
    HEAP32[$call + ($currow$134 << 2) >> 2] = $workspace$036;
    $i$035 = $i$035 + -1 | 0;
    if (!$i$035) break; else {
     $currow$134 = $currow$134 + 1 | 0;
     $workspace$036 = $workspace$036 + $samplesperrow | 0;
    }
   }
   $currow$1$lcssa = $currow$039 + -1 - $umax | 0;
  }
  if ($currow$1$lcssa >>> 0 >= $numrows >>> 0) break; else $currow$039 = $currow$1$lcssa;
 }
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp8$byval_copy = sp + 32 | 0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 24 | 0;
 $agg$tmp4 = sp + 16 | 0;
 $agg$tmp8 = sp + 8 | 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 29123);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 $10 = HEAP32[$this + 16 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 255]($10, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 30113);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 $12 = HEAP32[$this + 20 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 255]($12, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 28937);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return;
}

function ___cxa_demangle($MangledName, $Buf, $N, $Status) {
 $MangledName = $MangledName | 0;
 $Buf = $Buf | 0;
 $N = $N | 0;
 $Status = $Status | 0;
 var $Buf$addr$0 = 0, $InternalStatus$0 = 0, $Parser = 0, $S = 0, $call14 = 0, $call5 = 0, $cmp2 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4496 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4496);
 $Parser = sp;
 $S = sp + 4472 | 0;
 if (($MangledName | 0) != 0 ? ($cmp2 = ($N | 0) == 0, !(($Buf | 0) != 0 & $cmp2)) : 0) {
  __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($Parser, $MangledName, $MangledName + (_strlen($MangledName) | 0) | 0);
  __ZN12_GLOBAL__N_112OutputStreamC2Ev($S);
  $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($Parser) | 0;
  if ($call5) if (__ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf, $N, $S) | 0) {
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call5, $S);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 0);
   if (!$cmp2) {
    $call14 = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
    HEAP32[$N >> 2] = $call14;
   }
   $Buf$addr$0 = __ZN12_GLOBAL__N_112OutputStream9getBufferEv($S) | 0;
   $InternalStatus$0 = 0;
  } else {
   $Buf$addr$0 = $Buf;
   $InternalStatus$0 = -1;
  } else {
   $Buf$addr$0 = $Buf;
   $InternalStatus$0 = -2;
  }
  if ($Status | 0) HEAP32[$Status >> 2] = $InternalStatus$0;
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($Parser);
  $retval$0 = ($InternalStatus$0 | 0) == 0 ? $Buf$addr$0 : 0;
 } else if (!$Status) $retval$0 = 0; else {
  HEAP32[$Status >> 2] = -3;
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp6$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp4 = sp + 8 | 0;
 $agg$tmp6 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 30177);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 30183);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 28937);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 STACKTOP = sp;
 return;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $3 = 0, $6 = 0, $7 = 0, $arrayidx12 = 0, $byteset = 0, $c$addr$020 = 0, $conv10 = 0, $conv22 = 0, $incdec$ptr32 = 0, $retval$0 = 0, $s$addr$0 = 0, $s$addr$1$lcssa = 0, $s$addr$117 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = 0; else {
  if (!(HEAP8[$c + 1 >> 0] | 0)) {
   $s$addr$0 = $s;
   while (1) if ((HEAP8[$s$addr$0 >> 0] | 0) == $0 << 24 >> 24) $s$addr$0 = $s$addr$0 + 1 | 0; else break;
   $retval$0 = $s$addr$0 - $s | 0;
   break;
  }
  $3 = $0;
  $c$addr$020 = $c;
  do {
   $conv10 = $3 & 255;
   $arrayidx12 = $byteset + ($conv10 >>> 5 << 2) | 0;
   HEAP32[$arrayidx12 >> 2] = HEAP32[$arrayidx12 >> 2] | 1 << ($conv10 & 31);
   $c$addr$020 = $c$addr$020 + 1 | 0;
   $3 = HEAP8[$c$addr$020 >> 0] | 0;
  } while ($3 << 24 >> 24 != 0);
  $6 = HEAP8[$s >> 0] | 0;
  L12 : do if (!($6 << 24 >> 24)) $s$addr$1$lcssa = $s; else {
   $7 = $6;
   $s$addr$117 = $s;
   while (1) {
    $conv22 = $7 & 255;
    if (!(HEAP32[$byteset + ($conv22 >>> 5 << 2) >> 2] & 1 << ($conv22 & 31))) {
     $s$addr$1$lcssa = $s$addr$117;
     break L12;
    }
    $incdec$ptr32 = $s$addr$117 + 1 | 0;
    $7 = HEAP8[$incdec$ptr32 >> 0] | 0;
    if (!($7 << 24 >> 24)) {
     $s$addr$1$lcssa = $incdec$ptr32;
     break;
    } else $s$addr$117 = $incdec$ptr32;
   }
  } while (0);
  $retval$0 = $s$addr$1$lcssa - $s | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _rgb1_gray_convert($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $add$us = 0, $arrayidx3 = 0, $arrayidx5 = 0, $col$030$us = 0, $conv10$us = 0, $dec35$us$in = 0, $input_row$addr$034$us = 0, $output_buf$addr$033$us = 0, $dec35$us$in$looptemp = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 480 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx3 = $input_buf + 4 | 0;
 $arrayidx5 = $input_buf + 8 | 0;
 if (!$2) return;
 $dec35$us$in = $num_rows;
 $input_row$addr$034$us = $input_row;
 $output_buf$addr$033$us = $output_buf;
 while (1) {
  $dec35$us$in$looptemp = $dec35$us$in;
  $dec35$us$in = $dec35$us$in + -1 | 0;
  $4 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$034$us << 2) >> 2] | 0;
  $6 = HEAP32[(HEAP32[$arrayidx3 >> 2] | 0) + ($input_row$addr$034$us << 2) >> 2] | 0;
  $8 = HEAP32[(HEAP32[$arrayidx5 >> 2] | 0) + ($input_row$addr$034$us << 2) >> 2] | 0;
  $input_row$addr$034$us = $input_row$addr$034$us + 1 | 0;
  $9 = HEAP32[$output_buf$addr$033$us >> 2] | 0;
  $col$030$us = 0;
  do {
   $conv10$us = HEAPU8[$6 + $col$030$us >> 0] | 0;
   $add$us = $conv10$us + 128 | 0;
   HEAP8[$9 + $col$030$us >> 0] = ((HEAP32[$1 + (($conv10$us | 256) << 2) >> 2] | 0) + (HEAP32[$1 + (($add$us + (HEAPU8[$4 + $col$030$us >> 0] | 0) & 255) << 2) >> 2] | 0) + (HEAP32[$1 + (($add$us + (HEAPU8[$8 + $col$030$us >> 0] | 0) & 255 | 512) << 2) >> 2] | 0) | 0) >>> 16;
   $col$030$us = $col$030$us + 1 | 0;
  } while (($col$030$us | 0) != ($2 | 0));
  if (($dec35$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$033$us = $output_buf$addr$033$us + 4 | 0;
 }
 return;
}

function _init_error_limit($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $add$ptr = 0, $call = 0, $in$136 = 0, $in$234 = 0, $out$137 = 0, $sub19 = 0;
 $0 = HEAP32[$cinfo + 484 >> 2] | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 1, 2044) | 0;
 $add$ptr = $call + 1020 | 0;
 HEAP32[$0 + 40 >> 2] = $add$ptr;
 HEAP32[$add$ptr >> 2] = 0;
 HEAP32[$call + 1024 >> 2] = 1;
 HEAP32[$call + 1016 >> 2] = -1;
 HEAP32[$call + 1028 >> 2] = 2;
 HEAP32[$call + 1012 >> 2] = -2;
 HEAP32[$call + 1032 >> 2] = 3;
 HEAP32[$call + 1008 >> 2] = -3;
 HEAP32[$call + 1036 >> 2] = 4;
 HEAP32[$call + 1004 >> 2] = -4;
 HEAP32[$call + 1040 >> 2] = 5;
 HEAP32[$call + 1e3 >> 2] = -5;
 HEAP32[$call + 1044 >> 2] = 6;
 HEAP32[$call + 996 >> 2] = -6;
 HEAP32[$call + 1048 >> 2] = 7;
 HEAP32[$call + 992 >> 2] = -7;
 HEAP32[$call + 1052 >> 2] = 8;
 HEAP32[$call + 988 >> 2] = -8;
 HEAP32[$call + 1056 >> 2] = 9;
 HEAP32[$call + 984 >> 2] = -9;
 HEAP32[$call + 1060 >> 2] = 10;
 HEAP32[$call + 980 >> 2] = -10;
 HEAP32[$call + 1064 >> 2] = 11;
 HEAP32[$call + 976 >> 2] = -11;
 HEAP32[$call + 1068 >> 2] = 12;
 HEAP32[$call + 972 >> 2] = -12;
 HEAP32[$call + 1072 >> 2] = 13;
 HEAP32[$call + 968 >> 2] = -13;
 HEAP32[$call + 1076 >> 2] = 14;
 HEAP32[$call + 964 >> 2] = -14;
 HEAP32[$call + 1080 >> 2] = 15;
 HEAP32[$call + 960 >> 2] = -15;
 $in$136 = 16;
 $out$137 = 16;
 do {
  HEAP32[$add$ptr + ($in$136 << 2) >> 2] = $out$137;
  HEAP32[$add$ptr + (0 - $in$136 << 2) >> 2] = 0 - $out$137;
  $in$136 = $in$136 + 1 | 0;
  $out$137 = ($in$136 & 1 ^ 1) + $out$137 | 0;
 } while (($in$136 | 0) != 48);
 $sub19 = 0 - $out$137 | 0;
 $in$234 = 48;
 do {
  HEAP32[$add$ptr + ($in$234 << 2) >> 2] = $out$137;
  HEAP32[$add$ptr + (0 - $in$234 << 2) >> 2] = $sub19;
  $in$234 = $in$234 + 1 | 0;
 } while (($in$234 | 0) != 256);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $Length = 0, $Name = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call2 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 24 | 0;
 $Length = sp + 16 | 0;
 $Name = sp + 8 | 0;
 $agg$tmp = sp;
 HEAP32[$Length >> 2] = 0;
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Length) | 0) ? ($call2 = __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0, $0 = HEAP32[$Length >> 2] | 0, ($0 + -1 | 0) >>> 0 < $call2 >>> 0) : 0) {
  $3 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Name, $3, $3 + $0 | 0);
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $0;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30480);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Name, $agg$tmp$byval_copy) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) | 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Name) | 0;
  $retval$1 = $retval$0;
 } else $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _color_quantize($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $2 = 0, $3 = 0, $ci$022$us$us115 = 0, $col$028$us$us99 = 0, $pixcode$023$us$us114 = 0, $ptrin$026$us$us101 = 0, $ptrin$121$us$us116 = 0, $ptrout$027$us$us100 = 0, $row$030 = 0, $row$030$us61 = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 $3 = HEAP32[$cinfo + 120 >> 2] | 0;
 if (($num_rows | 0) < 1 | ($2 | 0) == 0) return;
 if (($3 | 0) <= 0) {
  $row$030 = 0;
  do {
   _memset(HEAP32[$output_buf + ($row$030 << 2) >> 2] | 0, 0, $2 | 0) | 0;
   $row$030 = $row$030 + 1 | 0;
  } while (($row$030 | 0) != ($num_rows | 0));
  return;
 }
 $row$030$us61 = 0;
 do {
  $col$028$us$us99 = $2;
  $ptrin$026$us$us101 = HEAP32[$input_buf + ($row$030$us61 << 2) >> 2] | 0;
  $ptrout$027$us$us100 = HEAP32[$output_buf + ($row$030$us61 << 2) >> 2] | 0;
  while (1) {
   $ci$022$us$us115 = 0;
   $pixcode$023$us$us114 = 0;
   $ptrin$121$us$us116 = $ptrin$026$us$us101;
   while (1) {
    $pixcode$023$us$us114 = $pixcode$023$us$us114 + (HEAPU8[(HEAP32[$1 + ($ci$022$us$us115 << 2) >> 2] | 0) + (HEAPU8[$ptrin$121$us$us116 >> 0] | 0) >> 0] | 0) | 0;
    $ci$022$us$us115 = $ci$022$us$us115 + 1 | 0;
    if (($ci$022$us$us115 | 0) == ($3 | 0)) break; else $ptrin$121$us$us116 = $ptrin$121$us$us116 + 1 | 0;
   }
   HEAP8[$ptrout$027$us$us100 >> 0] = $pixcode$023$us$us114;
   $col$028$us$us99 = $col$028$us$us99 + -1 | 0;
   if (!$col$028$us$us99) break; else {
    $ptrin$026$us$us101 = $ptrin$026$us$us101 + $3 | 0;
    $ptrout$027$us$us100 = $ptrout$027$us$us100 + 1 | 0;
   }
  }
  $row$030$us61 = $row$030$us61 + 1 | 0;
 } while (($row$030$us61 | 0) != ($num_rows | 0));
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp6 = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 $agg$tmp8 = sp;
 $MemberType = $this + 12 | 0;
 $0 = HEAP32[$MemberType >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $s);
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) : 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 28939);
  HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
  HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 32838);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return;
}

function _rgb1_rgb_convert($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $add$us = 0, $arrayidx2 = 0, $arrayidx4 = 0, $col$026$us = 0, $conv11$us = 0, $dec31$us$in = 0, $input_row$addr$030$us = 0, $outptr$025$us = 0, $output_buf$addr$029$us = 0, $dec31$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx2 = $input_buf + 4 | 0;
 $arrayidx4 = $input_buf + 8 | 0;
 if (!$0) return;
 $dec31$us$in = $num_rows;
 $input_row$addr$030$us = $input_row;
 $output_buf$addr$029$us = $output_buf;
 while (1) {
  $dec31$us$in$looptemp = $dec31$us$in;
  $dec31$us$in = $dec31$us$in + -1 | 0;
  $2 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $4 = HEAP32[(HEAP32[$arrayidx2 >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $6 = HEAP32[(HEAP32[$arrayidx4 >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $input_row$addr$030$us = $input_row$addr$030$us + 1 | 0;
  $col$026$us = 0;
  $outptr$025$us = HEAP32[$output_buf$addr$029$us >> 2] | 0;
  while (1) {
   $9 = HEAP8[$4 + $col$026$us >> 0] | 0;
   $conv11$us = HEAPU8[$6 + $col$026$us >> 0] | 0;
   $add$us = ($9 & 255) + 128 | 0;
   HEAP8[$outptr$025$us >> 0] = $add$us + (HEAPU8[$2 + $col$026$us >> 0] | 0);
   HEAP8[$outptr$025$us + 1 >> 0] = $9;
   HEAP8[$outptr$025$us + 2 >> 0] = $add$us + $conv11$us;
   $col$026$us = $col$026$us + 1 | 0;
   if (($col$026$us | 0) == ($0 | 0)) break; else $outptr$025$us = $outptr$025$us + 3 | 0;
  }
  if (($dec31$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$029$us = $output_buf$addr$029$us + 4 | 0;
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp12$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp8 = sp + 8 | 0;
 $agg$tmp12 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32948);
 HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
 $Dimension = $this + 12 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension) | 0)) {
  if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension) | 0) {
   __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp8, $Dimension);
   HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
   HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
  }
 } else __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension) | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 28587);
 HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
 STACKTOP = sp;
 return;
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $3 = 0, $call34 = 0, $cond = 0, $conv = 0, $dest$0 = 0, $dest$146 = 0, $l$0 = 0, $l$147 = 0, $mode = 0, $mul = 0, $read = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub45 = 0, label = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $rpos = $f + 4 | 0;
 $3 = HEAP32[$rpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - $3 | 0;
 if (($sub$ptr$sub | 0) > 0) {
  $sub$ptr$sub$mul = $sub$ptr$sub >>> 0 < $mul >>> 0 ? $sub$ptr$sub : $mul;
  _memcpy($destv | 0, $3 | 0, $sub$ptr$sub$mul | 0) | 0;
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + $sub$ptr$sub$mul;
  $dest$0 = $destv + $sub$ptr$sub$mul | 0;
  $l$0 = $mul - $sub$ptr$sub$mul | 0;
 } else {
  $dest$0 = $destv;
  $l$0 = $mul;
 }
 L7 : do if (!$l$0) label = 13; else {
  $read = $f + 32 | 0;
  $dest$146 = $dest$0;
  $l$147 = $l$0;
  while (1) {
   if (___toread($f) | 0) break;
   $call34 = FUNCTION_TABLE_iiii[HEAP32[$read >> 2] & 31]($f, $dest$146, $l$147) | 0;
   if (($call34 + 1 | 0) >>> 0 < 2) break;
   $sub45 = $l$147 - $call34 | 0;
   if (!$sub45) {
    label = 13;
    break L7;
   } else {
    $dest$146 = $dest$146 + $call34 | 0;
    $l$147 = $sub45;
   }
  }
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = (($mul - $l$147 | 0) >>> 0) / ($size >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$cond) $retval$0 = $spec$select; else {
  ___unlockfile($f);
  $retval$0 = $spec$select;
 }
 return $retval$0 | 0;
}

function _skip_variable($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $1 = 0, $9 = 0, $add = 0, $bytes_in_buffer$0 = 0, $bytes_in_buffer$1 = 0, $bytes_in_buffer2 = 0, $dec = 0, $incdec$ptr = 0, $next_input_byte$0 = 0, $next_input_byte$1 = 0, $retval$0 = 0, $shl = 0, $src = 0, $sub = 0;
 $src = $cinfo + 24 | 0;
 $0 = HEAP32[$src >> 2] | 0;
 $bytes_in_buffer2 = $0 + 4 | 0;
 $1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
 do if (!$1) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$0 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  break;
 } else $bytes_in_buffer$0 = $1; while (0);
 $next_input_byte$0 = HEAP32[$0 >> 2] | 0;
 $dec = $bytes_in_buffer$0 + -1 | 0;
 $incdec$ptr = $next_input_byte$0 + 1 | 0;
 $shl = (HEAPU8[$next_input_byte$0 >> 0] | 0) << 8;
 do if (!$dec) if (!(FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $bytes_in_buffer$1 = HEAP32[$bytes_in_buffer2 >> 2] | 0;
  $next_input_byte$1 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $bytes_in_buffer$1 = $dec;
  $next_input_byte$1 = $incdec$ptr;
 } while (0);
 $add = $shl | (HEAPU8[$next_input_byte$1 >> 0] | 0);
 $sub = $add + -2 | 0;
 $9 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$9 + 20 >> 2] = 93;
 HEAP32[$9 + 24 >> 2] = HEAP32[$cinfo + 440 >> 2];
 HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $sub;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 1);
 HEAP32[$0 >> 2] = $next_input_byte$1 + 1;
 HEAP32[$bytes_in_buffer2 >> 2] = $bytes_in_buffer$1 + -1;
 if ($add >>> 0 <= 2) {
  $retval$0 = 1;
  return $retval$0 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$src >> 2] | 0) + 16 >> 2] & 255]($cinfo, $sub);
 $retval$0 = 1;
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp6$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32223);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 $0 = $this + 16 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 32231);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 28937);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $5 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if ((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 >> 2 >>> 0 < $__n >>> 0) {
  $add = ($1 - (HEAP32[$this >> 2] | 0) >> 2) + $__n | 0;
  $call$i = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $5 = HEAP32[$this >> 2] | 0;
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i >> 2] | 0) - $5 | 0;
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_ >> 2] | 0) - $5 >> 2, $this + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $__a$addr$0 = 0, $__p2 = 0, $call = 0, $call10 = 0, $call4 = 0, $call7 = 0, $cmp1 = 0, $incdec$ptr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $10 = 0;
  $11 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $10 = 0;
    $11 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $call = ___errno_location() | 0;
  $1 = HEAP32[$call >> 2] | 0;
  $call4 = ___errno_location() | 0;
  HEAP32[$call4 >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $call7 = ___errno_location() | 0;
  $4 = HEAP32[$call7 >> 2] | 0;
  if (!$4) {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = $1;
  }
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $12 = -1;
   $13 = -1;
   break;
  } else {
   $6 = _i64Subtract(0, 0, $2 | 0, $3 | 0) | 0;
   $7 = getTempRet0() | 0;
   $12 = $cmp1 ? $6 : $2;
   $13 = $cmp1 ? $7 : $3;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $12 = 0;
   $13 = 0;
  } while (0);
  $10 = $13;
  $11 = $12;
 } while (0);
 setTempRet0($10 | 0);
 STACKTOP = sp;
 return $11 | 0;
}

function _rgb_gray_convert_53($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $arrayidx3 = 0, $arrayidx5 = 0, $col$026$us = 0, $dec31$us$in = 0, $input_row$addr$030$us = 0, $output_buf$addr$029$us = 0, $dec31$us$in$looptemp = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 480 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx3 = $input_buf + 4 | 0;
 $arrayidx5 = $input_buf + 8 | 0;
 if (!$2) return;
 $dec31$us$in = $num_rows;
 $input_row$addr$030$us = $input_row;
 $output_buf$addr$029$us = $output_buf;
 while (1) {
  $dec31$us$in$looptemp = $dec31$us$in;
  $dec31$us$in = $dec31$us$in + -1 | 0;
  $4 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $6 = HEAP32[(HEAP32[$arrayidx3 >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $8 = HEAP32[(HEAP32[$arrayidx5 >> 2] | 0) + ($input_row$addr$030$us << 2) >> 2] | 0;
  $input_row$addr$030$us = $input_row$addr$030$us + 1 | 0;
  $9 = HEAP32[$output_buf$addr$029$us >> 2] | 0;
  $col$026$us = 0;
  do {
   HEAP8[$9 + $col$026$us >> 0] = ((HEAP32[$1 + ((HEAPU8[$6 + $col$026$us >> 0] | 0 | 256) << 2) >> 2] | 0) + (HEAP32[$1 + ((HEAPU8[$4 + $col$026$us >> 0] | 0) << 2) >> 2] | 0) + (HEAP32[$1 + ((HEAPU8[$8 + $col$026$us >> 0] | 0 | 512) << 2) >> 2] | 0) | 0) >>> 16;
   $col$026$us = $col$026$us + 1 | 0;
  } while (($col$026$us | 0) != ($2 | 0));
  if (($dec31$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$029$us = $output_buf$addr$029$us + 4 | 0;
 }
 return;
}

function _arLogv($tag, $logLevel, $format, $ap) {
 $tag = $tag | 0;
 $logLevel = $logLevel | 0;
 $format = $format | 0;
 $ap = $ap | 0;
 var $4 = 0, $add16 = 0, $add17 = 0, $ap2 = 0, $arrayidx43 = 0, $call = 0, $call18 = 0, $logLevelStringLen$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp + 16 | 0;
 $ap2 = sp;
 if ((!(($format | 0) == 0 | 1 > ($logLevel | 0)) ? HEAP8[$format >> 0] | 0 : 0) ? (HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2], $call = _vsnprintf(0, 0, $format, $ap2) | 0, $call | 0) : 0) {
  if ($logLevel >>> 0 < 4) $logLevelStringLen$0 = (_strlen(HEAP32[16 + ($logLevel << 2) >> 2] | 0) | 0) + 3 | 0; else $logLevelStringLen$0 = 0;
  $add16 = $logLevelStringLen$0 + $call | 0;
  $add17 = $add16 + 1 | 0;
  $call18 = _malloc($add17) | 0;
  if ($logLevelStringLen$0 | 0) {
   HEAP32[$vararg_buffer >> 2] = HEAP32[16 + ($logLevel << 2) >> 2];
   _snprintf($call18, $logLevelStringLen$0 + 1 | 0, 21559, $vararg_buffer) | 0;
  }
  _vsnprintf($call18 + $logLevelStringLen$0 | 0, $call + 1 | 0, $format, $ap) | 0;
  do if (0) {
   if (0 ? ($4 = HEAP32[10452] | 0, $4 >>> 0 < 0) : 0) {
    $arrayidx43 = 0 + $4 | 0;
    if ($add16 >>> 0 > (-4 - $4 + 0 | 0) >>> 0) {
     HEAP8[$arrayidx43 >> 0] = 46;
     HEAP8[$arrayidx43 + 1 >> 0] = 46;
     HEAP8[$arrayidx43 + 2 >> 0] = 46;
     HEAP8[$arrayidx43 + 3 >> 0] = 0;
     HEAP32[10452] = 0;
     break;
    } else {
     _strncpy($arrayidx43, $call18, $add17) | 0;
     HEAP32[10452] = (HEAP32[10452] | 0) + $add16;
     break;
    }
   }
  } else _fputs($call18, HEAP32[3679] | 0) | 0; while (0);
  _free($call18);
 }
 STACKTOP = sp;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZL28demangling_terminate_handlerv() {
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $8 = 0, $9 = 0, $call = 0, $call13 = 0, $cond = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0 ? ($0 = HEAP32[$call >> 2] | 0, $0 | 0) : 0) {
  $1 = $0 + 48 | 0;
  if (!(__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1) | 0)) {
   HEAP32[$vararg_buffer7 >> 2] = 27953;
   _abort_message(27903, $vararg_buffer7);
  }
  $2 = __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1) | 0;
  if (($2 | 0) == 1126902529 & (getTempRet0() | 0) == 1129074247) $cond = HEAP32[$0 + 44 >> 2] | 0; else $cond = $0 + 80 | 0;
  HEAP32[$thrown_object >> 2] = $cond;
  $8 = HEAP32[$0 >> 2] | 0;
  $9 = HEAP32[$8 + 4 >> 2] | 0;
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[2940] | 0) + 16 >> 2] & 31](11760, $8, $thrown_object) | 0) {
   $11 = HEAP32[$thrown_object >> 2] | 0;
   $call13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11) | 0;
   HEAP32[$vararg_buffer >> 2] = 27953;
   HEAP32[$vararg_buffer + 4 >> 2] = $9;
   HEAP32[$vararg_buffer + 8 >> 2] = $call13;
   _abort_message(27817, $vararg_buffer);
  } else {
   HEAP32[$vararg_buffer3 >> 2] = 27953;
   HEAP32[$vararg_buffer3 + 4 >> 2] = $9;
   _abort_message(27862, $vararg_buffer3);
  }
 }
 _abort_message(27941, $vararg_buffer10);
}

function _null_convert_55($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $ci$021$us$us = 0, $cmp516 = 0, $col$019$us$us = 0, $dec30$us$in = 0, $inptr$018$us$us = 0, $input_row$addr$027$us = 0, $outptr$017$us$us = 0, $output_buf$addr$024$us = 0, $dec30$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 36 >> 2] | 0;
 $1 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $cmp516 = ($1 | 0) == 0;
 if (($0 | 0) <= 0) return;
 $dec30$us$in = $num_rows;
 $input_row$addr$027$us = $input_row;
 $output_buf$addr$024$us = $output_buf;
 while (1) {
  $dec30$us$in$looptemp = $dec30$us$in;
  $dec30$us$in = $dec30$us$in + -1 | 0;
  if (!$cmp516) {
   $ci$021$us$us = 0;
   do {
    $col$019$us$us = 0;
    $inptr$018$us$us = HEAP32[(HEAP32[$input_buf + ($ci$021$us$us << 2) >> 2] | 0) + ($input_row$addr$027$us << 2) >> 2] | 0;
    $outptr$017$us$us = (HEAP32[$output_buf$addr$024$us >> 2] | 0) + $ci$021$us$us | 0;
    while (1) {
     HEAP8[$outptr$017$us$us >> 0] = HEAP8[$inptr$018$us$us >> 0] | 0;
     $col$019$us$us = $col$019$us$us + 1 | 0;
     if (($col$019$us$us | 0) == ($1 | 0)) break; else {
      $inptr$018$us$us = $inptr$018$us$us + 1 | 0;
      $outptr$017$us$us = $outptr$017$us$us + $0 | 0;
     }
    }
    $ci$021$us$us = $ci$021$us$us + 1 | 0;
   } while (($ci$021$us$us | 0) != ($0 | 0));
  }
  if (($dec30$us$in$looptemp | 0) <= 1) break; else {
   $input_row$addr$027$us = $input_row$addr$027$us + 1 | 0;
   $output_buf$addr$024$us = $output_buf$addr$024$us + 4 | 0;
  }
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $10 = 0, $2 = 0, $5 = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cond$i = 0, $cond$i18 = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 127]($add$ptr) | 0;
 $2 = HEAP8[$call + 8 + 3 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $2 & 255;
 $5 = HEAP8[$call + 20 + 3 >> 0] | 0;
 if ($5 << 24 >> 24 < 0) $cond$i18 = HEAP32[$call + 16 >> 2] | 0; else $cond$i18 = $5 & 255;
 do if (($cond$i | 0) != (0 - $cond$i18 | 0)) {
  HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $10 = HEAP32[$__h >> 2] | 0;
  if (($10 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($10 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $10 + 12;
 } else HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add14 = 0, $add1435 = 0, $add33 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $sub23 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add14 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add14 >>> 0 > 1073741823) _abort(); else $add1435 = $add14;
 } else $add1435 = 1073741807;
 $call$i$i$i = __Znwm($add1435 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_del - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) + ($__n_add << 2) | 0, $cond$i + ($__n_copy << 2) + ($__n_del << 2) | 0, $sub23) | 0;
 $add33 = $__old_cap + 1 | 0;
 if (($add33 | 0) != 2) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add33 << 2);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1435 | -2147483648;
 return;
}

function _rgb_convert_54($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $2 = 0, $4 = 0, $6 = 0, $arrayidx2 = 0, $arrayidx4 = 0, $col$021$us = 0, $dec26$us$in = 0, $input_row$addr$025$us = 0, $outptr$020$us = 0, $output_buf$addr$024$us = 0, $dec26$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) <= 0) return;
 $arrayidx2 = $input_buf + 4 | 0;
 $arrayidx4 = $input_buf + 8 | 0;
 if (!$0) return;
 $dec26$us$in = $num_rows;
 $input_row$addr$025$us = $input_row;
 $output_buf$addr$024$us = $output_buf;
 while (1) {
  $dec26$us$in$looptemp = $dec26$us$in;
  $dec26$us$in = $dec26$us$in + -1 | 0;
  $2 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$025$us << 2) >> 2] | 0;
  $4 = HEAP32[(HEAP32[$arrayidx2 >> 2] | 0) + ($input_row$addr$025$us << 2) >> 2] | 0;
  $6 = HEAP32[(HEAP32[$arrayidx4 >> 2] | 0) + ($input_row$addr$025$us << 2) >> 2] | 0;
  $input_row$addr$025$us = $input_row$addr$025$us + 1 | 0;
  $col$021$us = 0;
  $outptr$020$us = HEAP32[$output_buf$addr$024$us >> 2] | 0;
  while (1) {
   HEAP8[$outptr$020$us >> 0] = HEAP8[$2 + $col$021$us >> 0] | 0;
   HEAP8[$outptr$020$us + 1 >> 0] = HEAP8[$4 + $col$021$us >> 0] | 0;
   HEAP8[$outptr$020$us + 2 >> 0] = HEAP8[$6 + $col$021$us >> 0] | 0;
   $col$021$us = $col$021$us + 1 | 0;
   if (($col$021$us | 0) == ($0 | 0)) break; else $outptr$020$us = $outptr$020$us + 3 | 0;
  }
  if (($dec26$us$in$looptemp | 0) <= 1) break; else $output_buf$addr$024$us = $output_buf$addr$024$us + 4 | 0;
 }
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $3 = 0, $8 = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cond$i = 0, $cond$i19 = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 127]($add$ptr) | 0;
 $1 = HEAP8[$call + 11 >> 0] | 0;
 if ($1 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $1 & 255;
 $3 = HEAP8[$call + 12 + 11 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) $cond$i19 = HEAP32[$call + 16 >> 2] | 0; else $cond$i19 = $3 & 255;
 do if (($cond$i | 0) != (0 - $cond$i19 | 0)) {
  HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $8 = HEAP32[$__h >> 2] | 0;
  if (($8 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($8 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $8 + 12;
 } else HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; while (0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 if (!(__ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0)) if (($thrown_type | 0) != 0 ? ($1 = ___dynamic_cast($thrown_type, 11784, 11768, 0) | 0, ($1 | 0) != 0) : 0) {
  HEAP32[$info >> 2] = $1;
  HEAP32[$info + 4 >> 2] = 0;
  HEAP32[$info + 8 >> 2] = $this;
  HEAP32[$info + 12 >> 2] = -1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $path_dst_ptr_to_static_ptr = $info + 24 | 0;
  $number_of_dst_type = $info + 48 | 0;
  dest = $dst_ptr_leading_to_static_ptr;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
  HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
  HEAP32[$number_of_dst_type >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
   HEAP32[$adjustedPtr >> 2] = HEAP32[$dst_ptr_leading_to_static_ptr >> 2];
   $retval$0 = 1;
  } else $retval$0 = 0;
  $retval$2 = $retval$0;
 } else $retval$2 = 0; else $retval$2 = 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $call = 0, $call10 = 0, $call4 = 0, $call7 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $call = ___errno_location() | 0;
  $1 = HEAP32[$call >> 2] | 0;
  $call4 = ___errno_location() | 0;
  HEAP32[$call4 >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $call7 = ___errno_location() | 0;
  $4 = HEAP32[$call7 >> 2] | 0;
  if (!$4) {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = $1;
  }
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 65535 | ($4 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    $retval$0 = -1;
    break;
   }
   if ($cmp1) $retval$0 = 0 - $2 & 65535; else $retval$0 = $2 & 65535;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _jinit_marker_reader($cinfo) {
 $cinfo = $cinfo | 0;
 var $2 = 0, $call = 0, $marker1 = 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 0, 172) | 0;
 $marker1 = $cinfo + 464 | 0;
 HEAP32[$marker1 >> 2] = $call;
 HEAP32[$call >> 2] = 186;
 HEAP32[$call + 4 >> 2] = 69;
 HEAP32[$call + 8 >> 2] = 70;
 HEAP32[$call + 28 >> 2] = 71;
 HEAP32[$call + 96 >> 2] = 0;
 HEAP32[$call + 100 >> 2] = 0;
 HEAP32[$call + 36 >> 2] = 71;
 HEAP32[$call + 104 >> 2] = 0;
 HEAP32[$call + 40 >> 2] = 71;
 HEAP32[$call + 108 >> 2] = 0;
 HEAP32[$call + 44 >> 2] = 71;
 HEAP32[$call + 112 >> 2] = 0;
 HEAP32[$call + 48 >> 2] = 71;
 HEAP32[$call + 116 >> 2] = 0;
 HEAP32[$call + 52 >> 2] = 71;
 HEAP32[$call + 120 >> 2] = 0;
 HEAP32[$call + 56 >> 2] = 71;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 71;
 HEAP32[$call + 128 >> 2] = 0;
 HEAP32[$call + 64 >> 2] = 71;
 HEAP32[$call + 132 >> 2] = 0;
 HEAP32[$call + 68 >> 2] = 71;
 HEAP32[$call + 136 >> 2] = 0;
 HEAP32[$call + 72 >> 2] = 71;
 HEAP32[$call + 140 >> 2] = 0;
 HEAP32[$call + 76 >> 2] = 71;
 HEAP32[$call + 144 >> 2] = 0;
 HEAP32[$call + 80 >> 2] = 71;
 HEAP32[$call + 148 >> 2] = 0;
 HEAP32[$call + 84 >> 2] = 71;
 HEAP32[$call + 152 >> 2] = 0;
 HEAP32[$call + 156 >> 2] = 0;
 HEAP32[$call + 92 >> 2] = 71;
 HEAP32[$call + 160 >> 2] = 0;
 HEAP32[$call + 32 >> 2] = 72;
 HEAP32[$call + 88 >> 2] = 72;
 $2 = HEAP32[$marker1 >> 2] | 0;
 HEAP32[$cinfo + 216 >> 2] = 0;
 HEAP32[$cinfo + 144 >> 2] = 0;
 HEAP32[$cinfo + 440 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 164 >> 2] = 0;
 return;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call4 = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0;
 } else {
  $call = ___errno_location() | 0;
  $0 = HEAP32[$call >> 2] | 0;
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 0;
  $1 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $2 = getTempRet0() | 0;
  $call4 = ___errno_location() | 0;
  $3 = HEAP32[$call4 >> 2] | 0;
  if (!$3) {
   $call7 = ___errno_location() | 0;
   HEAP32[$call7 >> 2] = $0;
  }
  L7 : do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   do if (($3 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0) {
     $retval$0 = 2147483647;
     break L7;
    }
   } else {
    if (($2 | 0) < -1 | ($2 | 0) == -1 & $1 >>> 0 < 2147483648) {
     HEAP32[$__err >> 2] = 4;
     break;
    }
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 2147483647) {
     HEAP32[$__err >> 2] = 4;
     $retval$0 = 2147483647;
     break L7;
    } else {
     $retval$0 = $1;
     break L7;
    }
   } while (0);
   $retval$0 = -2147483648;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($this) {
 $this = $this | 0;
 var $E = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $E = sp;
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 68) | 0) {
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 116) | 0) ? !(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 84) | 0) : 0) {
   $retval$1 = 0;
   break;
  }
  $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$E >> 2] = $call7;
  if (($call7 | 0) != 0 ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0 : 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 33070, $E) | 0; else $retval$0 = 0;
  $retval$1 = $retval$0;
 } else $retval$1 = 0; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp12 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 $11 = $args3;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp12;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 $tobool = (HEAP8[$args5 >> 0] | 0) != 0;
 $tobool16 = (HEAP8[$args7 >> 0] | 0) != 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call, $tmpcast$byval_copy, $10, $tmpcast1$byval_copy, $tobool, $tobool16);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp12 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 $11 = $args3;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp12;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 $tobool = (HEAP8[$args5 >> 0] | 0) != 0;
 $tobool16 = (HEAP8[$args7 >> 0] | 0) != 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call, $tmpcast$byval_copy, $10, $tmpcast1$byval_copy, $tobool, $tobool16);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $call = 0, $call10 = 0, $call4 = 0, $call7 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $call = ___errno_location() | 0;
  $1 = HEAP32[$call >> 2] | 0;
  $call4 = ___errno_location() | 0;
  HEAP32[$call4 >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $call7 = ___errno_location() | 0;
  $4 = HEAP32[$call7 >> 2] | 0;
  if (!$4) {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = $1;
  }
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $call = 0, $call10 = 0, $call4 = 0, $call7 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $call = ___errno_location() | 0;
  $1 = HEAP32[$call >> 2] | 0;
  $call4 = ___errno_location() | 0;
  HEAP32[$call4 >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $call7 = ___errno_location() | 0;
  $4 = HEAP32[$call7 >> 2] | 0;
  if (!$4) {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = $1;
  }
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $8 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$3 = 0, $__len$addr$0 = 0, $and6 = 0, $and7 = 0, $cmp8 = 0, $specify_precision$0$off0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $__fmtp$addr$1 = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$1 = $__fmtp$addr$0 + 1 | 0;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags & 16384;
 $cmp8 = ($and6 | 0) == 260;
 if ($cmp8) {
  $__fmtp$addr$2 = $__fmtp$addr$1;
  $specify_precision$0$off0 = 0;
 } else {
  HEAP8[$__fmtp$addr$1 >> 0] = 46;
  HEAP8[$__fmtp$addr$1 + 1 >> 0] = 42;
  $__fmtp$addr$2 = $__fmtp$addr$1 + 2 | 0;
  $specify_precision$0$off0 = 1;
 }
 $__fmtp$addr$3 = $__fmtp$addr$2;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$3 >> 0] = $0;
  $__fmtp$addr$3 = $__fmtp$addr$3 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 L14 : do switch ($and6 & 511) {
 case 4:
  {
   $$sink = $and7 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   $$sink = $and7 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   $8 = $and7 >>> 9 & 255;
   if ($cmp8) {
    $$sink = $8 ^ 97;
    break L14;
   } else {
    $$sink = $8 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[$__fmtp$addr$3 >> 0] = $$sink;
 return $specify_precision$0$off0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 21) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 20 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 20;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 17) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 16 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 16;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 9) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 8 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 8;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $arrayidx8 = 0, $byteset = 0, $c$addr$019 = 0, $conv14 = 0, $conv6 = 0, $incdec$ptr24 = 0, $s$addr$0$lcssa$sink = 0, $s$addr$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 L1 : do if ($0 << 24 >> 24 != 0 ? (HEAP8[$c + 1 >> 0] | 0) != 0 : 0) {
  _memset($byteset | 0, 0, 32) | 0;
  $2 = HEAP8[$c >> 0] | 0;
  if ($2 << 24 >> 24) {
   $3 = $2;
   $c$addr$019 = $c;
   do {
    $conv6 = $3 & 255;
    $arrayidx8 = $byteset + ($conv6 >>> 5 << 2) | 0;
    HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv6 & 31);
    $c$addr$019 = $c$addr$019 + 1 | 0;
    $3 = HEAP8[$c$addr$019 >> 0] | 0;
   } while ($3 << 24 >> 24 != 0);
  }
  $6 = HEAP8[$s >> 0] | 0;
  if (!($6 << 24 >> 24)) $s$addr$0$lcssa$sink = $s; else {
   $7 = $6;
   $s$addr$016 = $s;
   while (1) {
    $conv14 = $7 & 255;
    if (HEAP32[$byteset + ($conv14 >>> 5 << 2) >> 2] & 1 << ($conv14 & 31) | 0) {
     $s$addr$0$lcssa$sink = $s$addr$016;
     break L1;
    }
    $incdec$ptr24 = $s$addr$016 + 1 | 0;
    $7 = HEAP8[$incdec$ptr24 >> 0] | 0;
    if (!($7 << 24 >> 24)) {
     $s$addr$0$lcssa$sink = $incdec$ptr24;
     break;
    } else $s$addr$016 = $incdec$ptr24;
   }
  }
 } else label = 3; while (0);
 if ((label | 0) == 3) $s$addr$0$lcssa$sink = ___strchrnul($s, $0 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $s$addr$0$lcssa$sink - $s | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $2 = 0, $3 = 0, $Init = 0, $agg$tmp = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp9$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp9 = sp;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30371);
 HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp9$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 $Init = $this + 16 | 0;
 $2 = HEAP32[$Init >> 2] | 0;
 if (((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($2) | 0) + -65 & 255) < 2) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 30377);
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp9$byval_copy);
  $3 = HEAP32[$Init >> 2] | 0;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3, $S);
 STACKTOP = sp;
 return;
}

function _jpeg_finish_decompress($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $11 = 0, $16 = 0, $4 = 0, $8 = 0, $global_state = 0, $inputctl = 0, $retval$0 = 0, label = 0;
 $global_state = $cinfo + 20 | 0;
 $0 = HEAP32[$global_state >> 2] | 0;
 if (($0 + -205 | 0) >>> 0 < 2 ? (HEAP32[$cinfo + 64 >> 2] | 0) == 0 : 0) {
  if ((HEAP32[$cinfo + 140 >> 2] | 0) >>> 0 < (HEAP32[$cinfo + 116 >> 2] | 0) >>> 0) {
   $4 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$4 + 20 >> 2] = 69;
   FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($cinfo);
  }
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 444 >> 2] | 0) + 4 >> 2] & 255]($cinfo);
  HEAP32[$global_state >> 2] = 210;
 } else label = 6;
 L7 : do if ((label | 0) == 6) switch ($0 | 0) {
 case 210:
  {
   break L7;
   break;
  }
 case 207:
  {
   HEAP32[$global_state >> 2] = 210;
   break L7;
   break;
  }
 default:
  {
   $8 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$8 + 20 >> 2] = 21;
   HEAP32[$8 + 24 >> 2] = $0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
   break L7;
  }
 } while (0);
 $inputctl = $cinfo + 460 | 0;
 $11 = HEAP32[$inputctl >> 2] | 0;
 L13 : do if (!(HEAP32[$11 + 20 >> 2] | 0)) {
  $16 = $11;
  while (1) {
   if (!(FUNCTION_TABLE_ii[HEAP32[$16 >> 2] & 127]($cinfo) | 0)) {
    $retval$0 = 0;
    break;
   }
   $16 = HEAP32[$inputctl >> 2] | 0;
   if (HEAP32[$16 + 20 >> 2] | 0) break L13;
  }
  return $retval$0 | 0;
 } while (0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 24 >> 2] | 0) + 24 >> 2] & 255]($cinfo);
 _jpeg_abort($cinfo);
 $retval$0 = 1;
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $FirstElement$0$off0 = 0, $FirstElement$1$off0 = 0, $Idx$0 = 0, $NumElements = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $NumElements = $this + 4 | 0;
 $FirstElement$0$off0 = 1;
 $Idx$0 = 0;
 while (1) {
  if (($Idx$0 | 0) == (HEAP32[$NumElements >> 2] | 0)) break;
  $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
  if (!$FirstElement$0$off0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29125);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
  }
  $call3 = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[(HEAP32[$this >> 2] | 0) + ($Idx$0 << 2) >> 2] | 0, $S);
  if (($call3 | 0) == (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0)) {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
   $FirstElement$1$off0 = $FirstElement$0$off0;
  } else $FirstElement$1$off0 = 0;
  $FirstElement$0$off0 = $FirstElement$1$off0;
  $Idx$0 = $Idx$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($this) {
 $this = $this | 0;
 var $ClassType = 0, $MemberType = 0, $call2 = 0, $call3 = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ClassType = sp + 4 | 0;
 $MemberType = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 77) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
  HEAP32[$ClassType >> 2] = $call3;
  if (!$call3) $retval$1 = 0; else {
   $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
   HEAP32[$MemberType >> 2] = $call7;
   if (!$call7) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ClassType, $MemberType) | 0;
   $retval$1 = $retval$0;
  }
  $retval$2 = $retval$1;
 } else $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $2 = 0, $Quals = 0, $agg$tmp = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp13$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 $agg$tmp13 = sp;
 $Quals = $this + 8 | 0;
 $0 = HEAP32[$Quals >> 2] | 0;
 if (!($0 & 1)) $1 = $0; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33109);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
  $1 = HEAP32[$Quals >> 2] | 0;
 }
 if (!($1 & 2)) $2 = $1; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 33116);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
  $2 = HEAP32[$Quals >> 2] | 0;
 }
 if ($2 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp13, 33126);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp13 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $4 = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i$i1016 = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 $4 = HEAP8[$call + 8 + 3 >> 0] | 0;
 $tobool$i$i$i = $4 << 24 >> 24 < 0;
 $cond$i$i1016 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 $add$ptr6 = $cond$i$i1016 + (($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $4 & 255) << 2) | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call7 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, $cond$i$i1016, $add$ptr6) | 0;
 STACKTOP = sp;
 return $call7 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $cond6$i = 0, $cond6$i30 = 0, $retval$sroa$0$0 = 0, $sub$i21 = 0, $tobool$i23 = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if ($1) {
  $sub$i21 = $1 + -1 | 0;
  $tobool$i23 = ($sub$i21 & $1 | 0) == 0;
  if (!$tobool$i23) if ($0 >>> 0 < $1 >>> 0) $cond6$i30 = $0; else $cond6$i30 = ($0 >>> 0) % ($1 >>> 0) | 0; else $cond6$i30 = $sub$i21 & $0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i30 << 2) >> 2] | 0;
  if ($3) {
   $$pn = $3;
   while (1) {
    $__nd$0 = HEAP32[$$pn >> 2] | 0;
    if (!$__nd$0) {
     $retval$sroa$0$0 = 0;
     break L1;
    }
    $4 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    if (($4 | 0) == ($0 | 0)) {
     if ((HEAP32[$__nd$0 + 8 >> 2] | 0) == ($0 | 0)) {
      $retval$sroa$0$0 = $__nd$0;
      break L1;
     }
    } else {
     if (!$tobool$i23) if ($4 >>> 0 < $1 >>> 0) $cond6$i = $4; else $cond6$i = ($4 >>> 0) % ($1 >>> 0) | 0; else $cond6$i = $4 & $sub$i21;
     if (($cond6$i | 0) != ($cond6$i30 | 0)) {
      $retval$sroa$0$0 = 0;
      break L1;
     }
    }
    $$pn = $__nd$0;
   }
  } else $retval$sroa$0$0 = 0;
 } else $retval$sroa$0$0 = 0; while (0);
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $add = 0, $add33 = 0, $call$i$i$i = 0, $cond$i = 0, $cond30 = 0, $mul = 0, $sub23 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond30 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond30 = -17;
 $call$i$i$i = __Znwm($cond30) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_del - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub23) | 0;
 $add33 = $__old_cap + 1 | 0;
 if (($add33 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add33);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond30 | -2147483648;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $3 = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i$i1117 = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP8[$call + 11 >> 0] | 0;
 $tobool$i$i$i = $3 << 24 >> 24 < 0;
 $cond$i$i1117 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 $add$ptr6 = $cond$i$i1117 + ($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $3 & 255) | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call7 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, $cond$i$i1117, $add$ptr6) | 0;
 STACKTOP = sp;
 return $call7 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $1 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $1 = $__last - $sub$ptr$rhs$cast$i$i | 0;
 $__first$addr$0 = $__first;
 $__p$1 = $__p$0;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 1 | 0;
  $__p$1 = $__p$1 + 1 | 0;
 }
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $1 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $1 = $__last - $sub$ptr$rhs$cast$i$i | 0;
 $__first$addr$0 = $__first;
 $__p$1 = $__p$0;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 1 | 0;
  $__p$1 = $__p$1 + 1 | 0;
 }
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$cast = 0, $$pr = 0, $0 = 0, $3 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $iov = 0, $iov_len = 0, $num = 0, $retval$0 = 0, $rpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iov = sp;
 $num = sp + 16 | 0;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 if (!(___wasi_syscall_ret(___wasi_fd_read(HEAP32[$f + 60 >> 2] | 0, $iov | 0, 2, $num | 0) | 0) | 0)) {
  $$pr = HEAP32[$num >> 2] | 0;
  if (($$pr | 0) >= 1) {
   $5 = HEAP32[$iov_len >> 2] | 0;
   if ($$pr >>> 0 > $5 >>> 0) {
    $6 = HEAP32[$buf3 >> 2] | 0;
    $rpos = $f + 4 | 0;
    HEAP32[$rpos >> 2] = $6;
    $$cast = $6;
    HEAP32[$f + 8 >> 2] = $$cast + ($$pr - $5);
    if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
     HEAP32[$rpos >> 2] = $$cast + 1;
     HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
     $retval$0 = $len;
    }
   } else $retval$0 = $$pr;
  } else {
   $3 = $$pr;
   label = 4;
  }
 } else {
  HEAP32[$num >> 2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$f >> 2] = $3 & 48 ^ 16 | HEAP32[$f >> 2];
  $retval$0 = $3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $__n$addr$0 = 0, $cond = 0, $conv14 = 0, $shl$i = 0;
 if (($__n | 0) != 1) if (!($__n + -1 & $__n)) $__n$addr$0 = $__n; else $__n$addr$0 = __ZNSt3__212__next_primeEm($__n) | 0; else $__n$addr$0 = 2;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($__n$addr$0 >>> 0 <= $0 >>> 0) {
  if ($__n$addr$0 >>> 0 < $0 >>> 0) {
   $conv14 = ~~+Math_ceil(+(+((HEAP32[$this + 12 >> 2] | 0) >>> 0) / +HEAPF32[$this + 16 >> 2])) >>> 0;
   if ($0 >>> 0 > 2 & ($0 + -1 & $0 | 0) == 0) {
    $shl$i = 1 << 32 - (Math_clz32($conv14 + -1 | 0) | 0);
    $cond = $conv14 >>> 0 < 2 ? $conv14 : $shl$i;
   } else $cond = __ZNSt3__212__next_primeEm($conv14) | 0;
   $$sroa$speculated = $__n$addr$0 >>> 0 < $cond >>> 0 ? $cond : $__n$addr$0;
   if ($$sroa$speculated >>> 0 < $0 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEm($this, $$sroa$speculated);
  }
 } else __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEm($this, $__n$addr$0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $ref$tmp = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__c$addr = sp;
 $ref$tmp = sp + 4 | 0;
 HEAP32[$__c$addr >> 2] = $__c;
 $0 = $this + 8 | 0;
 $__size_$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $1 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = $1 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $5 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $5;
 }
 $__p$0 = $call12$pn + ($__sz$0 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__c$addr);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + 4 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$div$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($sub$ptr$div$i$i >>> 0 >= 2) {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } else {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$div$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($sub$ptr$div$i$i >>> 0 >= 2) {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } else {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $ref$tmp);
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   $number_to_static_ptr26 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
  $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if (($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28581);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $2 = $this + 12 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp2;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28587);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 30557);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28587);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 31528);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28937);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = _i64Subtract($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp - ($y$010 * 10 | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29123);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 29016);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $ref$tmp = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__c$addr = sp;
 $ref$tmp = sp + 1 | 0;
 HEAP8[$__c$addr >> 0] = $__c;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = $0 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $4 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $4;
 }
 $__p$0 = $call12$pn + $__sz$0 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__c$addr);
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + 1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp4 = sp + 8 | 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28941);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28937);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31687);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28937);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function _jpeg_idct_2x2($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $1 = 0, $add = 0, $add$ptr = 0, $add$ptr18 = 0, $add$ptr28 = 0, $add15 = 0, $add6 = 0, $mul = 0, $mul10 = 0, $mul14 = 0, $mul5 = 0, $sub = 0, $sub16 = 0;
 $add$ptr = (HEAP32[$cinfo + 336 >> 2] | 0) + -384 | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $mul = Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0;
 $mul5 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 $add = $mul + 4100 | 0;
 $add6 = $mul5 + $add | 0;
 $sub = $add - $mul5 | 0;
 $mul10 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 $mul14 = Math_imul(HEAP32[$1 + 36 >> 2] | 0, HEAP16[$coef_block + 18 >> 1] | 0) | 0;
 $add15 = $mul14 + $mul10 | 0;
 $sub16 = $mul10 - $mul14 | 0;
 $add$ptr18 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 HEAP8[$add$ptr18 >> 0] = HEAP8[$add$ptr + (($add15 + $add6 | 0) >>> 3 & 1023) >> 0] | 0;
 HEAP8[$add$ptr18 + 1 >> 0] = HEAP8[$add$ptr + (($add6 - $add15 | 0) >>> 3 & 1023) >> 0] | 0;
 $add$ptr28 = (HEAP32[$output_buf + 4 >> 2] | 0) + $output_col | 0;
 HEAP8[$add$ptr28 >> 0] = HEAP8[$add$ptr + (($sub16 + $sub | 0) >>> 3 & 1023) >> 0] | 0;
 HEAP8[$add$ptr28 + 1 >> 0] = HEAP8[$add$ptr + (($sub - $sub16 | 0) >>> 3 & 1023) >> 0] | 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($this) {
 $this = $this | 0;
 var $SN = 0, $TA = 0, $call = 0, $call2 = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SN = sp + 4 | 0;
 $TA = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call) | 0;
 HEAP32[$SN >> 2] = $call2;
 if ($call2) if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
  $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call, 0) | 0;
  HEAP32[$TA >> 2] = $call7;
  if (!$call7) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SN, $TA) | 0;
  $retval$1 = $retval$0;
 } else $retval$1 = $call2; else $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp4;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $add = 0, $cond$i23 = 0, $cond$i28 = 0, $cond$i33 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i23 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i33 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i23 = $1 & 255;
  $cond$i33 = 1;
 }
 if (($cond$i33 - $cond$i23 | 0) >>> 0 >= $__n >>> 0) {
  if ($__n | 0) {
   if ($tobool$i$i) $cond$i28 = HEAP32[$this >> 2] | 0; else $cond$i28 = $this;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($cond$i28 + ($cond$i23 << 2) | 0, $__s, $__n) | 0;
   $add = $cond$i23 + $__n | 0;
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
   HEAP32[$ref$tmp >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i28 + ($add << 2) | 0, $ref$tmp);
  }
 } else __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i33, $cond$i23 + $__n - $cond$i33 | 0, $cond$i23, $cond$i23, 0, $__n, $__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $0 = 0, $1 = 0, $2 = 0, $ForwardTemplateRefs = 0, $I$0 = 0, $TemplateParams = 0, $call = 0, $call3 = 0, $call7 = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$State + 12 >> 2] | 0;
 $ForwardTemplateRefs = $this + 332 | 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs) | 0;
 $TemplateParams = $this + 288 | 0;
 $I$0 = $0;
 while (1) {
  if ($I$0 >>> 0 >= $call >>> 0) {
   label = 5;
   break;
  }
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($ForwardTemplateRefs, $I$0) | 0;
  $1 = HEAP32[$call3 >> 2] | 0;
  $2 = HEAP32[$1 + 8 >> 2] | 0;
  if ($2 >>> 0 >= (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams) | 0) >>> 0) {
   $retval$2 = 1;
   break;
  }
  $call7 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams, $2) | 0;
  HEAP32[$1 + 12 >> 2] = HEAP32[$call7 >> 2];
  $I$0 = $I$0 + 1 | 0;
 }
 if ((label | 0) == 5) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($ForwardTemplateRefs, $0);
  $retval$2 = 0;
 }
 return $retval$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp4;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp3 = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp5$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp3 = sp + 8 | 0;
 $agg$tmp5 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29123);
 HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 if ((__ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0) << 24 >> 24 == 62) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 28939);
  HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
  HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 29016);
 HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 STACKTOP = sp;
 return;
}

function _alloc_large($cinfo, $pool_id, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $sizeofobject = $sizeofobject | 0;
 var $0 = 0, $1 = 0, $5 = 0, $8 = 0, $add12 = 0, $arrayidx18 = 0, $call = 0, $rem = 0, $sizeofobject$addr$0 = 0, $total_space_allocated = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if ($sizeofobject >>> 0 > 999999984) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 56;
  HEAP32[$1 + 24 >> 2] = 3;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $rem = $sizeofobject & 7;
 $sizeofobject$addr$0 = (($rem | 0) == 0 ? 0 : 8 - $rem | 0) + $sizeofobject | 0;
 if ($pool_id >>> 0 > 1) {
  $5 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$5 + 20 >> 2] = 15;
  HEAP32[$5 + 24 >> 2] = $pool_id;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $add12 = $sizeofobject$addr$0 + 16 | 0;
 $call = _jpeg_get_large($cinfo, $add12) | 0;
 if (!$call) {
  $8 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$8 + 20 >> 2] = 56;
  HEAP32[$8 + 24 >> 2] = 4;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $total_space_allocated = $0 + 76 | 0;
 HEAP32[$total_space_allocated >> 2] = (HEAP32[$total_space_allocated >> 2] | 0) + $add12;
 $arrayidx18 = $0 + 60 + ($pool_id << 2) | 0;
 HEAP32[$call >> 2] = HEAP32[$arrayidx18 >> 2];
 HEAP32[$call + 4 >> 2] = $sizeofobject$addr$0;
 HEAP32[$call + 8 >> 2] = 0;
 HEAP32[$arrayidx18 >> 2] = $call;
 return $call + 16 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp6$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp6 = sp;
 if (HEAP8[$this + 12 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30671);
  HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 31467);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 if (HEAP8[$this + 13 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 31474);
  HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function _jpeg_CreateDecompress($cinfo, $version, $structsize) {
 $cinfo = $cinfo | 0;
 $version = $version | 0;
 $structsize = $structsize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $8 = 0, $9 = 0, $client_data25 = 0, dest = 0, stop = 0;
 HEAP32[$cinfo + 4 >> 2] = 0;
 if (($version | 0) != 90) {
  $0 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$0 + 20 >> 2] = 13;
  HEAP32[$0 + 24 >> 2] = 90;
  HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $version;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 if (($structsize | 0) == 488) $$pre$phiZ2D = $cinfo; else {
  $4 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$4 + 20 >> 2] = 22;
  HEAP32[$4 + 24 >> 2] = 488;
  HEAP32[(HEAP32[$cinfo >> 2] | 0) + 28 >> 2] = $structsize;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  $$pre$phiZ2D = $cinfo;
 }
 $8 = HEAP32[$cinfo >> 2] | 0;
 $client_data25 = $cinfo + 12 | 0;
 $9 = HEAP32[$client_data25 >> 2] | 0;
 _memset($cinfo + 4 | 0, 0, 484) | 0;
 HEAP32[$cinfo >> 2] = $8;
 HEAP32[$client_data25 >> 2] = $9;
 HEAP32[$cinfo + 16 >> 2] = 1;
 _jinit_memory_mgr($$pre$phiZ2D);
 HEAP32[$cinfo + 8 >> 2] = 0;
 HEAP32[$cinfo + 24 >> 2] = 0;
 HEAP32[$cinfo + 312 >> 2] = 0;
 dest = $cinfo + 164 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _jinit_marker_reader($cinfo);
 _jinit_input_controller($cinfo);
 HEAP32[$cinfo + 20 >> 2] = 200;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call = 0, $call3 = 0, $sub = 0, $sub$ptr$div = 0;
 $call = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $__s$addr$0, $$sroa$speculated) | 0;
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + ($$sroa$speculated << 2);
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + ($$sroa$speculated << 2) | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 63]($this, $call3) | 0) == ($call | 0)) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call = 0, $call3 = 0, $sub = 0, $sub$ptr$sub = 0;
 $call = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $__s$addr$0, $$sroa$speculated) | 0;
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + $$sroa$speculated;
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + $$sroa$speculated | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 63]($this, $call3) | 0) == ($call | 0)) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function _jpeg_read_scanlines($cinfo, $scanlines, $max_lines) {
 $cinfo = $cinfo | 0;
 $scanlines = $scanlines | 0;
 $max_lines = $max_lines | 0;
 var $0 = 0, $1 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $output_scanline = 0, $retval$0 = 0, $row_ctr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $row_ctr = sp;
 $0 = HEAP32[$cinfo + 20 >> 2] | 0;
 if (($0 | 0) != 205) {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 21;
  HEAP32[$1 + 24 >> 2] = $0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $output_scanline = $cinfo + 140 | 0;
 $4 = HEAP32[$output_scanline >> 2] | 0;
 $5 = HEAP32[$cinfo + 116 >> 2] | 0;
 if ($4 >>> 0 >= $5 >>> 0) {
  $6 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$6 + 20 >> 2] = 126;
  FUNCTION_TABLE_vii[HEAP32[$6 + 4 >> 2] & 255]($cinfo, -1);
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $8 = HEAP32[$cinfo + 8 >> 2] | 0;
 if ($8 | 0) {
  HEAP32[$8 + 4 >> 2] = $4;
  HEAP32[$8 + 8 >> 2] = $5;
  FUNCTION_TABLE_vi[HEAP32[$8 >> 2] & 255]($cinfo);
 }
 HEAP32[$row_ctr >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$cinfo + 448 >> 2] | 0) + 4 >> 2] & 31]($cinfo, $scanlines, $row_ctr, $max_lines);
 $12 = HEAP32[$row_ctr >> 2] | 0;
 HEAP32[$output_scanline >> 2] = (HEAP32[$output_scanline >> 2] | 0) + $12;
 $retval$0 = $12;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $3 = 0, $__size_$i$i = 0, $add8 = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i33 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n | 0) {
  $__size_$i$i = $this + 11 | 0;
  $0 = HEAP8[$__size_$i$i >> 0] | 0;
  if ($0 << 24 >> 24 < 0) {
   $cond$i22 = HEAP32[$this + 4 >> 2] | 0;
   $cond$i33 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   $cond$i22 = $0 & 255;
   $cond$i33 = 10;
  }
  if (($cond$i33 - $cond$i22 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i33, $cond$i22 + $__n - $cond$i33 | 0, $cond$i22, $cond$i22, 0, 0);
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $3 = $0;
  if ($3 << 24 >> 24 < 0) $cond$i32 = HEAP32[$this >> 2] | 0; else $cond$i32 = $this;
  __ZNSt3__211char_traitsIcE6assignEPcmc($cond$i32 + $cond$i22 | 0, $__n, $__c) | 0;
  $add8 = $cond$i22 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add8; else HEAP8[$__size_$i$i >> 0] = $add8;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i32 + $add8 | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $add = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i24 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i35 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i24 = $0 & 255;
  $cond$i35 = 10;
 }
 if (($cond$i35 - $cond$i24 | 0) >>> 0 >= $__n >>> 0) {
  if ($__n | 0) {
   if ($tobool$i$i) $cond$i30 = HEAP32[$this >> 2] | 0; else $cond$i30 = $this;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($cond$i30 + $cond$i24 | 0, $__s, $__n) | 0;
   $add = $cond$i24 + $__n | 0;
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
   HEAP8[$ref$tmp >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i30 + $add | 0, $ref$tmp);
  }
 } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i35, $cond$i24 + $__n - $cond$i35 | 0, $cond$i24, $cond$i24, 0, $__n, $__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 24 | 0;
 $SavePrinting = sp + 16 | 0;
 $Collapsed = sp + 8 | 0;
 $agg$tmp = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed, $this, $s);
  $1 = HEAP32[$Collapsed + 4 >> 2] | 0;
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1, $s) | 0) : 0) {} else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28937);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 255]($1, $s);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $first$addr$2 = 0, $first$pn = 0, $t1$0 = 0;
 L1 : do if (($first | 0) != ($last | 0)) {
  $0 = HEAP8[$first >> 0] | 0;
  if ($0 << 24 >> 24 != 95) {
   if ((($0 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $first$addr$2 = $first;
    break;
   }
   $first$pn = $first;
   while (1) {
    $first$pn = $first$pn + 1 | 0;
    if (($first$pn | 0) == ($last | 0)) {
     $first$addr$2 = $last;
     break L1;
    }
    if (((HEAP8[$first$pn >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $first$addr$2 = $first;
     break L1;
    }
   }
  }
  $add$ptr = $first + 1 | 0;
  if (($add$ptr | 0) != ($last | 0)) {
   $1 = HEAP8[$add$ptr >> 0] | 0;
   if ((($1 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $first$addr$2 = $first + 2 | 0;
    break;
   }
   if ($1 << 24 >> 24 == 95) {
    $t1$0 = $first + 2 | 0;
    while (1) {
     if (($t1$0 | 0) == ($last | 0)) {
      $first$addr$2 = $first;
      break L1;
     }
     $2 = HEAP8[$t1$0 >> 0] | 0;
     if ((($2 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $t1$0 = $t1$0 + 1 | 0;
    }
    return ($2 << 24 >> 24 == 95 ? $t1$0 + 1 | 0 : $first) | 0;
   } else $first$addr$2 = $first;
  } else $first$addr$2 = $first;
 } else $first$addr$2 = $first; while (0);
 return $first$addr$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $3 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $Pointee = $this + 8 | 0;
 $0 = HEAP32[$Pointee >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 10) {
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0) | 0)) {
   $1 = HEAP32[$Pointee >> 2] | 0;
   label = 4;
  }
 } else {
  $1 = $0;
  label = 4;
 }
 if ((label | 0) == 4) {
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) : 0) {} else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28937);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
  }
  $3 = HEAP32[$Pointee >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 255]($3, $s);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i18 = 0, $cond$i23 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0; else $cond$i = 1;
 do if ($cond$i >>> 0 >= $__n >>> 0) {
  if ($tobool$i$i) $cond$i18 = HEAP32[$this >> 2] | 0; else $cond$i18 = $this;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm($cond$i18, $__s, $__n) | 0;
  HEAP32[$ref$tmp >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i18 + ($__n << 2) | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } else {
  if ($tobool$i$i) $cond$i23 = HEAP32[$this + 4 >> 2] | 0; else $cond$i23 = $1 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i, $__n - $cond$i | 0, $cond$i23, 0, $cond$i23, $__n, $__s);
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7, $args9) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 $args9 = $args9 | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 36) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = HEAP32[$args1 >> 2] | 0;
 $2 = $args3;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = HEAP32[$args5 >> 2] | 0;
 $13 = HEAP32[$args7 >> 2] | 0;
 $14 = HEAP8[$args9 >> 0] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($call, $0, $1, $tmpcast$byval_copy, $12, $13, $14);
 STACKTOP = sp;
 return $call | 0;
}

function ___newlocale($mask, $name, $loc) {
 $mask = $mask | 0;
 $name = $name | 0;
 $loc = $loc | 0;
 var $$pre30 = 0, $call3 = 0, $i$028 = 0, $i$126 = 0, $j$027 = 0, $lm$0 = 0, $retval$0 = 0, $tmp = 0, $tobool8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmp = sp;
 L1 : do if (!(___loc_is_allocated($loc) | 0)) {
  $tobool8 = ($loc | 0) != 0;
  $i$126 = 0;
  $j$027 = 0;
  do {
   $$pre30 = 1 << $i$126 & $mask;
   if ($tobool8 & ($$pre30 | 0) == 0) $lm$0 = HEAP32[$loc + ($i$126 << 2) >> 2] | 0; else $lm$0 = ___get_locale($i$126, ($$pre30 | 0) == 0 ? 43974 : $name) | 0;
   $j$027 = $j$027 + (($lm$0 | 0) != 0 & 1) | 0;
   HEAP32[$tmp + ($i$126 << 2) >> 2] = $lm$0;
   $i$126 = $i$126 + 1 | 0;
  } while (($i$126 | 0) != 6);
  switch ($j$027 & 2147483647 | 0) {
  case 0:
   {
    $retval$0 = 41836;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[$tmp >> 2] | 0) == 14652) {
     $retval$0 = 14680;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $retval$0 = $loc;
 } else {
  $i$028 = 0;
  do {
   if (1 << $i$028 & $mask | 0) {
    $call3 = ___get_locale($i$028, $name) | 0;
    HEAP32[$loc + ($i$028 << 2) >> 2] = $call3;
   }
   $i$028 = $i$028 + 1 | 0;
  } while (($i$028 | 0) != 6);
  $retval$0 = $loc;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 11616, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 61;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $args1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $agg$tmp5;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($call, $tmpcast$byval_copy, $tmpcast1$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0;
 do if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0)) {
  if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
   if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0) ? ($dst_ptr_not_leading_to_static_ptr = $info + 20 | 0, (HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) : 0) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1 ? (HEAP32[$info + 24 >> 2] | 0) == 2 : 0) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
   if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
  }
 } else __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); while (0);
 return;
}

function _jinit_huff_decoder($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0, $call9 = 0, $ci$035 = 0, $dc_derived_tbls = 0, $derived_tbls = 0, $mem = 0, $num_components = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 220) | 0;
 HEAP32[$cinfo + 468 >> 2] = $call;
 HEAP32[$call >> 2] = 178;
 HEAP32[$call + 8 >> 2] = 179;
 if (!(HEAP32[$cinfo + 224 >> 2] | 0)) {
  $dc_derived_tbls = $call + 68 | 0;
  HEAP32[$dc_derived_tbls >> 2] = 0;
  HEAP32[$dc_derived_tbls + 4 >> 2] = 0;
  HEAP32[$dc_derived_tbls + 8 >> 2] = 0;
  HEAP32[$dc_derived_tbls + 12 >> 2] = 0;
  HEAP32[$dc_derived_tbls + 16 >> 2] = 0;
  HEAP32[$call + 88 >> 2] = 0;
  HEAP32[$call + 92 >> 2] = 0;
  HEAP32[$call + 96 >> 2] = 0;
  return;
 }
 $num_components = $cinfo + 36 | 0;
 $call9 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, HEAP32[$num_components >> 2] << 8) | 0;
 HEAP32[$cinfo + 160 >> 2] = $call9;
 if ((HEAP32[$num_components >> 2] | 0) > 0) {
  $ci$035 = 0;
  do {
   _memset($call9 + ($ci$035 << 8) | 0, -1, 256) | 0;
   $ci$035 = $ci$035 + 1 | 0;
  } while (($ci$035 | 0) < (HEAP32[$num_components >> 2] | 0));
 }
 $derived_tbls = $call + 48 | 0;
 HEAP32[$derived_tbls >> 2] = 0;
 HEAP32[$derived_tbls + 4 >> 2] = 0;
 HEAP32[$derived_tbls + 8 >> 2] = 0;
 HEAP32[$derived_tbls + 12 >> 2] = 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32286);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 32295);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 do if ($cond$i >>> 0 >= $__n >>> 0) {
  if ($tobool$i$i) $cond$i19 = HEAP32[$this >> 2] | 0; else $cond$i19 = $this;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19, $__s, $__n) | 0;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i19 + $__n | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } else {
  if ($tobool$i$i) $cond$i25 = HEAP32[$this + 4 >> 2] | 0; else $cond$i25 = $0 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i, $__n - $cond$i | 0, $cond$i25, 0, $cond$i25, $__n, $__s);
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function _jinit_d_post_controller($cinfo, $need_full_buffer) {
 $cinfo = $cinfo | 0;
 $need_full_buffer = $need_full_buffer | 0;
 var $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $call = 0, $call15 = 0, $call6 = 0, $call8 = 0, $mem = 0, $mul = 0, $mul13 = 0, $strip_height = 0, $whole_image = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 28) | 0;
 HEAP32[$cinfo + 456 >> 2] = $call;
 HEAP32[$call >> 2] = 128;
 $whole_image = $call + 8 | 0;
 HEAP32[$whole_image >> 2] = 0;
 $buffer = $call + 12 | 0;
 HEAP32[$buffer >> 2] = 0;
 if (!(HEAP32[$cinfo + 84 >> 2] | 0)) return;
 $3 = HEAP32[$cinfo + 320 >> 2] | 0;
 $strip_height = $call + 16 | 0;
 HEAP32[$strip_height >> 2] = $3;
 $4 = HEAP32[$mem >> 2] | 0;
 if (!$need_full_buffer) {
  $mul13 = Math_imul(HEAP32[$cinfo + 120 >> 2] | 0, HEAP32[$cinfo + 112 >> 2] | 0) | 0;
  $call15 = FUNCTION_TABLE_iiiii[HEAP32[$4 + 8 >> 2] & 15]($cinfo, 1, $mul13, $3) | 0;
  HEAP32[$buffer >> 2] = $call15;
  return;
 } else {
  $5 = HEAP32[$4 + 16 >> 2] | 0;
  $mul = Math_imul(HEAP32[$cinfo + 120 >> 2] | 0, HEAP32[$cinfo + 112 >> 2] | 0) | 0;
  $call6 = _jround_up(HEAP32[$cinfo + 116 >> 2] | 0, $3) | 0;
  $call8 = FUNCTION_TABLE_iiiiiii[$5 & 63]($cinfo, 1, 0, $mul, $call6, HEAP32[$strip_height >> 2] | 0) | 0;
  HEAP32[$whole_image >> 2] = $call8;
  return;
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($this) {
 $this = $this | 0;
 var $Result = 0, $call3 = 0, $isdigit = 0, $retval$0 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Result = sp;
 $isdigit = (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10;
 $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 if ($isdigit) $storemerge = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3) | 0; else $storemerge = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call3) | 0;
 HEAP32[$Result >> 2] = $storemerge;
 if (!$storemerge) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $Result) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _h2v2_upsample($cinfo, $compptr, $input_data, $output_data_ptr) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $input_data = $input_data | 0;
 $output_data_ptr = $output_data_ptr | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $inptr$022 = 0, $inrow$024 = 0, $max_v_samp_factor = 0, $outptr$021 = 0, $output_width = 0, $outrow$025 = 0;
 $0 = HEAP32[$output_data_ptr >> 2] | 0;
 $max_v_samp_factor = $cinfo + 320 | 0;
 if ((HEAP32[$max_v_samp_factor >> 2] | 0) <= 0) return;
 $output_width = $cinfo + 112 | 0;
 $inrow$024 = 0;
 $outrow$025 = 0;
 while (1) {
  $2 = HEAP32[$0 + ($outrow$025 << 2) >> 2] | 0;
  $3 = HEAP32[$output_width >> 2] | 0;
  $add$ptr = $2 + $3 | 0;
  if (($3 | 0) > 0) {
   $inptr$022 = HEAP32[$input_data + ($inrow$024 << 2) >> 2] | 0;
   $outptr$021 = $2;
   while (1) {
    $5 = HEAP8[$inptr$022 >> 0] | 0;
    HEAP8[$outptr$021 >> 0] = $5;
    HEAP8[$outptr$021 + 1 >> 0] = $5;
    $outptr$021 = $outptr$021 + 2 | 0;
    if ($outptr$021 >>> 0 >= $add$ptr >>> 0) break; else $inptr$022 = $inptr$022 + 1 | 0;
   }
   $6 = HEAP32[$output_width >> 2] | 0;
  } else $6 = $3;
  _jcopy_sample_rows($0, $outrow$025, $0, $outrow$025 | 1, 1, $6);
  $outrow$025 = $outrow$025 + 2 | 0;
  if (($outrow$025 | 0) >= (HEAP32[$max_v_samp_factor >> 2] | 0)) break; else $inrow$024 = $inrow$024 + 1 | 0;
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function _gray_rgb_convert($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $2 = 0, $4 = 0, $col$012$us = 0, $dec17$us$in = 0, $input_row$addr$016$us = 0, $outptr$011$us = 0, $output_buf$addr$015$us = 0, $dec17$us$in$looptemp = 0;
 $0 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) < 1 | ($0 | 0) == 0) return;
 $dec17$us$in = $num_rows;
 $input_row$addr$016$us = $input_row;
 $output_buf$addr$015$us = $output_buf;
 while (1) {
  $dec17$us$in$looptemp = $dec17$us$in;
  $dec17$us$in = $dec17$us$in + -1 | 0;
  $2 = HEAP32[(HEAP32[$input_buf >> 2] | 0) + ($input_row$addr$016$us << 2) >> 2] | 0;
  $col$012$us = 0;
  $outptr$011$us = HEAP32[$output_buf$addr$015$us >> 2] | 0;
  while (1) {
   $4 = HEAP8[$2 + $col$012$us >> 0] | 0;
   HEAP8[$outptr$011$us + 2 >> 0] = $4;
   HEAP8[$outptr$011$us + 1 >> 0] = $4;
   HEAP8[$outptr$011$us >> 0] = $4;
   $col$012$us = $col$012$us + 1 | 0;
   if (($col$012$us | 0) == ($0 | 0)) break; else $outptr$011$us = $outptr$011$us + 3 | 0;
  }
  if (($dec17$us$in$looptemp | 0) <= 1) break; else {
   $input_row$addr$016$us = $input_row$addr$016$us + 1 | 0;
   $output_buf$addr$015$us = $output_buf$addr$015$us + 4 | 0;
  }
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $args1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $agg$tmp5;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($call, $tmpcast$byval_copy, $tmpcast1$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $3 = 0, $4 = 0, $Init = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 if (!(HEAP8[$this + 16 >> 0] | 0)) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 46);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 } else {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 }
 $Init = $this + 12 | 0;
 $3 = HEAP32[$Init >> 2] | 0;
 if (((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($3) | 0) + -65 & 255) < 2) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30377);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
  $4 = HEAP32[$Init >> 2] | 0;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4, $S);
 STACKTOP = sp;
 return;
}

function _start_pass_dpost($cinfo, $pass_mode) {
 $cinfo = $cinfo | 0;
 $pass_mode = $pass_mode | 0;
 var $0 = 0, $10 = 0, $13 = 0, $15 = 0, $buffer = 0, $call = 0;
 $0 = HEAP32[$cinfo + 456 >> 2] | 0;
 L1 : do switch ($pass_mode | 0) {
 case 0:
  {
   if (!(HEAP32[$cinfo + 84 >> 2] | 0)) {
    HEAP32[$0 + 4 >> 2] = HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 4 >> 2];
    break L1;
   }
   HEAP32[$0 + 4 >> 2] = 4;
   $buffer = $0 + 12 | 0;
   if (!(HEAP32[$buffer >> 2] | 0)) {
    $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$cinfo + 4 >> 2] | 0) + 28 >> 2] & 31]($cinfo, HEAP32[$0 + 8 >> 2] | 0, 0, HEAP32[$0 + 16 >> 2] | 0, 1) | 0;
    HEAP32[$buffer >> 2] = $call;
   }
   break;
  }
 case 3:
  {
   if (!(HEAP32[$0 + 8 >> 2] | 0)) {
    $10 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$10 + 20 >> 2] = 3;
    FUNCTION_TABLE_vi[HEAP32[$10 >> 2] & 255]($cinfo);
   }
   HEAP32[$0 + 4 >> 2] = 5;
   break;
  }
 case 2:
  {
   if (!(HEAP32[$0 + 8 >> 2] | 0)) {
    $13 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$13 + 20 >> 2] = 3;
    FUNCTION_TABLE_vi[HEAP32[$13 >> 2] & 255]($cinfo);
   }
   HEAP32[$0 + 4 >> 2] = 6;
   break;
  }
 default:
  {
   $15 = HEAP32[$cinfo >> 2] | 0;
   HEAP32[$15 + 20 >> 2] = 3;
   FUNCTION_TABLE_vi[HEAP32[$15 >> 2] & 255]($cinfo);
  }
 } while (0);
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return;
}

function _setup($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $call = 0, $call6 = 0, $id = 0, $imgBW = 0, $imgBWsize = 0, $mul = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $width_NFT = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $id = sp + 12 | 0;
 $0 = HEAP32[10458] | 0;
 HEAP32[10458] = $0 + 1;
 HEAP32[$id >> 2] = $0;
 $call = __ZNSt3__213unordered_mapIi6arFsetNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(41812, $id) | 0;
 HEAP32[$call >> 2] = HEAP32[$id >> 2];
 HEAP32[$call + 4 >> 2] = $width;
 HEAP32[$call + 8 >> 2] = $height;
 $width_NFT = $call + 72 | 0;
 $mul = Math_imul(HEAP32[$call + 76 >> 2] | 0, HEAP32[$width_NFT >> 2] | 0) | 0;
 $imgBWsize = $call + 24 | 0;
 HEAP32[$imgBWsize >> 2] = $mul;
 $call6 = _malloc($mul) | 0;
 $imgBW = $call + 16 | 0;
 HEAP32[$imgBW >> 2] = $call6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$width_NFT >> 2];
 _arLog(0, 1, 22513, $vararg_buffer);
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$imgBWsize >> 2];
 _arLog(0, 1, 22530, $vararg_buffer1);
 _emscripten_asm_const_iiii(0, HEAP32[$call >> 2] | 0, HEAP32[$imgBW >> 2] | 0, HEAP32[$imgBWsize >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$call >> 2] | 0;
}

function _pass2_no_dither($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $arrayidx15 = 0, $col$026 = 0, $inptr$027 = 0, $outptr$025 = 0, $row$029 = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) < 1 | ($2 | 0) == 0) return;
 $row$029 = 0;
 do {
  $col$026 = $2;
  $inptr$027 = HEAP32[$input_buf + ($row$029 << 2) >> 2] | 0;
  $outptr$025 = HEAP32[$output_buf + ($row$029 << 2) >> 2] | 0;
  while (1) {
   $6 = (HEAPU8[$inptr$027 >> 0] | 0) >>> 3;
   $8 = (HEAPU8[$inptr$027 + 1 >> 0] | 0) >>> 2;
   $10 = (HEAPU8[$inptr$027 + 2 >> 0] | 0) >>> 3;
   $arrayidx15 = (HEAP32[$1 + ($6 << 2) >> 2] | 0) + ($8 << 6) + ($10 << 1) | 0;
   $12 = HEAP16[$arrayidx15 >> 1] | 0;
   if (!($12 << 16 >> 16)) {
    _fill_inverse_cmap($cinfo, $6, $8, $10);
    $13 = HEAP16[$arrayidx15 >> 1] | 0;
   } else $13 = $12;
   HEAP8[$outptr$025 >> 0] = ($13 & 65535) + 255;
   $col$026 = $col$026 + -1 | 0;
   if (!$col$026) break; else {
    $inptr$027 = $inptr$027 + 3 | 0;
    $outptr$025 = $outptr$025 + 1 | 0;
   }
  }
  $row$029 = $row$029 + 1 | 0;
 } while (($row$029 | 0) != ($num_rows | 0));
 return;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $9 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call4 = 0, $call7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $12 = 0;
  $13 = 0;
 } else {
  $call = ___errno_location() | 0;
  $0 = HEAP32[$call >> 2] | 0;
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 0;
  $1 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $2 = getTempRet0() | 0;
  $call4 = ___errno_location() | 0;
  $3 = HEAP32[$call4 >> 2] | 0;
  if (!$3) {
   $call7 = ___errno_location() | 0;
   HEAP32[$call7 >> 2] = $0;
  }
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($3 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $9 = ($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0;
   $14 = $9 ? -1 : 0;
   $15 = $9 ? 2147483647 : -2147483648;
  } else {
   $14 = $1;
   $15 = $2;
  } else {
   HEAP32[$__err >> 2] = 4;
   $14 = 0;
   $15 = 0;
  }
  $12 = $15;
  $13 = $14;
 }
 setTempRet0($12 | 0);
 STACKTOP = sp;
 return $13 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $call1 = 0, $call11 = 0, $cond10 = 0, $cond20 = 0, $f$addr$019 = 0, $f$addr$022 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0;
 do if ($f) {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $retval$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $retval$0 = $call1; else {
   ___unlockfile($f);
   $retval$0 = $call1;
  }
 } else {
  if (!(HEAP32[3677] | 0)) $cond10 = 0; else $cond10 = _fflush(HEAP32[3677] | 0) | 0;
  $call11 = ___ofl_lock() | 0;
  $f$addr$019 = HEAP32[$call11 >> 2] | 0;
  if (!$f$addr$019) $r$0$lcssa = $cond10; else {
   $f$addr$022 = $f$addr$019;
   $r$021 = $cond10;
   while (1) {
    if ((HEAP32[$f$addr$022 + 76 >> 2] | 0) > -1) $cond20 = ___lockfile($f$addr$022) | 0; else $cond20 = 0;
    if ((HEAP32[$f$addr$022 + 20 >> 2] | 0) >>> 0 > (HEAP32[$f$addr$022 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($f$addr$022) | 0 | $r$021; else $r$1 = $r$021;
    if ($cond20 | 0) ___unlockfile($f$addr$022);
    $f$addr$022 = HEAP32[$f$addr$022 + 56 >> 2] | 0;
    if (!$f$addr$022) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$021 = $r$1;
   }
  }
  ___ofl_unlock();
  $retval$0 = $r$0$lcssa;
 } while (0);
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($this, $Kind) {
 $this = $this | 0;
 $Kind = $Kind | 0;
 var $LHS = 0, $RHS = 0, $call = 0, $call2 = 0, $call4 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $LHS = sp + 4 | 0;
 $RHS = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call) | 0;
 HEAP32[$LHS >> 2] = $call2;
 if (!$call2) $retval$1 = 0; else {
  $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call) | 0;
  HEAP32[$RHS >> 2] = $call4;
  if (!$call4) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this, $LHS, $Kind, $RHS) | 0;
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $call14 = 0, $sub = 0, $sub$ptr$div = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s$addr$0, $0, $4) | 0;
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + ($4 << 2);
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + ($4 << 2) | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($call11 | 0) == -1) break;
   $call14 = __ZNSt3__211char_traitsIwE12to_char_typeEj($call11) | 0;
   HEAP32[$__s$addr$0 >> 2] = $call14;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33004);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp2, $this + 8 | 0);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 28587);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 $12 = HEAP8[$args5 >> 0] | 0;
 $13 = HEAP32[$args7 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($call, $0, $tmpcast$byval_copy, $11, $12, $13);
 STACKTOP = sp;
 return $call | 0;
}

function _post_process_1pass($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $0 = 0, $2 = 0, $buffer = 0, $num_rows = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $num_rows = sp;
 $0 = HEAP32[$cinfo + 456 >> 2] | 0;
 $sub = $out_rows_avail - (HEAP32[$out_row_ctr >> 2] | 0) | 0;
 $2 = HEAP32[$0 + 16 >> 2] | 0;
 HEAP32[$num_rows >> 2] = 0;
 $buffer = $0 + 12 | 0;
 FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 4 >> 2] & 7]($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, HEAP32[$buffer >> 2] | 0, $num_rows, $sub >>> 0 > $2 >>> 0 ? $2 : $sub);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 4 >> 2] & 31]($cinfo, HEAP32[$buffer >> 2] | 0, $output_buf + (HEAP32[$out_row_ctr >> 2] << 2) | 0, HEAP32[$num_rows >> 2] | 0);
 HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + (HEAP32[$num_rows >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $call10 = 0, $call66 = 0, $locale = 0, $retval$0 = 0;
 do if ($s) {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  $locale = (___pthread_self_19() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[$locale >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = 25;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   $call66 = ___errno_location() | 0;
   HEAP32[$call66 >> 2] = 25;
   $retval$0 = -1;
   break;
  }
 } else $retval$0 = 1; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $call14 = 0, $sub = 0, $sub$ptr$sub = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s$addr$0, $0, $4) | 0;
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + $4;
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + $4 | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($call11 | 0) == -1) break;
   $call14 = __ZNSt3__211char_traitsIcE12to_char_typeEi($call11) | 0;
   HEAP8[$__s$addr$0 >> 0] = $call14;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast3$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast3$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast3$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast3$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast3$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 $11 = $this + 20 | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp2;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 HEAP32[$tmpcast3$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast3$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast3$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $BlockList = 0, $Current = 0, $Current7$phi$trans$insert = 0, $Current7$pre$phiZ2D = 0, $add2 = 0, $add8$pre$phiZ2D = 0, $and = 0, $retval$0 = 0, label = 0;
 $and = $N + 15 & -16;
 $BlockList = $this + 4096 | 0;
 $0 = HEAP32[$BlockList >> 2] | 0;
 $Current = $0 + 4 | 0;
 $1 = HEAP32[$Current >> 2] | 0;
 $add2 = $1 + $and | 0;
 do if ($add2 >>> 0 > 4087) if ($and >>> 0 > 4088) {
  $retval$0 = __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this, $and) | 0;
  break;
 } else {
  __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this);
  $$pre = HEAP32[$BlockList >> 2] | 0;
  $Current7$phi$trans$insert = $$pre + 4 | 0;
  $$pre6 = HEAP32[$Current7$phi$trans$insert >> 2] | 0;
  $2 = $$pre;
  $3 = $$pre6;
  $Current7$pre$phiZ2D = $Current7$phi$trans$insert;
  $add8$pre$phiZ2D = $$pre6 + $and | 0;
  label = 5;
  break;
 } else {
  $2 = $0;
  $3 = $1;
  $Current7$pre$phiZ2D = $Current;
  $add8$pre$phiZ2D = $add2;
  label = 5;
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$Current7$pre$phiZ2D >> 2] = $add8$pre$phiZ2D;
  $retval$0 = $2 + 8 + $3 | 0;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($this, $Other) {
 $this = $this | 0;
 $Other = $Other | 0;
 var $1 = 0, $add$ptr = 0, $call2 = 0, $sub$ptr$sub$i$i = 0;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this);
 if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other) | 0;
  $sub$ptr$sub$i$i = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other) | 0) - $call2 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove(HEAP32[$this >> 2] | 0, $call2 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $1 = HEAP32[$this >> 2] | 0;
  $add$ptr = $1 + ((__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other) | 0) << 2) | 0;
  HEAP32[$this + 4 >> 2] = $add$ptr;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } else {
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$Other + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$Other + 8 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp5;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp5;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i11 = 0, $call$i5 = 0, $call$i8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 10896, 10928, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43080) | 0;
 $call$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 127]($call$i5) | 0;
 HEAP32[$__decimal_point >> 2] = $call$i8;
 $call$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 127]($call$i5) | 0;
 HEAP32[$__thousands_sep >> 2] = $call$i11;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 255]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i11 = 0, $call$i5 = 0, $call$i8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43040) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 10896, 10928, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43056) | 0;
 $call$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 127]($call$i5) | 0;
 HEAP8[$__decimal_point >> 0] = $call$i8;
 $call$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 127]($call$i5) | 0;
 HEAP8[$__thousands_sep >> 0] = $call$i11;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 255]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _h2v1_upsample($cinfo, $compptr, $input_data, $output_data_ptr) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $input_data = $input_data | 0;
 $output_data_ptr = $output_data_ptr | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $inptr$016 = 0, $max_v_samp_factor = 0, $outptr$015 = 0, $output_width = 0, $outrow$018 = 0;
 $0 = HEAP32[$output_data_ptr >> 2] | 0;
 $max_v_samp_factor = $cinfo + 320 | 0;
 $1 = HEAP32[$max_v_samp_factor >> 2] | 0;
 if (($1 | 0) <= 0) return;
 $output_width = $cinfo + 112 | 0;
 $7 = $1;
 $outrow$018 = 0;
 while (1) {
  $2 = HEAP32[$0 + ($outrow$018 << 2) >> 2] | 0;
  $3 = HEAP32[$output_width >> 2] | 0;
  $add$ptr = $2 + $3 | 0;
  if (($3 | 0) > 0) {
   $inptr$016 = HEAP32[$input_data + ($outrow$018 << 2) >> 2] | 0;
   $outptr$015 = $2;
   while (1) {
    $5 = HEAP8[$inptr$016 >> 0] | 0;
    HEAP8[$outptr$015 >> 0] = $5;
    HEAP8[$outptr$015 + 1 >> 0] = $5;
    $outptr$015 = $outptr$015 + 2 | 0;
    if ($outptr$015 >>> 0 >= $add$ptr >>> 0) break; else $inptr$016 = $inptr$016 + 1 | 0;
   }
   $6 = HEAP32[$max_v_samp_factor >> 2] | 0;
  } else $6 = $7;
  $outrow$018 = $outrow$018 + 1 | 0;
  if (($outrow$018 | 0) >= ($6 | 0)) break; else $7 = $6;
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $0 = 0, $N$addr = 0, $SN = 0, $call3 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $N$addr = sp;
 $SN = sp + 8 | 0;
 HEAP32[$N$addr >> 2] = $N;
 $0 = $N;
 while (1) {
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 66) | 0)) {
   $retval$2 = $0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($SN, $this);
  if (__ZNK12_GLOBAL__N_110StringView5emptyEv($SN) | 0) {
   label = 5;
   break;
  }
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $N$addr, $SN) | 0;
  HEAP32[$N$addr >> 2] = $call3;
  $0 = $call3;
 }
 if ((label | 0) == 5) $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) | 0;
 do if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) | 0)) {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } else {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function _fill_input_buffer($cinfo) {
 $cinfo = $cinfo | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $4 = 0, $6 = 0, $buffer = 0, $bytes_in_buffer = 0, $call = 0, $nbytes$0 = 0, $start_of_file = 0;
 $0 = HEAP32[$cinfo + 24 >> 2] | 0;
 $buffer = $0 + 32 | 0;
 $call = _fread(HEAP32[$buffer >> 2] | 0, 1, 4096, HEAP32[$0 + 28 >> 2] | 0) | 0;
 $start_of_file = $0 + 36 | 0;
 if ($call | 0) {
  $nbytes$0 = $call;
  $10 = HEAP32[$buffer >> 2] | 0;
  HEAP32[$0 >> 2] = $10;
  $bytes_in_buffer = $0 + 4 | 0;
  HEAP32[$bytes_in_buffer >> 2] = $nbytes$0;
  HEAP32[$start_of_file >> 2] = 0;
  return 1;
 }
 if (!(HEAP32[$start_of_file >> 2] | 0)) $$pre$phiZ2D = $cinfo; else {
  $4 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$4 + 20 >> 2] = 43;
  FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($cinfo);
  $$pre$phiZ2D = $cinfo;
 }
 $6 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$6 + 20 >> 2] = 123;
 FUNCTION_TABLE_vii[HEAP32[$6 + 4 >> 2] & 255]($$pre$phiZ2D, -1);
 HEAP8[HEAP32[$buffer >> 2] >> 0] = -1;
 HEAP8[(HEAP32[$buffer >> 2] | 0) + 1 >> 0] = -39;
 $nbytes$0 = 2;
 $10 = HEAP32[$buffer >> 2] | 0;
 HEAP32[$0 >> 2] = $10;
 $bytes_in_buffer = $0 + 4 | 0;
 HEAP32[$bytes_in_buffer >> 2] = $nbytes$0;
 HEAP32[$start_of_file >> 2] = 0;
 return 1;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = ___errno_location() | 0;
  $0 = HEAP32[$call >> 2] | 0;
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 0;
  $call1$i = +_strtold_l($__a, $__p2, __ZNSt3__26__clocEv() | 0);
  $call3 = ___errno_location() | 0;
  $1 = HEAP32[$call3 >> 2] | 0;
  if (!$1) {
   $call6 = ___errno_location() | 0;
   HEAP32[$call6 >> 2] = $0;
  }
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = ___errno_location() | 0;
  $0 = HEAP32[$call >> 2] | 0;
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 0;
  $call1$i = +_strtof_l($__a, $__p2, __ZNSt3__26__clocEv() | 0);
  $call3 = ___errno_location() | 0;
  $1 = HEAP32[$call3 >> 2] | 0;
  if (!$1) {
   $call6 = ___errno_location() | 0;
   HEAP32[$call6 >> 2] = $0;
  }
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = ___errno_location() | 0;
  $0 = HEAP32[$call >> 2] | 0;
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 0;
  $call1$i = +_strtod_l($__a, $__p2, __ZNSt3__26__clocEv() | 0);
  $call3 = ___errno_location() | 0;
  $1 = HEAP32[$call3 >> 2] | 0;
  if (!$1) {
   $call6 = ___errno_location() | 0;
   HEAP32[$call6 >> 2] = $0;
  }
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $PPE = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp2$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $PPE = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29975);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($PPE, HEAP32[$this + 8 >> 2] | 0);
 __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($PPE, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 197;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if (!$cmp) {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 } else {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 }
 HEAP32[$__value_$i$i$i >> 2] = 198;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 197;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if (!$cmp) {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 } else {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 }
 HEAP32[$__value_$i$i$i >> 2] = 198;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $8 = 0, $9 = 0, $Int = 0, $R = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Int = sp + 8 | 0;
 $R = sp;
 HEAP32[$Int >> 2] = 0;
 if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Int) | 0) ? ($call2 = __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0, $0 = HEAP32[$Int >> 2] | 0, $call2 >>> 0 >= $0 >>> 0) : 0) {
  $1 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($R, $1, $1 + $0 | 0);
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $0;
  $3 = $R;
  $8 = HEAP32[$3 + 4 >> 2] | 0;
  $9 = $agg$result;
  HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$9 + 4 >> 2] = $8;
 } else __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEmOT_DpOT0_($agg$result, $this, $__hash, $__f, $__rest, $__rest1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__hash = $__hash | 0;
 $__f = $__f | 0;
 $__rest = $__rest | 0;
 $__rest1 = $__rest1 | 0;
 var $$sroa_idx12 = 0, $call$i$i$i = 0, $second$i$i$i$i$i = 0, dest = 0, stop = 0;
 $call$i$i$i = __Znwm(108) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 8;
 $$sroa_idx12 = $agg$result + 8 | 0;
 HEAP32[$call$i$i$i + 8 >> 2] = HEAP32[HEAP32[$__rest >> 2] >> 2];
 $second$i$i$i$i$i = $call$i$i$i + 12 | 0;
 dest = $second$i$i$i$i$i;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6arFsetC2Ev($second$i$i$i$i$i);
 HEAP8[$$sroa_idx12 >> 0] = 1;
 HEAP32[$call$i$i$i + 4 >> 2] = $__hash;
 HEAP32[$call$i$i$i >> 2] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$result, $this, $AllowNegative) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $AllowNegative = $AllowNegative | 0;
 var $0 = 0, $1 = 0, $4 = 0, $incdec$ptr = 0, label = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($AllowNegative) __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 110) | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) != 0 ? ($1 = HEAP32[$this >> 2] | 0, ((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) : 0) {
  $4 = $1;
  while (1) {
   if (!(__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0)) break;
   if (((HEAP8[$4 >> 0] | 0) + -48 | 0) >>> 0 >= 10) break;
   $incdec$ptr = $4 + 1 | 0;
   HEAP32[$this >> 2] = $incdec$ptr;
   $4 = $incdec$ptr;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, $0, $4);
 } else __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}

function _readNFTMarker($id, $datasetPathname) {
 $id = $id | 0;
 $datasetPathname = $datasetPathname | 0;
 var $0 = 0, $call7 = 0, $cond$i$i$i = 0, $id$addr = 0, $retval$1 = 0, $surfaceSetCount = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi6arFsetEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(41812, $id$addr) | 0)) $retval$1 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi6arFsetNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(41812, $id$addr) | 0;
  $surfaceSetCount = $call7 + 92 | 0;
  $0 = HEAP32[$surfaceSetCount >> 2] | 0;
  if ((HEAP8[$datasetPathname + 11 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$datasetPathname >> 2] | 0; else $cond$i$i$i = $datasetPathname;
  _loadNFTMarker($call7, $0, $cond$i$i$i) | 0;
  HEAP32[$surfaceSetCount >> 2] = (HEAP32[$surfaceSetCount >> 2] | 0) + 1;
  $retval$1 = $0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _use_merged_upsample($cinfo) {
 $cinfo = $cinfo | 0;
 var $13 = 0, $17 = 0, $6 = 0;
 if (HEAP32[$cinfo + 308 >> 2] | 0) return 0;
 switch (HEAP32[$cinfo + 40 >> 2] | 0) {
 case 7:
 case 3:
  break;
 default:
  return 0;
 }
 if ((HEAP32[$cinfo + 36 >> 2] | 0) != 3) return 0;
 if ((HEAP32[$cinfo + 44 >> 2] | 0) != 2) return 0;
 if ((HEAP32[$cinfo + 120 >> 2] | 0) != 3) return 0;
 if (HEAP32[$cinfo + 304 >> 2] | 0) return 0;
 $6 = HEAP32[$cinfo + 216 >> 2] | 0;
 if ((HEAP32[$6 + 8 >> 2] | 0) != 2) return 0;
 if ((HEAP32[$6 + 96 >> 2] | 0) != 1) return 0;
 if ((HEAP32[$6 + 184 >> 2] | 0) != 1) return 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) > 2) return 0;
 if ((HEAP32[$6 + 100 >> 2] | 0) != 1) return 0;
 if ((HEAP32[$6 + 188 >> 2] | 0) != 1) return 0;
 $13 = HEAP32[$6 + 36 >> 2] | 0;
 if (($13 | 0) != (HEAP32[$cinfo + 324 >> 2] | 0)) return 0;
 if ((HEAP32[$6 + 124 >> 2] | 0) != ($13 | 0)) return 0;
 if ((HEAP32[$6 + 212 >> 2] | 0) != ($13 | 0)) return 0;
 $17 = HEAP32[$6 + 40 >> 2] | 0;
 if (($17 | 0) != (HEAP32[$cinfo + 328 >> 2] | 0)) return 0;
 if ((HEAP32[$6 + 128 >> 2] | 0) == ($17 | 0)) return (HEAP32[$6 + 216 >> 2] | 0) == ($17 | 0) | 0; else return 0;
 return 0;
}

function _atoi($s) {
 $s = $s | 0;
 var $conv1 = 0, $conv58$pre$phiZ2D = 0, $incdec$ptr = 0, $n$0$lcssa = 0, $n$012 = 0, $neg$0 = 0, $neg$1 = 0, $s$addr$0 = 0, $s$addr$1 = 0, $s$addr$211 = 0, $sub11 = 0, label = 0;
 $s$addr$0 = $s;
 while (1) {
  $incdec$ptr = $s$addr$0 + 1 | 0;
  if (!(_isspace(HEAP8[$s$addr$0 >> 0] | 0) | 0)) break; else $s$addr$0 = $incdec$ptr;
 }
 $conv1 = HEAP8[$s$addr$0 >> 0] | 0;
 switch ($conv1 | 0) {
 case 45:
  {
   $neg$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $neg$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $conv58$pre$phiZ2D = $conv1;
   $neg$1 = 0;
   $s$addr$1 = $s$addr$0;
  }
 }
 if ((label | 0) == 5) {
  $conv58$pre$phiZ2D = HEAP8[$incdec$ptr >> 0] | 0;
  $neg$1 = $neg$0;
  $s$addr$1 = $incdec$ptr;
 }
 if (!(_isdigit($conv58$pre$phiZ2D) | 0)) $n$0$lcssa = 0; else {
  $n$012 = 0;
  $s$addr$211 = $s$addr$1;
  while (1) {
   $sub11 = ($n$012 * 10 | 0) + 48 - (HEAP8[$s$addr$211 >> 0] | 0) | 0;
   $s$addr$211 = $s$addr$211 + 1 | 0;
   if (!(_isdigit(HEAP8[$s$addr$211 >> 0] | 0) | 0)) {
    $n$0$lcssa = $sub11;
    break;
   } else $n$012 = $sub11;
  }
 }
 return (($neg$1 | 0) == 0 ? 0 - $n$0$lcssa | 0 : $n$0$lcssa) | 0;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call16 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 197;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 1 : $mul4) : -1;
 $sub$ptr$sub10 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $call16 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call16) __ZSt17__throw_bad_allocv();
 if (!$cmp) {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call16;
  if (!$$pr) $8 = $call16; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 } else {
  HEAP32[$__b >> 2] = $call16;
  $8 = $call16;
 }
 HEAP32[$__value_$i$i$i >> 2] = 198;
 HEAP32[$__n >> 2] = $8 + $sub$ptr$sub10;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $3;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33872);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 33897);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) | 0;
 do if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) | 0)) {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } else {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function _arUtilMatInvf($s, $d) {
 $s = $s | 0;
 $d = $d | 0;
 var $2 = 0, $arrayidx10 = 0, $call = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $mul = 0, $mul27 = 0;
 $call = _arMatrixAlloc(4, 4) | 0;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break;
  $mul = $j$0 << 2;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[(HEAP32[$call >> 2] | 0) + ($i$0 + $mul << 3) >> 3] = +HEAPF32[$s + ($j$0 << 4) + ($i$0 << 2) >> 2];
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 $2 = HEAP32[$call >> 2] | 0;
 $arrayidx10 = $2 + 96 | 0;
 HEAP32[$arrayidx10 >> 2] = 0;
 HEAP32[$arrayidx10 + 4 >> 2] = 0;
 HEAP32[$arrayidx10 + 8 >> 2] = 0;
 HEAP32[$arrayidx10 + 12 >> 2] = 0;
 HEAP32[$arrayidx10 + 16 >> 2] = 0;
 HEAP32[$arrayidx10 + 20 >> 2] = 0;
 HEAPF64[$2 + 120 >> 3] = 1.0;
 _arMatrixSelfInv($call) | 0;
 $j$1 = 0;
 while (1) {
  if (($j$1 | 0) == 3) break;
  $mul27 = $j$1 << 2;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) break;
   HEAPF32[$d + ($j$1 << 4) + ($i$1 << 2) >> 2] = +HEAPF64[(HEAP32[$call >> 2] | 0) + ($i$1 + $mul27 << 3) >> 3];
   $i$1 = $i$1 + 1 | 0;
  }
  $j$1 = $j$1 + 1 | 0;
 }
 _arMatrixFree($call) | 0;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) | 0;
 do if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0)) {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } else {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 $tobool = (HEAP8[$args >> 0] | 0) != 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 $12 = HEAP32[$args5 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($call, $tobool, $tmpcast$byval_copy, $11, $12);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28941);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0)) {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } else __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); while (0);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $4 = 0, $5 = 0, $call$i = 0, $call$i$i = 0, $dec = 0, $n$0 = 0, $p$0 = 0, $retval$0 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $call$i$i = ___uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $call$i = _wcrtomb($tmp, 0, $st) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 L4 : do if (($call$i + 1 | 0) >>> 0 >= 2) {
  $dec = $call$i + -1 | 0;
  if ($dec >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) $retval$0 = 1; else {
   $n$0 = $dec;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) {
     $retval$0 = 0;
     break L4;
    }
    $4 = HEAP8[$p$0 >> 0] | 0;
    $5 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $4;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
  }
 } else $retval$0 = 2; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _color_quantize3($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $col$024 = 0, $ptrin$025 = 0, $ptrout$023 = 0, $row$027 = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 $4 = HEAP32[$1 + 8 >> 2] | 0;
 $5 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) < 1 | ($5 | 0) == 0) return;
 $row$027 = 0;
 do {
  $col$024 = $5;
  $ptrin$025 = HEAP32[$input_buf + ($row$027 << 2) >> 2] | 0;
  $ptrout$023 = HEAP32[$output_buf + ($row$027 << 2) >> 2] | 0;
  while (1) {
   HEAP8[$ptrout$023 >> 0] = (HEAPU8[$3 + (HEAPU8[$ptrin$025 + 1 >> 0] | 0) >> 0] | 0) + (HEAPU8[$2 + (HEAPU8[$ptrin$025 >> 0] | 0) >> 0] | 0) + (HEAPU8[$4 + (HEAPU8[$ptrin$025 + 2 >> 0] | 0) >> 0] | 0);
   $col$024 = $col$024 + -1 | 0;
   if (!$col$024) break; else {
    $ptrin$025 = $ptrin$025 + 3 | 0;
    $ptrout$023 = $ptrout$023 + 1 | 0;
   }
  }
  $row$027 = $row$027 + 1 | 0;
 } while (($row$027 | 0) != ($num_rows | 0));
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $call = 0, $call$i = 0, $call$i$i = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $__nar = sp;
 $__ne = sp + 116 | 0;
 $mb = sp + 104 | 0;
 $__nb = sp + 112 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $0 = $mb;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($__wb, HEAP32[$__we >> 2] | 0) | 0;
 $call$i$i = ___uselocale(HEAP32[$this >> 2] | 0) | 0;
 $call$i = _mbsrtowcs($__wb, $__nb, $call, $mb) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 if (($call$i | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[$__we >> 2] = $__wb + ($call$i << 2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $__size_$i$i = 0, $add$ptr$i = 0, $cond$i = 0, $ref$tmp$i = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 do if ($cond$i >>> 0 >= $__n >>> 0) if ($tobool$i$i) {
  $add$ptr$i = (HEAP32[$this >> 2] | 0) + $__n | 0;
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i, $ref$tmp$i);
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } else {
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this + $__n | 0, $ref$tmp$i);
  HEAP8[$__size_$i$i >> 0] = $__n;
  break;
 } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n - $cond$i | 0, $__c) | 0; while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $call2 = 0, $ref$tmp = 0, $retval$0 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast$byval_copy = sp + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0);
 $2 = $S;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($ref$tmp, $tmpcast$byval_copy) | 0) {
  $call2 = __ZNK12_GLOBAL__N_110StringView4sizeEv($S) | 0;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $call2;
  $retval$0 = 1;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _read_restart_marker($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $marker = 0, $next_restart_num20 = 0, $retval$0 = 0, $unread_marker = 0;
 $unread_marker = $cinfo + 440 | 0;
 $0 = HEAP32[$unread_marker >> 2] | 0;
 do if (!$0) if (!(_next_marker($cinfo) | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  $3 = HEAP32[$unread_marker >> 2] | 0;
  break;
 } else $3 = $0; while (0);
 $marker = $cinfo + 464 | 0;
 $2 = HEAP32[(HEAP32[$marker >> 2] | 0) + 20 >> 2] | 0;
 if (($3 | 0) != ($2 + 208 | 0)) {
  if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$cinfo + 24 >> 2] | 0) + 20 >> 2] & 63]($cinfo, $2) | 0)) {
   $retval$0 = 0;
   return $retval$0 | 0;
  }
 } else {
  $4 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$4 + 20 >> 2] = 100;
  HEAP32[$4 + 24 >> 2] = $2;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 4 >> 2] & 255]($cinfo, 3);
  HEAP32[$unread_marker >> 2] = 0;
 }
 $next_restart_num20 = (HEAP32[$marker >> 2] | 0) + 20 | 0;
 HEAP32[$next_restart_num20 >> 2] = (HEAP32[$next_restart_num20 >> 2] | 0) + 1 & 7;
 $retval$0 = 1;
 return $retval$0 | 0;
}

function ___fseeko_unlocked($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $13 = 0, $14 = 0, $6 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 if (($whence | 0) == 1) {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $6 = _i64Subtract($0 | 0, $1 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = $6;
  $14 = getTempRet0() | 0;
 } else {
  $13 = $0;
  $14 = $1;
 }
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0, (HEAP32[$wpos >> 2] | 0) == 0) : 0) $retval$0 = -1; else {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, $13, $14, $whence) | 0;
  if ((getTempRet0() | 0) < 0) $retval$0 = -1; else {
   HEAP32[$f + 8 >> 2] = 0;
   HEAP32[$f + 4 >> 2] = 0;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $__begin_$i9$pre$phiZZ2D = 0, $__shared_owners_$i = 0, $__shared_owners_$i6 = 0, $facets_ = 0;
 $__shared_owners_$i = $f + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 $facets_ = $this + 8 | 0;
 $3 = HEAP32[$facets_ >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) {
  $5 = $3;
  $__begin_$i9$pre$phiZZ2D = $facets_;
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($facets_, $id + 1 | 0);
  $5 = HEAP32[$facets_ >> 2] | 0;
  $__begin_$i9$pre$phiZZ2D = $facets_;
 }
 $6 = HEAP32[$5 + ($id << 2) >> 2] | 0;
 if ($6 | 0 ? ($__shared_owners_$i6 = $6 + 4 | 0, $7 = HEAP32[$__shared_owners_$i6 >> 2] | 0, HEAP32[$__shared_owners_$i6 >> 2] = $7 + -1, ($7 | 0) == 0) : 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] & 255]($6);
 HEAP32[(HEAP32[$__begin_$i9$pre$phiZZ2D >> 2] | 0) + ($id << 2) >> 2] = $f;
 return;
}

function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($this, $Comp) {
 $this = $this | 0;
 $Comp = $Comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0, $Comp$addr = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Comp$addr = sp;
 HEAP32[$Comp$addr >> 2] = $Comp;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$Comp) $retval$0 = 0; else {
  $1 = $this + 4 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  if (!(HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = $Comp; else {
   $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($0, $2, $Comp$addr) | 0;
   HEAP32[HEAP32[$1 >> 2] >> 2] = $call;
  }
  $7 = HEAP32[HEAP32[$this + 8 >> 2] >> 2] | 0;
  if ($7 | 0) HEAP8[$7 + 1 >> 0] = 0;
  $retval$0 = (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, $indirect$arg$temp$byval_copy2D2D = 0, $indirect$arg$temp2D2D = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $indirect$arg$temp$byval_copy2D2D = sp + 32 | 0;
 $__p$i = sp + 24 | 0;
 $ref$tmp = sp;
 $indirect$arg$temp2D2D = sp + 16 | 0;
 HEAP32[$indirect$arg$temp2D2D >> 2] = 195;
 HEAP32[$indirect$arg$temp2D2D + 4 >> 2] = 0;
 HEAP32[$indirect$arg$temp$byval_copy2D2D >> 2] = HEAP32[$indirect$arg$temp2D2D >> 2];
 HEAP32[$indirect$arg$temp$byval_copy2D2D + 4 >> 2] = HEAP32[$indirect$arg$temp2D2D + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($ref$tmp, $indirect$arg$temp$byval_copy2D2D, $this);
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$indirect$arg$temp$byval_copy2D2D >> 2] = $ref$tmp;
  HEAP32[$__p$i >> 2] = $indirect$arg$temp$byval_copy2D2D;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($this, $__p$i, 196);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $2 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $MemberType = $this + 12 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) ? !(__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) : 0) {} else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28937);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 $2 = HEAP32[$MemberType >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 255]($2, $s);
 STACKTOP = sp;
 return;
}

function _process_data_simple_main($cinfo, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 var $0 = 0, $2 = 0, $7 = 0, $arraydecay = 0, $arraydecay5$pre$phiZ2D = 0, $rowgroup_ctr = 0, $rowgroups_avail = 0;
 $0 = HEAP32[$cinfo + 448 >> 2] | 0;
 $rowgroup_ctr = $0 + 48 | 0;
 $rowgroups_avail = $0 + 52 | 0;
 $2 = HEAP32[$rowgroups_avail >> 2] | 0;
 do if ((HEAP32[$rowgroup_ctr >> 2] | 0) >>> 0 >= $2 >>> 0) {
  $arraydecay = $0 + 8 | 0;
  if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$cinfo + 452 >> 2] | 0) + 12 >> 2] & 63]($cinfo, $arraydecay) | 0)) return; else {
   HEAP32[$rowgroup_ctr >> 2] = 0;
   $7 = HEAP32[$rowgroups_avail >> 2] | 0;
   $arraydecay5$pre$phiZ2D = $arraydecay;
   break;
  }
 } else {
  $7 = $2;
  $arraydecay5$pre$phiZ2D = $0 + 8 | 0;
 } while (0);
 FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 456 >> 2] | 0) + 4 >> 2] & 7]($cinfo, $arraydecay5$pre$phiZ2D, $rowgroup_ctr, $7, $output_buf, $out_row_ctr, $out_rows_avail);
 return;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$2$ph = 0, $__len$addr$0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) $__fmtp$addr$2$ph = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$2$ph = $__fmtp$addr$0 + 1 | 0;
 }
 $__fmtp$addr$2 = $__fmtp$addr$2$ph;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$2 >> 0] = $0;
  $__fmtp$addr$2 = $__fmtp$addr$2 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 switch ($__flags & 74) {
 case 64:
  {
   $$sink = 111;
   break;
  }
 case 8:
  {
   $$sink = $__flags >>> 9 & 32 ^ 120;
   break;
  }
 default:
  $$sink = $__signd ? 100 : 117;
 }
 HEAP8[$__fmtp$addr$2 >> 0] = $$sink;
 return;
}

function _skip_input_data($cinfo, $num_bytes) {
 $cinfo = $cinfo | 0;
 $num_bytes = $num_bytes | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $bytes_in_buffer = 0, $fill_input_buffer = 0, $num_bytes$addr$0$lcssa = 0, $num_bytes$addr$012 = 0, $sub = 0;
 $0 = HEAP32[$cinfo + 24 >> 2] | 0;
 if (($num_bytes | 0) <= 0) return;
 $bytes_in_buffer = $0 + 4 | 0;
 $1 = HEAP32[$bytes_in_buffer >> 2] | 0;
 if (($1 | 0) < ($num_bytes | 0)) {
  $fill_input_buffer = $0 + 12 | 0;
  $2 = $1;
  $num_bytes$addr$012 = $num_bytes;
  while (1) {
   $sub = $num_bytes$addr$012 - $2 | 0;
   FUNCTION_TABLE_ii[HEAP32[$fill_input_buffer >> 2] & 127]($cinfo) | 0;
   $4 = HEAP32[$bytes_in_buffer >> 2] | 0;
   if (($sub | 0) > ($4 | 0)) {
    $2 = $4;
    $num_bytes$addr$012 = $sub;
   } else {
    $$lcssa = $4;
    $num_bytes$addr$0$lcssa = $sub;
    break;
   }
  }
 } else {
  $$lcssa = $1;
  $num_bytes$addr$0$lcssa = $num_bytes;
 }
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $num_bytes$addr$0$lcssa;
 HEAP32[$bytes_in_buffer >> 2] = $$lcssa - $num_bytes$addr$0$lcssa;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, 11120, 11152) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, 36687, 36695) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 do if ($0) {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   $number_to_static_ptr11 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
  if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 } else {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } while (0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $11 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $tmpcast$byval_copy, $11);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 if (HEAP8[$this + 12 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29658);
  HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 }
 $1 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 255]($agg$tmp2, $1);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($__sz >>> 0 >= 2) {
  $and$i$i = $__sz + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__sz;
   $__p$0 = $call$i$i$i;
   break;
  }
 } else {
  HEAP8[$this + 8 + 3 >> 0] = $__sz;
  $__p$0 = $this;
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm($__p$0, $__s, $__sz) | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__sz << 2) | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33431);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 28937);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $2 = 0, $5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0, $retval$0 = 0, $wpos = 0, $wpos18 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) >= 0 ? (___lockfile($f) | 0) != 0 : 0) {
  $conv11 = $c & 255;
  $conv12 = $c & 255;
  if (($conv12 | 0) != (HEAP8[$f + 75 >> 0] | 0) ? ($wpos18 = $f + 20 | 0, $5 = HEAP32[$wpos18 >> 2] | 0, $5 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[$wpos18 >> 2] = $5 + 1;
   HEAP8[$5 >> 0] = $conv11;
   $cond30 = $conv12;
  } else $cond30 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $retval$0 = $cond30;
 } else label = 3;
 do if ((label | 0) == 3) {
  $conv = $c & 255;
  $conv1 = $c & 255;
  if (($conv1 | 0) != (HEAP8[$f + 75 >> 0] | 0) ? ($wpos = $f + 20 | 0, $2 = HEAP32[$wpos >> 2] | 0, $2 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[$wpos >> 2] = $2 + 1;
   HEAP8[$2 >> 0] = $conv;
   $retval$0 = $conv1;
   break;
  }
  $retval$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($__n >>> 0 >= 2) {
  $and$i$i = $__n + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__n;
   $__p$0 = $call$i$i$i;
   break;
  }
 } else {
  HEAP8[$this + 8 + 3 >> 0] = $__n;
  $__p$0 = $this;
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw($__p$0, $__n, $__c) | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__n << 2) | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _jinit_arith_decoder($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0, $call11 = 0, $ci$028 = 0, $fixed_bin = 0, $mem = 0, $num_components = 0, dest = 0, stop = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 192) | 0;
 HEAP32[$cinfo + 468 >> 2] = $call;
 HEAP32[$call >> 2] = 176;
 HEAP32[$call + 8 >> 2] = 177;
 $fixed_bin = $call + 188 | 0;
 dest = $call + 60 | 0;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$fixed_bin >> 0] = 113;
 if (!(HEAP32[$cinfo + 224 >> 2] | 0)) return;
 $num_components = $cinfo + 36 | 0;
 $call11 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, HEAP32[$num_components >> 2] << 8) | 0;
 HEAP32[$cinfo + 160 >> 2] = $call11;
 if ((HEAP32[$num_components >> 2] | 0) <= 0) return;
 $ci$028 = 0;
 do {
  _memset($call11 + ($ci$028 << 8) | 0, -1, 256) | 0;
  $ci$028 = $ci$028 + 1 | 0;
 } while (($ci$028 | 0) < (HEAP32[$num_components >> 2] | 0));
 return;
}

function _prescan_quantize($cinfo, $input_buf, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 var $1 = 0, $11 = 0, $2 = 0, $arrayidx15 = 0, $col$017 = 0, $inc = 0, $ptr$018 = 0, $row$020 = 0;
 $1 = HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 24 >> 2] | 0;
 $2 = HEAP32[$cinfo + 112 >> 2] | 0;
 if (($num_rows | 0) < 1 | ($2 | 0) == 0) return;
 $row$020 = 0;
 do {
  $col$017 = $2;
  $ptr$018 = HEAP32[$input_buf + ($row$020 << 2) >> 2] | 0;
  while (1) {
   $arrayidx15 = (HEAP32[$1 + ((HEAPU8[$ptr$018 >> 0] | 0) >>> 3 << 2) >> 2] | 0) + ((HEAPU8[$ptr$018 + 1 >> 0] | 0) >>> 2 << 6) + ((HEAPU8[$ptr$018 + 2 >> 0] | 0) >>> 3 << 1) | 0;
   $11 = HEAP16[$arrayidx15 >> 1] | 0;
   $inc = $11 + 1 << 16 >> 16;
   HEAP16[$arrayidx15 >> 1] = $inc << 16 >> 16 == 0 ? $11 : $inc;
   $col$017 = $col$017 + -1 | 0;
   if (!$col$017) break; else $ptr$018 = $ptr$018 + 3 | 0;
  }
  $row$020 = $row$020 + 1 | 0;
 } while (($row$020 | 0) != ($num_rows | 0));
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31884);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $Ret = $this + 8 | 0;
 $0 = HEAP32[$Ret >> 2] | 0;
 if ($0 | 0 ? (FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S), !(__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$Ret >> 2] | 0, $S) | 0)) : 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) {
 $this = $this | 0;
 var $CVR = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $CVR = sp;
 HEAP32[$CVR >> 2] = 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 114) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 4);
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 86) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 2);
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 75) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 1);
 STACKTOP = sp;
 return HEAP32[$CVR >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43072) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 43040) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$sink = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $frm$addr$0 = 0, $nbytes$0 = 0, $nwchar_t$0 = 0, $sub$ptr$lhs$cast = 0;
 $sub$ptr$lhs$cast = $frm_end;
 $__l = $this + 8 | 0;
 $frm$addr$0 = $frm;
 $nbytes$0 = 0;
 $nwchar_t$0 = 0;
 L1 : while (1) {
  if (($frm$addr$0 | 0) == ($frm_end | 0) | $nwchar_t$0 >>> 0 >= $mx >>> 0) break;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbrlen($frm$addr$0, $sub$ptr$lhs$cast - $frm$addr$0 | 0, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1;
    break;
   }
  default:
   $$sink = $call$i;
  }
  $frm$addr$0 = $frm$addr$0 + $$sink | 0;
  $nbytes$0 = $$sink + $nbytes$0 | 0;
  $nwchar_t$0 = $nwchar_t$0 + 1 | 0;
 }
 return $nbytes$0 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $add$ptr = 0, $arrayinit$element = 0, $arrayinit$element2 = 0, $call = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $arrayinit$element = $fmt + 1 | 0;
 HEAP8[$arrayinit$element >> 0] = $__fmt;
 $arrayinit$element2 = $fmt + 2 | 0;
 HEAP8[$arrayinit$element2 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$arrayinit$element >> 0] = $__mod;
  HEAP8[$arrayinit$element2 >> 0] = $__fmt;
 }
 $call = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($__nb, HEAP32[$__ne >> 2] | 0) | 0;
 $add$ptr = $__nb + (_strftime_l($__nb | 0, $call | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0) | 0;
 HEAP32[$__ne >> 2] = $add$ptr;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $Out) {
 $this = $this | 0;
 $Out = $Out | 0;
 var $$sink = 0, $Id$0 = 0, $call = 0, $call13 = 0, $retval$0 = 0;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 if ($call << 24 >> 24 > 47 ? $call << 24 >> 24 < 58 | ($call + -65 & 255) < 26 : 0) {
  $Id$0 = 0;
  while (1) {
   $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
   if ($call13 << 24 >> 24 <= 47) break;
   if ($call13 << 24 >> 24 >= 58) if (($call13 + -65 & 255) < 26) $$sink = -55; else break; else $$sink = -48;
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $Id$0 = ($Id$0 * 36 | 0) + $$sink + ($call13 << 24 >> 24) | 0;
  }
  HEAP32[$Out >> 2] = $Id$0;
  $retval$0 = 0;
 } else $retval$0 = 1;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Out) {
 $this = $this | 0;
 $Out = $Out | 0;
 var $2 = 0, $add = 0, $retval$0 = 0, $sub = 0;
 HEAP32[$Out >> 2] = 0;
 L1 : do if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -48 & 255) > 9) $retval$0 = 1; else {
  $2 = 0;
  while (1) {
   if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -48 & 255) >= 10) {
    $retval$0 = 0;
    break L1;
   }
   HEAP32[$Out >> 2] = $2 * 10;
   $sub = ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) | 0) << 24 >> 24) + -48 | 0;
   $add = $sub + (HEAP32[$Out >> 2] | 0) | 0;
   HEAP32[$Out >> 2] = $add;
   $2 = $add;
  }
 } while (0);
 return $retval$0 | 0;
}

function _request_virt_sarray($cinfo, $pool_id, $pre_zero, $samplesperrow, $numrows, $maxaccess) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $pre_zero = $pre_zero | 0;
 $samplesperrow = $samplesperrow | 0;
 $numrows = $numrows | 0;
 $maxaccess = $maxaccess | 0;
 var $0 = 0, $1 = 0, $4 = 0, $pool_id$sink = 0, $virt_sarray_list = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if (($pool_id | 0) == 1) $pool_id$sink = 1; else {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 15;
  HEAP32[$1 + 24 >> 2] = $pool_id;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  $pool_id$sink = $pool_id;
 }
 $4 = _alloc_small($cinfo, $pool_id$sink, 128) | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = $numrows;
 HEAP32[$4 + 8 >> 2] = $samplesperrow;
 HEAP32[$4 + 12 >> 2] = $maxaccess;
 HEAP32[$4 + 32 >> 2] = $pre_zero;
 HEAP32[$4 + 40 >> 2] = 0;
 $virt_sarray_list = $0 + 68 | 0;
 HEAP32[$4 + 44 >> 2] = HEAP32[$virt_sarray_list >> 2];
 HEAP32[$virt_sarray_list >> 2] = $4;
 return $4 | 0;
}

function _request_virt_barray($cinfo, $pool_id, $pre_zero, $blocksperrow, $numrows, $maxaccess) {
 $cinfo = $cinfo | 0;
 $pool_id = $pool_id | 0;
 $pre_zero = $pre_zero | 0;
 $blocksperrow = $blocksperrow | 0;
 $numrows = $numrows | 0;
 $maxaccess = $maxaccess | 0;
 var $0 = 0, $1 = 0, $4 = 0, $pool_id$sink = 0, $virt_barray_list = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if (($pool_id | 0) == 1) $pool_id$sink = 1; else {
  $1 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$1 + 20 >> 2] = 15;
  HEAP32[$1 + 24 >> 2] = $pool_id;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
  $pool_id$sink = $pool_id;
 }
 $4 = _alloc_small($cinfo, $pool_id$sink, 128) | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = $numrows;
 HEAP32[$4 + 8 >> 2] = $blocksperrow;
 HEAP32[$4 + 12 >> 2] = $maxaccess;
 HEAP32[$4 + 32 >> 2] = $pre_zero;
 HEAP32[$4 + 40 >> 2] = 0;
 $virt_barray_list = $0 + 72 | 0;
 HEAP32[$4 + 44 >> 2] = HEAP32[$virt_barray_list >> 2];
 HEAP32[$virt_barray_list >> 2] = $4;
 return $4 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($call, $tmpcast$byval_copy, $10);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_110StringView10startsWithES0_($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 var $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call3 = 0, $call4 = 0, $retval$0 = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($Str) | 0;
 L1 : do if ($call >>> 0 > (__ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0) >>> 0) $retval$0 = 0; else {
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
  $__first1$addr$0$i$i = $call3;
  $__first2$addr$0$i$i = __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
  while (1) {
   if (($__first1$addr$0$i$i | 0) == ($call4 | 0)) {
    $retval$0 = 1;
    break L1;
   }
   if ((HEAP8[$__first1$addr$0$i$i >> 0] | 0) != (HEAP8[$__first2$addr$0$i$i >> 0] | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $__first1$addr$0$i$i = $__first1$addr$0$i$i + 1 | 0;
   $__first2$addr$0$i$i = $__first2$addr$0$i$i + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0 ? ($conv5 = $_c & 255, ($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) : 0) {
   HEAP32[$wpos >> 2] = $1 + 1;
   HEAP8[$1 >> 0] = $conv;
   $retval$0 = $conv5;
   break;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($this, $Lit) {
 $this = $this | 0;
 $Lit = $Lit | 0;
 var $Tmp = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $Tmp = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Tmp, $this, 1);
 if (!(__ZNK12_GLOBAL__N_110StringView5emptyEv($Tmp) | 0) ? __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0 : 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this, $Lit, $Tmp) | 0; else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _cat($file, $bufSize_p) {
 $file = $file | 0;
 $bufSize_p = $bufSize_p | 0;
 var $add = 0, $call = 0, $call1 = 0, $call12 = 0, $call6 = 0, $call8 = 0, $retval$0 = 0;
 do if ($file) {
  $call1 = _fopen($file, 21824) | 0;
  if ($call1) {
   _fseek($call1, 0, 2) | 0;
   $call6 = _ftell($call1) | 0;
   _fseek($call1, 0, 0) | 0;
   $add = $call6 + 1 | 0;
   $call8 = _malloc($add) | 0;
   if (!$call8) {
    _fclose($call1) | 0;
    $call12 = ___errno_location() | 0;
    HEAP32[$call12 >> 2] = 48;
    $retval$0 = 0;
    break;
   }
   if (!(_fread($call8, $call6, 1, $call1) | 0)) {
    _free($call8);
    _fclose($call1) | 0;
    $retval$0 = 0;
    break;
   }
   HEAP8[$call8 + $call6 >> 0] = 0;
   _fclose($call1) | 0;
   if (!$bufSize_p) $retval$0 = $call8; else {
    HEAP32[$bufSize_p >> 2] = $add;
    $retval$0 = $call8;
   }
  } else $retval$0 = 0;
 } else {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 28;
  $retval$0 = 0;
 } while (0);
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_vEUt_E($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $call = 0, $call3 = 0, $call5 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args1);
 $call3 = FUNCTION_TABLE_iii[$fn & 63]($call, $agg$tmp) | 0;
 HEAP32[$ref$tmp >> 2] = $call3;
 $call5 = __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call5 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($call, $tmpcast$byval_copy, $10);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($this, $Kind) {
 $this = $this | 0;
 $Kind = $Kind | 0;
 var $E = 0, $call2 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $E = sp;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 HEAP32[$E >> 2] = $call2;
 if (!$call2) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $Kind, $E) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__sz | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $agg$tmp$byval_copy, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $agg$tmp$byval_copy, $1);
 STACKTOP = sp;
 return $call | 0;
}

function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$pr = 0, $1 = 0, $3 = 0, $cond = 0, $incdec$ptr = 0, $retval$1 = 0, $rpos = 0, label = 0;
 do if (($c | 0) != -1) {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $rpos = $f + 4 | 0;
  $1 = HEAP32[$rpos >> 2] | 0;
  if (!$1) {
   ___toread($f) | 0;
   $$pr = HEAP32[$rpos >> 2] | 0;
   if ($$pr | 0) {
    $3 = $$pr;
    label = 6;
   }
  } else {
   $3 = $1;
   label = 6;
  }
  if ((label | 0) == 6 ? $3 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0 : 0) {
   $incdec$ptr = $3 + -1 | 0;
   HEAP32[$rpos >> 2] = $incdec$ptr;
   HEAP8[$incdec$ptr >> 0] = $c;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   if (!$cond) {
    $retval$1 = $c;
    break;
   }
   ___unlockfile($f);
   $retval$1 = $c;
   break;
  }
  if ($cond) {
   ___unlockfile($f);
   $retval$1 = -1;
  } else $retval$1 = -1;
 } else $retval$1 = -1; while (0);
 return $retval$1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 3) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 3) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($LHS, $RHS) {
 $LHS = $LHS | 0;
 $RHS = $RHS | 0;
 var $2 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call2 = 0, $call3 = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($LHS) | 0;
 L1 : do if (($call | 0) == (__ZNK12_GLOBAL__N_110StringView4sizeEv($RHS) | 0)) {
  $call2 = __ZNK12_GLOBAL__N_110StringView5beginEv($LHS) | 0;
  $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($LHS) | 0;
  $__first1$addr$0$i$i = $call2;
  $__first2$addr$0$i$i = __ZNK12_GLOBAL__N_110StringView5beginEv($RHS) | 0;
  while (1) {
   if (($__first1$addr$0$i$i | 0) == ($call3 | 0)) {
    $2 = 1;
    break L1;
   }
   if ((HEAP8[$__first1$addr$0$i$i >> 0] | 0) != (HEAP8[$__first2$addr$0$i$i >> 0] | 0)) {
    $2 = 0;
    break L1;
   }
   $__first1$addr$0$i$i = $__first1$addr$0$i$i + 1 | 0;
   $__first2$addr$0$i$i = $__first2$addr$0$i$i + 1 | 0;
  }
 } else $2 = 0; while (0);
 return $2 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) <= 1023) if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $cmp11 = ($n | 0) < -2044;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $n + 1022 | 0;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 } else {
  $mul = $x * 8988465674311579538646525.0e283;
  $cmp1 = ($n | 0) > 2046;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $n + -1023 | 0;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__n;
  $__p$0 = $this;
 } else {
  $and$i$i = $__n + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc($__p$0, $__n, $__c) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__n | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 1) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($1 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($1 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 1) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($1 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($1 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 20 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args1;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, 0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $call1 = 0, $call4 = 0, $call8 = 0, $or = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 if (_strchr(27813, HEAP8[$mode >> 0] | 0) | 0) {
  $or = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $or;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $call4 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($call4 | 0) >= 0) {
   $call8 = ___fdopen($call4, $mode) | 0;
   if (!$call8) {
    ___wasi_fd_close($call4 | 0) | 0;
    $retval$0 = 0;
   } else $retval$0 = $call8;
  } else $retval$0 = 0;
 } else {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 28;
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($agg$tmp, HEAP32[$args1 >> 2] | 0);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function _jpeg_read_header($cinfo, $require_image) {
 $cinfo = $cinfo | 0;
 $require_image = $require_image | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $2 = 0, $5 = 0, $call = 0, $retcode$0 = 0;
 $0 = HEAP32[$cinfo + 20 >> 2] | 0;
 if (($0 & -2 | 0) != 200) {
  $2 = HEAP32[$cinfo >> 2] | 0;
  HEAP32[$2 + 20 >> 2] = 21;
  HEAP32[$2 + 24 >> 2] = $0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo >> 2] >> 2] & 255]($cinfo);
 }
 $call = _jpeg_consume_input($cinfo) | 0;
 switch ($call | 0) {
 case 1:
  {
   $retcode$0 = 1;
   return $retcode$0 | 0;
  }
 case 2:
  {
   if (!$require_image) $$pre$phiZ2D = $cinfo; else {
    $5 = HEAP32[$cinfo >> 2] | 0;
    HEAP32[$5 + 20 >> 2] = 53;
    FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($cinfo);
    $$pre$phiZ2D = $cinfo;
   }
   _jpeg_abort($$pre$phiZ2D);
   $retcode$0 = 2;
   return $retcode$0 | 0;
  }
 default:
  {
   $retcode$0 = $call;
   return $retcode$0 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP8[$__lo1$addr$0 >> 0] | 0;
  $1 = HEAP8[$__lo2$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 < $1 << 24 >> 24) {
   $retval$0 = -1;
   break;
  }
  if ($1 << 24 >> 24 < $0 << 24 >> 24) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 1 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 1 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $12 = 0, $13 = 0, $18 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0;
 if (!(HEAP32[$f >> 2] & 128)) $4 = 1; else $4 = (HEAP32[$f + 20 >> 2] | 0) >>> 0 > (HEAP32[$f + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $5 = FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, 0, 0, $4) | 0;
 $6 = getTempRet0() | 0;
 if (($6 | 0) < 0) {
  $20 = $6;
  $21 = $5;
 } else {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $12 = _i64Subtract($5 | 0, $6 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = getTempRet0() | 0;
  $sub$ptr$sub6 = (HEAP32[$f + 20 >> 2] | 0) - (HEAP32[$f + 28 >> 2] | 0) | 0;
  $18 = _i64Add($12 | 0, $13 | 0, $sub$ptr$sub6 | 0, (($sub$ptr$sub6 | 0) < 0) << 31 >> 31 | 0) | 0;
  $20 = getTempRet0() | 0;
  $21 = $18;
 }
 setTempRet0($20 | 0);
 return $21 | 0;
}

function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $10 = 0, $11 = 0, $call = 0.0, $f = 0, $rend = 0, $rpos = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 $rend = $f + 8 | 0;
 HEAP32[$rend >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $call = +___floatscan($f, $prec, 1);
 $0 = $f + 120 | 0;
 $sub$ptr$sub = (HEAP32[$rpos >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
 $10 = _i64Add(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
 $11 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = ($10 | 0) == 0 & ($11 | 0) == 0 ? $s : $s + $10 | 0;
 STACKTOP = sp;
 return +$call;
}

function _arUtilReplaceExt($filename, $n, $ext) {
 $filename = $filename | 0;
 $n = $n | 0;
 $ext = $ext | 0;
 var $add = 0, $arrayidx$le = 0, $i$0 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $retval$0 = 0, label = 0;
 $i$0 = 0;
 $j$0 = 0;
 L1 : while (1) {
  switch (HEAP8[$filename + $i$0 >> 0] | 0) {
  case 0:
   {
    break L1;
    break;
   }
  case 46:
   {
    $j$1 = $i$0;
    break;
   }
  default:
   $j$1 = $j$0;
  }
  $i$0 = $i$0 + 1 | 0;
  $j$0 = $j$1;
 }
 $arrayidx$le = $filename + $i$0 | 0;
 $add = (_strlen($ext) | 0) + 2 | 0;
 if (!$j$0) if (($add + $i$0 | 0) > ($n | 0)) $retval$0 = -1; else {
  HEAP8[$arrayidx$le >> 0] = 46;
  $j$2 = $i$0;
  label = 9;
 } else if (($add + $j$0 | 0) > ($n | 0)) $retval$0 = -1; else {
  $j$2 = $j$0;
  label = 9;
 }
 if ((label | 0) == 9) {
  HEAP8[$filename + ($j$2 + 1) >> 0] = 0;
  _strcat($filename, $ext) | 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _jinit_inverse_dct($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0, $call6 = 0, $ci$017 = 0, $compptr$018 = 0, $cur_method = 0, $mem = 0, $num_components = 0;
 $mem = $cinfo + 4 | 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 84) | 0;
 HEAP32[$cinfo + 472 >> 2] = $call;
 HEAP32[$call >> 2] = 175;
 $num_components = $cinfo + 36 | 0;
 if ((HEAP32[$num_components >> 2] | 0) <= 0) return;
 $cur_method = $call + 44 | 0;
 $ci$017 = 0;
 $compptr$018 = HEAP32[$cinfo + 216 >> 2] | 0;
 while (1) {
  $call6 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 1, 256) | 0;
  HEAP32[$compptr$018 + 84 >> 2] = $call6;
  _memset($call6 | 0, 0, 256) | 0;
  HEAP32[$cur_method + ($ci$017 << 2) >> 2] = -1;
  $ci$017 = $ci$017 + 1 | 0;
  if (($ci$017 | 0) >= (HEAP32[$num_components >> 2] | 0)) break; else $compptr$018 = $compptr$018 + 88 | 0;
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function ___strerror_l($e, $loc) {
 $e = $e | 0;
 $loc = $loc | 0;
 var $i$012 = 0, $i$111 = 0, $i$111$ph = 0, $inc = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, label = 0, $s$1$looptemp = 0;
 $i$012 = 0;
 while (1) {
  if ((HEAPU8[4736 + $i$012 >> 0] | 0) == ($e | 0)) {
   label = 4;
   break;
  }
  $inc = $i$012 + 1 | 0;
  if (($inc | 0) == 87) {
   $i$111$ph = 87;
   label = 5;
   break;
  } else $i$012 = $inc;
 }
 if ((label | 0) == 4) if (!$i$012) $s$0$lcssa = 4832; else {
  $i$111$ph = $i$012;
  label = 5;
 }
 if ((label | 0) == 5) {
  $i$111 = $i$111$ph;
  $s$010 = 4832;
  while (1) {
   $s$1 = $s$010;
   do {
    $s$1$looptemp = $s$1;
    $s$1 = $s$1 + 1 | 0;
   } while ((HEAP8[$s$1$looptemp >> 0] | 0) != 0);
   $i$111 = $i$111 + -1 | 0;
   if (!$i$111) {
    $s$0$lcssa = $s$1;
    break;
   } else $s$010 = $s$1;
  }
 }
 return ___lctrans($s$0$lcssa, HEAP32[$loc + 20 >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26locale5__impD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__shared_owners_$i = 0, $facets_ = 0, $i$0 = 0;
 HEAP32[$this >> 2] = 20908;
 $facets_ = $this + 8 | 0;
 $__end_$i = $this + 12 | 0;
 $i$0 = 0;
 while (1) {
  $1 = HEAP32[$facets_ >> 2] | 0;
  if ($i$0 >>> 0 >= (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2 >>> 0) break;
  $3 = HEAP32[$1 + ($i$0 << 2) >> 2] | 0;
  if ($3 | 0 ? ($__shared_owners_$i = $3 + 4 | 0, $4 = HEAP32[$__shared_owners_$i >> 2] | 0, HEAP32[$__shared_owners_$i >> 2] = $4 + -1, ($4 | 0) == 0) : 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 255]($3);
  $i$0 = $i$0 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($facets_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($this, $ExprList_, $Type_, $InitList_, $IsGlobal_, $IsArray_) {
 $this = $this | 0;
 $ExprList_ = $ExprList_ | 0;
 $Type_ = $Type_ | 0;
 $InitList_ = $InitList_ | 0;
 $IsGlobal_ = $IsGlobal_ | 0;
 $IsArray_ = $IsArray_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 51, 1, 1, 1);
 HEAP32[$this >> 2] = 16236;
 $0 = $ExprList_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Type_;
 $10 = $InitList_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 20 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP8[$this + 28 >> 0] = $IsGlobal_ & 1;
 HEAP8[$this + 29 >> 0] = $IsArray_ & 1;
 return;
}

function _arPattLoad($pattHandle, $filename) {
 $pattHandle = $pattHandle | 0;
 $filename = $filename | 0;
 var $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $patno$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $call = _cat($filename, 0) | 0;
 if (!$call) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _arLog(0, 3, 21525, $vararg_buffer);
  $call1 = ___errno_location() | 0;
  $call2 = _strerror(HEAP32[$call1 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 43974;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $call2;
  _arLog(0, 3, 21896, $vararg_buffer1);
  $patno$0 = -1;
 } else {
  $call3 = _arPattLoadFromBuffer($pattHandle, $call) | 0;
  _free($call);
  $patno$0 = $call3;
 }
 STACKTOP = sp;
 return $patno$0 | 0;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP32[$__lo1$addr$0 >> 2] | 0;
  $1 = HEAP32[$__lo2$addr$0 >> 2] | 0;
  if (($0 | 0) < ($1 | 0)) {
   $retval$0 = -1;
   break;
  }
  if (($1 | 0) < ($0 | 0)) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 4 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 4 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0, (HEAP32[$wpos >> 2] | 0) == 0) : 0) $retval$0 = -1; else {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $sub$ptr$sub = $4 - $5 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, $sub$ptr$sub, (($sub$ptr$sub | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $1 = 0, $retval$0 = 0, label = 0;
 L1 : do switch ((HEAP32[$__iob + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   $1 = HEAP8[$__nb >> 0] | 0;
   switch ($1 << 24 >> 24) {
   case 43:
   case 45:
    {
     $retval$0 = $__nb + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($__ne - $__nb | 0) > 1 & $1 << 24 >> 24 == 48) {
    switch (HEAP8[$__nb + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $retval$0 = $__nb + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $retval$0 = $__ne;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $retval$0 = $__nb;
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($agg$result, $this, $S) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $S = $S | 0;
 var $$in = 0, $0 = 0, $1 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $second$i$i = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 HEAP32[$agg$result >> 2] = $0;
 $second$i$i = $agg$result + 4 | 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 HEAP32[$second$i$i >> 2] = $1;
 $$in = $1;
 $7 = $0;
 while (1) {
  $call = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$in >> 2] | 0) + 12 >> 2] & 63]($$in, $S) | 0;
  if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call) | 0) << 24 >> 24 != 12) break;
  $5 = HEAP32[$call + 8 >> 2] | 0;
  HEAP32[$second$i$i >> 2] = $5;
  $6 = HEAP32[$call + 12 >> 2] | 0;
  $8 = ($6 | 0) < ($7 | 0) ? $6 : $7;
  HEAP32[$agg$result >> 2] = $8;
  $$in = $5;
  $7 = $8;
 }
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $call3 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   $call3 = FUNCTION_TABLE_iii[$2 & 63]($this, $call2) | 0;
   if (($call3 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 4 | 0;
  }
 } else $retval$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _jcopy_sample_rows($input_array, $source_row, $output_array, $dest_row, $num_rows, $num_cols) {
 $input_array = $input_array | 0;
 $source_row = $source_row | 0;
 $output_array = $output_array | 0;
 $dest_row = $dest_row | 0;
 $num_rows = $num_rows | 0;
 $num_cols = $num_cols | 0;
 var $input_array$addr$010 = 0, $output_array$addr$09 = 0, $row$011 = 0;
 if (($num_rows | 0) <= 0) return;
 $input_array$addr$010 = $input_array + ($source_row << 2) | 0;
 $output_array$addr$09 = $output_array + ($dest_row << 2) | 0;
 $row$011 = $num_rows;
 while (1) {
  _memcpy(HEAP32[$output_array$addr$09 >> 2] | 0, HEAP32[$input_array$addr$010 >> 2] | 0, $num_cols | 0) | 0;
  if (($row$011 | 0) > 1) {
   $input_array$addr$010 = $input_array$addr$010 + 4 | 0;
   $output_array$addr$09 = $output_array$addr$09 + 4 | 0;
   $row$011 = $row$011 + -1 | 0;
  } else break;
 }
 return;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $call3 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   $call3 = FUNCTION_TABLE_iii[$2 & 63]($this, $call2) | 0;
   if (($call3 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 1 | 0;
  }
 } else $retval$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__allocated_$i$i = 0, $__value_$i1$i = 0, $add$ptr = 0, $cond = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if ($__cap) {
  $__allocated_$i$i = $__a + 112 | 0;
  if ($__cap >>> 0 < 29 & (HEAP8[$__allocated_$i$i >> 0] | 0) == 0) {
   HEAP8[$__allocated_$i$i >> 0] = 1;
   $cond = $__a;
   break;
  } else {
   $cond = __Znwm($__cap << 2) | 0;
   break;
  }
 } else $cond = 0; while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $s);
 $2 = $this + 12 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $2 = 0, $5 = 0, $9 = 0, $call1 = 0, $call18 = 0, $cond = 0, $or = 0, $tobool = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 ___unlist_locked_file($f);
 $tobool = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$tobool) {
  $call1 = ___ofl_lock() | 0;
  $2 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($2 | 0) HEAP32[$2 + 56 >> 2] = HEAP32[$$pre >> 2];
  $5 = HEAP32[$$pre >> 2] | 0;
  if ($5 | 0) HEAP32[$5 + 52 >> 2] = $2;
  if ((HEAP32[$call1 >> 2] | 0) == ($f | 0)) HEAP32[$call1 >> 2] = $5;
  ___ofl_unlock();
 }
 $call18 = _fflush($f) | 0;
 $or = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 127]($f) | 0 | $call18;
 $9 = HEAP32[$f + 96 >> 2] | 0;
 if ($9 | 0) _free($9);
 if ($tobool) {
  if ($cond | 0) ___unlockfile($f);
 } else _free($f);
 return $or | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$result, $this, $FromPosition) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $FromPosition = $FromPosition | 0;
 var $Names = 0, $add$ptr = 0;
 $Names = $this + 8 | 0;
 $add$ptr = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($Names) | 0) + ($FromPosition << 2) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result, $this, $add$ptr, __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($Names) | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($Names, $FromPosition);
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call3 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  $call3 = ___errno_location() | 0;
  HEAP32[$call3 >> 2] = 48;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $frombool = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 18508;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 43352) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $frombool;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $frombool = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 18572;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 43344) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $frombool;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30671);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($this, $Ret_, $Name_, $Params_, $Attrs_, $CVQuals_, $RefQual_) {
 $this = $this | 0;
 $Ret_ = $Ret_ | 0;
 $Name_ = $Name_ | 0;
 $Params_ = $Params_ | 0;
 $Attrs_ = $Attrs_ | 0;
 $CVQuals_ = $CVQuals_ | 0;
 $RefQual_ = $RefQual_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 18, 0, 1, 0);
 HEAP32[$this >> 2] = 18040;
 HEAP32[$this + 8 >> 2] = $Ret_;
 HEAP32[$this + 12 >> 2] = $Name_;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 24 >> 2] = $Attrs_;
 HEAP32[$this + 28 >> 2] = $CVQuals_;
 HEAP8[$this + 32 >> 0] = $RefQual_;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30671);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30671);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this, $First_, $Last_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 HEAP32[$this >> 2] = $First_;
 HEAP32[$this + 4 >> 2] = $Last_;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this + 8 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this + 148 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this + 288 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this + 332 | 0);
 HEAP8[$this + 360 >> 0] = 1;
 HEAP8[$this + 361 >> 0] = 0;
 HEAP8[$this + 362 >> 0] = 0;
 __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this + 368 | 0);
 return;
}

function __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 26, $fn | 0);
 STACKTOP = sp;
 return;
}

function _strtok($s, $sep) {
 $s = $s | 0;
 $sep = $sep | 0;
 var $0 = 0, $add$ptr = 0, $add$ptr6 = 0, $retval$0 = 0, $s$addr$0 = 0, label = 0;
 if (!$s) {
  $0 = HEAP32[10487] | 0;
  if (!$0) $retval$0 = 0; else {
   $s$addr$0 = $0;
   label = 3;
  }
 } else {
  $s$addr$0 = $s;
  label = 3;
 }
 do if ((label | 0) == 3) {
  $add$ptr = $s$addr$0 + (_strspn($s$addr$0, $sep) | 0) | 0;
  if (!(HEAP8[$add$ptr >> 0] | 0)) {
   HEAP32[10487] = 0;
   $retval$0 = 0;
   break;
  }
  $add$ptr6 = $add$ptr + (_strcspn($add$ptr, $sep) | 0) | 0;
  HEAP32[10487] = $add$ptr6;
  if (!(HEAP8[$add$ptr6 >> 0] | 0)) {
   HEAP32[10487] = 0;
   $retval$0 = $add$ptr;
   break;
  } else {
   HEAP32[10487] = $add$ptr6 + 1;
   HEAP8[$add$ptr6 >> 0] = 0;
   $retval$0 = $add$ptr;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _jpeg_idct_2x1($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $1 = 0, $add = 0, $add$ptr = 0, $add$ptr1 = 0, $mul7 = 0;
 $add$ptr = (HEAP32[$cinfo + 336 >> 2] | 0) + -384 | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add$ptr1 = (HEAP32[$output_buf >> 2] | 0) + $output_col | 0;
 $add = (Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0) + 4100 | 0;
 $mul7 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, HEAP16[$coef_block + 2 >> 1] | 0) | 0;
 HEAP8[$add$ptr1 >> 0] = HEAP8[$add$ptr + (($mul7 + $add | 0) >>> 3 & 1023) >> 0] | 0;
 HEAP8[$add$ptr1 + 1 >> 0] = HEAP8[$add$ptr + (($add - $mul7 | 0) >>> 3 & 1023) >> 0] | 0;
 return;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 18636;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 $call = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[$this + 48 >> 2] = $call;
 HEAP8[$this + 52 >> 0] = 0;
 $0 = HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 FUNCTION_TABLE_vii[$0 & 255]($this, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 18700;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 $call = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$this + 48 >> 2] = $call;
 HEAP8[$this + 52 >> 0] = 0;
 $0 = HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 FUNCTION_TABLE_vii[$0 & 255]($this, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($this, $Ret_, $Params_, $CVQuals_, $RefQual_, $ExceptionSpec_) {
 $this = $this | 0;
 $Ret_ = $Ret_ | 0;
 $Params_ = $Params_ | 0;
 $CVQuals_ = $CVQuals_ | 0;
 $RefQual_ = $RefQual_ | 0;
 $ExceptionSpec_ = $ExceptionSpec_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 15, 0, 1, 0);
 HEAP32[$this >> 2] = 17820;
 HEAP32[$this + 8 >> 2] = $Ret_;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $CVQuals_;
 HEAP8[$this + 24 >> 0] = $RefQual_;
 HEAP32[$this + 28 >> 2] = $ExceptionSpec_;
 return;
}

function _jpeg_idct_1x2($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $1 = 0, $add = 0, $add$ptr = 0, $mul5 = 0;
 $add$ptr = (HEAP32[$cinfo + 336 >> 2] | 0) + -384 | 0;
 $1 = HEAP32[$compptr + 84 >> 2] | 0;
 $add = (Math_imul(HEAP32[$1 >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0) + 4100 | 0;
 $mul5 = Math_imul(HEAP32[$1 + 32 >> 2] | 0, HEAP16[$coef_block + 16 >> 1] | 0) | 0;
 HEAP8[(HEAP32[$output_buf >> 2] | 0) + $output_col >> 0] = HEAP8[$add$ptr + (($mul5 + $add | 0) >>> 3 & 1023) >> 0] | 0;
 HEAP8[(HEAP32[$output_buf + 4 >> 2] | 0) + $output_col >> 0] = HEAP8[$add$ptr + (($add - $mul5 | 0) >>> 3 & 1023) >> 0] | 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33367);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 $3 = $2;
 do if ($2 | 0) {
  $4 = HEAP32[$this + 16 >> 2] | 0;
  if (($2 | 0) == ($4 | 0)) {
   HEAP8[$4 + 112 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $3 | 0);
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41280] | 0) == 0 ? ___cxa_guard_acquire(41280) | 0 : 0) {
  $arrayctor$cur = 40656;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 40680);
  ___cxa_guard_release(41280);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40656, 19424) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(40668, 19436) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if ((HEAP8[41200] | 0) == 0 ? ___cxa_guard_acquire(41200) | 0 : 0) {
  $arrayctor$cur = 40160;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 40184);
  ___cxa_guard_release(41200);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40160, 36426) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(40172, 36429) | 0;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43080) | 0;
 $call$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
 HEAP32[$__thousands_sep >> 2] = $call$i3;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 255]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43056) | 0;
 $call$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
 HEAP8[$__thousands_sep >> 0] = $call$i3;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 255]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 33650);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $call = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = $this;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 7]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function _pad_418($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _jpeg_stdio_src($cinfo, $infile) {
 $cinfo = $cinfo | 0;
 $infile = $infile | 0;
 var $0 = 0, $5 = 0, $call = 0, $call6 = 0, $mem = 0, $src1 = 0;
 $src1 = $cinfo + 24 | 0;
 $0 = HEAP32[$src1 >> 2] | 0;
 if (!$0) {
  $mem = $cinfo + 4 | 0;
  $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 0, 40) | 0;
  HEAP32[$src1 >> 2] = $call;
  $call6 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$mem >> 2] >> 2] & 31]($cinfo, 0, 4096) | 0;
  HEAP32[$call + 32 >> 2] = $call6;
  $5 = HEAP32[$src1 >> 2] | 0;
 } else $5 = $0;
 HEAP32[$5 + 8 >> 2] = 184;
 HEAP32[$5 + 12 >> 2] = 68;
 HEAP32[$5 + 16 >> 2] = 130;
 HEAP32[$5 + 20 >> 2] = 57;
 HEAP32[$5 + 24 >> 2] = 185;
 HEAP32[$5 + 28 >> 2] = $infile;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 >> 2] = 0;
 return;
}

function _getc($f) {
 $f = $f | 0;
 var $1 = 0, $4 = 0, $cond15 = 0, $retval$0 = 0, $rpos = 0, $rpos4 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) >= 0 ? (___lockfile($f) | 0) != 0 : 0) {
  $rpos4 = $f + 4 | 0;
  $4 = HEAP32[$rpos4 >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$rpos4 >> 2] = $4 + 1;
   $cond15 = HEAPU8[$4 >> 0] | 0;
  } else $cond15 = ___uflow($f) | 0;
  ___unlockfile($f);
  $retval$0 = $cond15;
 } else label = 3;
 do if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $retval$0 = HEAPU8[$1 >> 0] | 0;
   break;
  } else {
   $retval$0 = ___uflow($f) | 0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 7]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function _strtox_617($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $f = 0, $rpos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $2 = $f + 8 | 0;
 HEAP32[$2 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $3 = ___intscan($f, $base, 1, $0, $1) | 0;
 $4 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$rpos >> 2] | 0) + (HEAP32[$f + 120 >> 2] | 0) - (HEAP32[$2 >> 2] | 0));
 setTempRet0($4 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28676);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28686);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28686);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 32462);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 32476);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 32490);
   break;
  }
 default:
  {}
 }
 return;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43352) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $call$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($call$i) | 0;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = $call$i1;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 127]($1) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $frombool;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(35793); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43344) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $call$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($call$i) | 0;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = $call$i1;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 127]($1) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $frombool;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(35793); else return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 28939);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29658);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31291);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28676);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28686);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28699);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28706);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28714);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 28722);
   break;
  }
 default:
  {}
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $2 = 0, $offset_to_base$0 = 0, $shr = 0;
 $$pre = HEAP32[$this + 4 >> 2] | 0;
 if ($adjustedPtr) {
  $shr = $$pre >> 8;
  if (!($$pre & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 } else $offset_to_base$0 = 0;
 $2 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, $info, $adjustedPtr + $offset_to_base$0 | 0, ($$pre & 2 | 0) == 0 ? 2 : $path_below);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 30671);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_($__first, $__last, $__value_, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__value_ = $__value_ | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $__first$addr$0 = 0, $__len$0 = 0, $add$ptr$i$i = 0, $cmp$i = 0, $div$i = 0;
 $0 = HEAP32[$__value_ >> 2] | 0;
 $__first$addr$0 = $__first;
 $__len$0 = $__last - $__first >> 2;
 while (1) {
  if (!$__len$0) break;
  $div$i = $__len$0 >>> 1;
  $add$ptr$i$i = $__first$addr$0 + ($div$i << 2) | 0;
  $cmp$i = (HEAP32[$add$ptr$i$i >> 2] | 0) >>> 0 < $0 >>> 0;
  $__first$addr$0 = $cmp$i ? $add$ptr$i$i + 4 | 0 : $__first$addr$0;
  $__len$0 = $cmp$i ? $__len$0 + -1 - $div$i | 0 : $div$i;
 }
 return $__first$addr$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 32094);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 31211);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 29762);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 if (!(HEAP8[$this + 8 >> 0] | 0)) __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 37999); else __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 38005);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($this, $Prefix_, $Infix_, $Postfix_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Infix_ = $Infix_ | 0;
 $Postfix_ = $Postfix_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 47, 1, 1, 1);
 HEAP32[$this >> 2] = 16016;
 $0 = $Prefix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Infix_;
 $10 = $Postfix_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 20 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function _merged_1v_upsample($cinfo, $input_buf, $in_row_group_ctr, $in_row_groups_avail, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $in_row_group_ctr = $in_row_group_ctr | 0;
 $in_row_groups_avail = $in_row_groups_avail | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$cinfo + 476 >> 2] | 0) + 12 >> 2] & 31]($cinfo, $input_buf, HEAP32[$in_row_group_ctr >> 2] | 0, $output_buf + (HEAP32[$out_row_ctr >> 2] << 2) | 0);
 HEAP32[$out_row_ctr >> 2] = (HEAP32[$out_row_ctr >> 2] | 0) + 1;
 HEAP32[$in_row_group_ctr >> 2] = (HEAP32[$in_row_group_ctr >> 2] | 0) + 1;
 return;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $0 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $spec$select = 0, $spec$select13 = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0;
 $tobool = (_strchr($mode, 43) | 0) == 0;
 $0 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $tobool ? $0 << 24 >> 24 != 114 & 1 : 2;
 $tobool6 = (_strchr($mode, 120) | 0) == 0;
 $spec$select = $tobool6 ? $flags$0 : $flags$0 | 128;
 $tobool10 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $tobool10 ? $spec$select : $spec$select | 524288;
 $spec$select13 = $0 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $0 << 24 >> 24 == 119 ? $spec$select13 | 512 : $spec$select13;
 return ($0 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0, $call3 = 0, $call4 = 0, $call5 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args) | 0;
 $call3 = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args1) | 0;
 $call4 = FUNCTION_TABLE_iii[$fn & 63]($call, $call3) | 0;
 HEAP32[$ref$tmp >> 2] = $call4;
 $call5 = __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($ref$tmp) | 0;
 STACKTOP = sp;
 return $call5 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result, $this, $begin, $end) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $begin = $begin | 0;
 $end = $end | 0;
 var $call = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0;
 $sub$ptr$sub = $end - $begin | 0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $call = __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this + 368 | 0, $sub$ptr$div) | 0;
 if ($sub$ptr$sub | 0) _memmove($call | 0, $begin | 0, $sub$ptr$sub | 0) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($agg$result, $call, $sub$ptr$div);
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $retval$0$i$i$in = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 128 | 0;
 if ($__n >>> 0 < 29 & (HEAP8[$0 >> 0] | 0) == 0) {
  HEAP8[$0 >> 0] = 1;
  $retval$0$i$i$in = $this + 16 | 0;
 } else $retval$0$i$i$in = __Znwm($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $retval$0$i$i$in;
 HEAP32[$this >> 2] = $retval$0$i$i$in;
 HEAP32[$this + 8 >> 2] = $retval$0$i$i$in + ($__n << 2);
 return;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$018 = 0, $dec14$in = 0, $n$addr$117 = 0, $s$addr$016 = 0;
 if ($d - $s >> 2 >>> 0 >= $n >>> 0) {
  if ($n | 0) {
   $d$addr$018 = $d;
   $n$addr$117 = $n;
   $s$addr$016 = $s;
   while (1) {
    $n$addr$117 = $n$addr$117 + -1 | 0;
    HEAP32[$d$addr$018 >> 2] = HEAP32[$s$addr$016 >> 2];
    if (!$n$addr$117) break; else {
     $d$addr$018 = $d$addr$018 + 4 | 0;
     $s$addr$016 = $s$addr$016 + 4 | 0;
    }
   }
  }
 } else {
  $dec14$in = $n;
  do {
   $dec14$in = $dec14$in + -1 | 0;
   HEAP32[$d + ($dec14$in << 2) >> 2] = HEAP32[$s + ($dec14$in << 2) >> 2];
  } while (($dec14$in | 0) != 0);
 }
 return $d | 0;
}

function __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($this) {
 $this = $this | 0;
 var $1 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 __ZN12_GLOBAL__N_112OutputStreampLEc(HEAP32[$this >> 2] | 0, 40);
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($ref$tmp, HEAP32[$1 + 8 >> 2] | 0);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($ref$tmp, HEAP32[$this >> 2] | 0);
 __ZN12_GLOBAL__N_112OutputStreampLEc(HEAP32[$this >> 2] | 0, 41);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp3 = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 7) {
  __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($ref$tmp, $0);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp3, 28998);
  $1 = __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($ref$tmp, $ref$tmp3) | 0;
 } else $1 = 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($this, $IsLeftFold_, $OperatorName_, $Pack_, $Init_) {
 $this = $this | 0;
 $IsLeftFold_ = $IsLeftFold_ | 0;
 $OperatorName_ = $OperatorName_ | 0;
 $Pack_ = $Pack_ | 0;
 $Init_ = $Init_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 57, 1, 1, 1);
 HEAP32[$this >> 2] = 16984;
 HEAP32[$this + 8 >> 2] = $Pack_;
 HEAP32[$this + 12 >> 2] = $Init_;
 $0 = $OperatorName_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP8[$this + 24 >> 0] = $IsLeftFold_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $args, $args1, $args3, $args5, $args7, $args9) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 $args9 = $args9 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7, $args9) | 0;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $call = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 >= 128) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] & $m) << 16 >> 16)) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 255]($1, $S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0, $spec$select = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $spec$select; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 255]($1, $S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function _ar2FreeImageSet($imageSet) {
 $imageSet = $imageSet | 0;
 var $0 = 0, $1 = 0, $3 = 0, $i$0 = 0, $retval$0 = 0;
 if (($imageSet | 0) != 0 ? ($0 = HEAP32[$imageSet >> 2] | 0, ($0 | 0) != 0) : 0) {
  $1 = $0;
  $i$0 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if (($i$0 | 0) >= (HEAP32[$1 + 4 >> 2] | 0)) break;
   _free(HEAP32[HEAP32[$3 + ($i$0 << 2) >> 2] >> 2] | 0);
   _free(HEAP32[(HEAP32[HEAP32[$imageSet >> 2] >> 2] | 0) + ($i$0 << 2) >> 2] | 0);
   $1 = HEAP32[$imageSet >> 2] | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  _free($3);
  _free(HEAP32[$imageSet >> 2] | 0);
  HEAP32[$imageSet >> 2] = 0;
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function _saveSetjmp(env, label, table, size) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 size = size | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < (size | 0)) {
  if (!(HEAP32[table + (i << 3) >> 2] | 0)) {
   HEAP32[table + (i << 3) >> 2] = setjmpId;
   HEAP32[table + ((i << 3) + 4) >> 2] = label;
   HEAP32[table + ((i << 3) + 8) >> 2] = 0;
   setTempRet0(size | 0);
   return table | 0;
  }
  i = i + 1 | 0;
 }
 size = size * 2 | 0;
 table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0;
 table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0;
 setTempRet0(size | 0);
 return table | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0, $cond = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 12 >> 2] & 63]($call3, $S) | 0;
 } else $cond = $this;
 return $cond | 0;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 if (!(___wasi_syscall_ret(___wasi_fd_seek(HEAP32[$f + 60 >> 2] | 0, $0 | 0, $1 | 0, $whence & 255 | 0, $ret | 0) | 0) | 0)) {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 } else {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function _sbrk($increment) {
 $increment = $increment | 0;
 var $0 = 0, $add = 0, $call = 0, $call1 = 0, $call7 = 0, $retval$2 = 0;
 $call = _emscripten_get_sbrk_ptr() | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $add = $0 + $increment | 0;
 if (($add | 0) < 0) {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 if ($add >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0 ? (_emscripten_resize_heap($add | 0) | 0) == 0 : 0) {
  $call7 = ___errno_location() | 0;
  HEAP32[$call7 >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 HEAP32[$call >> 2] = $add;
 $retval$2 = $0;
 return $retval$2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($this, $Params_, $Count_) {
 $this = $this | 0;
 $Params_ = $Params_ | 0;
 $Count_ = $Count_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 40, 1, 1, 1);
 HEAP32[$this >> 2] = 17248;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $Count_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 16 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 27, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $1 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $call$i$i1 = 0, $call$i2 = 0, $retval$0 = 0;
 $__l = $this + 8 | 0;
 $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
 $call$i = _mbtowc(0, 0, 4) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 if (!$call$i) {
  $1 = HEAP32[$__l >> 2] | 0;
  if (!$1) $retval$0 = 1; else {
   $call$i$i1 = ___uselocale($1) | 0;
   $call$i2 = ___ctype_get_mb_cur_max() | 0;
   if ($call$i$i1 | 0) ___uselocale($call$i$i1) | 0;
   return ($call$i2 | 0) == 1 | 0;
  }
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[4720 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $call = 0, $cond = 0, $low$addr$0 = 0, $vec$addr$0 = 0;
 $low$addr$0 = $low;
 $vec$addr$0 = $vec;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   $cond = HEAPU16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] | 0;
  } else $cond = 0;
  HEAP16[$vec$addr$0 >> 1] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
  $vec$addr$0 = $vec$addr$0 + 2 | 0;
 }
 return $high | 0;
}

function _emit_message($cinfo, $msg_level) {
 $cinfo = $cinfo | 0;
 $msg_level = $msg_level | 0;
 var $0 = 0, $1 = 0, $4 = 0, $num_warnings = 0, label = 0;
 $0 = HEAP32[$cinfo >> 2] | 0;
 if (($msg_level | 0) >= 0) {
  if ((HEAP32[$0 + 104 >> 2] | 0) < ($msg_level | 0)) return;
  FUNCTION_TABLE_vi[HEAP32[$0 + 8 >> 2] & 255]($cinfo);
  return;
 }
 $num_warnings = $0 + 108 | 0;
 $1 = HEAP32[$num_warnings >> 2] | 0;
 if (($1 | 0) != 0 ? (HEAP32[$0 + 104 >> 2] | 0) <= 2 : 0) $4 = $1; else {
  FUNCTION_TABLE_vi[HEAP32[$0 + 8 >> 2] & 255]($cinfo);
  $4 = HEAP32[$num_warnings >> 2] | 0;
 }
 HEAP32[$num_warnings >> 2] = $4 + 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($this, $Type_, $Value_) {
 $this = $this | 0;
 $Type_ = $Type_ | 0;
 $Value_ = $Value_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 61, 1, 1, 1);
 HEAP32[$this >> 2] = 15796;
 $0 = $Type_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $Value_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 16 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43072) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 10896, 10922, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $__atoms | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $call = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 < 128 ? ($call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0, (HEAP16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] & $m) << 16 >> 16) : 0) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function ___shlim($f, $0, $1) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $sub$ptr$sub = 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = HEAP32[$f + 8 >> 2] | 0;
 $7 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $6 - $7 | 0;
 $9 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
 $10 = $f + 120 | 0;
 HEAP32[$10 >> 2] = $sub$ptr$sub;
 HEAP32[$10 + 4 >> 2] = $9;
 if ((($0 | 0) != 0 | ($1 | 0) != 0) & (($9 | 0) > ($1 | 0) | ($9 | 0) == ($1 | 0) & $sub$ptr$sub >>> 0 > $0 >>> 0)) HEAP32[$f + 104 >> 2] = $7 + $0; else HEAP32[$f + 104 >> 2] = $6;
 return;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $add = 0, $add$ptr4 = 0, $call = 0, $cookie = 0, $k$0 = 0, $spec$select = 0;
 $cookie = $f + 84 | 0;
 $0 = HEAP32[$cookie >> 2] | 0;
 $add = $len + 256 | 0;
 $call = _memchr($0, 0, $add) | 0;
 $k$0 = ($call | 0) == 0 ? $add : $call - $0 | 0;
 $spec$select = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $0 | 0, $spec$select | 0) | 0;
 HEAP32[$f + 4 >> 2] = $0 + $spec$select;
 $add$ptr4 = $0 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $add$ptr4;
 HEAP32[$cookie >> 2] = $add$ptr4;
 return $spec$select | 0;
}

function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($this) {
 $this = $this | 0;
 var $0 = 0, $call2 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($0) | 0 ? ($call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($0, 0) | 0, $call2 << 24 >> 24 != 69) : 0) return $call2 << 24 >> 24 == 46 | $call2 << 24 >> 24 == 95 | 0;
 return 1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this + 368 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this + 332 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this + 288 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this + 148 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this + 8 | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 20 >> 2] & 255]($call3, $S);
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 16 >> 2] & 255]($call3, $S);
 }
 return;
}

function __ZN12_GLOBAL__N_112OutputStream4growEm($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $1 = 0, $BufferCapacity = 0, $add = 0, $call = 0, $mul = 0, $spec$store$select = 0;
 $add = (HEAP32[$this + 4 >> 2] | 0) + $N | 0;
 $BufferCapacity = $this + 8 | 0;
 $1 = HEAP32[$BufferCapacity >> 2] | 0;
 if ($add >>> 0 >= $1 >>> 0 ? ($mul = $1 << 1, $spec$store$select = $mul >>> 0 < $add >>> 0 ? $add : $mul, HEAP32[$BufferCapacity >> 2] = $spec$store$select, $call = _realloc(HEAP32[$this >> 2] | 0, $spec$store$select) | 0, HEAP32[$this >> 2] = $call, ($call | 0) == 0) : 0) __ZSt9terminatev();
 return;
}

function _store_int_511($dest, $size, $0, $1) {
 $dest = $dest | 0;
 $size = $size | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 L1 : do if ($dest | 0) switch ($size | 0) {
 case -2:
  {
   HEAP8[$dest >> 0] = $0;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$dest >> 1] = $0;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 3:
  {
   $4 = $dest;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $call = _vsnprintf(0, 0, $fmt, $ap2) | 0;
 if (($call | 0) >= 0 ? ($add = $call + 1 | 0, $call4 = _malloc($add) | 0, HEAP32[$s >> 2] = $call4, ($call4 | 0) != 0) : 0) $retval$0 = _vsnprintf($call4, $add, $fmt, $ap) | 0; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($this, $LHS_, $InfixOperator_, $RHS_) {
 $this = $this | 0;
 $LHS_ = $LHS_ | 0;
 $InfixOperator_ = $InfixOperator_ | 0;
 $RHS_ = $RHS_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 42, 1, 1, 1);
 HEAP32[$this >> 2] = 16940;
 HEAP32[$this + 8 >> 2] = $LHS_;
 $0 = $InfixOperator_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $RHS_;
 return;
}

function __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf, $N, $S) {
 $Buf = $Buf | 0;
 $N = $N | 0;
 $S = $S | 0;
 var $Buf$addr$0 = 0, $BufferSize$0 = 0, $call = 0, $retval$0 = 0, label = 0;
 if (!$Buf) {
  $call = _malloc(1024) | 0;
  if (!$call) $retval$0 = 0; else {
   $Buf$addr$0 = $call;
   $BufferSize$0 = 1024;
   label = 4;
  }
 } else {
  $Buf$addr$0 = $Buf;
  $BufferSize$0 = HEAP32[$N >> 2] | 0;
  label = 4;
 }
 if ((label | 0) == 4) {
  __ZN12_GLOBAL__N_112OutputStream5resetEPcm($S, $Buf$addr$0, $BufferSize$0);
  $retval$0 = 1;
 }
 return $retval$0 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $2 = 0, $3 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $3 = HEAP32[$low$addr$0 >> 2] | 0;
  HEAP8[$dest$addr$0 >> 0] = $3 >>> 0 < 128 ? $3 & 255 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($this, $R) {
 $this = $this | 0;
 $R = $R | 0;
 var $CurrentPosition = 0, $add$ptr = 0, $call = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($R) | 0;
 if ($call | 0) {
  __ZN12_GLOBAL__N_112OutputStream4growEm($this, $call);
  $CurrentPosition = $this + 4 | 0;
  $add$ptr = (HEAP32[$this >> 2] | 0) + (HEAP32[$CurrentPosition >> 2] | 0) | 0;
  _memmove($add$ptr | 0, __ZNK12_GLOBAL__N_110StringView5beginEv($R) | 0, $call | 0) | 0;
  HEAP32[$CurrentPosition >> 2] = (HEAP32[$CurrentPosition >> 2] | 0) + $call;
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$div$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 >= $__sz >>> 0) {
  if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + ($__sz << 2);
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this, $__sz - $sub$ptr$div$i | 0);
 return;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($this, $CastKind_, $To_, $From_) {
 $this = $this | 0;
 $CastKind_ = $CastKind_ | 0;
 $To_ = $To_ | 0;
 $From_ = $From_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 48, 1, 1, 1);
 HEAP32[$this >> 2] = 16148;
 $0 = $CastKind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $To_;
 HEAP32[$this + 20 >> 2] = $From_;
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) {
   $call = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP8[$low$addr$0 >> 0] << 2) >> 2] & 255;
  } else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) {
   $call = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP8[$low$addr$0 >> 0] << 2) >> 2] & 255;
  } else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($this, $Base_, $Tag_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 $Tag_ = $Tag_ | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 8, HEAP8[$Base_ + 5 >> 0] | 0, HEAP8[$Base_ + 6 >> 0] | 0, HEAP8[$Base_ + 7 >> 0] | 0);
 HEAP32[$this >> 2] = 15180;
 HEAP32[$this + 8 >> 2] = $Base_;
 $3 = $Tag_;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 12 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 if ((HEAP8[$__str + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, HEAP32[$__str >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0); else {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP32[$low$addr$0 >> 2] << 2) >> 2] | 0;
  } else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP32[$low$addr$0 >> 2] << 2) >> 2] | 0;
  } else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $call = 0, $retval$0 = 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0;
 if (($call | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) $retval$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 4;
  $retval$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $call = 0, $retval$0 = 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0;
 if (($call | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 1;
  $retval$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($this, $LHS_, $Kind_, $RHS_) {
 $this = $this | 0;
 $LHS_ = $LHS_ | 0;
 $Kind_ = $Kind_ | 0;
 $RHS_ = $RHS_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 46, 1, 1, 1);
 HEAP32[$this >> 2] = 16500;
 HEAP32[$this + 8 >> 2] = $LHS_;
 $0 = $Kind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $RHS_;
 return;
}

function _ar2FreeFeatureSet($featureSet) {
 $featureSet = $featureSet | 0;
 var $0 = 0, $1 = 0, $3 = 0, $i$0 = 0, $retval$0 = 0;
 $0 = HEAP32[$featureSet >> 2] | 0;
 if (!$0) $retval$0 = -1; else {
  $1 = $0;
  $i$0 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if (($i$0 | 0) >= (HEAP32[$1 + 4 >> 2] | 0)) break;
   _free(HEAP32[$3 + ($i$0 * 20 | 0) >> 2] | 0);
   $1 = HEAP32[$featureSet >> 2] | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  _free($3);
  _free(HEAP32[$featureSet >> 2] | 0);
  HEAP32[$featureSet >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__28numpunctIwEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $__grouping_ = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21020;
 HEAP32[$this + 8 >> 2] = 46;
 HEAP32[$this + 12 >> 2] = 44;
 $__grouping_ = $this + 16 | 0;
 HEAP32[$__grouping_ >> 2] = 0;
 HEAP32[$__grouping_ + 4 >> 2] = 0;
 HEAP32[$__grouping_ + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping_ + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vasprintf($__s, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function __ZNSt3__28numpunctIcEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $__grouping_ = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 20980;
 HEAP8[$this + 8 >> 0] = 46;
 HEAP8[$this + 9 >> 0] = 44;
 $__grouping_ = $this + 12 | 0;
 HEAP32[$__grouping_ >> 2] = 0;
 HEAP32[$__grouping_ + 4 >> 2] = 0;
 HEAP32[$__grouping_ + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping_ + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $call = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 if ($call) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $call & 1 | 0;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsscanf($__s, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this, $BaseType_, $Dimension_) {
 $this = $this | 0;
 $BaseType_ = $BaseType_ | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 25, 1, 1, 1);
 HEAP32[$this >> 2] = 17600;
 HEAP32[$this + 8 >> 2] = $BaseType_;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $0 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  HEAP8[$dest$addr$0 >> 0] = $0 << 24 >> 24 > -1 ? $0 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0) ? ($path_dynamic_ptr_to_static_ptr = $info + 28 | 0, (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) : 0) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Type_, $Expressions_) {
 $this = $this | 0;
 $Type_ = $Type_ | 0;
 $Expressions_ = $Expressions_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 55, 1, 1, 1);
 HEAP32[$this >> 2] = 16808;
 HEAP32[$this + 8 >> 2] = $Type_;
 $0 = $Expressions_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _ar2ReadJpegImage2($fp) {
 $fp = $fp | 0;
 var $call = 0, $call1 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $call = _malloc(20) | 0;
 if (!$call) {
  _arLog(0, 3, 21902, sp);
  _exit(1);
 }
 $call1 = _jpgread($fp, $call + 8 | 0, $call + 12 | 0, $call + 4 | 0, $call + 16 | 0) | 0;
 HEAP32[$call >> 2] = $call1;
 if (!$call1) {
  _free($call);
  $retval$0 = 0;
 } else $retval$0 = $call;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__28ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $__loc_ = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $__loc_ = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($__loc_);
 return;
}

function _jpeg_idct_1x1($cinfo, $compptr, $coef_block, $output_buf, $output_col) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $coef_block = $coef_block | 0;
 $output_buf = $output_buf | 0;
 $output_col = $output_col | 0;
 var $arrayidx2 = 0;
 $arrayidx2 = (HEAP32[$cinfo + 336 >> 2] | 0) + -384 + (((Math_imul(HEAP32[HEAP32[$compptr + 84 >> 2] >> 2] | 0, HEAP16[$coef_block >> 1] | 0) | 0) + 4100 | 0) >>> 3 & 1023) | 0;
 HEAP8[(HEAP32[$output_buf >> 2] | 0) + $output_col >> 0] = HEAP8[$arrayidx2 >> 0] | 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this, $Base_, $Dimension_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 14, 0, 0, 1);
 HEAP32[$this >> 2] = 17556;
 HEAP32[$this + 8 >> 2] = $Base_;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($this, $Child_, $Operator_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 $Operator_ = $Operator_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 44, 1, 1, 1);
 HEAP32[$this >> 2] = 16280;
 HEAP32[$this + 8 >> 2] = $Child_;
 $0 = $Operator_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($this, $Special_, $Child_) {
 $this = $this | 0;
 $Special_ = $Special_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 20, 1, 1, 1);
 HEAP32[$this >> 2] = 17952;
 $0 = $Special_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this, $args, $args1, $args3, $args5) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($this, $Kind_, $Child_) {
 $this = $this | 0;
 $Kind_ = $Kind_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 6, 1, 1, 1);
 HEAP32[$this >> 2] = 17116;
 $0 = $Kind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($this, $Prefix_, $Suffix_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Suffix_ = $Suffix_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 1, 1, 1, 1);
 HEAP32[$this >> 2] = 17996;
 HEAP32[$this + 8 >> 2] = $Prefix_;
 $0 = $Suffix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($this, $Ty_, $Postfix_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Postfix_ = $Postfix_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 5, 1, 1, 1);
 HEAP32[$this >> 2] = 15312;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Postfix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Protocol_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Protocol_ = $Protocol_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 10, 1, 1, 1);
 HEAP32[$this >> 2] = 17776;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Protocol_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($this, $Prefix_, $Child_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 53, 1, 1, 1);
 HEAP32[$this >> 2] = 16896;
 $0 = $Prefix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Integer_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Integer_ = $Integer_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 60, 1, 1, 1);
 HEAP32[$this >> 2] = 15576;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Integer_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($this, $Enclosing) {
 $this = $this | 0;
 $Enclosing = $Enclosing | 0;
 var $call = 0;
 HEAP8[$this >> 0] = 0;
 HEAP8[$this + 1 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP8[$this + 8 >> 0] = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($Enclosing + 332 | 0) | 0;
 HEAP32[$this + 12 >> 2] = $call;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Callee_, $Args_) {
 $this = $this | 0;
 $Callee_ = $Callee_ | 0;
 $Args_ = $Args_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 50, 1, 1, 1);
 HEAP32[$this >> 2] = 16852;
 HEAP32[$this + 8 >> 2] = $Callee_;
 $0 = $Args_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _getint($s) {
 $s = $s | 0;
 var $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0;
 if (!(_isdigit(HEAP8[HEAP32[$s >> 2] >> 0] | 0) | 0)) $i$0$lcssa = 0; else {
  $i$07 = 0;
  while (1) {
   $2 = HEAP32[$s >> 2] | 0;
   $add = ($i$07 * 10 | 0) + -48 + (HEAP8[$2 >> 0] | 0) | 0;
   $incdec$ptr = $2 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   if (!(_isdigit(HEAP8[$incdec$ptr >> 0] | 0) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($call, HEAP32[$args >> 2] | 0, (HEAP8[$args1 >> 0] | 0) != 0, (HEAP8[$args3 >> 0] | 0) != 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($call, HEAP32[$args >> 2] | 0, (HEAP8[$args1 >> 0] | 0) != 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, (HEAP8[$args3 >> 0] | 0) != 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, $K_, $RHSComponentCache_, $ArrayCache_, $FunctionCache_) {
 $this = $this | 0;
 $K_ = $K_ | 0;
 $RHSComponentCache_ = $RHSComponentCache_ | 0;
 $ArrayCache_ = $ArrayCache_ | 0;
 $FunctionCache_ = $FunctionCache_ | 0;
 HEAP32[$this >> 2] = 15224;
 HEAP8[$this + 4 >> 0] = $K_;
 HEAP8[$this + 5 >> 0] = $RHSComponentCache_;
 HEAP8[$this + 6 >> 0] = $ArrayCache_;
 HEAP8[$this + 7 >> 0] = $FunctionCache_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Ty_, $Inits_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Inits_ = $Inits_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 56, 1, 1, 1);
 HEAP32[$this >> 2] = 15928;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Inits_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _arg_n_510($ap, $n) {
 $ap = $ap | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $ap2 = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $i$0 = $n;
 while (1) {
  $5 = (HEAP32[$ap2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$ap2 >> 2] = $5 + 4;
  if ($i$0 >>> 0 > 1) $i$0 = $i$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Ext_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Ext_ = $Ext_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 2, 1, 1, 1);
 HEAP32[$this >> 2] = 17732;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Ext_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _output_message($cinfo) {
 $cinfo = $cinfo | 0;
 var $2 = 0, $buffer = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer = sp + 200 | 0;
 $buffer = sp;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 12 >> 2] & 255]($cinfo, $buffer);
 $2 = HEAP32[3679] | 0;
 HEAP32[$vararg_buffer >> 2] = $buffer;
 _fprintf($2, 27700, $vararg_buffer) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $__fn_ = 0, $__index_ = 0, $dec = 0, $i$0 = 0;
 $__fn_ = $this + 32 | 0;
 $__index_ = $this + 36 | 0;
 $i$0 = HEAP32[$this + 40 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $dec = $i$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$__fn_ >> 2] | 0) + ($dec << 2) >> 2] & 1]($ev, $this, HEAP32[(HEAP32[$__index_ >> 2] | 0) + ($dec << 2) >> 2] | 0);
  $i$0 = $dec;
 }
 return;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIsvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, -32768 << 16 >> 16 | 0, 32767 << 16 >> 16 | 0);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 123);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 125);
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $call = 0, $call3 = 0, $call5 = 0;
 $call = _strlen($msg) | 0;
 $call3 = __Znwm($call + 13 | 0) | 0;
 HEAP32[$call3 >> 2] = $call;
 HEAP32[$call3 + 4 >> 2] = $call;
 HEAP32[$call3 + 8 >> 2] = 0;
 $call5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3) | 0;
 _memcpy($call5 | 0, $msg | 0, $call + 1 | 0) | 0;
 HEAP32[$this >> 2] = $call5;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if ($__n | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm($this, $__n);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n);
 }
 return;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0, $frombool = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43352) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $frombool;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0, $frombool = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 43344) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 $frombool = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $frombool;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIcvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIavE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function _arMatrixAlloc($row, $clm) {
 $row = $row | 0;
 $clm = $clm | 0;
 var $call = 0, $call2 = 0, $retval$0 = 0;
 $call = _malloc(12) | 0;
 do if ($call) {
  $call2 = _malloc(Math_imul($row << 3, $clm) | 0) | 0;
  HEAP32[$call >> 2] = $call2;
  if (!$call2) {
   _free($call);
   $retval$0 = 0;
   break;
  } else {
   HEAP32[$call + 4 >> 2] = $row;
   HEAP32[$call + 8 >> 2] = $clm;
   $retval$0 = $call;
   break;
  }
 } else $retval$0 = 0; while (0);
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function _arLog($tag, $logLevel, $format, $varargs) {
 $tag = $tag | 0;
 $logLevel = $logLevel | 0;
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 if (($format | 0) != 0 & 1 <= ($logLevel | 0) ? HEAP8[$format >> 0] | 0 : 0) {
  HEAP32[$ap >> 2] = $varargs;
  _arLogv(0, $logLevel, $format, $ap);
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($this, $Basename_, $IsDtor_, $Variant_) {
 $this = $this | 0;
 $Basename_ = $Basename_ | 0;
 $IsDtor_ = $IsDtor_ | 0;
 $Variant_ = $Variant_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 37, 1, 1, 1);
 HEAP32[$this >> 2] = 17380;
 HEAP32[$this + 8 >> 2] = $Basename_;
 HEAP8[$this + 12 >> 0] = $IsDtor_ & 1;
 HEAP32[$this + 16 >> 2] = $Variant_;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 8 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP32[$0 >> 2] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 4 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 do if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  if (($0 | 0) == ($this + 16 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
   break;
  }
 } while (0);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIlvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function ___ftello($f) {
 $f = $f | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $3 = ___ftello_unlocked($f) | 0;
  $4 = getTempRet0() | 0;
  if ($phitmp) {
   $5 = $4;
   $6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;
   $6 = $3;
  }
 } else {
  $1 = ___ftello_unlocked($f) | 0;
  $5 = getTempRet0() | 0;
  $6 = $1;
 }
 setTempRet0($5 | 0);
 return $6 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($this, $Child_, $Quals_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 $Quals_ = $Quals_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 3, HEAP8[$Child_ + 5 >> 0] | 0, HEAP8[$Child_ + 6 >> 0] | 0, HEAP8[$Child_ + 7 >> 0] | 0);
 HEAP32[$this >> 2] = 17688;
 HEAP32[$this + 8 >> 2] = $Quals_;
 HEAP32[$this + 12 >> 2] = $Child_;
 return;
}

function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, $v + 4 | 0, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function _jpeg_std_error($err) {
 $err = $err | 0;
 HEAP32[$err >> 2] = 192;
 HEAP32[$err + 4 >> 2] = 132;
 HEAP32[$err + 8 >> 2] = 193;
 HEAP32[$err + 12 >> 2] = 133;
 HEAP32[$err + 16 >> 2] = 194;
 HEAP32[$err + 104 >> 2] = 0;
 HEAP32[$err + 108 >> 2] = 0;
 HEAP32[$err + 20 >> 2] = 0;
 HEAP32[$err + 112 >> 2] = 32;
 HEAP32[$err + 116 >> 2] = 126;
 HEAP32[$err + 120 >> 2] = 0;
 HEAP32[$err + 124 >> 2] = 0;
 HEAP32[$err + 128 >> 2] = 0;
 return $err | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP32[$0 >> 2] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 4 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $call1 = 0, $this$addr$i = 0, $ti$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $this$addr$i = sp + 4 | 0;
 $ti$addr = sp;
 HEAP32[$ti$addr >> 2] = $ti;
 HEAP32[$this$addr$i >> 2] = HEAP32[$ti$addr >> 2];
 $call1 = ___strdup(HEAP32[(HEAP32[$this$addr$i >> 2] | 0) + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP8[$dest$addr$0 >> 0] = HEAP8[$low$addr$0 >> 0] | 0;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($this, $Op_, $IsGlobal_, $IsArray_) {
 $this = $this | 0;
 $Op_ = $Op_ | 0;
 $IsGlobal_ = $IsGlobal_ | 0;
 $IsArray_ = $IsArray_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 52, 1, 1, 1);
 HEAP32[$this >> 2] = 16764;
 HEAP32[$this + 8 >> 2] = $Op_;
 HEAP8[$this + 12 >> 0] = $IsGlobal_ & 1;
 HEAP8[$this + 13 >> 0] = $IsArray_ & 1;
 return;
}

function _start_input_pass($cinfo) {
 $cinfo = $cinfo | 0;
 var $$sink = 0, $0 = 0, $3 = 0;
 HEAP32[$cinfo + 148 >> 2] = 0;
 $0 = HEAP32[$cinfo + 452 >> 2] | 0;
 if ((HEAP32[$cinfo + 340 >> 2] | 0) > 1) $$sink = 1; else {
  $3 = HEAP32[$cinfo + 344 >> 2] | 0;
  $$sink = HEAP32[((HEAP32[$cinfo + 332 >> 2] | 0) == 1 ? $3 + 76 | 0 : $3 + 12 | 0) >> 2] | 0;
 }
 HEAP32[$0 + 28 >> 2] = $$sink;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($this, $Dimension_) {
 $this = $this | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 26, 1, 1, 1);
 HEAP32[$this >> 2] = 17644;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $call = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 HEAP32[$f + 32 >> 2] = 30;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $call = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP32[$dest$addr$0 >> 2] = HEAP8[$low$addr$0 >> 0];
  $dest$addr$0 = $dest$addr$0 + 4 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($this, $Bindings_) {
 $this = $this | 0;
 $Bindings_ = $Bindings_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 41, 1, 1, 1);
 HEAP32[$this >> 2] = 17204;
 $0 = $Bindings_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, 0, 65535);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($this, $Elements_) {
 $this = $this | 0;
 $Elements_ = $Elements_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 28, 1, 1, 1);
 HEAP32[$this >> 2] = 15840;
 $0 = $Elements_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 62, 1, 1, 1);
 HEAP32[$this >> 2] = 15708;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 64, 1, 1, 1);
 HEAP32[$this >> 2] = 15620;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 63, 1, 1, 1);
 HEAP32[$this >> 2] = 15664;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($this, $ClassType_, $MemberType_) {
 $this = $this | 0;
 $ClassType_ = $ClassType_ | 0;
 $MemberType_ = $MemberType_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 13, HEAP8[$MemberType_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 17512;
 HEAP32[$this + 8 >> 2] = $ClassType_;
 HEAP32[$this + 12 >> 2] = $MemberType_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($this, $Conditions_) {
 $this = $this | 0;
 $Conditions_ = $Conditions_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 9, 1, 1, 1);
 HEAP32[$this >> 2] = 18084;
 $0 = $Conditions_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, 0, 255);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDImvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIjvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($this, $Pointee_, $RK_) {
 $this = $this | 0;
 $Pointee_ = $Pointee_ | 0;
 $RK_ = $RK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 12, HEAP8[$Pointee_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 15356;
 HEAP32[$this + 8 >> 2] = $Pointee_;
 HEAP32[$this + 12 >> 2] = $RK_;
 HEAP8[$this + 16 >> 0] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($this, $Elem_, $Init_, $IsArray_) {
 $this = $this | 0;
 $Elem_ = $Elem_ | 0;
 $Init_ = $Init_ | 0;
 $IsArray_ = $IsArray_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 65, 1, 1, 1);
 HEAP32[$this >> 2] = 16368;
 HEAP32[$this + 8 >> 2] = $Elem_;
 HEAP32[$this + 12 >> 2] = $Init_;
 HEAP8[$this + 16 >> 0] = $IsArray_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, 28937) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, 28937) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($this, $First_, $Last_, $Init_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 $Init_ = $Init_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 66, 1, 1, 1);
 HEAP32[$this >> 2] = 16324;
 HEAP32[$this + 8 >> 2] = $First_;
 HEAP32[$this + 12 >> 2] = $Last_;
 HEAP32[$this + 16 >> 2] = $Init_;
 return;
}

function ___fseeko($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $4 = 0, $call17 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $4 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
  if ($phitmp) $call17 = $4; else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else $call17 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
 return $call17 | 0;
}

function ___munmap($start, $len) {
 $start = $start | 0;
 $len = $len | 0;
 var $call1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $start;
 HEAP32[$vararg_buffer + 4 >> 2] = $len;
 $call1 = ___syscall_ret(___syscall91(91, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZNSt3__25ctypeIcEC2EPKtbm($this, $tab, $del, $refs) {
 $this = $this | 0;
 $tab = $tab | 0;
 $del = $del | 0;
 $refs = $refs | 0;
 var $__tab_ = 0, $call = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 20928;
 $__tab_ = $this + 8 | 0;
 HEAP32[$__tab_ >> 2] = $tab;
 HEAP8[$this + 12 >> 0] = $del & 1;
 if (!$tab) {
  $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  HEAP32[$__tab_ >> 2] = $call;
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$06 = 0, $n$addr$05 = 0, $s$addr$04 = 0;
 if ($n | 0) {
  $d$addr$06 = $d;
  $n$addr$05 = $n;
  $s$addr$04 = $s;
  while (1) {
   $n$addr$05 = $n$addr$05 + -1 | 0;
   HEAP32[$d$addr$06 >> 2] = HEAP32[$s$addr$04 >> 2];
   if (!$n$addr$05) break; else {
    $d$addr$06 = $d$addr$06 + 4 | 0;
    $s$addr$04 = $s$addr$04 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $CurrentPackMax = 0, $call2 = 0;
 $CurrentPackMax = $S + 16 | 0;
 if ((HEAP32[$CurrentPackMax >> 2] | 0) == -1) {
  $call2 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this + 8 | 0) | 0;
  HEAP32[$CurrentPackMax >> 2] = $call2;
  HEAP32[$S + 12 >> 2] = 0;
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($this, $Types_) {
 $this = $this | 0;
 $Types_ = $Types_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 17, 1, 1, 1);
 HEAP32[$this >> 2] = 17864;
 $0 = $Types_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($this, $Cond_, $Then_, $Else_) {
 $this = $this | 0;
 $Cond_ = $Cond_ | 0;
 $Then_ = $Then_ | 0;
 $Else_ = $Else_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 45, 1, 1, 1);
 HEAP32[$this >> 2] = 16192;
 HEAP32[$this + 8 >> 2] = $Cond_;
 HEAP32[$this + 12 >> 2] = $Then_;
 HEAP32[$this + 16 >> 2] = $Else_;
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = (HEAP32[$__p$0 >> 2] | 0) + ($__h$0 << 4) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 4 | 0;
 }
 return $__h$0 | 0;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = ($__h$0 << 4) + (HEAP8[$__p$0 >> 0] | 0) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 1 | 0;
 }
 return $__h$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($this, $Number_) {
 $this = $this | 0;
 $Number_ = $Number_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 54, 1, 1, 1);
 HEAP32[$this >> 2] = 17028;
 $0 = $Number_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIdvE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 8);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($this, $Count_) {
 $this = $this | 0;
 $Count_ = $Count_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 39, 1, 1, 1);
 HEAP32[$this >> 2] = 17292;
 $0 = $Count_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($this, $Params_) {
 $this = $this | 0;
 $Params_ = $Params_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 30, 1, 1, 1);
 HEAP32[$this >> 2] = 15488;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 var $call = 0, $call2 = 0, $cmp = 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
 $call2 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
 $cmp = ($call2 | 0) == 0;
 HEAP32[$this >> 2] = $cmp ? $call + 1 | 0 : $call;
 HEAP32[$this + 4 >> 2] = $cmp ? $call2 + 1 | 0 : $call2;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __Znwm($size) {
 $size = $size | 0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $spec$store$select = 0;
 $spec$store$select = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $call = _malloc($spec$store$select) | 0;
  if ($call | 0) {
   $call$lcssa = $call;
   break;
  }
  $call2 = __ZSt15get_new_handlerv() | 0;
  if (!$call2) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 3]();
 }
 return $call$lcssa | 0;
}

function __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev($this) {
 $this = $this | 0;
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(22164, 40);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(22178, 41);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(22184, 42);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($this, $Array_) {
 $this = $this | 0;
 $Array_ = $Array_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 0, 1, 1, 1);
 HEAP32[$this >> 2] = 15972;
 $0 = $Array_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 30160, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 31454, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 30101, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 31626, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this, $args, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this + 368 | 0, $args, 30615, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function _jinit_input_controller($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 0, 28) | 0;
 HEAP32[$cinfo + 460 >> 2] = $call;
 HEAP32[$call >> 2] = 73;
 HEAP32[$call + 4 >> 2] = 189;
 HEAP32[$call + 8 >> 2] = 190;
 HEAP32[$call + 12 >> 2] = 191;
 HEAP32[$call + 16 >> 2] = 0;
 HEAP32[$call + 20 >> 2] = 0;
 HEAP32[$call + 24 >> 2] = 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, $C) {
 $this = $this | 0;
 $C = $C | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (HEAP32[$this + 4 >> 2] | 0) ? (HEAP8[$0 >> 0] | 0) == $C << 24 >> 24 : 0) {
  HEAP32[$this >> 2] = $0 + 1;
  $retval$0 = 1;
 } else $retval$0 = 0;
 return $retval$0 | 0;
}

function _arUtilRemoveExt($filename) {
 $filename = $filename | 0;
 var $i$0 = 0, $j$0 = 0, $j$1 = 0;
 $i$0 = 0;
 $j$0 = -1;
 L1 : while (1) {
  switch (HEAP8[$filename + $i$0 >> 0] | 0) {
  case 0:
   {
    break L1;
    break;
   }
  case 46:
   {
    $j$1 = $i$0;
    break;
   }
  default:
   $j$1 = $j$0;
  }
  $i$0 = $i$0 + 1 | 0;
  $j$0 = $j$1;
 }
 if (($j$0 | 0) != -1) HEAP8[$filename + $j$0 >> 0] = 0;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($this, $Name_) {
 $this = $this | 0;
 $Name_ = $Name_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 7, 1, 1, 1);
 HEAP32[$this >> 2] = 16412;
 $0 = $Name_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($this, $FirstType_, $SecondType_) {
 $this = $this | 0;
 $FirstType_ = $FirstType_ | 0;
 $SecondType_ = $SecondType_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 21, 1, 1, 1);
 HEAP32[$this >> 2] = 18128;
 HEAP32[$this + 8 >> 2] = $FirstType_;
 HEAP32[$this + 12 >> 2] = $SecondType_;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, 29913, $args1, 28937) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, 30241, $args1, 28937) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $Lookahead) {
 $this = $this | 0;
 $Lookahead = $Lookahead | 0;
 var $1 = 0, $retval$0 = 0;
 $1 = HEAP32[$this >> 2] | 0;
 if (((HEAP32[$this + 4 >> 2] | 0) - $1 | 0) >>> 0 > $Lookahead >>> 0) $retval$0 = HEAP8[$1 + $Lookahead >> 0] | 0; else $retval$0 = 0;
 return $retval$0 | 0;
}

function _reset_input_controller($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo + 460 >> 2] | 0;
 HEAP32[$0 >> 2] = 73;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 1;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 16 >> 2] & 255]($cinfo);
 FUNCTION_TABLE_vi[HEAP32[HEAP32[$cinfo + 464 >> 2] >> 2] & 255]($cinfo);
 HEAP32[$cinfo + 160 >> 2] = 0;
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function _jpeg_abort($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $global_state = 0;
 $0 = HEAP32[$cinfo + 4 >> 2] | 0;
 if (!$0) return;
 FUNCTION_TABLE_vii[HEAP32[$0 + 36 >> 2] & 255]($cinfo, 1);
 $global_state = $cinfo + 20 | 0;
 if (!(HEAP32[$cinfo + 16 >> 2] | 0)) {
  HEAP32[$global_state >> 2] = 100;
  return;
 } else {
  HEAP32[$global_state >> 2] = 200;
  HEAP32[$cinfo + 312 >> 2] = 0;
  return;
 }
}

function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $call2 = 0, $count = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) | 0 ? ($call2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc(HEAP32[$this >> 2] | 0) | 0, $count = $call2 + 8 | 0, $1 = HEAP32[$count >> 2] | 0, HEAP32[$count >> 2] = $1 + -1, ($1 | 0) < 1) : 0) __ZdlPv($call2);
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($this) {
 $this = $this | 0;
 var $$unpack = 0, $$unpack2 = 0, $1 = 0, $4 = 0;
 $$unpack = HEAP32[$this + 4 >> 2] | 0;
 $$unpack2 = HEAP32[$this + 8 >> 2] | 0;
 $1 = (HEAP32[$this >> 2] | 0) + ($$unpack2 >> 1) | 0;
 if (!($$unpack2 & 1)) $4 = $$unpack; else $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$unpack >> 2] | 0;
 FUNCTION_TABLE_vi[$4 & 255]($1);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this + 368 | 0, $args, 28860) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 18252;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 18188;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if ((HEAP8[41248] | 0) == 0 ? ___cxa_guard_acquire(41248) | 0 : 0) {
  HEAP32[10798] = 0;
  HEAP32[10799] = 0;
  HEAP32[10800] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(43192, 19256, __ZNSt3__211char_traitsIwE6lengthEPKw(19256) | 0);
  ___cxa_guard_release(41248);
 }
 return 43192;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if ((HEAP8[41256] | 0) == 0 ? ___cxa_guard_acquire(41256) | 0 : 0) {
  HEAP32[10801] = 0;
  HEAP32[10802] = 0;
  HEAP32[10803] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(43204, 19292, __ZNSt3__211char_traitsIwE6lengthEPKw(19292) | 0);
  ___cxa_guard_release(41256);
 }
 return 43204;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if ((HEAP8[41264] | 0) == 0 ? ___cxa_guard_acquire(41264) | 0 : 0) {
  HEAP32[10804] = 0;
  HEAP32[10805] = 0;
  HEAP32[10806] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(43216, 19340, __ZNSt3__211char_traitsIwE6lengthEPKw(19340) | 0);
  ___cxa_guard_release(41264);
 }
 return 43216;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if ((HEAP8[41240] | 0) == 0 ? ___cxa_guard_acquire(41240) | 0 : 0) {
  HEAP32[10795] = 0;
  HEAP32[10796] = 0;
  HEAP32[10797] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(43180, 19220, __ZNSt3__211char_traitsIwE6lengthEPKw(19220) | 0);
  ___cxa_guard_release(41240);
 }
 return 43180;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if ((HEAP8[41168] | 0) == 0 ? ___cxa_guard_acquire(41168) | 0 : 0) {
  HEAP32[10781] = 0;
  HEAP32[10782] = 0;
  HEAP32[10783] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(43124, 36384, __ZNSt3__211char_traitsIcE6lengthEPKc(36384) | 0);
  ___cxa_guard_release(41168);
 }
 return 43124;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if ((HEAP8[41176] | 0) == 0 ? ___cxa_guard_acquire(41176) | 0 : 0) {
  HEAP32[10784] = 0;
  HEAP32[10785] = 0;
  HEAP32[10786] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(43136, 36393, __ZNSt3__211char_traitsIcE6lengthEPKc(36393) | 0);
  ___cxa_guard_release(41176);
 }
 return 43136;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if ((HEAP8[41184] | 0) == 0 ? ___cxa_guard_acquire(41184) | 0 : 0) {
  HEAP32[10787] = 0;
  HEAP32[10788] = 0;
  HEAP32[10789] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(43148, 36405, __ZNSt3__211char_traitsIcE6lengthEPKc(36405) | 0);
  ___cxa_guard_release(41184);
 }
 return 43148;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if ((HEAP8[41160] | 0) == 0 ? ___cxa_guard_acquire(41160) | 0 : 0) {
  HEAP32[10778] = 0;
  HEAP32[10779] = 0;
  HEAP32[10780] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(43112, 36375, __ZNSt3__211char_traitsIcE6lengthEPKc(36375) | 0);
  ___cxa_guard_release(41160);
 }
 return 43112;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this, $NBytes) {
 $this = $this | 0;
 $NBytes = $NBytes | 0;
 var $0 = 0, $call = 0;
 $call = _malloc($NBytes + 8 | 0) | 0;
 if (!$call) __ZSt9terminatev(); else {
  $0 = HEAP32[$this + 4096 >> 2] | 0;
  HEAP32[$call >> 2] = HEAP32[$0 >> 2];
  HEAP32[$call + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = $call;
  return $call + 8 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($this, $Name_, $TemplateArgs_) {
 $this = $this | 0;
 $Name_ = $Name_ | 0;
 $TemplateArgs_ = $TemplateArgs_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 32, 1, 1, 1);
 HEAP32[$this >> 2] = 15444;
 HEAP32[$this + 8 >> 2] = $Name_;
 HEAP32[$this + 12 >> 2] = $TemplateArgs_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this + 368 | 0, $args, 28928) | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $0 = 0, $call$i = 0, $call$i$i = 0, $cond = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0) {
  $call$i$i = ___uselocale($0) | 0;
  $call$i = ___ctype_get_mb_cur_max() | 0;
  if (!$call$i$i) $cond = $call$i; else {
   ___uselocale($call$i$i) | 0;
   $cond = $call$i;
  }
 } else $cond = 1;
 return $cond | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function ___unlist_locked_file($f) {
 $f = $f | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $4 = 0;
 if (HEAP32[$f + 68 >> 2] | 0) {
  $1 = HEAP32[$f + 132 >> 2] | 0;
  $$pre = $f + 128 | 0;
  if ($1 | 0) HEAP32[$1 + 128 >> 2] = HEAP32[$$pre >> 2];
  $4 = HEAP32[$$pre >> 2] | 0;
  if (!$4) $$sink = (___pthread_self_469() | 0) + 232 | 0; else $$sink = $4 + 132 | 0;
  HEAP32[$$sink >> 2] = $1;
 }
 return;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this) {
 $this = $this | 0;
 var $0 = 0, $BlockList = 0;
 $BlockList = $this + 4096 | 0;
 while (1) {
  $0 = HEAP32[$BlockList >> 2] | 0;
  if (!$0) break;
  HEAP32[$BlockList >> 2] = HEAP32[$0 >> 2];
  if (($this | 0) != ($0 | 0)) _free($0);
 }
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$BlockList >> 2] = $this;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 if ((___toread($f) | 0) == 0 ? (FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1 : 0) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33831, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33960, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33746, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33791, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33771, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33987, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 33813, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 34006, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 34029, $args1) | 0;
}

function __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$result, $this, $N) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $N = $N | 0;
 var $call = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, (HEAP32[$this >> 2] | 0) + ($call >>> 0 > $N >>> 0 ? $N : $call + -1 | 0) | 0, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 34020, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($this, $Qualifier_, $Name_) {
 $this = $this | 0;
 $Qualifier_ = $Qualifier_ | 0;
 $Name_ = $Name_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 22, 1, 1, 1);
 HEAP32[$this >> 2] = 16720;
 HEAP32[$this + 8 >> 2] = $Qualifier_;
 HEAP32[$this + 12 >> 2] = $Name_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($this, $Encoding_, $Entity_) {
 $this = $this | 0;
 $Encoding_ = $Encoding_ | 0;
 $Entity_ = $Entity_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 24, 1, 1, 1);
 HEAP32[$this >> 2] = 17336;
 HEAP32[$this + 8 >> 2] = $Encoding_;
 HEAP32[$this + 12 >> 2] = $Entity_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 21052, __ZNSt3__211char_traitsIwE6lengthEPKw(21052) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 37999, __ZNSt3__211char_traitsIcE6lengthEPKc(37999) | 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 21076, __ZNSt3__211char_traitsIwE6lengthEPKw(21076) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 38005, __ZNSt3__211char_traitsIcE6lengthEPKc(38005) | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[3679] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 7 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 63]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this, $0, $id) {
 $this = $this | 0;
 $0 = $0 | 0;
 $id = $id | 0;
 var $pmf$unpack = 0, $pmf$unpack2 = 0;
 $pmf$unpack = HEAP32[$0 >> 2] | 0;
 $pmf$unpack2 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$this >> 2] = $id;
 HEAP32[$this + 4 >> 2] = $pmf$unpack;
 HEAP32[$this + 8 >> 2] = $pmf$unpack2;
 return;
}

function _finish_pass_huff($cinfo) {
 $cinfo = $cinfo | 0;
 var $bits_left = 0, $discarded_bytes = 0;
 $bits_left = (HEAP32[$cinfo + 468 >> 2] | 0) + 16 | 0;
 $discarded_bytes = (HEAP32[$cinfo + 464 >> 2] | 0) + 24 | 0;
 HEAP32[$discarded_bytes >> 2] = (HEAP32[$discarded_bytes >> 2] | 0) + ((HEAP32[$bits_left >> 2] | 0) / 8 | 0);
 HEAP32[$bits_left >> 2] = 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 6 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 63]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_112OutputStreampLEc($this, $C) {
 $this = $this | 0;
 $C = $C | 0;
 var $0 = 0, $1 = 0, $CurrentPosition = 0;
 __ZN12_GLOBAL__N_112OutputStream4growEm($this, 1);
 $0 = HEAP32[$this >> 2] | 0;
 $CurrentPosition = $this + 4 | 0;
 $1 = HEAP32[$CurrentPosition >> 2] | 0;
 HEAP32[$CurrentPosition >> 2] = $1 + 1;
 HEAP8[$0 + $1 >> 0] = $C;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 5 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[HEAP32[$this >> 2] >> 2] & 63]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _process_data_crank_post($cinfo, $output_buf, $out_row_ctr, $out_rows_avail) {
 $cinfo = $cinfo | 0;
 $output_buf = $output_buf | 0;
 $out_row_ctr = $out_row_ctr | 0;
 $out_rows_avail = $out_rows_avail | 0;
 FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[$cinfo + 456 >> 2] | 0) + 4 >> 2] & 7]($cinfo, 0, 0, 0, $output_buf, $out_row_ctr, $out_rows_avail);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($this, $Op1_, $Op2_) {
 $this = $this | 0;
 $Op1_ = $Op1_ | 0;
 $Op2_ = $Op2_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 43, 1, 1, 1);
 HEAP32[$this >> 2] = 16456;
 HEAP32[$this + 8 >> 2] = $Op1_;
 HEAP32[$this + 12 >> 2] = $Op2_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($this, $Qual_, $Name_) {
 $this = $this | 0;
 $Qual_ = $Qual_ | 0;
 $Name_ = $Name_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 23, 1, 1, 1);
 HEAP32[$this >> 2] = 17468;
 HEAP32[$this + 8 >> 2] = $Qual_;
 HEAP32[$this + 12 >> 2] = $Name_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($this, $Index_) {
 $this = $this | 0;
 $Index_ = $Index_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 31, 2, 2, 2);
 HEAP32[$this >> 2] = 17072;
 HEAP32[$this + 8 >> 2] = $Index_;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP8[$this + 16 >> 0] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) {
 $this = $this | 0;
 var $0 = 0, $cond = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 4 >> 2] | 0)) $cond = 0; else {
  HEAP32[$this >> 2] = $0 + 1;
  $cond = HEAP8[$0 >> 0] | 0;
 }
 return $cond | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _grayscale_convert_52($cinfo, $input_buf, $input_row, $output_buf, $num_rows) {
 $cinfo = $cinfo | 0;
 $input_buf = $input_buf | 0;
 $input_row = $input_row | 0;
 $output_buf = $output_buf | 0;
 $num_rows = $num_rows | 0;
 _jcopy_sample_rows(HEAP32[$input_buf >> 2] | 0, $input_row, $output_buf, 0, $num_rows, HEAP32[$cinfo + 112 >> 2] | 0);
 return;
}

function _get_buff_272($buf, $fp) {
 $buf = $buf | 0;
 $fp = $fp | 0;
 var $call = 0, $retval$0 = 0;
 L1 : while (1) {
  $call = _fgets($buf, 256, $fp) | 0;
  if (!$call) {
   $retval$0 = 0;
   break;
  }
  switch (HEAP8[$buf >> 0] | 0) {
  case 35:
  case 10:
   break;
  default:
   {
    $retval$0 = $call;
    break L1;
   }
  }
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($call, (HEAP32[$args >> 2] | 0) != 0);
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S);
 __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this, $S);
 return;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vfprintf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _rewind($f) {
 $f = $f | 0;
 var $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  ___fseeko_unlocked($f, 0, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
  if (!$phitmp) ___unlockfile($f);
 } else {
  ___fseeko_unlocked($f, 0, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
 }
 return;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _get_buff($buf, $fp) {
 $buf = $buf | 0;
 $fp = $fp | 0;
 var $call = 0, $retval$0 = 0;
 L1 : while (1) {
  $call = _fgets($buf, 256, $fp) | 0;
  if (!$call) {
   $retval$0 = 0;
   break;
  }
  switch (HEAP8[$buf >> 0] | 0) {
  case 35:
  case 10:
   break;
  default:
   {
    $retval$0 = $call;
    break L1;
   }
  }
 }
 return $retval$0 | 0;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $call2 = 0;
 $call2 = _catopen((HEAP8[$__nm + 11 >> 0] | 0) < 0 ? HEAP32[$__nm >> 2] | 0 : $__nm, 1) | 0;
 return $call2 >>> (($call2 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $call2 = 0;
 $call2 = _catopen((HEAP8[$__nm + 11 >> 0] | 0) < 0 ? HEAP32[$__nm >> 2] | 0 : $__nm, 1) | 0;
 return $call2 >>> (($call2 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 return;
}

function _finish_output_pass($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $pass_number = 0;
 $0 = HEAP32[$cinfo + 444 >> 2] | 0;
 if (HEAP32[$cinfo + 84 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 8 >> 2] & 255]($cinfo);
 $pass_number = $0 + 12 | 0;
 HEAP32[$pass_number >> 2] = (HEAP32[$pass_number >> 2] | 0) + 1;
 return;
}

function __ZNSt3__28ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18172;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this, 0);
 __ZNSt3__26localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function __ZNSt3__26localeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__shared_owners_$i = $0 + 4 | 0;
 $1 = HEAP32[$__shared_owners_$i >> 2] | 0;
 HEAP32[$__shared_owners_$i >> 2] = $1 + -1;
 if (!$1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $call = 0;
 $call = ___cxa_get_globals_fast() | 0;
 if (($call | 0 ? ($0 = HEAP32[$call >> 2] | 0, $0 | 0) : 0) ? __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0 + 48 | 0) | 0 : 0) __ZSt11__terminatePFvvE(HEAP32[$0 + 12 >> 2] | 0);
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this) {
 $this = $this | 0;
 var $BlockList = 0, $call = 0;
 $call = _malloc(4096) | 0;
 if (!$call) __ZSt9terminatev(); else {
  $BlockList = $this + 4096 | 0;
  HEAP32[$call >> 2] = HEAP32[$BlockList >> 2];
  HEAP32[$call + 4 >> 2] = 0;
  HEAP32[$BlockList >> 2] = $call;
  return;
 }
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this, $0, $1);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $retval$0 = 0;
 switch (HEAP32[$iob + 4 >> 2] & 74) {
 case 64:
  {
   $retval$0 = 8;
   break;
  }
 case 8:
  {
   $retval$0 = 16;
   break;
  }
 case 0:
  {
   $retval$0 = 0;
   break;
  }
 default:
  $retval$0 = 10;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($this, $Pointee_) {
 $this = $this | 0;
 $Pointee_ = $Pointee_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 11, HEAP8[$Pointee_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 15400;
 HEAP32[$this + 8 >> 2] = $Pointee_;
 return;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $d$addr$05 = 0, $n$addr$04 = 0;
 if ($n | 0) {
  $d$addr$05 = $d;
  $n$addr$04 = $n;
  while (1) {
   $n$addr$04 = $n$addr$04 + -1 | 0;
   HEAP32[$d$addr$05 >> 2] = $c;
   if (!$n$addr$04) break; else $d$addr$05 = $d$addr$05 + 4 | 0;
  }
 }
 return $d | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 255]($this, $S);
 if ((HEAP8[$this + 5 >> 0] | 0) != 1) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] & 255]($this, $S);
 return;
}

function __ZNSt3__26localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__shared_owners_$i = 0, $call = 0;
 $call = __ZNSt3__26locale8__globalEv() | 0;
 $0 = HEAP32[$call >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 $__shared_owners_$i = $0 + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this + 368 | 0, 30491) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this + 368 | 0, 33080) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this + 368 | 0, 31275) | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $arrayidx = 0, $cond = 0;
 if ($c >>> 0 < 128) {
  $arrayidx = (__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + ($c << 1) | 0;
  $cond = (HEAP16[$arrayidx >> 1] & $m) << 16 >> 16 != 0;
 } else $cond = 0;
 return $cond | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this + 368 | 0, 29227) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this + 368 | 0, 34145) | 0;
}

function _reset_marker_reader($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo + 464 >> 2] | 0;
 HEAP32[$cinfo + 216 >> 2] = 0;
 HEAP32[$cinfo + 144 >> 2] = 0;
 HEAP32[$cinfo + 440 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $arrayidx = 0, $cond = 0;
 if ($c << 24 >> 24 > -1) {
  $arrayidx = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 24 >> 24 << 2) | 0;
  $cond = HEAP32[$arrayidx >> 2] & 255;
 } else $cond = $c;
 return $cond | 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp >> 2] = $this;
 ___embind_register_native_and_builtin_types();
 STACKTOP = sp;
 return;
}

function _ftell($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $call1 = 0, $retval$0 = 0;
 $0 = ___ftello($f) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) > 0 | ($1 | 0) == 0 & $0 >>> 0 > 2147483647) {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 61;
  $retval$0 = -1;
 } else $retval$0 = $0;
 return $retval$0 | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $arrayidx = 0, $cond = 0;
 if ($c << 24 >> 24 > -1) {
  $arrayidx = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (($c & 255) << 2) | 0;
  $cond = HEAP32[$arrayidx >> 2] & 255;
 } else $cond = $c;
 return $cond | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($this, $SSK_) {
 $this = $this | 0;
 $SSK_ = $SSK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 35, 1, 1, 1);
 HEAP32[$this >> 2] = 17424;
 HEAP32[$this + 8 >> 2] = $SSK_;
 return;
}

function _testSetjmp(id, table, size) {
 id = id | 0;
 table = table | 0;
 size = size | 0;
 var i = 0, curr = 0;
 while ((i | 0) < (size | 0)) {
  curr = HEAP32[table + (i << 3) >> 2] | 0;
  if (!curr) break;
  if ((curr | 0) == (id | 0)) return HEAP32[table + ((i << 3) + 4) >> 2] | 0;
  i = i + 1 | 0;
 }
 return 0;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 do {} while ((HEAP32[$flag >> 2] | 0) == 1);
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  FUNCTION_TABLE_vi[$func & 255]($arg);
  HEAP32[$flag >> 2] = -1;
 } else {}
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($this, $Restore_, $NewVal) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 $NewVal = $NewVal | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP32[$this + 4 >> 2] = HEAP32[$Restore_ >> 2];
 HEAP8[$this + 8 >> 0] = 1;
 HEAP32[$Restore_ >> 2] = $NewVal;
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 29, 1, 1, 1);
 HEAP32[$this >> 2] = 16104;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($this, $Restore_, $NewVal) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 $NewVal = $NewVal | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP8[$this + 4 >> 0] = HEAP8[$Restore_ >> 0] | 0;
 HEAP8[$this + 5 >> 0] = 1;
 HEAP8[$Restore_ >> 0] = $NewVal & 1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($this, $SSK_) {
 $this = $this | 0;
 $SSK_ = $SSK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 36, 1, 1, 1);
 HEAP32[$this >> 2] = 15268;
 HEAP32[$this + 8 >> 2] = $SSK_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($this, $OpName_) {
 $this = $this | 0;
 $OpName_ = $OpName_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 19, 1, 1, 1);
 HEAP32[$this >> 2] = 16588;
 HEAP32[$this + 8 >> 2] = $OpName_;
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__l = 0;
 HEAP32[$this >> 2] = 20860;
 $__l = $this + 8 | 0;
 $0 = HEAP32[$__l >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$__l >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 33, 1, 1, 1);
 HEAP32[$this >> 2] = 16544;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $sub$ptr$sub = 0;
 $sub$ptr$sub = $end - $frm | 0;
 return ($sub$ptr$sub >>> 0 < $mx >>> 0 ? $sub$ptr$sub : $mx) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($this, $Pack_) {
 $this = $this | 0;
 $Pack_ = $Pack_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 49, 1, 1, 1);
 HEAP32[$this >> 2] = 16060;
 HEAP32[$this + 8 >> 2] = $Pack_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 34, 1, 1, 1);
 HEAP32[$this >> 2] = 17160;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 28;
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $arrayidx = 0, $cond = 0;
 if ($c >>> 0 < 128) {
  $arrayidx = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ($c << 2) | 0;
  $cond = HEAP32[$arrayidx >> 2] | 0;
 } else $cond = $c;
 return $cond | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $arrayidx = 0, $cond = 0;
 if ($c >>> 0 < 128) {
  $arrayidx = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 2) | 0;
  $cond = HEAP32[$arrayidx >> 2] | 0;
 } else $cond = $c;
 return $cond | 0;
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $retval$0 = 0;
 if ($use_strcmp) $retval$0 = (_strcmp(HEAP32[$x + 4 >> 2] | 0, HEAP32[$y + 4 >> 2] | 0) | 0) == 0; else $retval$0 = ($x | 0) == ($y | 0);
 return $retval$0 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($this, $Ty_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 4, 1, 1, 1);
 HEAP32[$this >> 2] = 16632;
 HEAP32[$this + 8 >> 2] = $Ty_;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($agg$result, $0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($agg$result, $0);
 return;
}

function __ZNSt3__26localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 $__shared_owners_$i = $0 + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 44;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$0 >> 2] << 2);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($agg$result, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($this, $Base_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 38, 1, 1, 1);
 HEAP32[$this >> 2] = 16676;
 HEAP32[$this + 8 >> 2] = $Base_;
 return;
}

function _jpeg_open_backing_store($cinfo, $info, $total_bytes_needed) {
 $cinfo = $cinfo | 0;
 $info = $info | 0;
 $total_bytes_needed = $total_bytes_needed | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$0 + 20 >> 2] = 51;
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 255]($cinfo);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($agg$result, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($this, $Value_) {
 $this = $this | 0;
 $Value_ = $Value_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 59, 1, 1, 1);
 HEAP32[$this >> 2] = 15752;
 HEAP8[$this + 8 >> 0] = $Value_ & 1;
 return;
}

function __ZN12_GLOBAL__N_112OutputStream5resetEPcm($this, $Buffer_, $BufferCapacity_) {
 $this = $this | 0;
 $Buffer_ = $Buffer_ | 0;
 $BufferCapacity_ = $BufferCapacity_ | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this >> 2] = $Buffer_;
 HEAP32[$this + 8 >> 2] = $BufferCapacity_;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, __ZNSt3__211char_traitsIwE6lengthEPKw($__s) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($agg$result, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($this, $Op_) {
 $this = $this | 0;
 $Op_ = $Op_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 58, 1, 1, 1);
 HEAP32[$this >> 2] = 15884;
 HEAP32[$this + 8 >> 2] = $Op_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 140;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($this, $E_) {
 $this = $this | 0;
 $E_ = $E_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 16, 1, 1, 1);
 HEAP32[$this >> 2] = 17908;
 HEAP32[$this + 8 >> 2] = $E_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 44;
 return;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function _jpeg_mem_available($cinfo, $min_bytes_needed, $max_bytes_needed, $already_allocated) {
 $cinfo = $cinfo | 0;
 $min_bytes_needed = $min_bytes_needed | 0;
 $max_bytes_needed = $max_bytes_needed | 0;
 $already_allocated = $already_allocated | 0;
 return $max_bytes_needed | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $call$i$i = 0;
 HEAP32[10401] = 0;
 HEAP32[10400] = 21104;
 $call$i$i = __ZNSt3__26__clocEv() | 0;
 HEAP32[10402] = $call$i$i;
 HEAP32[10400] = 20340;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $call$i$i = 0;
 HEAP32[10397] = 0;
 HEAP32[10396] = 21104;
 $call$i$i = __ZNSt3__26__clocEv() | 0;
 HEAP32[10398] = $call$i$i;
 HEAP32[10396] = 20316;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZN6arFsetC2Ev($this) {
 $this = $this | 0;
 var $width = 0;
 $width = $this + 4 | 0;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 92 >> 2] = 0;
 HEAP32[$width >> 2] = 0;
 HEAP32[$width + 4 >> 2] = 0;
 HEAP32[$width + 8 >> 2] = 0;
 HEAP32[$width + 12 >> 2] = 0;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$this + 8 >> 2] & 2147483647);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($this, $Elements_, $NumElements_) {
 $this = $this | 0;
 $Elements_ = $Elements_ | 0;
 $NumElements_ = $NumElements_ | 0;
 HEAP32[$this >> 2] = $Elements_;
 HEAP32[$this + 4 >> 2] = $NumElements_;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZNSt3__211char_traitsIwE7not_eofEj($__c) {
 $__c = $__c | 0;
 var $cond = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) $cond = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); else $cond = $__c;
 return $cond | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi($__c) {
 $__c = $__c | 0;
 var $cond = 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) $cond = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0); else $cond = $__c;
 return $cond | 0;
}

function ___uselocale($new) {
 $new = $new | 0;
 var $0 = 0, $locale = 0;
 $locale = (___pthread_self_28() | 0) + 188 | 0;
 $0 = HEAP32[$locale >> 2] | 0;
 if ($new | 0) HEAP32[$locale >> 2] = ($new | 0) == (-1 | 0) ? 41900 : $new;
 return (($0 | 0) == 41900 ? -1 : $0) | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 if ((HEAP8[41288] | 0) == 0 ? ___cxa_guard_acquire(41288) | 0 : 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[10808] = 40688;
  ___cxa_guard_release(41288);
 }
 return HEAP32[10808] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S) | 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 if ((HEAP8[41208] | 0) == 0 ? ___cxa_guard_acquire(41208) | 0 : 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[10791] = 40192;
  ___cxa_guard_release(41208);
 }
 return HEAP32[10791] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 if ((HEAP8[41304] | 0) == 0 ? ___cxa_guard_acquire(41304) | 0 : 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[10809] = 40976;
  ___cxa_guard_release(41304);
 }
 return HEAP32[10809] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 if ((HEAP8[41272] | 0) == 0 ? ___cxa_guard_acquire(41272) | 0 : 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[10807] = 40656;
  ___cxa_guard_release(41272);
 }
 return HEAP32[10807] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S) | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 if ((HEAP8[41224] | 0) == 0 ? ___cxa_guard_acquire(41224) | 0 : 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[10792] = 40480;
  ___cxa_guard_release(41224);
 }
 return HEAP32[10792] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 if ((HEAP8[41192] | 0) == 0 ? ___cxa_guard_acquire(41192) | 0 : 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[10790] = 40160;
  ___cxa_guard_release(41192);
 }
 return HEAP32[10790] | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($this, $Restore_) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP32[$this + 4 >> 2] = HEAP32[$Restore_ >> 2];
 HEAP8[$this + 8 >> 0] = 1;
 HEAP32[$Restore_ >> 2] = -1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43320) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43312) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43304) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43296) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43256) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43248) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43240) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43172) | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 255]($0, $S);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43104) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43096) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43088) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43064) | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[10393] = 0;
 HEAP32[10392] = 21104;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(41576);
 HEAP32[10392] = 19144;
 HEAP32[10394] = 19192;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[10389] = 0;
 HEAP32[10388] = 21104;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(41560);
 HEAP32[10388] = 19060;
 HEAP32[10390] = 19108;
 return;
}

function ___ofl_add($f) {
 $f = $f | 0;
 var $1 = 0, $call = 0;
 $call = ___ofl_lock() | 0;
 HEAP32[$f + 56 >> 2] = HEAP32[$call >> 2];
 $1 = HEAP32[$call >> 2] | 0;
 if ($1 | 0) HEAP32[$1 + 52 >> 2] = $f;
 HEAP32[$call >> 2] = $f;
 ___ofl_unlock();
 return $f | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $call = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 20860;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$this + 8 >> 2] = $call;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $S);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function _jpeg_destroy($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0, $mem = 0;
 $mem = $cinfo + 4 | 0;
 $0 = HEAP32[$mem >> 2] | 0;
 if ($0 | 0) FUNCTION_TABLE_vi[HEAP32[$0 + 40 >> 2] & 255]($cinfo);
 HEAP32[$mem >> 2] = 0;
 HEAP32[$cinfo + 20 >> 2] = 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this, $__iob, $__atoms) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 return;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $add = 0, $call1 = 0, $retval$0 = 0;
 $add = (_strlen($s) | 0) + 1 | 0;
 $call1 = _malloc($add) | 0;
 if (!$call1) $retval$0 = 0; else $retval$0 = _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
 return $retval$0 | 0;
}

function ___lctrans_impl($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 var $trans$0 = 0;
 if (!$lm) $trans$0 = 0; else $trans$0 = ___mo_lookup(HEAP32[$lm >> 2] | 0, HEAP32[$lm + 4 >> 2] | 0, $msg) | 0;
 return (($trans$0 | 0) == 0 ? $msg : $trans$0) | 0;
}

function _fullsize_upsample($cinfo, $compptr, $input_data, $output_data_ptr) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $input_data = $input_data | 0;
 $output_data_ptr = $output_data_ptr | 0;
 HEAP32[$output_data_ptr >> 2] = $input_data;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function _self_destruct($cinfo) {
 $cinfo = $cinfo | 0;
 var $mem = 0;
 _free_pool($cinfo, 1);
 _free_pool($cinfo, 0);
 $mem = $cinfo + 4 | 0;
 _jpeg_free_small($cinfo, HEAP32[$mem >> 2] | 0, 84);
 HEAP32[$mem >> 2] = 0;
 _jpeg_mem_term($cinfo);
 return;
}

function ___wasi_syscall_ret($code) {
 $code = $code | 0;
 var $call = 0, $retval$0 = 0;
 if (!($code << 16 >> 16)) $retval$0 = 0; else {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = $code & 65535;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__26__clocEv() {
 var $call = 0;
 if ((HEAP8[41152] | 0) == 0 ? ___cxa_guard_acquire(41152) | 0 : 0) {
  $call = ___newlocale(2147483647, 35944, 0) | 0;
  HEAP32[10762] = $call;
  ___cxa_guard_release(41152);
 }
 return HEAP32[10762] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s1; else {
  _wmemmove($__s1, $__s2, $__n) | 0;
  $cond = $__s1;
 }
 return $cond | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s1; else {
  _wmemcpy($__s1, $__s2, $__n) | 0;
  $cond = $__s1;
 }
 return $cond | 0;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 if ($__n | 0) _memset($__s | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a) | 0) & 255 | 0, $__n | 0) | 0;
 return $__s | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 return;
}

function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this, $__iob, $__atoms) | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 HEAP32[$this + 4 >> 2] = (HEAP32[$this >> 2] | 0) + ($Index << 2);
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(28092, sp);
}

function __ZNSt3__26locale8__globalEv() {
 if ((HEAP8[41800] | 0) == 0 ? ___cxa_guard_acquire(41800) | 0 : 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[10847] = 43384;
  ___cxa_guard_release(41800);
 }
 return HEAP32[10847] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if ((HEAP8[41632] | 0) == 0 ? ___cxa_guard_acquire(41632) | 0 : 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[10845] = 43376;
  ___cxa_guard_release(41632);
 }
 return HEAP32[10845] | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function __ZNK12_GLOBAL__N_112OutputStream4backEv($this) {
 $this = $this | 0;
 var $0 = 0, $cond = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if (!$0) $cond = 0; else $cond = HEAP8[(HEAP32[$this >> 2] | 0) + ($0 + -1) >> 0] | 0;
 return $cond | 0;
}

function __ZNSt3__25ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 20928;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0 ? HEAP8[$this + 12 >> 0] | 0 : 0) __ZdaPv($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__211char_traitsIwE6assignEPwmw($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s; else {
  _wmemset($__s, $__a, $__n) | 0;
  $cond = $__s;
 }
 return $cond | 0;
}

function _noop_upsample($cinfo, $compptr, $input_data, $output_data_ptr) {
 $cinfo = $cinfo | 0;
 $compptr = $compptr | 0;
 $input_data = $input_data | 0;
 $output_data_ptr = $output_data_ptr | 0;
 HEAP32[$output_data_ptr >> 2] = 0;
 return;
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function _jcopy_block_row($input_row, $output_row, $num_blocks) {
 $input_row = $input_row | 0;
 $output_row = $output_row | 0;
 $num_blocks = $num_blocks | 0;
 _memcpy($output_row | 0, $input_row | 0, $num_blocks << 7 | 0) | 0;
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $call = 0, $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __ZN12_GLOBAL__N_110StringViewC2EPKc($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 var $add$ptr = 0;
 HEAP32[$this >> 2] = $Str;
 $add$ptr = $Str + (_strlen($Str) | 0) | 0;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43360) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43368) | 0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this, 18492);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, 18444);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this, 18396);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this, 18348);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43352) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43344) | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl($0, __ZNSt3__26locale2id5__getEv($x) | 0) | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
}

function __ZNSt3__28numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21020;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 20980;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43288) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43280) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43272) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43264) | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 HEAP32[$this + 4 >> 2] = (HEAP32[$this >> 2] | 0) + ($Index << 2);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function _jpeg_alloc_quant_table($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 0, 132) | 0;
 HEAP32[$call + 128 >> 2] = 0;
 return $call | 0;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function _start_pass_upsample($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 HEAP32[$0 + 92 >> 2] = HEAP32[$cinfo + 320 >> 2];
 HEAP32[$0 + 96 >> 2] = HEAP32[$cinfo + 116 >> 2];
 return;
}

function _jpeg_alloc_huff_table($cinfo) {
 $cinfo = $cinfo | 0;
 var $call = 0;
 $call = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$cinfo + 4 >> 2] >> 2] & 31]($cinfo, 0, 280) | 0;
 HEAP32[$call + 276 >> 2] = 0;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($this) {
 $this = $this | 0;
 var $Last = 0;
 $Last = $this + 4 | 0;
 HEAP32[$Last >> 2] = (HEAP32[$Last >> 2] | 0) + -4;
 return;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43080) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43056) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43336) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43328) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43032) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43024) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43072) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(43040) | 0);
 return;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($this) {
 $this = $this | 0;
 var $2 = 0;
 if (!(HEAP32[$this + 4 >> 2] | 0)) $2 = 0; else $2 = (HEAP32[$this >> 2] | 0) != 0;
 return $2 | 0;
}

function __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($this, $First_, $Last_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 HEAP32[$this >> 2] = $First_;
 HEAP32[$this + 4 >> 2] = $Last_;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($this) {
 $this = $this | 0;
 var $2 = 0;
 if (!(HEAP32[$this >> 2] | 0)) $2 = 0; else $2 = (HEAP32[$this + 4 >> 2] | 0) == 0;
 return $2 | 0;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$__vp >> 2] >> 2] | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function _start_pass_merged_upsample($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo + 476 >> 2] | 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = HEAP32[$cinfo + 116 >> 2];
 return;
}

function ___DOUBLE_BITS_419($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function __ZNSt3__210__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() | 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_617($s, $p, $base, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function _finish_input_pass($cinfo) {
 $cinfo = $cinfo | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo + 468 >> 2] | 0) + 8 >> 2] & 255]($cinfo);
 HEAP32[HEAP32[$cinfo + 460 >> 2] >> 2] = 73;
 return;
}

function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr, $__size) {
 $__ptr = $__ptr | 0;
 $__size = $__size | 0;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this, $sz) {
 $this = $this | 0;
 $sz = $sz | 0;
 return __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $sz << 2) | 0;
}

function _wcslen($s) {
 $s = $s | 0;
 var $s$addr$0 = 0;
 $s$addr$0 = $s;
 while (1) if (!(HEAP32[$s$addr$0 >> 2] | 0)) break; else $s$addr$0 = $s$addr$0 + 4 | 0;
 return $s$addr$0 - $s >> 2 | 0;
}

function _new_color_map_1_quant($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$0 + 20 >> 2] = 47;
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 255]($cinfo);
 return;
}

function b10(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(10);
 return 0;
}

function ___cxa_guard_release($guard_object) {
 $guard_object = $guard_object | 0;
 HEAP32[$guard_object >> 2] = 0;
 __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj($guard_object);
 return;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_617($s, $p, $base, -1, -1) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == (HEAP32[$this + 4 >> 2] | 0) | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 15072;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function ___cxa_pure_virtual() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _abort_message(28235, sp);
}

function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 HEAP32[$this >> 2] = $N;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj($guard_object) {
 $guard_object = $guard_object | 0;
 HEAP32[$guard_object >> 2] = HEAP32[$guard_object >> 2] | 1;
 return;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 255]($this);
 return;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 4096 >> 2] = $this;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 5 >> 0] | 0) HEAP8[HEAP32[$this >> 2] >> 0] = HEAP8[$this + 4 >> 0] | 0;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 8 >> 0] | 0) HEAP32[HEAP32[$this >> 2] >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__28ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__26localeC2ERKS0_($agg$result, $this + 28 | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($this, $Idx) {
 $this = $this | 0;
 $Idx = $Idx | 0;
 return HEAP32[(HEAP32[$this >> 2] | 0) + ($Idx << 2) >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 8 >> 0] | 0) HEAP32[HEAP32[$this >> 2] >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $2 = 0;
 if (!$type) $2 = 0; else $2 = (___dynamic_cast($type, 11784, 11872, 0) | 0) != 0 & 1;
 return $2 | 0;
}

function ___cxa_guard_acquire($guard_object) {
 $guard_object = $guard_object | 0;
 return ((__ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj($guard_object) | 0) ^ 1) & 1 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return 10896;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function b9(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(9);
 return 0;
}

function __ZNSt3__26locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[10763] | 0;
 HEAP32[10763] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function ___ctype_get_mb_cur_max() {
 var $locale = 0;
 $locale = (___pthread_self_759() | 0) + 188 | 0;
 return ((HEAP32[HEAP32[$locale >> 2] >> 2] | 0) == 0 ? 1 : 4) | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[10387] = 0;
 HEAP32[10386] = 20672;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[10385] = 0;
 HEAP32[10384] = 20644;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[10383] = 0;
 HEAP32[10382] = 20616;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[10381] = 0;
 HEAP32[10380] = 20588;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($this) {
 $this = $this | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$this >> 2];
 return;
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18252;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18188;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($this, $NewPos) {
 $this = $this | 0;
 $NewPos = $NewPos | 0;
 HEAP32[$this + 4 >> 2] = $NewPos;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[10371] = 0;
 HEAP32[10370] = 19008;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[10369] = 0;
 HEAP32[10368] = 18956;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[10367] = 0;
 HEAP32[10366] = 18892;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[10365] = 0;
 HEAP32[10364] = 18828;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function _jpeg_free_small($cinfo, $object, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $object = $object | 0;
 $sizeofobject = $sizeofobject | 0;
 _free($object);
 return;
}

function _jpeg_free_large($cinfo, $object, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $object = $object | 0;
 $sizeofobject = $sizeofobject | 0;
 _free($object);
 return;
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 5 >> 0] | 0) == 1 | 0;
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 7 >> 0] | 0) == 1 | 0;
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 6 >> 0] | 0) == 1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($Q1, $Q2) {
 $Q1 = $Q1 | 0;
 $Q2 = $Q2 | 0;
 HEAP32[$Q1 >> 2] = HEAP32[$Q1 >> 2] | $Q2;
 return;
}

function _reset_error_mgr($cinfo) {
 $cinfo = $cinfo | 0;
 var $0 = 0;
 $0 = HEAP32[$cinfo >> 2] | 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return;
}

function _error_exit($cinfo) {
 $cinfo = $cinfo | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$cinfo >> 2] | 0) + 8 >> 2] & 255]($cinfo);
 _jpeg_destroy($cinfo);
 _exit(1);
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function b18(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(18);
}

function _fseek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 return ___fseeko($f, $off, (($off | 0) < 0) << 31 >> 31, $whence) | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $locale = 0;
 $locale = (___pthread_self_122() | 0) + 188 | 0;
 return ___strerror_l($e, HEAP32[$locale >> 2] | 0) | 0;
}

function __ZNKSt3__26locale5__imp9use_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 return HEAP32[(HEAP32[$this + 8 >> 2] | 0) + ($id << 2) >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function _arMatrixSelfInv($m) {
 $m = $m | 0;
 var $1 = 0;
 $1 = HEAP32[$m + 4 >> 2] | 0;
 return ((_minv(HEAP32[$m >> 2] | 0, $1, $1) | 0) == 0) << 31 >> 31 | 0;
}

function _ar2UtilReplaceExt($filename, $n, $ext) {
 $filename = $filename | 0;
 $n = $n | 0;
 $ext = $ext | 0;
 return _arUtilReplaceExt($filename, $n, $ext) | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) + (HEAP32[$this + 4 >> 2] << 2) | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 14612;
}

function __ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj($guard_object) {
 $guard_object = $guard_object | 0;
 return (HEAP8[$guard_object >> 0] | 0) != 0 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__211__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP8[$__c1 >> 0] = HEAP8[$__c2 >> 0] | 0;
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP32[$__c1 >> 2] = HEAP32[$__c2 >> 2];
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function b8(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(8);
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function ___cxx_global_var_init() {
 HEAP32[10453] = 0;
 HEAP32[10454] = 0;
 HEAP32[10455] = 0;
 HEAP32[10456] = 0;
 HEAP32[10457] = 1065353216;
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[10844] = 41640;
 return 43376;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return $this | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function b7(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 nullFunc_iiiiiid(7);
 return 0;
}

function b1(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iidiiii(1);
 return 0;
}

function ___emscripten_stdout_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 setTempRet0(0);
 return 0;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15072;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 return ($__c1 | 0) == ($__c2 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 return ($__c1 | 0) == ($__c2 | 0) | 0;
}

function __ZNK12_GLOBAL__N_110StringView5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == (HEAP32[$this + 4 >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function _swapc($x, $c) {
 $x = $x | 0;
 $c = $c | 0;
 var $or5 = 0;
 $or5 = _llvm_bswap_i32($x | 0) | 0;
 return (($c | 0) == 0 ? $x : $or5) | 0;
}

function _jround_up($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $add = 0;
 $add = $a + -1 + $b | 0;
 return $add - (($add | 0) % ($b | 0) | 0) | 0;
}

function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 return $s | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 63](a1 | 0, a2 | 0) | 0;
}

function b17(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(17);
}

function __ZNK12_GLOBAL__N_110StringView4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_112OutputStreamC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 12 >> 2] = -1;
 HEAP32[$this + 16 >> 2] = -1;
 return;
}

function _jpeg_get_small($cinfo, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $sizeofobject = $sizeofobject | 0;
 return _malloc($sizeofobject) | 0;
}

function _jpeg_get_large($cinfo, $sizeofobject) {
 $cinfo = $cinfo | 0;
 $sizeofobject = $sizeofobject | 0;
 return _malloc($sizeofobject) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function _strcat($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 _strcpy($dest + (_strlen($dest) | 0) | 0, $src) | 0;
 return $dest | 0;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $call = 0;
 $call = ___ctype_toupper_loc() | 0;
 return HEAP32[$call >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $call = 0;
 $call = ___ctype_tolower_loc() | 0;
 return HEAP32[$call >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(41368, 1);
 return;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin >> 2 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this);
 return;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap, 1, 134) | 0;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) == 0 | 0;
}

function _setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) == 0 ? 41928 : $st) | 0;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 13208;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 13232;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 11152;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(43384, __ZNSt3__26locale7classicEv() | 0);
 return 43384;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin | 0;
}

function __ZNSt3__210__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 255](a1 | 0, a2 | 0);
}

function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6);
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[10347] = 0;
 HEAP32[10346] = 21240;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[10349] = 0;
 HEAP32[10348] = 21288;
 return;
}

function __ZN12_GLOBAL__N_110StringViewC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[10341] = 0;
 HEAP32[10340] = 21192;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function ___loc_is_allocated($loc) {
 $loc = $loc | 0;
 return ($loc | 0) != 14680 & (($loc | 0) != 0 & ($loc | 0) != 41836) & 1 | 0;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function __ZNK12_GLOBAL__N_110StringViewixEm($this) {
 $this = $this | 0;
 return __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(5);
 return 0;
}

function __ZNSt3__210__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function __ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $1 = 0;
 if (!$st) $1 = 1; else $1 = (HEAP32[$st >> 2] | 0) == 0 & 1;
 return $1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep | 0;
 return $rep + 12 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 return (___wasi_fd_close(_dummy_139(HEAP32[$f + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm(41336, 0, 0, 1);
 return;
}

function __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function _new_color_map_2_quant($cinfo) {
 $cinfo = $cinfo | 0;
 HEAP32[(HEAP32[$cinfo + 484 >> 2] | 0) + 28 >> 2] = 1;
 return;
}

function __ZNSt3__26locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $call = 0;
 $call = ___ctype_b_loc() | 0;
 return HEAP32[$call >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[10379] = 0;
 HEAP32[10378] = 20532;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[10377] = 0;
 HEAP32[10376] = 20476;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[10375] = 0;
 HEAP32[10374] = 20420;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[10373] = 0;
 HEAP32[10372] = 20364;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZNSt3__28messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc($data_) {
 $data_ = $data_ | 0;
 return $data_ + -12 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b16(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(16);
}

function __ZNSt3__28numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 4 >> 0] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27collateIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27collateIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27collateIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27collateIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__25ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function ___cxx_global_var_init_596() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(43973);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[10407] = 0;
 HEAP32[10406] = 20732;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[10405] = 0;
 HEAP32[10404] = 20700;
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__28ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__25ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__25ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[10333] = 0;
 HEAP32[10332] = 18796;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[10331] = 0;
 HEAP32[10330] = 18764;
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em(41640, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[10339] = 0;
 HEAP32[10338] = 21124;
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal6TypeIDIvvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIivE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIavE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function _init_source($cinfo) {
 $cinfo = $cinfo | 0;
 HEAP32[(HEAP32[$cinfo + 24 >> 2] | 0) + 36 >> 2] = 1;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __GLOBAL__sub_I_ARimageFsetDisplay_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_24();
 return;
}

function b4(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(4);
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em(41424, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em(41400, 1);
 return;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($v) {
 $v = $v | 0;
 return HEAP32[$v >> 2] | 0;
}

function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0 | 0;
 setTempRet0(0);
 return 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 return ((($c | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($c) | 0) != 0) & 1 | 0;
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21372;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21336;
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function _arMatrixFree($m) {
 $m = $m | 0;
 if ($m | 0) {
  _free(HEAP32[$m >> 2] | 0);
  _free($m);
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_112OutputStream9getBufferEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNK12_GLOBAL__N_110StringView3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNSt3__28messagesIwED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28messagesIcED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr | 0;
 __ZdlPv($__ptr);
 return;
}

function ___cxx_global_var_init_24() {
 __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev(0);
 return;
}

function __ZNSt3__27collateIwED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27collateIcED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNK12_GLOBAL__N_110StringView5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function _jdiv_round_up($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 return ($a + -1 + $b | 0) / ($b | 0) | 0 | 0;
}

function _ar2UtilRemoveExt($filename) {
 $filename = $filename | 0;
 return _arUtilRemoveExt($filename) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function _my_error_exit($cinfo) {
 $cinfo = $cinfo | 0;
 _longjmp((HEAP32[$cinfo >> 2] | 0) + 132 | 0, 1);
}

function ___lctrans($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 return ___lctrans_impl($msg, $lm) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtold($s, $p));
}

function __ZNKSt3__28messagesIwE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function _strtof_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtof($s, $p));
}

function _strtod_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtod($s, $p));
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($v) {
 $v = $v | 0;
 return $v | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s | 0;
 return _wcslen($__s) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 return _strlen($__s) | 0;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this | 0;
 return 1;
}

function _jpeg_destroy_decompress($cinfo) {
 $cinfo = $cinfo | 0;
 _jpeg_destroy($cinfo);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev($this) {
 $this = $this | 0;
 _llvm_trap();
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 return 14600;
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(3);
 return 0;
}

function _pthread_cond_wait($cond, $mutex) {
 $cond = $cond | 0;
 $mutex = $mutex | 0;
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function _freelocale($l) {
 $l = $l | 0;
 if (___loc_is_allocated($l) | 0) _free($l);
 return;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 13160;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 13168;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 13128;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 13136;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 13144;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 13152;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 13176;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 13120;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 13104;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 13112;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 13192;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 13184;
}

function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 return -1 | 0;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev($this) {
 $this = $this | 0;
 return;
}

function _roundf(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b14(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(14);
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 return 3;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 return 2;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 return 1;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 return 6;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 return 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 return 0;
}

function _strtold($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 2));
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 return 22508;
}

function _strtof($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 0));
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 1));
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(41988);
 return;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isdigit($c) | 0;
}

function __ZNSt3__221__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 _abort();
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function ___cxx_global_var_init_737() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function __ZSt19uncaught_exceptionsv() {
 return ___cxa_uncaught_exceptions() | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 13200;
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(2);
 return 0;
}

function __ZNSt3__214__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_596();
 return;
}

function _islower($c) {
 $c = $c | 0;
 return ($c + -97 | 0) >>> 0 < 26 | 0;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 11904;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 11952;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 11944;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 11984;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 11976;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 11968;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 11960;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 11928;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 11992;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 11920;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 11912;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 11936;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__26locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 12e3;
}

function _pthread_mutex_unlock($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function _pthread_cond_broadcast($cond) {
 $cond = $cond | 0;
 return 0;
}

function _pthread_mutex_lock($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function _dummy_consume_data($cinfo) {
 $cinfo = $cinfo | 0;
 return 0;
}

function __Znam($size) {
 $size = $size | 0;
 return __Znwm($size) | 0;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init_737();
 return;
}

function _finish_pass_1_quant($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13);
}

function _start_pass_dcolor($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function _jpeg_mem_init($cinfo) {
 $cinfo = $cinfo | 0;
 return 0;
}

function ___emscripten_stdout_close($f) {
 $f = $f | 0;
 return 0;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function _jpeg_mem_term($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function _lroundf($x) {
 $x = +$x;
 return ~~+_roundf(+$x) | 0;
}

function _finish_pass2($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function _term_source($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function _finish_pass($cinfo) {
 $cinfo = $cinfo | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function ___pthread_self_759() {
 return _pthread_self() | 0;
}

function ___pthread_self_469() {
 return _pthread_self() | 0;
}

function ___pthread_self_122() {
 return _pthread_self() | 0;
}

function ___pthread_self_28() {
 return _pthread_self() | 0;
}

function ___pthread_self_19() {
 return _pthread_self() | 0;
}

function ___pthread_self_11() {
 return _pthread_self() | 0;
}

function b0(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0);
 return 0;
}

function _dummy_139($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function ___pthread_self_7() {
 return _pthread_self() | 0;
}

function ___pthread_self_3() {
 return _pthread_self() | 0;
}

function _catclose($catd) {
 $catd = $catd | 0;
 return 0;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function ___ofl_lock() {
 ___lock(41952);
 return 41960;
}

function ___ofl_unlock() {
 ___unlock(41952);
 return;
}

function _emscripten_get_sbrk_ptr() {
 return 44e3;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 1;
}

function ___cxa_get_globals_fast() {
 return 41964;
}

function b12(p0) {
 p0 = p0 | 0;
 nullFunc_vi(12);
}

function ___cxa_uncaught_exceptions() {
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function ___ctype_toupper_loc() {
 return 14976;
}

function ___ctype_tolower_loc() {
 return 14972;
}

function __ZSt15get_new_handlerv() {
 return 0;
}

function ___errno_location() {
 return 41924;
}

function __ZSt13get_terminatev() {
 return 2;
}

function stackSave() {
 return STACKTOP | 0;
}

function __get_timezone() {
 return 41984;
}

function __get_daylight() {
 return 41980;
}

function ___ctype_b_loc() {
 return 14980;
}

function _pthread_self() {
 return 14720;
}

function __get_environ() {
 return 41988;
}

function __get_tzname() {
 return 41972;
}

function b11() {
 nullFunc_v(11);
}

function _dummy() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___emscripten_stdout_close,___stdio_close,__ZNKSt11logic_error4whatEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv
,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv
,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,_jpeg_std_error,_jpeg_start_decompress,_malloc,_jpeg_finish_decompress,_consume_data,_dummy_consume_data,_fill_input_buffer,_read_markers,_read_restart_marker,_skip_variable,_get_interesting_appn,_consume_markers,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iidiiii = [b1,_fmt_fp];
var FUNCTION_TABLE_iii = [b2,__ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj
,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,_jpeg_read_header,_getIsetWidth,_setup,_readNFTMarker,_decompress_data,_decompress_onepass,_decompress_smooth_data,_decode_mcu_DC_first_62,_decode_mcu_AC_first_63,_decode_mcu_DC_refine_64,_decode_mcu_AC_refine_65,_decode_mcu_66,_decode_mcu_sub,_decode_mcu_DC_first,_decode_mcu_AC_first,_decode_mcu_DC_refine,_decode_mcu_AC_refine,_decode_mcu,_jpeg_resync_to_restart,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,___stdio_write,___stdio_read,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,_jpeg_read_scanlines,__ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_vEUt_E,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,_alloc_small
,_alloc_large,_do_read,b3];
var FUNCTION_TABLE_iiiii = [b4,___emscripten_stdout_seek,___stdio_seek,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,_alloc_sarray,_alloc_barray,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiid = [b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b5,b5,b5];
var FUNCTION_TABLE_iiiiii = [b6,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,_access_virt_sarray,_access_virt_barray,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiid = [b7,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7];
var FUNCTION_TABLE_iiiiiii = [b8,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,_request_virt_sarray,_request_virt_barray,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiii = [b9,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9];
var FUNCTION_TABLE_iiiiiiiii = [b10,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,___cxa_pure_virtual,__ZL28demangling_terminate_handlerv,b11];
var FUNCTION_TABLE_vi = [b12,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev,__ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev,__ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev,__ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev
,__ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev,__ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev
,__ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev,__ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev
,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev
,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,_my_error_exit,_jpeg_destroy_decompress,_prepare_for_output_pass,_finish_output_pass,_finish_pass_1_quant,_new_color_map_1_quant,_new_color_map_2_quant,_start_pass_merged_upsample,_start_pass_dcolor,_start_pass_upsample,_start_pass_51,_start_pass,_finish_pass,_start_pass_huff_decoder
,_finish_pass_huff,_start_input_pass,_start_output_pass,_finish_pass1,_finish_pass2,_init_source,_term_source,_reset_marker_reader,_realize_virt_arrays,_self_destruct,_reset_input_controller,_start_input_pass_79,_finish_input_pass,_error_exit,_output_message,_reset_error_mgr,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_vii = [b13,__ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE
,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl
,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,_jpeg_stdio_src,_start_pass_1_quant,_start_pass_2_quant,_start_pass_dpost,_start_pass_main,_skip_input_data,_free_pool,_emit_message,_format_message,_pop_arg_long_double,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viii = [b14,_jpeg_CreateDecompress];
var FUNCTION_TABLE_viiii = [b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,_arLog,_h2v2_merged_upsample,_h2v1_merged_upsample,_noop_upsample,_fullsize_upsample,_h2v1_upsample,_h2v2_upsample,_int_upsample,_process_data_context_main,_process_data_simple_main,_process_data_crank_post,_prescan_quantize,_pass2_fs_dither,_pass2_no_dither,_color_quantize3,_color_quantize,_quantize3_ord_dither,_quantize_ord_dither,_quantize_fs_dither,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiiii = [b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_grayscale_convert_52,_rgb_gray_convert_53,_rgb1_gray_convert,_gray_rgb_convert,_ycc_rgb_convert,_rgb_convert_54,_rgb1_rgb_convert,_ycck_cmyk_convert,_null_convert_55,_jpeg_idct_1x1,_jpeg_idct_2x2,_jpeg_idct_3x3,_jpeg_idct_4x4,_jpeg_idct_5x5,_jpeg_idct_6x6,_jpeg_idct_7x7,_jpeg_idct_9x9,_jpeg_idct_10x10,_jpeg_idct_11x11,_jpeg_idct_12x12,_jpeg_idct_13x13,_jpeg_idct_14x14,_jpeg_idct_15x15,_jpeg_idct_16x16,_jpeg_idct_16x8
,_jpeg_idct_14x7,_jpeg_idct_12x6,_jpeg_idct_10x5,_jpeg_idct_8x4,_jpeg_idct_6x3,_jpeg_idct_4x2,_jpeg_idct_2x1,_jpeg_idct_8x16,_jpeg_idct_7x14,_jpeg_idct_6x12,_jpeg_idct_5x10,_jpeg_idct_4x8,_jpeg_idct_3x6,_jpeg_idct_2x4,_jpeg_idct_1x2,_jpeg_idct_islow,_jpeg_idct_ifast,_jpeg_idct_float,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_viiiiii = [b17,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE];
var FUNCTION_TABLE_viiiiiii = [b18,_merged_2v_upsample,_merged_1v_upsample,_sep_upsample,_post_process_1pass,_post_process_prepass,_post_process_2pass,b18];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_ARimageFsetDisplay_cpp: __GLOBAL__sub_I_ARimageFsetDisplay_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_demangle: ___cxa_demangle, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _realloc: _realloc, _roundf: _roundf, _saveSetjmp: _saveSetjmp, _setThrew: _setThrew, _testSetjmp: _testSetjmp, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"];
asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_ARimageFsetDisplay_cpp = asm["__GLOBAL__sub_I_ARimageFsetDisplay_cpp"];
asm["__GLOBAL__sub_I_ARimageFsetDisplay_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_ARimageFsetDisplay_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"];
asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"];
asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"];
asm["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_demangle.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____embind_register_native_and_builtin_types = asm["___embind_register_native_and_builtin_types"];
asm["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____embind_register_native_and_builtin_types.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"];
asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"];
asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"];
asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"];
asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"];
asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"];
asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_get_sbrk_ptr = asm["_emscripten_get_sbrk_ptr"];
asm["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_sbrk_ptr.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"];
asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"];
asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__realloc = asm["_realloc"];
asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__roundf = asm["_roundf"];
asm["_roundf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__roundf.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"];
asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__setThrew = asm["_setThrew"];
asm["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"];
asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_ARimageFsetDisplay_cpp = Module["__GLOBAL__sub_I_ARimageFsetDisplay_cpp"] = asm["__GLOBAL__sub_I_ARimageFsetDisplay_cpp"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _roundf = Module["_roundf"] = asm["_roundf"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _setThrew = Module["_setThrew"] = asm["_setThrew"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}






